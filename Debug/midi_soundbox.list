
midi_soundbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000602c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080061c8  080061c8  000161c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063c0  080063c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063c8  080063c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063c8  080063c8  000163c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080063d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008210  20000014  080063e4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008224  080063e4  00028224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c503  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f4  00000000  00000000  0002c547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002f720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c0a  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fd6  00000000  00000000  00047cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b1c  00000000  00000000  00058ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e17bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e24  00000000  00000000  000e180c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080061ac 	.word	0x080061ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	080061ac 	.word	0x080061ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <adsr_init>:
#include <stdio.h>

float get_sample(adsr_state_t *self, float time);

void adsr_init(adsr_state_t *self, float attack, float decay, float sustain, float release, float scale)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6178      	str	r0, [r7, #20]
 8000e80:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e84:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e88:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e8c:	edc7 1a01 	vstr	s3, [r7, #4]
 8000e90:	ed87 2a00 	vstr	s4, [r7]
  self->attack  = attack;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	601a      	str	r2, [r3, #0]
  self->decay   = decay;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	605a      	str	r2, [r3, #4]
  self->sustain = sustain;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	609a      	str	r2, [r3, #8]
  self->release = release;
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	60da      	str	r2, [r3, #12]
  self->scale   = scale;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	611a      	str	r2, [r3, #16]
  adsr_reset(self);
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f000 f804 	bl	8000ec0 <adsr_reset>
}
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <adsr_reset>:

void adsr_reset(adsr_state_t *self)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  self->max_amplitude = -1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <adsr_reset+0x34>)
 8000ecc:	615a      	str	r2, [r3, #20]
  self->cur_amplitude = -1;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <adsr_reset+0x34>)
 8000ed2:	621a      	str	r2, [r3, #32]
  self->start_time = -1;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <adsr_reset+0x34>)
 8000ed8:	619a      	str	r2, [r3, #24]
  self->release_time = -1;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <adsr_reset+0x34>)
 8000ede:	61da      	str	r2, [r3, #28]
  self->release_amplitude = -1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <adsr_reset+0x34>)
 8000ee4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	bf800000 	.word	0xbf800000

08000ef8 <adsr_note_on>:

void adsr_note_on(adsr_state_t *self, int8_t velocity, float time)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	460b      	mov	r3, r1
 8000f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f06:	72fb      	strb	r3, [r7, #11]
  //printf("adsr note on %f\r\n",time);
  self->max_amplitude = self->scale * (float)velocity/127.0;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000f54 <adsr_note_on+0x5c>
 8000f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	edc3 7a05 	vstr	s15, [r3, #20]
  self->start_time = time;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
  self->release_time = -1;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <adsr_note_on+0x60>)
 8000f36:	61da      	str	r2, [r3, #28]
  self->cur_amplitude = 0;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  self->release_amplitude = 0;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	42fe0000 	.word	0x42fe0000
 8000f58:	bf800000 	.word	0xbf800000

08000f5c <adsr_note_off>:

void adsr_note_off(adsr_state_t *self, float time)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	ed87 0a00 	vstr	s0, [r7]
  if(self->release_time > 0) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	dc07      	bgt.n	8000f88 <adsr_note_off+0x2c>
    return;
  }
  //printf("adsr note off %f\r\n", time);
  self->release_time = time;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	61da      	str	r2, [r3, #28]
  self->release_amplitude = self->cur_amplitude;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1a      	ldr	r2, [r3, #32]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
 8000f86:	e000      	b.n	8000f8a <adsr_note_off+0x2e>
    return;
 8000f88:	bf00      	nop
}
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <adsr_get_samples>:

void adsr_get_samples(adsr_state_t *self, float *inout_samples, int frame_count, float time)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	ed87 0a00 	vstr	s0, [r7]
  float cur_time = time;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	61fb      	str	r3, [r7, #28]
  for(int frame = 0; frame < frame_count; frame++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	e03a      	b.n	8001024 <adsr_get_samples+0x90>
    float sample_f = get_sample(self, cur_time);
 8000fae:	ed97 0a07 	vldr	s0, [r7, #28]
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 f842 	bl	800103c <get_sample>
 8000fb8:	ed87 0a05 	vstr	s0, [r7, #20]
    if(frame == 0) {
      //printf("envelope %f %f\r\n",time,sample_f);
    }
    inout_samples[2*frame]   *= sample_f;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	68ba      	ldr	r2, [r7, #8]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	ed93 7a00 	vldr	s14, [r3]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
    inout_samples[2*frame+1] *= sample_f;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	ed93 7a00 	vldr	s14, [r3]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	3304      	adds	r3, #4
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	edc3 7a00 	vstr	s15, [r3]
    cur_time = time + (float)frame/48000; //SAMPLE RATE (or FRAME RATE)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001038 <adsr_get_samples+0xa4>
 800100e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001012:	ed97 7a00 	vldr	s14, [r7]
 8001016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101a:	edc7 7a07 	vstr	s15, [r7, #28]
  for(int frame = 0; frame < frame_count; frame++) {
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	3301      	adds	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbc0      	blt.n	8000fae <adsr_get_samples+0x1a>
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	473b8000 	.word	0x473b8000

0800103c <get_sample>:

// TEST_MODE sets amplitude = 1.0 when active.
#define TEST_MODE 0

inline float get_sample(adsr_state_t *self, float time)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	ed87 0a00 	vstr	s0, [r7]
  if( self->start_time < 0) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a06 	vldr	s15, [r3, #24]
 800104e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	d502      	bpl.n	800105e <get_sample+0x22>
    // reset state
    return 0;
 8001058:	eddf 7a57 	vldr	s15, [pc, #348]	; 80011b8 <get_sample+0x17c>
 800105c:	e0a5      	b.n	80011aa <get_sample+0x16e>
  }
  if (self->release_time < self->start_time) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	ed93 7a07 	vldr	s14, [r3, #28]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a06 	vldr	s15, [r3, #24]
 800106a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	d56a      	bpl.n	800114a <get_sample+0x10e>
    // Attack, Decay, Sustain
    float cur_time = time - self->start_time;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edd3 7a06 	vldr	s15, [r3, #24]
 800107a:	ed97 7a00 	vldr	s14, [r7]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001082:	edc7 7a02 	vstr	s15, [r7, #8]
    if (cur_time <= self->attack) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d812      	bhi.n	80010c0 <get_sample+0x84>
      // Attack
      self->cur_amplitude = cur_time / self->attack;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	edd7 6a02 	vldr	s13, [r7, #8]
 80010a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edc3 7a08 	vstr	s15, [r3, #32]
#if TEST_MODE == 1
      return 1.0;
#else
      return self->cur_amplitude * self->max_amplitude;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010be:	e074      	b.n	80011aa <get_sample+0x16e>
#endif
    }
    cur_time -= self->attack;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ce:	edc7 7a02 	vstr	s15, [r7, #8]
    if (cur_time <= self->decay) {
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80010d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d824      	bhi.n	8001130 <get_sample+0xf4>
      // Decay
      self->cur_amplitude =
          self->sustain + (1.0f - self->sustain) * (1.0f - cur_time / self->decay);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80010f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	ed93 6a01 	vldr	s12, [r3, #4]
 8001100:	edd7 5a02 	vldr	s11, [r7, #8]
 8001104:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8001108:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800110c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
      self->cur_amplitude =
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	edc3 7a08 	vstr	s15, [r3, #32]
#if TEST_MODE == 1
      return 1.0;
#else
      return self->cur_amplitude * self->max_amplitude;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	ed93 7a08 	vldr	s14, [r3, #32]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 7a05 	vldr	s15, [r3, #20]
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	e03c      	b.n	80011aa <get_sample+0x16e>
#endif
    }
    // Sustain
    self->cur_amplitude = self->sustain;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	621a      	str	r2, [r3, #32]
#if TEST_MODE == 1
    return 1.0;
#else
    return self->cur_amplitude * self->max_amplitude;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	ed93 7a08 	vldr	s14, [r3, #32]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edd3 7a05 	vldr	s15, [r3, #20]
 8001144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001148:	e02f      	b.n	80011aa <get_sample+0x16e>
#endif
  }
  else {
    float cur_time = time - self->release_time;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001150:	ed97 7a00 	vldr	s14, [r7]
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	edc7 7a03 	vstr	s15, [r7, #12]
    if (cur_time <= self->release) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001162:	ed97 7a03 	vldr	s14, [r7, #12]
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	d815      	bhi.n	800119c <get_sample+0x160>
      // Release
#if TEST_MODE == 1
      return 1.0;
#else
      return self->release_amplitude * (1.0f - cur_time / self->release) * self->max_amplitude;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edd3 6a03 	vldr	s13, [r3, #12]
 800117c:	ed97 6a03 	vldr	s12, [r7, #12]
 8001180:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001188:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800118c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edd3 7a05 	vldr	s15, [r3, #20]
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	e006      	b.n	80011aa <get_sample+0x16e>
#endif
    }
    // done
    self->cur_amplitude = 0.0f;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
    return self->cur_amplitude;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	edd3 7a08 	vldr	s15, [r3, #32]
  }
}
 80011aa:	eeb0 0a67 	vmov.f32	s0, s15
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	00000000 	.word	0x00000000

080011bc <adsr_active>:

int8_t adsr_active(adsr_state_t *self, float time)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
  if (self->start_time < 0.0) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80011ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	d501      	bpl.n	80011dc <adsr_active+0x20>
    return 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	e027      	b.n	800122c <adsr_active+0x70>
  }
  else if (time >= self->start_time) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e2:	ed97 7a00 	vldr	s14, [r7]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	db1c      	blt.n	800122a <adsr_active+0x6e>
    if (self->release_time < 0.0) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80011f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d501      	bpl.n	8001204 <adsr_active+0x48>
      return 1; // prior to noteOff
 8001200:	2301      	movs	r3, #1
 8001202:	e013      	b.n	800122c <adsr_active+0x70>
    }
    else if (time - self->release_time <= self->release) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	edd3 7a07 	vldr	s15, [r3, #28]
 800120a:	ed97 7a00 	vldr	s14, [r7]
 800120e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a03 	vldr	s15, [r3, #12]
 8001218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001220:	d801      	bhi.n	8001226 <adsr_active+0x6a>
      return 1; // during release
 8001222:	2301      	movs	r3, #1
 8001224:	e002      	b.n	800122c <adsr_active+0x70>
    }
    else {
      return 0; // after release
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <adsr_active+0x70>
    }
  }
  // time prior to startTime?
  return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <adsr_releasing>:

int8_t adsr_releasing(adsr_state_t *self, float time){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	ed87 0a00 	vstr	s0, [r7]
  return self->release_time > 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a07 	vldr	s15, [r3, #28]
 800124a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	bfcc      	ite	gt
 8001254:	2301      	movgt	r3, #1
 8001256:	2300      	movle	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b25b      	sxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <Codec_Write>:

#define VOLUME_CONVERT(Volume) (((Volume) > 100)? 255:((uint8_t)(((Volume) * 255) / 100)))

static uint8_t is_codec_stopped = 1;

uint8_t Codec_Write(uint8_t reg, uint8_t val) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af04      	add	r7, sp, #16
 800126e:	4603      	mov	r3, r0
 8001270:	460a      	mov	r2, r1
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c1, CODEC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_MAX_TIMEOUT);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29a      	uxth	r2, r3
 8001280:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2301      	movs	r3, #1
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	1dbb      	adds	r3, r7, #6
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	2194      	movs	r1, #148	; 0x94
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <Codec_Write+0x48>)
 8001294:	f002 f894 	bl	80033c0 <HAL_I2C_Mem_Write>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]

  return status != HAL_OK ? 1 : 0;
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	bf14      	ite	ne
 80012a2:	2301      	movne	r3, #1
 80012a4:	2300      	moveq	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000030 	.word	0x20000030

080012b4 <Codec_Init>:

uint32_t Codec_Init() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  // expects I2C already initialized

  uint32_t counter = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]

  // power on the codec (possibely need to turn it off first)
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2110      	movs	r1, #16
 80012c2:	4834      	ldr	r0, [pc, #208]	; (8001394 <Codec_Init+0xe0>)
 80012c4:	f001 ff1e 	bl	8003104 <HAL_GPIO_WritePin>

  // keep codec powered off
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x01);
 80012c8:	2101      	movs	r1, #1
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff ffcc 	bl	8001268 <Codec_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	607b      	str	r3, [r7, #4]
  // set output device to headphone
  counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xAF);
 80012da:	21af      	movs	r1, #175	; 0xaf
 80012dc:	2004      	movs	r0, #4
 80012de:	f7ff ffc3 	bl	8001268 <Codec_Write>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	607b      	str	r3, [r7, #4]
  // cloc configuration: auto detection
  counter += Codec_Write(CODEC_REG_CLOCKING_CTL, 0x81);
 80012ec:	2181      	movs	r1, #129	; 0x81
 80012ee:	2005      	movs	r0, #5
 80012f0:	f7ff ffba 	bl	8001268 <Codec_Write>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	607b      	str	r3, [r7, #4]
  // set slave mode and audio standard
  counter += Codec_Write(CODEC_REG_INTERFACE_CTL1, 0x07);
 80012fe:	2107      	movs	r1, #7
 8001300:	2006      	movs	r0, #6
 8001302:	f7ff ffb1 	bl	8001268 <Codec_Write>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	607b      	str	r3, [r7, #4]
  // set master volume to 0
  counter += Codec_SetVolume(0);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f86b 	bl	80013ec <Codec_SetVolume>
 8001316:	4602      	mov	r2, r0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	607b      	str	r3, [r7, #4]

  // additional configuration, refer to link at the top of the file
  counter += Codec_Write(CODEC_REG_ANALOG_ZC_SR_SETT, 0x00);
 800131e:	2100      	movs	r1, #0
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff ffa1 	bl	8001268 <Codec_Write>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_MISC_CTL, 0x04);
 8001330:	2104      	movs	r1, #4
 8001332:	200e      	movs	r0, #14
 8001334:	f7ff ff98 	bl	8001268 <Codec_Write>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_LIMIT_CTL1, 0x00);
 8001342:	2100      	movs	r1, #0
 8001344:	2027      	movs	r0, #39	; 0x27
 8001346:	f7ff ff8f 	bl	8001268 <Codec_Write>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_TONE_CTL, 0x0F);
 8001354:	210f      	movs	r1, #15
 8001356:	201f      	movs	r0, #31
 8001358:	f7ff ff86 	bl	8001268 <Codec_Write>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4413      	add	r3, r2
 8001364:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMA_VOL, 0x0A);
 8001366:	210a      	movs	r1, #10
 8001368:	201a      	movs	r0, #26
 800136a:	f7ff ff7d 	bl	8001268 <Codec_Write>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMB_VOL, 0x0A);
 8001378:	210a      	movs	r1, #10
 800137a:	201b      	movs	r0, #27
 800137c:	f7ff ff74 	bl	8001268 <Codec_Write>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	607b      	str	r3, [r7, #4]

  return counter;
 800138a:	687b      	ldr	r3, [r7, #4]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020c00 	.word	0x40020c00

08001398 <Codec_Play>:

uint32_t Codec_Play() {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]

  if (is_codec_stopped) {
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <Codec_Play+0x50>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d018      	beq.n	80013dc <Codec_Play+0x44>
    // enable the digital soft ramp
	counter += Codec_Write(CODEC_REG_MISC_CTL, 0x06);
 80013aa:	2106      	movs	r1, #6
 80013ac:	200e      	movs	r0, #14
 80013ae:	f7ff ff5b 	bl	8001268 <Codec_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	607b      	str	r3, [r7, #4]
	counter += Codec_SetMute(AUDIO_MUTE_OFF);
 80013bc:	2000      	movs	r0, #0
 80013be:	f000 f869 	bl	8001494 <Codec_SetMute>
 80013c2:	4602      	mov	r2, r0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	607b      	str	r3, [r7, #4]
	// power on the codec
	counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9E);
 80013ca:	219e      	movs	r1, #158	; 0x9e
 80013cc:	2002      	movs	r0, #2
 80013ce:	f7ff ff4b 	bl	8001268 <Codec_Write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	607b      	str	r3, [r7, #4]
  }

  return counter;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000

080013ec <Codec_SetVolume>:
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9F);

  return counter;
}

uint32_t Codec_SetVolume(uint8_t volume) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  uint8_t converted_vol = VOLUME_CONVERT(volume);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b64      	cmp	r3, #100	; 0x64
 80013fe:	d80b      	bhi.n	8001418 <Codec_SetVolume+0x2c>
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	4613      	mov	r3, r2
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <Codec_SetVolume+0xa4>)
 800140a:	fb82 1203 	smull	r1, r2, r2, r3
 800140e:	1152      	asrs	r2, r2, #5
 8001410:	17db      	asrs	r3, r3, #31
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e000      	b.n	800141a <Codec_SetVolume+0x2e>
 8001418:	23ff      	movs	r3, #255	; 0xff
 800141a:	72fb      	strb	r3, [r7, #11]

  if (converted_vol > 0xE6) {
 800141c:	7afb      	ldrb	r3, [r7, #11]
 800141e:	2be6      	cmp	r3, #230	; 0xe6
 8001420:	d918      	bls.n	8001454 <Codec_SetVolume+0x68>
    counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol - 0xE7);
 8001422:	7afb      	ldrb	r3, [r7, #11]
 8001424:	3319      	adds	r3, #25
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4619      	mov	r1, r3
 800142a:	2020      	movs	r0, #32
 800142c:	f7ff ff1c 	bl	8001268 <Codec_Write>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol - 0xE7);
 800143a:	7afb      	ldrb	r3, [r7, #11]
 800143c:	3319      	adds	r3, #25
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4619      	mov	r1, r3
 8001442:	2021      	movs	r0, #33	; 0x21
 8001444:	f7ff ff10 	bl	8001268 <Codec_Write>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e017      	b.n	8001484 <Codec_SetVolume+0x98>
  } else {
	counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol + 0x19);
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	3319      	adds	r3, #25
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	2020      	movs	r0, #32
 800145e:	f7ff ff03 	bl	8001268 <Codec_Write>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4413      	add	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol + 0x19);
 800146c:	7afb      	ldrb	r3, [r7, #11]
 800146e:	3319      	adds	r3, #25
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	2021      	movs	r0, #33	; 0x21
 8001476:	f7ff fef7 	bl	8001268 <Codec_Write>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001484:	68fb      	ldr	r3, [r7, #12]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	51eb851f 	.word	0x51eb851f

08001494 <Codec_SetMute>:

uint32_t Codec_SetMute(uint8_t cmd) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  uint8_t counter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]

  if (cmd == AUDIO_MUTE_ON) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11b      	bne.n	80014e0 <Codec_SetMute+0x4c>
    counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xFF);
 80014a8:	21ff      	movs	r1, #255	; 0xff
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff fedc 	bl	8001268 <Codec_Write>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4413      	add	r3, r2
 80014b8:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x01);
 80014ba:	2101      	movs	r1, #1
 80014bc:	2022      	movs	r0, #34	; 0x22
 80014be:	f7ff fed3 	bl	8001268 <Codec_Write>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	4413      	add	r3, r2
 80014ca:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x01);
 80014cc:	2101      	movs	r1, #1
 80014ce:	2023      	movs	r0, #35	; 0x23
 80014d0:	f7ff feca 	bl	8001268 <Codec_Write>
 80014d4:	4603      	mov	r3, r0
 80014d6:	461a      	mov	r2, r3
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	4413      	add	r3, r2
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e01a      	b.n	8001516 <Codec_SetMute+0x82>
  } else {
	counter += Codec_Write(CODEC_REG_POWER_CTL2, OUTPUT_DEVICE_HEADPHONE);
 80014e0:	21af      	movs	r1, #175	; 0xaf
 80014e2:	2004      	movs	r0, #4
 80014e4:	f7ff fec0 	bl	8001268 <Codec_Write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	4413      	add	r3, r2
 80014f0:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x00);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2022      	movs	r0, #34	; 0x22
 80014f6:	f7ff feb7 	bl	8001268 <Codec_Write>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	4413      	add	r3, r2
 8001502:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x00);
 8001504:	2100      	movs	r1, #0
 8001506:	2023      	movs	r0, #35	; 0x23
 8001508:	f7ff feae 	bl	8001268 <Codec_Write>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	4413      	add	r3, r2
 8001514:	73fb      	strb	r3, [r7, #15]
  }

  return counter;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_DMA_Init+0x3c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <MX_DMA_Init+0x3c>)
 8001530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_DMA_Init+0x3c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2010      	movs	r0, #16
 8001548:	f001 f899 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800154c:	2010      	movs	r0, #16
 800154e:	f001 f8b2 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <MX_GPIO_Init+0xec>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a33      	ldr	r2, [pc, #204]	; (800164c <MX_GPIO_Init+0xec>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <MX_GPIO_Init+0xec>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_GPIO_Init+0xec>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <MX_GPIO_Init+0xec>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_GPIO_Init+0xec>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_GPIO_Init+0xec>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <MX_GPIO_Init+0xec>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_GPIO_Init+0xec>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_GPIO_Init+0xec>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_GPIO_Init+0xec>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_GPIO_Init+0xec>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0xec>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0xec>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0xec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001602:	2200      	movs	r2, #0
 8001604:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <MX_GPIO_Init+0xf0>)
 800160a:	f001 fd7b 	bl	8003104 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800160e:	2301      	movs	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xf4>)
 8001622:	f001 fbd3 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD4 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001626:	f24f 0310 	movw	r3, #61456	; 0xf010
 800162a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xf0>)
 8001640:	f001 fbc4 	bl	8002dcc <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020c00 	.word	0x40020c00
 8001654:	40020000 	.word	0x40020000

08001658 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_I2C1_Init+0x50>)
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <MX_I2C1_Init+0x54>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_I2C1_Init+0x50>)
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <MX_I2C1_Init+0x58>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_I2C1_Init+0x50>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_I2C1_Init+0x50>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_I2C1_Init+0x50>)
 8001676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800167a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <MX_I2C1_Init+0x50>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_I2C1_Init+0x50>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <MX_I2C1_Init+0x50>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_I2C1_Init+0x50>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_I2C1_Init+0x50>)
 8001696:	f001 fd4f 	bl	8003138 <HAL_I2C_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 f9fe 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000030 	.word	0x20000030
 80016ac:	40005400 	.word	0x40005400
 80016b0:	000186a0 	.word	0x000186a0

080016b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_I2C_MspInit+0x84>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d12c      	bne.n	8001730 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_I2C_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_I2C_MspInit+0x88>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_I2C_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80016f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f8:	2312      	movs	r3, #18
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001704:	2304      	movs	r3, #4
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <HAL_I2C_MspInit+0x8c>)
 8001710:	f001 fb5c 	bl	8002dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_I2C_MspInit+0x88>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	4a07      	ldr	r2, [pc, #28]	; (800173c <HAL_I2C_MspInit+0x88>)
 800171e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001722:	6413      	str	r3, [r2, #64]	; 0x40
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_I2C_MspInit+0x88>)
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40005400 	.word	0x40005400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400

08001744 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_I2S3_Init+0x54>)
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <MX_I2S3_Init+0x58>)
 800174c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_I2S3_Init+0x54>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_I2S3_Init+0x54>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_I2S3_Init+0x54>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_I2S3_Init+0x54>)
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_I2S3_Init+0x54>)
 800176c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001770:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_I2S3_Init+0x54>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <MX_I2S3_Init+0x54>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_I2S3_Init+0x54>)
 8001780:	2200      	movs	r2, #0
 8001782:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_I2S3_Init+0x54>)
 8001786:	f002 f933 	bl	80039f0 <HAL_I2S_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001790:	f000 f986 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000084 	.word	0x20000084
 800179c:	40003c00 	.word	0x40003c00

080017a0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b090      	sub	sp, #64	; 0x40
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
 80017c8:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a4f      	ldr	r2, [pc, #316]	; (800190c <HAL_I2S_MspInit+0x16c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f040 8096 	bne.w	8001902 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017d6:	2301      	movs	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80017da:	23c8      	movs	r3, #200	; 0xc8
 80017dc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80017de:	2305      	movs	r3, #5
 80017e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 fb16 	bl	8004e1c <HAL_RCCEx_PeriphCLKConfig>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 80017f6:	f000 f953 	bl	8001aa0 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <HAL_I2S_MspInit+0x170>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a43      	ldr	r2, [pc, #268]	; (8001910 <HAL_I2S_MspInit+0x170>)
 8001804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <HAL_I2S_MspInit+0x170>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_I2S_MspInit+0x170>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a3c      	ldr	r2, [pc, #240]	; (8001910 <HAL_I2S_MspInit+0x170>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <HAL_I2S_MspInit+0x170>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	4b36      	ldr	r3, [pc, #216]	; (8001910 <HAL_I2S_MspInit+0x170>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a35      	ldr	r2, [pc, #212]	; (8001910 <HAL_I2S_MspInit+0x170>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b33      	ldr	r3, [pc, #204]	; (8001910 <HAL_I2S_MspInit+0x170>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184e:	2310      	movs	r3, #16
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185e:	2306      	movs	r3, #6
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	482a      	ldr	r0, [pc, #168]	; (8001914 <HAL_I2S_MspInit+0x174>)
 800186a:	f001 faaf 	bl	8002dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800186e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001880:	2306      	movs	r3, #6
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001888:	4619      	mov	r1, r3
 800188a:	4823      	ldr	r0, [pc, #140]	; (8001918 <HAL_I2S_MspInit+0x178>)
 800188c:	f001 fa9e 	bl	8002dcc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_I2S_MspInit+0x17c>)
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_I2S_MspInit+0x180>)
 8001894:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_I2S_MspInit+0x17c>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_I2S_MspInit+0x17c>)
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ae:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018be:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80018c0:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c6:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018d0:	2204      	movs	r2, #4
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018d6:	2203      	movs	r2, #3
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018e8:	f000 ff00 	bl	80026ec <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 80018f2:	f000 f8d5 	bl	8001aa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_I2S_MspInit+0x17c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001902:	bf00      	nop
 8001904:	3740      	adds	r7, #64	; 0x40
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40003c00 	.word	0x40003c00
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020800 	.word	0x40020800
 800191c:	200000cc 	.word	0x200000cc
 8001920:	40026088 	.word	0x40026088

08001924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192a:	f000 fd5b 	bl	80023e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192e:	f000 f84f 	bl	80019d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001932:	f7ff fe15 	bl	8001560 <MX_GPIO_Init>
  MX_DMA_Init();
 8001936:	f7ff fdf3 	bl	8001520 <MX_DMA_Init>
  MX_I2C1_Init();
 800193a:	f7ff fe8d 	bl	8001658 <MX_I2C1_Init>
  MX_I2S3_Init();
 800193e:	f7ff ff01 	bl	8001744 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  uint8_t counter = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	71bb      	strb	r3, [r7, #6]

  counter += Codec_Init();
 8001946:	f7ff fcb5 	bl	80012b4 <Codec_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	b2da      	uxtb	r2, r3
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	4413      	add	r3, r2
 8001952:	71bb      	strb	r3, [r7, #6]
  counter += Codec_SetVolume(80);
 8001954:	2050      	movs	r0, #80	; 0x50
 8001956:	f7ff fd49 	bl	80013ec <Codec_SetVolume>
 800195a:	4603      	mov	r3, r0
 800195c:	b2da      	uxtb	r2, r3
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	4413      	add	r3, r2
 8001962:	71bb      	strb	r3, [r7, #6]
  counter += Codec_Play();
 8001964:	f7ff fd18 	bl	8001398 <Codec_Play>
 8001968:	4603      	mov	r3, r0
 800196a:	b2da      	uxtb	r2, r3
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	4413      	add	r3, r2
 8001970:	71bb      	strb	r3, [r7, #6]
  if (counter) {
 8001972:	79bb      	ldrb	r3, [r7, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <main+0x58>
    Error_Handler();
 8001978:	f000 f892 	bl	8001aa0 <Error_Handler>
  }
  Synth_Init();
 800197c:	f000 f970 	bl	8001c60 <Synth_Init>
  Synth_Play();
 8001980:	f000 f9ae 	bl	8001ce0 <Synth_Play>

  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	480f      	ldr	r0, [pc, #60]	; (80019c8 <main+0xa4>)
 800198c:	f001 fbba 	bl	8003104 <HAL_GPIO_WritePin>

  int8_t wasClicked = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Synth_Key_Press(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f000 f8ed 	bl	8001b74 <Synth_Key_Press>

//	Synth_Key_Press();
	// turn off the codec when button is pressed
	if (HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin)) {
 800199a:	2101      	movs	r1, #1
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <main+0xa8>)
 800199e:	f001 fb99 	bl	80030d4 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <main+0x98>
		if (!wasClicked) {
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f1      	bne.n	8001994 <main+0x70>
			//
			Synth_Key_Press(0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 f8df 	bl	8001b74 <Synth_Key_Press>
			//
			wasClicked = 1;
 80019b6:	2301      	movs	r3, #1
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	e7eb      	b.n	8001994 <main+0x70>
		}
	} else {
		wasClicked = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]
		Synth_Key_Release(0);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 f913 	bl	8001bec <Synth_Key_Release>
	Synth_Key_Press(1);
 80019c6:	e7e5      	b.n	8001994 <main+0x70>
 80019c8:	40020c00 	.word	0x40020c00
 80019cc:	40020000 	.word	0x40020000

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b094      	sub	sp, #80	; 0x50
 80019d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	2230      	movs	r2, #48	; 0x30
 80019dc:	2100      	movs	r1, #0
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fb90 	bl	8005104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <SystemClock_Config+0xc8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a26      	ldr	r2, [pc, #152]	; (8001a98 <SystemClock_Config+0xc8>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <SystemClock_Config+0xc8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <SystemClock_Config+0xcc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a36:	2302      	movs	r3, #2
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a40:	2304      	movs	r3, #4
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a44:	23c0      	movs	r3, #192	; 0xc0
 8001a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 fd5d 	bl	8004514 <HAL_RCC_OscConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a60:	f000 f81e 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a64:	230f      	movs	r3, #15
 8001a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2103      	movs	r1, #3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 ffbf 	bl	8004a04 <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a8c:	f000 f808 	bl	8001aa0 <Error_Handler>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3750      	adds	r7, #80	; 0x50
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <Error_Handler+0x18>)
 8001aac:	f001 fb2a 	bl	8003104 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x14>
 8001ab6:	bf00      	nop
 8001ab8:	40020c00 	.word	0x40020c00

08001abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_MspInit+0x4c>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <HAL_MspInit+0x4c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_MspInit+0x4c>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001afa:	2007      	movs	r0, #7
 8001afc:	f000 fdb4 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40023800 	.word	0x40023800

08001b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <NMI_Handler+0x4>

08001b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler+0x4>

08001b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <BusFault_Handler+0x4>

08001b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <UsageFault_Handler+0x4>

08001b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b58:	f000 fc96 	bl	8002488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA1_Stream5_IRQHandler+0x10>)
 8001b66:	f000 fec7 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200000cc 	.word	0x200000cc

08001b74 <Synth_Key_Press>:

Wavetable_State wavetables[POLY_MAX];

float synth_time = 0.0; // synthesizer clock for adsr

void Synth_Key_Press(int i) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	Wavetable_SetActive(&wavetables[i], 1);
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <Synth_Key_Press+0x70>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fbef 	bl	8002370 <Wavetable_SetActive>
	if(0 == adsr_active(&(&wavetables[i])->adsr_state, synth_time)) {
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	1a9b      	subs	r3, r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <Synth_Key_Press+0x70>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a11      	ldr	r2, [pc, #68]	; (8001be8 <Synth_Key_Press+0x74>)
 8001ba4:	edd2 7a00 	vldr	s15, [r2]
 8001ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fb05 	bl	80011bc <adsr_active>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d110      	bne.n	8001bda <Synth_Key_Press+0x66>
		adsr_note_on(&(&wavetables[i])->adsr_state, 127.0, synth_time);
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	3310      	adds	r3, #16
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <Synth_Key_Press+0x70>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a07      	ldr	r2, [pc, #28]	; (8001be8 <Synth_Key_Press+0x74>)
 8001bca:	edd2 7a00 	vldr	s15, [r2]
 8001bce:	eeb0 0a67 	vmov.f32	s0, s15
 8001bd2:	217f      	movs	r1, #127	; 0x7f
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff f98f 	bl	8000ef8 <adsr_note_on>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2000032c 	.word	0x2000032c
 8001be8:	2000039c 	.word	0x2000039c

08001bec <Synth_Key_Release>:

void Synth_Key_Release(int i) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	Wavetable_SetActive(&wavetables[i], 0);
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <Synth_Key_Release+0x6c>)
 8001c00:	4413      	add	r3, r2
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fbb3 	bl	8002370 <Wavetable_SetActive>
//	Wavetable_SetActive(&wavetables[i], 1);
	if(1 != adsr_releasing(&(&wavetables[i])->adsr_state, synth_time)) {
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	3310      	adds	r3, #16
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <Synth_Key_Release+0x6c>)
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a10      	ldr	r2, [pc, #64]	; (8001c5c <Synth_Key_Release+0x70>)
 8001c1c:	edd2 7a00 	vldr	s15, [r2]
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fb07 	bl	8001238 <adsr_releasing>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d00f      	beq.n	8001c50 <Synth_Key_Release+0x64>
		adsr_note_off(&(&wavetables[i])->adsr_state, synth_time);
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <Synth_Key_Release+0x6c>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <Synth_Key_Release+0x70>)
 8001c42:	edd2 7a00 	vldr	s15, [r2]
 8001c46:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f986 	bl	8000f5c <adsr_note_off>
	}
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000032c 	.word	0x2000032c
 8001c5c:	2000039c 	.word	0x2000039c

08001c60 <Synth_Init>:

void Synth_Init() {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
  for(int note = 0; note<POLY_MAX; note++) {
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	e02b      	b.n	8001cc4 <Synth_Init+0x64>
	  Wavetable_Init(&wavetables[note], WAVE_SINE);
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <Synth_Init+0x7c>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 fab1 	bl	80021e4 <Wavetable_Init>
	  Wavetable_NoteOn(&wavetables[note], wavetables[note].pitch_hz * (note+1));
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <Synth_Init+0x7c>)
 8001c8e:	1899      	adds	r1, r3, r2
 8001c90:	4812      	ldr	r0, [pc, #72]	; (8001cdc <Synth_Init+0x7c>)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4403      	add	r3, r0
 8001c9e:	330c      	adds	r3, #12
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb8:	4608      	mov	r0, r1
 8001cba:	f000 fadf 	bl	800227c <Wavetable_NoteOn>
  for(int note = 0; note<POLY_MAX; note++) {
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	ddd0      	ble.n	8001c6c <Synth_Init+0xc>
  }
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES);
 8001cca:	2180      	movs	r1, #128	; 0x80
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 f815 	bl	8001cfc <UpdateAudioBuffer>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000032c 	.word	0x2000032c

08001ce0 <Synth_Play>:

void Synth_Play() {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  HAL_I2S_Transmit_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SAMPLES);
 8001ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce8:	4902      	ldr	r1, [pc, #8]	; (8001cf4 <Synth_Play+0x14>)
 8001cea:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <Synth_Play+0x18>)
 8001cec:	f001 ffc0 	bl	8003c70 <HAL_I2S_Transmit_DMA>
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000012c 	.word	0x2000012c
 8001cf8:	20000084 	.word	0x20000084

08001cfc <UpdateAudioBuffer>:

static void UpdateAudioBuffer(uint32_t start_frame, uint32_t end_frame) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d08:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001d0c:	6018      	str	r0, [r3, #0]
 8001d0e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d12:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8001d16:	6019      	str	r1, [r3, #0]
  // start_frame is inclusive, end_frame exclusive
  float buffer[AUDIO_BUFFER_SAMPLES];
  for(int i = 0; i<AUDIO_BUFFER_SAMPLES; i++) {buffer[i] = 0;}
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8001d1e:	e00f      	b.n	8001d40 <UpdateAudioBuffer+0x44>
 8001d20:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d24:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001d28:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8001d40:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001d44:	2bff      	cmp	r3, #255	; 0xff
 8001d46:	ddeb      	ble.n	8001d20 <UpdateAudioBuffer+0x24>
  float _buffer[AUDIO_BUFFER_SAMPLES];
  for(int i = 0; i<AUDIO_BUFFER_SAMPLES; i++) {_buffer[i] = 0;}
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8001d4e:	e00f      	b.n	8001d70 <UpdateAudioBuffer+0x74>
 8001d50:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d54:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
 8001d58:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8001d70:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8001d74:	2bff      	cmp	r3, #255	; 0xff
 8001d76:	ddeb      	ble.n	8001d50 <UpdateAudioBuffer+0x54>

  for(int note = 0; note < POLY_MAX; note++) {
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8001d7e:	e09d      	b.n	8001ebc <UpdateAudioBuffer+0x1c0>
	  Wavetable_GetSamples(&wavetables[note], _buffer, end_frame - start_frame);
 8001d80:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4a7d      	ldr	r2, [pc, #500]	; (8001f84 <UpdateAudioBuffer+0x288>)
 8001d8e:	1898      	adds	r0, r3, r2
 8001d90:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d94:	f6a3 0228 	subw	r2, r3, #2088	; 0x828
 8001d98:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001d9c:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4619      	mov	r1, r3
 8001dae:	f000 fa8b 	bl	80022c8 <Wavetable_GetSamples>
	  adsr_get_samples(&(&wavetables[note])->adsr_state, _buffer, end_frame - start_frame, synth_time);
 8001db2:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	3310      	adds	r3, #16
 8001dc0:	4a70      	ldr	r2, [pc, #448]	; (8001f84 <UpdateAudioBuffer+0x288>)
 8001dc2:	1898      	adds	r0, r3, r2
 8001dc4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001dc8:	f6a3 0228 	subw	r2, r3, #2088	; 0x828
 8001dcc:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001dd0:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <UpdateAudioBuffer+0x28c>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7ff f8d2 	bl	8000f94 <adsr_get_samples>

	  for(int i = 0; i < end_frame - start_frame; i++) {
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 8001df6:	e04d      	b.n	8001e94 <UpdateAudioBuffer+0x198>
		  buffer[2*i] += _buffer[2*i];
 8001df8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001e02:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	ed93 7a00 	vldr	s14, [r3]
 8001e0e:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001e18:	f5a2 6202 	sub.w	r2, r2, #2080	; 0x820
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001e32:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
		  buffer[2*i+1] += _buffer[2*i+1];
 8001e3e:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	3301      	adds	r3, #1
 8001e46:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001e4a:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001e62:	f5a2 6202 	sub.w	r2, r2, #2080	; 0x820
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	3301      	adds	r3, #1
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001e7e:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	edc3 7a00 	vstr	s15, [r3]
	  for(int i = 0; i < end_frame - start_frame; i++) {
 8001e8a:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 8001e94:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001e98:	f6a3 0228 	subw	r2, r3, #2088	; 0x828
 8001e9c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001ea0:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	1ad2      	subs	r2, r2, r3
 8001eaa:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d8a2      	bhi.n	8001df8 <UpdateAudioBuffer+0xfc>
  for(int note = 0; note < POLY_MAX; note++) {
 8001eb2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8001ebc:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	f77f af5d 	ble.w	8001d80 <UpdateAudioBuffer+0x84>
	  }
  }

  uint32_t i = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 8001ecc:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001ed0:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8001eda:	e043      	b.n	8001f64 <UpdateAudioBuffer+0x268>
	float scaled = buffer[2*i] * scaled_base;
 8001edc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8001ee6:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	ed93 7a00 	vldr	s14, [r3]
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <UpdateAudioBuffer+0x290>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001f06:	edc3 7a00 	vstr	s15, [r3]
	uint16_t value = (uint16_t)(base + scaled);
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <UpdateAudioBuffer+0x294>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f26:	ee17 3a90 	vmov	r3, s15
 8001f2a:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

    audio_buffer[2*frame] = value;
 8001f2e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4917      	ldr	r1, [pc, #92]	; (8001f94 <UpdateAudioBuffer+0x298>)
 8001f36:	f8b7 280a 	ldrh.w	r2, [r7, #2058]	; 0x80a
 8001f3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	audio_buffer[2*frame+1] = value;
 8001f3e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	3301      	adds	r3, #1
 8001f46:	4913      	ldr	r1, [pc, #76]	; (8001f94 <UpdateAudioBuffer+0x298>)
 8001f48:	f8b7 280a 	ldrh.w	r2, [r7, #2058]	; 0x80a
 8001f4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	i++;
 8001f50:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 8001f5a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8001f5e:	3301      	adds	r3, #1
 8001f60:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8001f64:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001f68:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8001f6c:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d3b2      	bcc.n	8001edc <UpdateAudioBuffer+0x1e0>
  }

}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000032c 	.word	0x2000032c
 8001f88:	2000039c 	.word	0x2000039c
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	20000002 	.word	0x20000002
 8001f94:	2000012c 	.word	0x2000012c

08001f98 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES/2);
 8001fa0:	2140      	movs	r1, #64	; 0x40
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff feaa 	bl	8001cfc <UpdateAudioBuffer>
  synth_time += (float)(AUDIO_BUFFER_FRAMES/2)/SAMPLE_RATE;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001fc8 <HAL_I2S_TxHalfCpltCallback+0x30>
 8001fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb6:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000039c 	.word	0x2000039c
 8001fc8:	3aaec33e 	.word	0x3aaec33e

08001fcc <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(AUDIO_BUFFER_FRAMES/2, AUDIO_BUFFER_FRAMES);
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	2040      	movs	r0, #64	; 0x40
 8001fd8:	f7ff fe90 	bl	8001cfc <UpdateAudioBuffer>
  synth_time += (float)(AUDIO_BUFFER_FRAMES/2)/SAMPLE_RATE;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_I2S_TxCpltCallback+0x2c>)
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ffc <HAL_I2S_TxCpltCallback+0x30>
 8001fe6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_I2S_TxCpltCallback+0x2c>)
 8001fec:	edc3 7a00 	vstr	s15, [r3]
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000039c 	.word	0x2000039c
 8001ffc:	3aaec33e 	.word	0x3aaec33e

08002000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <SystemInit+0x20>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <SystemInit+0x20>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	00000000 	.word	0x00000000

08002028 <sawWavetableInit>:

float saw_wavetable[WAVETABLE_LEN];
float sine_wavetable[WAVETABLE_LEN];
//static uint8_t wavetables_initialized = 0;

static void sawWavetableInit() {
 8002028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
	float octaves = (int)(SAMPLE_RATE / 2.0 / 440.0);
 8002030:	4b4b      	ldr	r3, [pc, #300]	; (8002160 <sawWavetableInit+0x138>)
 8002032:	60bb      	str	r3, [r7, #8]
	for(int octave = 1; octave < octaves; octave++) {
 8002034:	2301      	movs	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e078      	b.n	800212c <sawWavetableInit+0x104>
		float d_phase = (octave * 2.0f * (float)M_PI) / WAVETABLE_LEN;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002048:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002164 <sawWavetableInit+0x13c>
 800204c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002050:	eddf 6a45 	vldr	s13, [pc, #276]	; 8002168 <sawWavetableInit+0x140>
 8002054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002058:	edc7 7a01 	vstr	s15, [r7, #4]
		float phase = 0;
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
		float sign = (octave & 1) ? -1.0f : 1.0f;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <sawWavetableInit+0x48>
 800206c:	4b3f      	ldr	r3, [pc, #252]	; (800216c <sawWavetableInit+0x144>)
 800206e:	e001      	b.n	8002074 <sawWavetableInit+0x4c>
 8002070:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002074:	603b      	str	r3, [r7, #0]
		for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 8002076:	2300      	movs	r3, #0
 8002078:	81fb      	strh	r3, [r7, #14]
 800207a:	e050      	b.n	800211e <sawWavetableInit+0xf6>
			saw_wavetable[i] += (sign * sin(phase) / octave) * (2.0f / (float)M_PI);
 800207c:	89fb      	ldrh	r3, [r7, #14]
 800207e:	4a3c      	ldr	r2, [pc, #240]	; (8002170 <sawWavetableInit+0x148>)
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa0a 	bl	80004a0 <__aeabi_f2d>
 800208c:	4604      	mov	r4, r0
 800208e:	460d      	mov	r5, r1
 8002090:	6838      	ldr	r0, [r7, #0]
 8002092:	f7fe fa05 	bl	80004a0 <__aeabi_f2d>
 8002096:	4680      	mov	r8, r0
 8002098:	4689      	mov	r9, r1
 800209a:	6938      	ldr	r0, [r7, #16]
 800209c:	f7fe fa00 	bl	80004a0 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	ec43 2b10 	vmov	d0, r2, r3
 80020a8:	f003 f836 	bl	8005118 <sin>
 80020ac:	ec53 2b10 	vmov	r2, r3, d0
 80020b0:	4640      	mov	r0, r8
 80020b2:	4649      	mov	r1, r9
 80020b4:	f7fe fa4c 	bl	8000550 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4690      	mov	r8, r2
 80020be:	4699      	mov	r9, r3
 80020c0:	6978      	ldr	r0, [r7, #20]
 80020c2:	f7fe f9db 	bl	800047c <__aeabi_i2d>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4640      	mov	r0, r8
 80020cc:	4649      	mov	r1, r9
 80020ce:	f7fe fb69 	bl	80007a4 <__aeabi_ddiv>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	a31f      	add	r3, pc, #124	; (adr r3, 8002158 <sawWavetableInit+0x130>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe fa36 	bl	8000550 <__aeabi_dmul>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4620      	mov	r0, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	f7fe f87a 	bl	80001e4 <__adddf3>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	89fc      	ldrh	r4, [r7, #14]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fceb 	bl	8000ad4 <__aeabi_d2f>
 80020fe:	4602      	mov	r2, r0
 8002100:	491b      	ldr	r1, [pc, #108]	; (8002170 <sawWavetableInit+0x148>)
 8002102:	00a3      	lsls	r3, r4, #2
 8002104:	440b      	add	r3, r1
 8002106:	601a      	str	r2, [r3, #0]
			phase += d_phase;
 8002108:	ed97 7a04 	vldr	s14, [r7, #16]
 800210c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	edc7 7a04 	vstr	s15, [r7, #16]
		for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 8002118:	89fb      	ldrh	r3, [r7, #14]
 800211a:	3301      	adds	r3, #1
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	89fb      	ldrh	r3, [r7, #14]
 8002120:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8002124:	d3aa      	bcc.n	800207c <sawWavetableInit+0x54>
	for(int octave = 1; octave < octaves; octave++) {
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002136:	ed97 7a02 	vldr	s14, [r7, #8]
 800213a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	f73f af7a 	bgt.w	800203a <sawWavetableInit+0x12>
		}
	}
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002152:	bf00      	nop
 8002154:	f3af 8000 	nop.w
 8002158:	60000000 	.word	0x60000000
 800215c:	3fe45f30 	.word	0x3fe45f30
 8002160:	42580000 	.word	0x42580000
 8002164:	40490fdb 	.word	0x40490fdb
 8002168:	457d0000 	.word	0x457d0000
 800216c:	bf800000 	.word	0xbf800000
 8002170:	200003a0 	.word	0x200003a0

08002174 <sineWavetableInit>:

static void sineWavetableInit() {
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
  float d_phase = (2.0f * (float)M_PI) / WAVETABLE_LEN;
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <sineWavetableInit+0x68>)
 800217c:	607b      	str	r3, [r7, #4]
  float phase = 0;
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 8002184:	2300      	movs	r3, #0
 8002186:	817b      	strh	r3, [r7, #10]
 8002188:	e01f      	b.n	80021ca <sineWavetableInit+0x56>
    sine_wavetable[i] = sin(phase);
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7fe f988 	bl	80004a0 <__aeabi_f2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	ec43 2b10 	vmov	d0, r2, r3
 8002198:	f002 ffbe 	bl	8005118 <sin>
 800219c:	ec53 2b10 	vmov	r2, r3, d0
 80021a0:	897c      	ldrh	r4, [r7, #10]
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fc95 	bl	8000ad4 <__aeabi_d2f>
 80021aa:	4602      	mov	r2, r0
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <sineWavetableInit+0x6c>)
 80021ae:	00a3      	lsls	r3, r4, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	601a      	str	r2, [r3, #0]
	phase += d_phase;
 80021b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	edc7 7a03 	vstr	s15, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 80021c4:	897b      	ldrh	r3, [r7, #10]
 80021c6:	3301      	adds	r3, #1
 80021c8:	817b      	strh	r3, [r7, #10]
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 80021d0:	d3db      	bcc.n	800218a <sineWavetableInit+0x16>
  }
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	3acb7232 	.word	0x3acb7232
 80021e0:	200042e0 	.word	0x200042e0

080021e4 <Wavetable_Init>:

void Wavetable_Init(Wavetable_State *state, uint8_t wave) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
  switch(wave) {
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <Wavetable_Init+0x18>
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <Wavetable_Init+0x1e>
 80021fa:	e005      	b.n	8002208 <Wavetable_Init+0x24>
  	  case WAVE_SINE:
  		  sineWavetableInit();
 80021fc:	f7ff ffba 	bl	8002174 <sineWavetableInit>
  		  break;
 8002200:	e002      	b.n	8002208 <Wavetable_Init+0x24>
  	  case WAVE_SAW:
  		  sawWavetableInit();
 8002202:	f7ff ff11 	bl	8002028 <sawWavetableInit>
  		  break;
 8002206:	bf00      	nop
  }

  state->wave = wave;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	701a      	strb	r2, [r3, #0]
  state->active = 0;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	705a      	strb	r2, [r3, #1]
  state->phase = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	605a      	str	r2, [r3, #4]
  state->pitch_hz = 93.75;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <Wavetable_Init+0x80>)
 8002220:	60da      	str	r2, [r3, #12]
  state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	ed93 7a03 	vldr	s14, [r3, #12]
 8002228:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002268 <Wavetable_Init+0x84>
 800222c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002230:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800226c <Wavetable_Init+0x88>
 8002234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	edc3 7a02 	vstr	s15, [r3, #8]

  adsr_init(&state->adsr_state, DEFAULT_ATTACK, DEFAULT_DECAY, DEFAULT_SUSTAIN, DEFAULT_RELEASE, DEFAULT_SCALE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3310      	adds	r3, #16
 8002242:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8002246:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8002270 <Wavetable_Init+0x8c>
 800224a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8002274 <Wavetable_Init+0x90>
 800224e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002278 <Wavetable_Init+0x94>
 8002252:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002270 <Wavetable_Init+0x8c>
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe0e 	bl	8000e78 <adsr_init>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	42bb8000 	.word	0x42bb8000
 8002268:	473b8000 	.word	0x473b8000
 800226c:	457d0000 	.word	0x457d0000
 8002270:	3dcccccd 	.word	0x3dcccccd
 8002274:	3f4ccccd 	.word	0x3f4ccccd
 8002278:	3d4ccccd 	.word	0x3d4ccccd

0800227c <Wavetable_NoteOn>:

void Wavetable_NoteOn(Wavetable_State *state, float pitch_hz) {
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	ed87 0a00 	vstr	s0, [r7]
//	state->active = 1;
	state->phase = 0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	605a      	str	r2, [r3, #4]
	state->pitch_hz = pitch_hz;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	60da      	str	r2, [r3, #12]
	state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	ed93 7a03 	vldr	s14, [r3, #12]
 800229c:	eddf 6a08 	vldr	s13, [pc, #32]	; 80022c0 <Wavetable_NoteOn+0x44>
 80022a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80022c4 <Wavetable_NoteOn+0x48>
 80022a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	473b8000 	.word	0x473b8000
 80022c4:	457d0000 	.word	0x457d0000

080022c8 <Wavetable_GetSamples>:
	state->phase = 0;
	state->pitch_hz = 0;
	state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
}

void Wavetable_GetSamples(Wavetable_State *state, float *buffer, int num_frames) {
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  float sample;
  for (uint32_t i = 0; i<num_frames; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e03a      	b.n	8002350 <Wavetable_GetSamples+0x88>
    sample = sine_wavetable[(uint32_t)state->phase];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80022e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e4:	ee17 3a90 	vmov	r3, s15
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <Wavetable_GetSamples+0xa0>)
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	613b      	str	r3, [r7, #16]
//	sample = saw_wavetable[(uint32_t)state->phase];
	buffer[2*i] = sample;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	601a      	str	r2, [r3, #0]
	buffer[2*i+1] = sample;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	3304      	adds	r3, #4
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	4413      	add	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	601a      	str	r2, [r3, #0]
	state->phase += state->d_phase;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	edd3 7a02 	vldr	s15, [r3, #8]
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	edc3 7a01 	vstr	s15, [r3, #4]
	if (state->phase > WAVETABLE_LEN) {
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	edd3 7a01 	vldr	s15, [r3, #4]
 8002328:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800236c <Wavetable_GetSamples+0xa4>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	dd09      	ble.n	800234a <Wavetable_GetSamples+0x82>
	  state->phase -= WAVETABLE_LEN;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	edd3 7a01 	vldr	s15, [r3, #4]
 800233c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800236c <Wavetable_GetSamples+0xa4>
 8002340:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edc3 7a01 	vstr	s15, [r3, #4]
  for (uint32_t i = 0; i<num_frames; i++) {
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3c0      	bcc.n	80022da <Wavetable_GetSamples+0x12>
	}
  }

}
 8002358:	bf00      	nop
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200042e0 	.word	0x200042e0
 800236c:	457d0000 	.word	0x457d0000

08002370 <Wavetable_SetActive>:

void Wavetable_SetActive(Wavetable_State *state, int active) {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	state->active = active;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	705a      	strb	r2, [r3, #1]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ba:	f7ff fe21 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f002 fe7d 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7ff faaf 	bl	8001924 <main>
  bx  lr    
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80023d4:	080063d0 	.word	0x080063d0
  ldr r2, =_sbss
 80023d8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80023dc:	20008224 	.word	0x20008224

080023e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC_IRQHandler>
	...

080023e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_Init+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_Init+0x40>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_Init+0x40>)
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_Init+0x40>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 f92b 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002412:	2000      	movs	r0, #0
 8002414:	f000 f808 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002418:	f7ff fb50 	bl	8001abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_InitTick+0x54>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_InitTick+0x58>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f943 	bl	80026d2 <HAL_SYSTICK_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e00e      	b.n	8002474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b0f      	cmp	r3, #15
 800245a:	d80a      	bhi.n	8002472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245c:	2200      	movs	r2, #0
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f000 f90b 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <HAL_InitTick+0x5c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000008 	.word	0x20000008
 8002480:	20000010 	.word	0x20000010
 8002484:	2000000c 	.word	0x2000000c

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x20>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_IncTick+0x24>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_IncTick+0x24>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000010 	.word	0x20000010
 80024ac:	20008220 	.word	0x20008220

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20008220 	.word	0x20008220

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff feda 	bl	80024b0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fec1 	bl	80024b0 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fa6f 	bl	8002cd4 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa26 	bl	8002c68 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9b8 	bl	8002c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	223f      	movs	r2, #63	; 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002904:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <HAL_DMA_IRQHandler+0x248>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a8e      	ldr	r2, [pc, #568]	; (8002b44 <HAL_DMA_IRQHandler+0x24c>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	0a9b      	lsrs	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	2208      	movs	r2, #8
 8002924:	409a      	lsls	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 0204 	bic.w	r2, r2, #4
 800294a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2208      	movs	r2, #8
 8002952:	409a      	lsls	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	f043 0201 	orr.w	r2, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2201      	movs	r2, #1
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2201      	movs	r2, #1
 8002988:	409a      	lsls	r2, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0202 	orr.w	r2, r3, #2
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	2204      	movs	r2, #4
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d012      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2204      	movs	r2, #4
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0204 	orr.w	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2210      	movs	r2, #16
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d043      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d03c      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2210      	movs	r2, #16
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d018      	beq.n	8002a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d108      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d024      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e01f      	b.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e016      	b.n	8002a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d107      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0208 	bic.w	r2, r2, #8
 8002a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 808f 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8087 	beq.w	8002b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2220      	movs	r2, #32
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d136      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f022 0216 	bic.w	r2, r2, #22
 8002ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_DMA_IRQHandler+0x1da>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0208 	bic.w	r2, r2, #8
 8002ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	223f      	movs	r2, #63	; 0x3f
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d07e      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
        }
        return;
 8002b0e:	e079      	b.n	8002c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01d      	beq.n	8002b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d031      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e02c      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
 8002b3e:	bf00      	nop
 8002b40:	20000008 	.word	0x20000008
 8002b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d023      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
 8002b58:	e01e      	b.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0210 	bic.w	r2, r2, #16
 8002b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d032      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d022      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2205      	movs	r2, #5
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d307      	bcc.n	8002be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f2      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x2cc>
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d005      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e000      	b.n	8002c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c04:	bf00      	nop
    }
  }
}
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d108      	bne.n	8002c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c4a:	e007      	b.n	8002c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3b10      	subs	r3, #16
 8002c78:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <DMA_CalcBaseAndBitshift+0x64>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c82:	4a13      	ldr	r2, [pc, #76]	; (8002cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d909      	bls.n	8002caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca8:	e007      	b.n	8002cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cb2:	f023 0303 	bic.w	r3, r3, #3
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	aaaaaaab 	.word	0xaaaaaaab
 8002cd0:	080061e0 	.word	0x080061e0

08002cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d856      	bhi.n	8002da2 <DMA_CheckFifoParam+0xce>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <DMA_CheckFifoParam+0x28>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d1f 	.word	0x08002d1f
 8002d04:	08002d0d 	.word	0x08002d0d
 8002d08:	08002da3 	.word	0x08002da3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d046      	beq.n	8002da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e043      	b.n	8002da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d26:	d140      	bne.n	8002daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e03d      	b.n	8002daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d36:	d121      	bne.n	8002d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d837      	bhi.n	8002dae <DMA_CheckFifoParam+0xda>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <DMA_CheckFifoParam+0x70>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d5b 	.word	0x08002d5b
 8002d4c:	08002d55 	.word	0x08002d55
 8002d50:	08002d6d 	.word	0x08002d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e030      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d025      	beq.n	8002db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6a:	e022      	b.n	8002db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d74:	d11f      	bne.n	8002db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d7a:	e01c      	b.n	8002db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d903      	bls.n	8002d8a <DMA_CheckFifoParam+0xb6>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d003      	beq.n	8002d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d88:	e018      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8e:	e015      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	e00b      	b.n	8002dba <DMA_CheckFifoParam+0xe6>
      break;
 8002da2:	bf00      	nop
 8002da4:	e00a      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e008      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e006      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e004      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
    }
  } 
  
  return status; 
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	e159      	b.n	800309c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	f040 8148 	bne.w	8003096 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d005      	beq.n	8002e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d130      	bne.n	8002e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e54:	2201      	movs	r2, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 0201 	and.w	r2, r3, #1
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d017      	beq.n	8002ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d123      	bne.n	8002f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	08da      	lsrs	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3208      	adds	r2, #8
 8002f0a:	69b9      	ldr	r1, [r7, #24]
 8002f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0203 	and.w	r2, r3, #3
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a2 	beq.w	8003096 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a56      	ldr	r2, [pc, #344]	; (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b54      	ldr	r3, [pc, #336]	; (80030b4 <HAL_GPIO_Init+0x2e8>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f6e:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x2ec>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a49      	ldr	r2, [pc, #292]	; (80030bc <HAL_GPIO_Init+0x2f0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d019      	beq.n	8002fce <HAL_GPIO_Init+0x202>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a48      	ldr	r2, [pc, #288]	; (80030c0 <HAL_GPIO_Init+0x2f4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_GPIO_Init+0x1fe>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a47      	ldr	r2, [pc, #284]	; (80030c4 <HAL_GPIO_Init+0x2f8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00d      	beq.n	8002fc6 <HAL_GPIO_Init+0x1fa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a46      	ldr	r2, [pc, #280]	; (80030c8 <HAL_GPIO_Init+0x2fc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d007      	beq.n	8002fc2 <HAL_GPIO_Init+0x1f6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a45      	ldr	r2, [pc, #276]	; (80030cc <HAL_GPIO_Init+0x300>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d101      	bne.n	8002fbe <HAL_GPIO_Init+0x1f2>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	e008      	b.n	8002fd0 <HAL_GPIO_Init+0x204>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e006      	b.n	8002fd0 <HAL_GPIO_Init+0x204>
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e004      	b.n	8002fd0 <HAL_GPIO_Init+0x204>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e002      	b.n	8002fd0 <HAL_GPIO_Init+0x204>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_GPIO_Init+0x204>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	f002 0203 	and.w	r2, r2, #3
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	4093      	lsls	r3, r2
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe0:	4935      	ldr	r1, [pc, #212]	; (80030b8 <HAL_GPIO_Init+0x2ec>)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	089b      	lsrs	r3, r3, #2
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_GPIO_Init+0x304>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003012:	4a2f      	ldr	r2, [pc, #188]	; (80030d0 <HAL_GPIO_Init+0x304>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_GPIO_Init+0x304>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800303c:	4a24      	ldr	r2, [pc, #144]	; (80030d0 <HAL_GPIO_Init+0x304>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_GPIO_Init+0x304>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003066:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <HAL_GPIO_Init+0x304>)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_GPIO_Init+0x304>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <HAL_GPIO_Init+0x304>)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b0f      	cmp	r3, #15
 80030a0:	f67f aea2 	bls.w	8002de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3724      	adds	r7, #36	; 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40020400 	.word	0x40020400
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40013c00 	.word	0x40013c00

080030d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e001      	b.n	80030f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
 8003110:	4613      	mov	r3, r2
 8003112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003114:	787b      	ldrb	r3, [r7, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800311a:	887a      	ldrh	r2, [r7, #2]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003120:	e003      	b.n	800312a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	041a      	lsls	r2, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e12b      	b.n	80033a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe faa8 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800318a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800319c:	f001 fe2a 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a81      	ldr	r2, [pc, #516]	; (80033ac <HAL_I2C_Init+0x274>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d807      	bhi.n	80031bc <HAL_I2C_Init+0x84>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a80      	ldr	r2, [pc, #512]	; (80033b0 <HAL_I2C_Init+0x278>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	bf94      	ite	ls
 80031b4:	2301      	movls	r3, #1
 80031b6:	2300      	movhi	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	e006      	b.n	80031ca <HAL_I2C_Init+0x92>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4a7d      	ldr	r2, [pc, #500]	; (80033b4 <HAL_I2C_Init+0x27c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	bf94      	ite	ls
 80031c4:	2301      	movls	r3, #1
 80031c6:	2300      	movhi	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0e7      	b.n	80033a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a78      	ldr	r2, [pc, #480]	; (80033b8 <HAL_I2C_Init+0x280>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0c9b      	lsrs	r3, r3, #18
 80031dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a6a      	ldr	r2, [pc, #424]	; (80033ac <HAL_I2C_Init+0x274>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d802      	bhi.n	800320c <HAL_I2C_Init+0xd4>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3301      	adds	r3, #1
 800320a:	e009      	b.n	8003220 <HAL_I2C_Init+0xe8>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	4a69      	ldr	r2, [pc, #420]	; (80033bc <HAL_I2C_Init+0x284>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	3301      	adds	r3, #1
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	430b      	orrs	r3, r1
 8003226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003232:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	495c      	ldr	r1, [pc, #368]	; (80033ac <HAL_I2C_Init+0x274>)
 800323c:	428b      	cmp	r3, r1
 800323e:	d819      	bhi.n	8003274 <HAL_I2C_Init+0x13c>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e59      	subs	r1, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fbb1 f3f3 	udiv	r3, r1, r3
 800324e:	1c59      	adds	r1, r3, #1
 8003250:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003254:	400b      	ands	r3, r1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_I2C_Init+0x138>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1e59      	subs	r1, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fbb1 f3f3 	udiv	r3, r1, r3
 8003268:	3301      	adds	r3, #1
 800326a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326e:	e051      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 8003270:	2304      	movs	r3, #4
 8003272:	e04f      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d111      	bne.n	80032a0 <HAL_I2C_Init+0x168>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e58      	subs	r0, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e012      	b.n	80032c6 <HAL_I2C_Init+0x18e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	1e58      	subs	r0, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	0099      	lsls	r1, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Init+0x196>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e022      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10e      	bne.n	80032f4 <HAL_I2C_Init+0x1bc>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e58      	subs	r0, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	440b      	add	r3, r1
 80032e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f2:	e00f      	b.n	8003314 <HAL_I2C_Init+0x1dc>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	0099      	lsls	r1, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	6809      	ldr	r1, [r1, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003342:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6911      	ldr	r1, [r2, #16]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68d2      	ldr	r2, [r2, #12]
 800334e:	4311      	orrs	r1, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	430b      	orrs	r3, r1
 8003356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	000186a0 	.word	0x000186a0
 80033b0:	001e847f 	.word	0x001e847f
 80033b4:	003d08ff 	.word	0x003d08ff
 80033b8:	431bde83 	.word	0x431bde83
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	817b      	strh	r3, [r7, #10]
 80033d2:	460b      	mov	r3, r1
 80033d4:	813b      	strh	r3, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033da:	f7ff f869 	bl	80024b0 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	f040 80d9 	bne.w	80035a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2319      	movs	r3, #25
 80033f4:	2201      	movs	r2, #1
 80033f6:	496d      	ldr	r1, [pc, #436]	; (80035ac <HAL_I2C_Mem_Write+0x1ec>)
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f971 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
 8003406:	e0cc      	b.n	80035a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_I2C_Mem_Write+0x56>
 8003412:	2302      	movs	r3, #2
 8003414:	e0c5      	b.n	80035a2 <HAL_I2C_Mem_Write+0x1e2>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d007      	beq.n	800343c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2221      	movs	r2, #33	; 0x21
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2240      	movs	r2, #64	; 0x40
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4a4d      	ldr	r2, [pc, #308]	; (80035b0 <HAL_I2C_Mem_Write+0x1f0>)
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800347e:	88f8      	ldrh	r0, [r7, #6]
 8003480:	893a      	ldrh	r2, [r7, #8]
 8003482:	8979      	ldrh	r1, [r7, #10]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	4603      	mov	r3, r0
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f890 	bl	80035b4 <I2C_RequestMemoryWrite>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d052      	beq.n	8003540 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e081      	b.n	80035a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f9f2 	bl	800388c <I2C_WaitOnTXEFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d107      	bne.n	80034c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06b      	b.n	80035a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d11b      	bne.n	8003540 <HAL_I2C_Mem_Write+0x180>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1aa      	bne.n	800349e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f9de 	bl	800390e <I2C_WaitOnBTFFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	2b04      	cmp	r3, #4
 800355e:	d107      	bne.n	8003570 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e016      	b.n	80035a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	e000      	b.n	80035a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035a0:	2302      	movs	r3, #2
  }
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	00100002 	.word	0x00100002
 80035b0:	ffff0000 	.word	0xffff0000

080035b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	817b      	strh	r3, [r7, #10]
 80035c6:	460b      	mov	r3, r1
 80035c8:	813b      	strh	r3, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f878 	bl	80036e0 <I2C_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00d      	beq.n	8003612 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003604:	d103      	bne.n	800360e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e05f      	b.n	80036d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003620:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	492d      	ldr	r1, [pc, #180]	; (80036dc <I2C_RequestMemoryWrite+0x128>)
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 f8b0 	bl	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04c      	b.n	80036d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f91a 	bl	800388c <I2C_WaitOnTXEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00d      	beq.n	800367a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	2b04      	cmp	r3, #4
 8003664:	d107      	bne.n	8003676 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e02b      	b.n	80036d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003680:	893b      	ldrh	r3, [r7, #8]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	e021      	b.n	80036d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800368c:	893b      	ldrh	r3, [r7, #8]
 800368e:	0a1b      	lsrs	r3, r3, #8
 8003690:	b29b      	uxth	r3, r3
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	6a39      	ldr	r1, [r7, #32]
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f8f4 	bl	800388c <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d107      	bne.n	80036c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e005      	b.n	80036d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	00010002 	.word	0x00010002

080036e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	e025      	b.n	800373e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d021      	beq.n	800373e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fe fed9 	bl	80024b0 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x30>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d116      	bne.n	800373e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f043 0220 	orr.w	r2, r3, #32
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e023      	b.n	8003786 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10d      	bne.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	e00c      	b.n	800377e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d0b6      	beq.n	80036f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800379c:	e051      	b.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ac:	d123      	bne.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f043 0204 	orr.w	r2, r3, #4
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e046      	b.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d021      	beq.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe fe57 	bl	80024b0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e020      	b.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	0c1b      	lsrs	r3, r3, #16
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10c      	bne.n	8003866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e00b      	b.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	43da      	mvns	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4013      	ands	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d18d      	bne.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003898:	e02d      	b.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f878 	bl	8003990 <I2C_IsAcknowledgeFailed>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e02d      	b.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d021      	beq.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fe fdfd 	bl	80024b0 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d116      	bne.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e007      	b.n	8003906 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d1ca      	bne.n	800389a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800391a:	e02d      	b.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f837 	bl	8003990 <I2C_IsAcknowledgeFailed>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e02d      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d021      	beq.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003934:	f7fe fdbc 	bl	80024b0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e007      	b.n	8003988 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b04      	cmp	r3, #4
 8003984:	d1ca      	bne.n	800391c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a6:	d11b      	bne.n	80039e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0204 	orr.w	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e128      	b.n	8003c54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a90      	ldr	r2, [pc, #576]	; (8003c5c <HAL_I2S_Init+0x26c>)
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd febf 	bl	80017a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2202      	movs	r2, #2
 8003a44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d060      	beq.n	8003b10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a56:	2310      	movs	r3, #16
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e001      	b.n	8003a60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d802      	bhi.n	8003a6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f001 fac4 	bl	8004ffc <HAL_RCCEx_GetPeriphCLKFreq>
 8003a74:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7e:	d125      	bne.n	8003acc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d010      	beq.n	8003aaa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e01f      	b.n	8003aea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	3305      	adds	r3, #5
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e00e      	b.n	8003aea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4a5c      	ldr	r2, [pc, #368]	; (8003c60 <HAL_I2S_Init+0x270>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e003      	b.n	8003b18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b10:	2302      	movs	r3, #2
 8003b12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d902      	bls.n	8003b24 <HAL_I2S_Init+0x134>
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2bff      	cmp	r3, #255	; 0xff
 8003b22:	d907      	bls.n	8003b34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e08f      	b.n	8003c54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b52:	f023 030f 	bic.w	r3, r3, #15
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6851      	ldr	r1, [r2, #4]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6892      	ldr	r2, [r2, #8]
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68d2      	ldr	r2, [r2, #12]
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6992      	ldr	r2, [r2, #24]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d161      	bne.n	8003c44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <HAL_I2S_Init+0x274>)
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2S_Init+0x1a4>
 8003b90:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003b92:	e001      	b.n	8003b98 <HAL_I2S_Init+0x1a8>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4932      	ldr	r1, [pc, #200]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003ba0:	428a      	cmp	r2, r1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2S_Init+0x1b8>
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003ba6:	e001      	b.n	8003bac <HAL_I2S_Init+0x1bc>
 8003ba8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bb0:	f023 030f 	bic.w	r3, r3, #15
 8003bb4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2S_Init+0x1d4>
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003bc2:	e001      	b.n	8003bc8 <HAL_I2S_Init+0x1d8>
 8003bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc8:	2202      	movs	r2, #2
 8003bca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2S_Init+0x1ea>
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2S_Init+0x1ee>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bea:	d003      	beq.n	8003bf4 <HAL_I2S_Init+0x204>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e001      	b.n	8003c00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_I2S_Init+0x24c>
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003c3a:	e001      	b.n	8003c40 <HAL_I2S_Init+0x250>
 8003c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c40:	897a      	ldrh	r2, [r7, #10]
 8003c42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	08003f4d 	.word	0x08003f4d
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	08004061 	.word	0x08004061
 8003c68:	40003800 	.word	0x40003800
 8003c6c:	40003400 	.word	0x40003400

08003c70 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_I2S_Transmit_DMA+0x1a>
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e08e      	b.n	8003dac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2S_Transmit_DMA+0x2e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e086      	b.n	8003dac <HAL_I2S_Transmit_DMA+0x13c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d005      	beq.n	8003cbe <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e076      	b.n	8003dac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d002      	beq.n	8003cea <HAL_I2S_Transmit_DMA+0x7a>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d10a      	bne.n	8003d00 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfe:	e005      	b.n	8003d0c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	4a28      	ldr	r2, [pc, #160]	; (8003db4 <HAL_I2S_Transmit_DMA+0x144>)
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <HAL_I2S_Transmit_DMA+0x148>)
 8003d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	4a26      	ldr	r2, [pc, #152]	; (8003dbc <HAL_I2S_Transmit_DMA+0x14c>)
 8003d22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d2c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d34:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003d3c:	f7fe fd84 	bl	8002848 <HAL_DMA_Start_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00f      	beq.n	8003d66 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f043 0208 	orr.w	r2, r3, #8
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e022      	b.n	8003dac <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d107      	bne.n	8003d84 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d82:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0202 	orr.w	r2, r2, #2
 8003da0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	08003e2b 	.word	0x08003e2b
 8003db8:	08003de9 	.word	0x08003de9
 8003dbc:	08003e47 	.word	0x08003e47

08003dc0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10e      	bne.n	8003e1c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0202 	bic.w	r2, r2, #2
 8003e0c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7fe f8d5 	bl	8001fcc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7fe f8ad 	bl	8001f98 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0203 	bic.w	r2, r2, #3
 8003e62:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	f043 0208 	orr.w	r2, r3, #8
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff ffa5 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10e      	bne.n	8003ee6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ed6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fe f873 	bl	8001fcc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	b292      	uxth	r2, r2
 8003f02:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10e      	bne.n	8003f44 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f34:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff ff3e 	bl	8003dc0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d13a      	bne.n	8003fde <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d109      	bne.n	8003f86 <I2S_IRQHandler+0x3a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d102      	bne.n	8003f86 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ffb4 	bl	8003eee <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d126      	bne.n	8003fde <I2S_IRQHandler+0x92>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d11f      	bne.n	8003fde <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fac:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd0:	f043 0202 	orr.w	r2, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fefb 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d136      	bne.n	8004058 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d109      	bne.n	8004008 <I2S_IRQHandler+0xbc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d102      	bne.n	8004008 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ff45 	bl	8003e92 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b08      	cmp	r3, #8
 8004010:	d122      	bne.n	8004058 <I2S_IRQHandler+0x10c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d11b      	bne.n	8004058 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800402e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f043 0204 	orr.w	r2, r3, #4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff febe 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004058:	bf00      	nop
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a92      	ldr	r2, [pc, #584]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800407a:	4b92      	ldr	r3, [pc, #584]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800407c:	e001      	b.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800407e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a8b      	ldr	r2, [pc, #556]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d101      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004098:	4b8a      	ldr	r3, [pc, #552]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409a:	e001      	b.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800409c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ac:	d004      	beq.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f040 8099 	bne.w	80041ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f925 	bl	800431c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d107      	bne.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f9c8 	bl	800447c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b40      	cmp	r3, #64	; 0x40
 80040f4:	d13a      	bne.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d035      	beq.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800410a:	4b6e      	ldr	r3, [pc, #440]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800410c:	e001      	b.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800410e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4969      	ldr	r1, [pc, #420]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800411a:	428b      	cmp	r3, r1
 800411c:	d101      	bne.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800411e:	4b69      	ldr	r3, [pc, #420]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004120:	e001      	b.n	8004126 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800412a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800413a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fe34 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	f040 80c3 	bne.w	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80bd 	beq.w	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004192:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a49      	ldr	r2, [pc, #292]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800419e:	4b49      	ldr	r3, [pc, #292]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a0:	e001      	b.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4944      	ldr	r1, [pc, #272]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ae:	428b      	cmp	r3, r1
 80041b0:	d101      	bne.n	80041b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041b2:	4b44      	ldr	r3, [pc, #272]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041b4:	e001      	b.n	80041ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041be:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff fdf6 	bl	8003dd4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041e8:	e089      	b.n	80042fe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d107      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f8be 	bl	8004380 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8fd 	bl	8004418 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b40      	cmp	r3, #64	; 0x40
 8004226:	d12f      	bne.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02a      	beq.n	8004288 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004240:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800424e:	e001      	b.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4919      	ldr	r1, [pc, #100]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800425c:	428b      	cmp	r3, r1
 800425e:	d101      	bne.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004260:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004262:	e001      	b.n	8004268 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800426c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	f043 0202 	orr.w	r2, r3, #2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fda6 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b08      	cmp	r3, #8
 8004290:	d136      	bne.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d031      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d101      	bne.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042a6:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a8:	e001      	b.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4902      	ldr	r1, [pc, #8]	; (80042c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d106      	bne.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042ba:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042bc:	e006      	b.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042be:	bf00      	nop
 80042c0:	40003800 	.word	0x40003800
 80042c4:	40003400 	.word	0x40003400
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fd6c 	bl	8003dd4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042fc:	e000      	b.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042fe:	bf00      	nop
}
 8004300:	bf00      	nop
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	1c99      	adds	r1, r3, #2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6251      	str	r1, [r2, #36]	; 0x24
 800432e:	881a      	ldrh	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800435c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ffc9 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c99      	adds	r1, r3, #2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6251      	str	r1, [r2, #36]	; 0x24
 8004392:	8819      	ldrh	r1, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <I2SEx_TxISR_I2SExt+0x22>
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043a0:	e001      	b.n	80043a6 <I2SEx_TxISR_I2SExt+0x26>
 80043a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043a6:	460a      	mov	r2, r1
 80043a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d101      	bne.n	80043d0 <I2SEx_TxISR_I2SExt+0x50>
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043ce:	e001      	b.n	80043d4 <I2SEx_TxISR_I2SExt+0x54>
 80043d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	490d      	ldr	r1, [pc, #52]	; (8004410 <I2SEx_TxISR_I2SExt+0x90>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d101      	bne.n	80043e4 <I2SEx_TxISR_I2SExt+0x64>
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <I2SEx_TxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_TxISR_I2SExt+0x68>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff81 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40003800 	.word	0x40003800
 8004414:	40003400 	.word	0x40003400

08004418 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68d8      	ldr	r0, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	1c99      	adds	r1, r3, #2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004430:	b282      	uxth	r2, r0
 8004432:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	d113      	bne.n	8004474 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800445a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff4a 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <I2SEx_RxISR_I2SExt+0x16>
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 8004490:	e001      	b.n	8004496 <I2SEx_RxISR_I2SExt+0x1a>
 8004492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004496:	68d8      	ldr	r0, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	1c99      	adds	r1, r3, #2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044a2:	b282      	uxth	r2, r0
 80044a4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a12      	ldr	r2, [pc, #72]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d101      	bne.n	80044cc <I2SEx_RxISR_I2SExt+0x50>
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 80044ca:	e001      	b.n	80044d0 <I2SEx_RxISR_I2SExt+0x54>
 80044cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	490d      	ldr	r1, [pc, #52]	; (800450c <I2SEx_RxISR_I2SExt+0x90>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d101      	bne.n	80044e0 <I2SEx_RxISR_I2SExt+0x64>
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <I2SEx_RxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_RxISR_I2SExt+0x68>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff03 	bl	8004308 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40003800 	.word	0x40003800
 8004510:	40003400 	.word	0x40003400

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fd ff70 	bl	80024b0 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fd ff6c 	bl	80024b0 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fd ff5c 	bl	80024b0 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fd ff58 	bl	80024b0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd ff11 	bl	80024b0 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd ff0d 	bl	80024b0 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fef0 	bl	80024b0 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fd feec 	bl	80024b0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fd fed0 	bl	80024b0 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fd fecc 	bl	80024b0 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fd feb9 	bl	80024b0 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fd feb5 	bl	80024b0 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fd fe75 	bl	80024b0 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd fe71 	bl	80024b0 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd fe36 	bl	80024b0 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fd fe32 	bl	80024b0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fd fe20 	bl	80024b0 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fd fe1c 	bl	80024b0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fd fdf0 	bl	80024b0 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd fdec 	bl	80024b0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd fdc5 	bl	80024b0 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd fdc1 	bl	80024b0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd fdae 	bl	80024b0 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fdaa 	bl	80024b0 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fd fcdc 	bl	80024b0 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd fcd8 	bl	80024b0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fd fc3c 	bl	8002428 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	080061c8 	.word	0x080061c8
 8004bc8:	20000008 	.word	0x20000008
 8004bcc:	2000000c 	.word	0x2000000c

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb ff48 	bl	8000b74 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb feee 	bl	8000b74 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000008 	.word	0x20000008

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	080061d8 	.word	0x080061d8

08004e1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d038      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e44:	4b68      	ldr	r3, [pc, #416]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e4a:	f7fd fb31 	bl	80024b0 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e50:	e008      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e52:	f7fd fb2d 	bl	80024b0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0bd      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e64:	4b61      	ldr	r3, [pc, #388]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f0      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	019b      	lsls	r3, r3, #6
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	071b      	lsls	r3, r3, #28
 8004e82:	495a      	ldr	r1, [pc, #360]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e8a:	4b57      	ldr	r3, [pc, #348]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fd fb0e 	bl	80024b0 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e96:	e008      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e98:	f7fd fb0a 	bl	80024b0 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e09a      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004eaa:	4b50      	ldr	r3, [pc, #320]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8083 	beq.w	8004fca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	4b48      	ldr	r3, [pc, #288]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	4a47      	ldr	r2, [pc, #284]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed4:	4b45      	ldr	r3, [pc, #276]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ee0:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a42      	ldr	r2, [pc, #264]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004eec:	f7fd fae0 	bl	80024b0 <HAL_GetTick>
 8004ef0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ef4:	f7fd fadc 	bl	80024b0 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e06c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f06:	4b3a      	ldr	r3, [pc, #232]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f12:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02f      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d028      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f30:	4b2e      	ldr	r3, [pc, #184]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f40:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f46:	4a29      	ldr	r2, [pc, #164]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f4c:	4b27      	ldr	r3, [pc, #156]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d114      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fd faaa 	bl	80024b0 <HAL_GetTick>
 8004f5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fd faa6 	bl	80024b0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e034      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b1d      	ldr	r3, [pc, #116]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f90:	4b16      	ldr	r3, [pc, #88]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa4:	4911      	ldr	r1, [pc, #68]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
 8004faa:	e005      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fb6:	6093      	str	r3, [r2, #8]
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc4:	4909      	ldr	r1, [pc, #36]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7d1a      	ldrb	r2, [r3, #20]
 8004fda:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fdc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	42470068 	.word	0x42470068
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42470e40 	.word	0x42470e40
 8004ff8:	424711e0 	.word	0x424711e0

08004ffc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d140      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800501a:	4b24      	ldr	r3, [pc, #144]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d131      	bne.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005030:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005032:	617b      	str	r3, [r7, #20]
          break;
 8005034:	e031      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005036:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005042:	d109      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504e:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	613b      	str	r3, [r7, #16]
 8005056:	e008      	b.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005058:	4b14      	ldr	r3, [pc, #80]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005064:	fbb2 f3f3 	udiv	r3, r2, r3
 8005068:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005070:	099b      	lsrs	r3, r3, #6
 8005072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800507e:	4b0b      	ldr	r3, [pc, #44]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	617b      	str	r3, [r7, #20]
          break;
 8005092:	e002      	b.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	617b      	str	r3, [r7, #20]
          break;
 8005098:	bf00      	nop
        }
      }
      break;
 800509a:	bf00      	nop
    }
  }
  return frequency;
 800509c:	697b      	ldr	r3, [r7, #20]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40023800 	.word	0x40023800
 80050b0:	00bb8000 	.word	0x00bb8000
 80050b4:	007a1200 	.word	0x007a1200
 80050b8:	00f42400 	.word	0x00f42400

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4d0d      	ldr	r5, [pc, #52]	; (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1b64      	subs	r4, r4, r5
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2600      	movs	r6, #0
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4d0b      	ldr	r5, [pc, #44]	; (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	; (8005100 <__libc_init_array+0x44>)
 80050d0:	f001 f86c 	bl	80061ac <_init>
 80050d4:	1b64      	subs	r4, r4, r5
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2600      	movs	r6, #0
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	080063c8 	.word	0x080063c8
 80050f8:	080063c8 	.word	0x080063c8
 80050fc:	080063c8 	.word	0x080063c8
 8005100:	080063cc 	.word	0x080063cc

08005104 <memset>:
 8005104:	4402      	add	r2, r0
 8005106:	4603      	mov	r3, r0
 8005108:	4293      	cmp	r3, r2
 800510a:	d100      	bne.n	800510e <memset+0xa>
 800510c:	4770      	bx	lr
 800510e:	f803 1b01 	strb.w	r1, [r3], #1
 8005112:	e7f9      	b.n	8005108 <memset+0x4>
 8005114:	0000      	movs	r0, r0
	...

08005118 <sin>:
 8005118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800511a:	ec53 2b10 	vmov	r2, r3, d0
 800511e:	4828      	ldr	r0, [pc, #160]	; (80051c0 <sin+0xa8>)
 8005120:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005124:	4281      	cmp	r1, r0
 8005126:	dc07      	bgt.n	8005138 <sin+0x20>
 8005128:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80051b8 <sin+0xa0>
 800512c:	2000      	movs	r0, #0
 800512e:	b005      	add	sp, #20
 8005130:	f85d eb04 	ldr.w	lr, [sp], #4
 8005134:	f000 be6c 	b.w	8005e10 <__kernel_sin>
 8005138:	4822      	ldr	r0, [pc, #136]	; (80051c4 <sin+0xac>)
 800513a:	4281      	cmp	r1, r0
 800513c:	dd09      	ble.n	8005152 <sin+0x3a>
 800513e:	ee10 0a10 	vmov	r0, s0
 8005142:	4619      	mov	r1, r3
 8005144:	f7fb f84c 	bl	80001e0 <__aeabi_dsub>
 8005148:	ec41 0b10 	vmov	d0, r0, r1
 800514c:	b005      	add	sp, #20
 800514e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005152:	4668      	mov	r0, sp
 8005154:	f000 f838 	bl	80051c8 <__ieee754_rem_pio2>
 8005158:	f000 0003 	and.w	r0, r0, #3
 800515c:	2801      	cmp	r0, #1
 800515e:	d00c      	beq.n	800517a <sin+0x62>
 8005160:	2802      	cmp	r0, #2
 8005162:	d011      	beq.n	8005188 <sin+0x70>
 8005164:	b9f0      	cbnz	r0, 80051a4 <sin+0x8c>
 8005166:	ed9d 1b02 	vldr	d1, [sp, #8]
 800516a:	ed9d 0b00 	vldr	d0, [sp]
 800516e:	2001      	movs	r0, #1
 8005170:	f000 fe4e 	bl	8005e10 <__kernel_sin>
 8005174:	ec51 0b10 	vmov	r0, r1, d0
 8005178:	e7e6      	b.n	8005148 <sin+0x30>
 800517a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800517e:	ed9d 0b00 	vldr	d0, [sp]
 8005182:	f000 fa2d 	bl	80055e0 <__kernel_cos>
 8005186:	e7f5      	b.n	8005174 <sin+0x5c>
 8005188:	ed9d 1b02 	vldr	d1, [sp, #8]
 800518c:	ed9d 0b00 	vldr	d0, [sp]
 8005190:	2001      	movs	r0, #1
 8005192:	f000 fe3d 	bl	8005e10 <__kernel_sin>
 8005196:	ec53 2b10 	vmov	r2, r3, d0
 800519a:	ee10 0a10 	vmov	r0, s0
 800519e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051a2:	e7d1      	b.n	8005148 <sin+0x30>
 80051a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051a8:	ed9d 0b00 	vldr	d0, [sp]
 80051ac:	f000 fa18 	bl	80055e0 <__kernel_cos>
 80051b0:	e7f1      	b.n	8005196 <sin+0x7e>
 80051b2:	bf00      	nop
 80051b4:	f3af 8000 	nop.w
	...
 80051c0:	3fe921fb 	.word	0x3fe921fb
 80051c4:	7fefffff 	.word	0x7fefffff

080051c8 <__ieee754_rem_pio2>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	ed2d 8b02 	vpush	{d8}
 80051d0:	ec55 4b10 	vmov	r4, r5, d0
 80051d4:	4bca      	ldr	r3, [pc, #808]	; (8005500 <__ieee754_rem_pio2+0x338>)
 80051d6:	b08b      	sub	sp, #44	; 0x2c
 80051d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80051dc:	4598      	cmp	r8, r3
 80051de:	4682      	mov	sl, r0
 80051e0:	9502      	str	r5, [sp, #8]
 80051e2:	dc08      	bgt.n	80051f6 <__ieee754_rem_pio2+0x2e>
 80051e4:	2200      	movs	r2, #0
 80051e6:	2300      	movs	r3, #0
 80051e8:	ed80 0b00 	vstr	d0, [r0]
 80051ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80051f0:	f04f 0b00 	mov.w	fp, #0
 80051f4:	e028      	b.n	8005248 <__ieee754_rem_pio2+0x80>
 80051f6:	4bc3      	ldr	r3, [pc, #780]	; (8005504 <__ieee754_rem_pio2+0x33c>)
 80051f8:	4598      	cmp	r8, r3
 80051fa:	dc78      	bgt.n	80052ee <__ieee754_rem_pio2+0x126>
 80051fc:	9b02      	ldr	r3, [sp, #8]
 80051fe:	4ec2      	ldr	r6, [pc, #776]	; (8005508 <__ieee754_rem_pio2+0x340>)
 8005200:	2b00      	cmp	r3, #0
 8005202:	ee10 0a10 	vmov	r0, s0
 8005206:	a3b0      	add	r3, pc, #704	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x300>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	4629      	mov	r1, r5
 800520e:	dd39      	ble.n	8005284 <__ieee754_rem_pio2+0xbc>
 8005210:	f7fa ffe6 	bl	80001e0 <__aeabi_dsub>
 8005214:	45b0      	cmp	r8, r6
 8005216:	4604      	mov	r4, r0
 8005218:	460d      	mov	r5, r1
 800521a:	d01b      	beq.n	8005254 <__ieee754_rem_pio2+0x8c>
 800521c:	a3ac      	add	r3, pc, #688	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x308>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fa ffdd 	bl	80001e0 <__aeabi_dsub>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	e9ca 2300 	strd	r2, r3, [sl]
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fa ffd5 	bl	80001e0 <__aeabi_dsub>
 8005236:	a3a6      	add	r3, pc, #664	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x308>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fa ffd0 	bl	80001e0 <__aeabi_dsub>
 8005240:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005244:	f04f 0b01 	mov.w	fp, #1
 8005248:	4658      	mov	r0, fp
 800524a:	b00b      	add	sp, #44	; 0x2c
 800524c:	ecbd 8b02 	vpop	{d8}
 8005250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005254:	a3a0      	add	r3, pc, #640	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x310>)
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	f7fa ffc1 	bl	80001e0 <__aeabi_dsub>
 800525e:	a3a0      	add	r3, pc, #640	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x318>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	4604      	mov	r4, r0
 8005266:	460d      	mov	r5, r1
 8005268:	f7fa ffba 	bl	80001e0 <__aeabi_dsub>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	e9ca 2300 	strd	r2, r3, [sl]
 8005274:	4620      	mov	r0, r4
 8005276:	4629      	mov	r1, r5
 8005278:	f7fa ffb2 	bl	80001e0 <__aeabi_dsub>
 800527c:	a398      	add	r3, pc, #608	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x318>)
 800527e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005282:	e7db      	b.n	800523c <__ieee754_rem_pio2+0x74>
 8005284:	f7fa ffae 	bl	80001e4 <__adddf3>
 8005288:	45b0      	cmp	r8, r6
 800528a:	4604      	mov	r4, r0
 800528c:	460d      	mov	r5, r1
 800528e:	d016      	beq.n	80052be <__ieee754_rem_pio2+0xf6>
 8005290:	a38f      	add	r3, pc, #572	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x308>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fa ffa5 	bl	80001e4 <__adddf3>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	e9ca 2300 	strd	r2, r3, [sl]
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fa ff9b 	bl	80001e0 <__aeabi_dsub>
 80052aa:	a389      	add	r3, pc, #548	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x308>)
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f7fa ff98 	bl	80001e4 <__adddf3>
 80052b4:	f04f 3bff 	mov.w	fp, #4294967295
 80052b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80052bc:	e7c4      	b.n	8005248 <__ieee754_rem_pio2+0x80>
 80052be:	a386      	add	r3, pc, #536	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x310>)
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f7fa ff8e 	bl	80001e4 <__adddf3>
 80052c8:	a385      	add	r3, pc, #532	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x318>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	f7fa ff87 	bl	80001e4 <__adddf3>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	e9ca 2300 	strd	r2, r3, [sl]
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fa ff7d 	bl	80001e0 <__aeabi_dsub>
 80052e6:	a37e      	add	r3, pc, #504	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x318>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	e7e0      	b.n	80052b0 <__ieee754_rem_pio2+0xe8>
 80052ee:	4b87      	ldr	r3, [pc, #540]	; (800550c <__ieee754_rem_pio2+0x344>)
 80052f0:	4598      	cmp	r8, r3
 80052f2:	f300 80d9 	bgt.w	80054a8 <__ieee754_rem_pio2+0x2e0>
 80052f6:	f000 fe49 	bl	8005f8c <fabs>
 80052fa:	ec55 4b10 	vmov	r4, r5, d0
 80052fe:	ee10 0a10 	vmov	r0, s0
 8005302:	a379      	add	r3, pc, #484	; (adr r3, 80054e8 <__ieee754_rem_pio2+0x320>)
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	4629      	mov	r1, r5
 800530a:	f7fb f921 	bl	8000550 <__aeabi_dmul>
 800530e:	4b80      	ldr	r3, [pc, #512]	; (8005510 <__ieee754_rem_pio2+0x348>)
 8005310:	2200      	movs	r2, #0
 8005312:	f7fa ff67 	bl	80001e4 <__adddf3>
 8005316:	f7fb fbb5 	bl	8000a84 <__aeabi_d2iz>
 800531a:	4683      	mov	fp, r0
 800531c:	f7fb f8ae 	bl	800047c <__aeabi_i2d>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	ec43 2b18 	vmov	d8, r2, r3
 8005328:	a367      	add	r3, pc, #412	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x300>)
 800532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532e:	f7fb f90f 	bl	8000550 <__aeabi_dmul>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fa ff51 	bl	80001e0 <__aeabi_dsub>
 800533e:	a364      	add	r3, pc, #400	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x308>)
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	ec51 0b18 	vmov	r0, r1, d8
 800534c:	f7fb f900 	bl	8000550 <__aeabi_dmul>
 8005350:	f1bb 0f1f 	cmp.w	fp, #31
 8005354:	4604      	mov	r4, r0
 8005356:	460d      	mov	r5, r1
 8005358:	dc0d      	bgt.n	8005376 <__ieee754_rem_pio2+0x1ae>
 800535a:	4b6e      	ldr	r3, [pc, #440]	; (8005514 <__ieee754_rem_pio2+0x34c>)
 800535c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005364:	4543      	cmp	r3, r8
 8005366:	d006      	beq.n	8005376 <__ieee754_rem_pio2+0x1ae>
 8005368:	4622      	mov	r2, r4
 800536a:	462b      	mov	r3, r5
 800536c:	4630      	mov	r0, r6
 800536e:	4639      	mov	r1, r7
 8005370:	f7fa ff36 	bl	80001e0 <__aeabi_dsub>
 8005374:	e00f      	b.n	8005396 <__ieee754_rem_pio2+0x1ce>
 8005376:	462b      	mov	r3, r5
 8005378:	4622      	mov	r2, r4
 800537a:	4630      	mov	r0, r6
 800537c:	4639      	mov	r1, r7
 800537e:	f7fa ff2f 	bl	80001e0 <__aeabi_dsub>
 8005382:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800538c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005390:	f1b8 0f10 	cmp.w	r8, #16
 8005394:	dc02      	bgt.n	800539c <__ieee754_rem_pio2+0x1d4>
 8005396:	e9ca 0100 	strd	r0, r1, [sl]
 800539a:	e039      	b.n	8005410 <__ieee754_rem_pio2+0x248>
 800539c:	a34e      	add	r3, pc, #312	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x310>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	ec51 0b18 	vmov	r0, r1, d8
 80053a6:	f7fb f8d3 	bl	8000550 <__aeabi_dmul>
 80053aa:	4604      	mov	r4, r0
 80053ac:	460d      	mov	r5, r1
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	f7fa ff13 	bl	80001e0 <__aeabi_dsub>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	4680      	mov	r8, r0
 80053c0:	4689      	mov	r9, r1
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	f7fa ff0b 	bl	80001e0 <__aeabi_dsub>
 80053ca:	4622      	mov	r2, r4
 80053cc:	462b      	mov	r3, r5
 80053ce:	f7fa ff07 	bl	80001e0 <__aeabi_dsub>
 80053d2:	a343      	add	r3, pc, #268	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x318>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	4604      	mov	r4, r0
 80053da:	460d      	mov	r5, r1
 80053dc:	ec51 0b18 	vmov	r0, r1, d8
 80053e0:	f7fb f8b6 	bl	8000550 <__aeabi_dmul>
 80053e4:	4622      	mov	r2, r4
 80053e6:	462b      	mov	r3, r5
 80053e8:	f7fa fefa 	bl	80001e0 <__aeabi_dsub>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fa fef2 	bl	80001e0 <__aeabi_dsub>
 80053fc:	9a03      	ldr	r2, [sp, #12]
 80053fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b31      	cmp	r3, #49	; 0x31
 8005406:	dc24      	bgt.n	8005452 <__ieee754_rem_pio2+0x28a>
 8005408:	e9ca 0100 	strd	r0, r1, [sl]
 800540c:	4646      	mov	r6, r8
 800540e:	464f      	mov	r7, r9
 8005410:	e9da 8900 	ldrd	r8, r9, [sl]
 8005414:	4630      	mov	r0, r6
 8005416:	4642      	mov	r2, r8
 8005418:	464b      	mov	r3, r9
 800541a:	4639      	mov	r1, r7
 800541c:	f7fa fee0 	bl	80001e0 <__aeabi_dsub>
 8005420:	462b      	mov	r3, r5
 8005422:	4622      	mov	r2, r4
 8005424:	f7fa fedc 	bl	80001e0 <__aeabi_dsub>
 8005428:	9b02      	ldr	r3, [sp, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005430:	f6bf af0a 	bge.w	8005248 <__ieee754_rem_pio2+0x80>
 8005434:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005438:	f8ca 3004 	str.w	r3, [sl, #4]
 800543c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005440:	f8ca 8000 	str.w	r8, [sl]
 8005444:	f8ca 0008 	str.w	r0, [sl, #8]
 8005448:	f8ca 300c 	str.w	r3, [sl, #12]
 800544c:	f1cb 0b00 	rsb	fp, fp, #0
 8005450:	e6fa      	b.n	8005248 <__ieee754_rem_pio2+0x80>
 8005452:	a327      	add	r3, pc, #156	; (adr r3, 80054f0 <__ieee754_rem_pio2+0x328>)
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	ec51 0b18 	vmov	r0, r1, d8
 800545c:	f7fb f878 	bl	8000550 <__aeabi_dmul>
 8005460:	4604      	mov	r4, r0
 8005462:	460d      	mov	r5, r1
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4640      	mov	r0, r8
 800546a:	4649      	mov	r1, r9
 800546c:	f7fa feb8 	bl	80001e0 <__aeabi_dsub>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	4640      	mov	r0, r8
 800547a:	4649      	mov	r1, r9
 800547c:	f7fa feb0 	bl	80001e0 <__aeabi_dsub>
 8005480:	4622      	mov	r2, r4
 8005482:	462b      	mov	r3, r5
 8005484:	f7fa feac 	bl	80001e0 <__aeabi_dsub>
 8005488:	a31b      	add	r3, pc, #108	; (adr r3, 80054f8 <__ieee754_rem_pio2+0x330>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	4604      	mov	r4, r0
 8005490:	460d      	mov	r5, r1
 8005492:	ec51 0b18 	vmov	r0, r1, d8
 8005496:	f7fb f85b 	bl	8000550 <__aeabi_dmul>
 800549a:	4622      	mov	r2, r4
 800549c:	462b      	mov	r3, r5
 800549e:	f7fa fe9f 	bl	80001e0 <__aeabi_dsub>
 80054a2:	4604      	mov	r4, r0
 80054a4:	460d      	mov	r5, r1
 80054a6:	e75f      	b.n	8005368 <__ieee754_rem_pio2+0x1a0>
 80054a8:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <__ieee754_rem_pio2+0x350>)
 80054aa:	4598      	cmp	r8, r3
 80054ac:	dd36      	ble.n	800551c <__ieee754_rem_pio2+0x354>
 80054ae:	ee10 2a10 	vmov	r2, s0
 80054b2:	462b      	mov	r3, r5
 80054b4:	4620      	mov	r0, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	f7fa fe92 	bl	80001e0 <__aeabi_dsub>
 80054bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80054c0:	e9ca 0100 	strd	r0, r1, [sl]
 80054c4:	e694      	b.n	80051f0 <__ieee754_rem_pio2+0x28>
 80054c6:	bf00      	nop
 80054c8:	54400000 	.word	0x54400000
 80054cc:	3ff921fb 	.word	0x3ff921fb
 80054d0:	1a626331 	.word	0x1a626331
 80054d4:	3dd0b461 	.word	0x3dd0b461
 80054d8:	1a600000 	.word	0x1a600000
 80054dc:	3dd0b461 	.word	0x3dd0b461
 80054e0:	2e037073 	.word	0x2e037073
 80054e4:	3ba3198a 	.word	0x3ba3198a
 80054e8:	6dc9c883 	.word	0x6dc9c883
 80054ec:	3fe45f30 	.word	0x3fe45f30
 80054f0:	2e000000 	.word	0x2e000000
 80054f4:	3ba3198a 	.word	0x3ba3198a
 80054f8:	252049c1 	.word	0x252049c1
 80054fc:	397b839a 	.word	0x397b839a
 8005500:	3fe921fb 	.word	0x3fe921fb
 8005504:	4002d97b 	.word	0x4002d97b
 8005508:	3ff921fb 	.word	0x3ff921fb
 800550c:	413921fb 	.word	0x413921fb
 8005510:	3fe00000 	.word	0x3fe00000
 8005514:	080061e8 	.word	0x080061e8
 8005518:	7fefffff 	.word	0x7fefffff
 800551c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005520:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005524:	ee10 0a10 	vmov	r0, s0
 8005528:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800552c:	ee10 6a10 	vmov	r6, s0
 8005530:	460f      	mov	r7, r1
 8005532:	f7fb faa7 	bl	8000a84 <__aeabi_d2iz>
 8005536:	f7fa ffa1 	bl	800047c <__aeabi_i2d>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	4630      	mov	r0, r6
 8005540:	4639      	mov	r1, r7
 8005542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005546:	f7fa fe4b 	bl	80001e0 <__aeabi_dsub>
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <__ieee754_rem_pio2+0x410>)
 800554c:	2200      	movs	r2, #0
 800554e:	f7fa ffff 	bl	8000550 <__aeabi_dmul>
 8005552:	460f      	mov	r7, r1
 8005554:	4606      	mov	r6, r0
 8005556:	f7fb fa95 	bl	8000a84 <__aeabi_d2iz>
 800555a:	f7fa ff8f 	bl	800047c <__aeabi_i2d>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4630      	mov	r0, r6
 8005564:	4639      	mov	r1, r7
 8005566:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800556a:	f7fa fe39 	bl	80001e0 <__aeabi_dsub>
 800556e:	4b1a      	ldr	r3, [pc, #104]	; (80055d8 <__ieee754_rem_pio2+0x410>)
 8005570:	2200      	movs	r2, #0
 8005572:	f7fa ffed 	bl	8000550 <__aeabi_dmul>
 8005576:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800557a:	ad04      	add	r5, sp, #16
 800557c:	f04f 0803 	mov.w	r8, #3
 8005580:	46a9      	mov	r9, r5
 8005582:	2600      	movs	r6, #0
 8005584:	2700      	movs	r7, #0
 8005586:	4632      	mov	r2, r6
 8005588:	463b      	mov	r3, r7
 800558a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800558e:	46c3      	mov	fp, r8
 8005590:	3d08      	subs	r5, #8
 8005592:	f108 38ff 	add.w	r8, r8, #4294967295
 8005596:	f7fb fa43 	bl	8000a20 <__aeabi_dcmpeq>
 800559a:	2800      	cmp	r0, #0
 800559c:	d1f3      	bne.n	8005586 <__ieee754_rem_pio2+0x3be>
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <__ieee754_rem_pio2+0x414>)
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2302      	movs	r3, #2
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4622      	mov	r2, r4
 80055a8:	465b      	mov	r3, fp
 80055aa:	4651      	mov	r1, sl
 80055ac:	4648      	mov	r0, r9
 80055ae:	f000 f8df 	bl	8005770 <__kernel_rem_pio2>
 80055b2:	9b02      	ldr	r3, [sp, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	4683      	mov	fp, r0
 80055b8:	f6bf ae46 	bge.w	8005248 <__ieee754_rem_pio2+0x80>
 80055bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80055c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055c4:	e9ca 2300 	strd	r2, r3, [sl]
 80055c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80055cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80055d4:	e73a      	b.n	800544c <__ieee754_rem_pio2+0x284>
 80055d6:	bf00      	nop
 80055d8:	41700000 	.word	0x41700000
 80055dc:	08006268 	.word	0x08006268

080055e0 <__kernel_cos>:
 80055e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e4:	ec57 6b10 	vmov	r6, r7, d0
 80055e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80055ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80055f0:	ed8d 1b00 	vstr	d1, [sp]
 80055f4:	da07      	bge.n	8005606 <__kernel_cos+0x26>
 80055f6:	ee10 0a10 	vmov	r0, s0
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fb fa42 	bl	8000a84 <__aeabi_d2iz>
 8005600:	2800      	cmp	r0, #0
 8005602:	f000 8088 	beq.w	8005716 <__kernel_cos+0x136>
 8005606:	4632      	mov	r2, r6
 8005608:	463b      	mov	r3, r7
 800560a:	4630      	mov	r0, r6
 800560c:	4639      	mov	r1, r7
 800560e:	f7fa ff9f 	bl	8000550 <__aeabi_dmul>
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <__kernel_cos+0x178>)
 8005614:	2200      	movs	r2, #0
 8005616:	4604      	mov	r4, r0
 8005618:	460d      	mov	r5, r1
 800561a:	f7fa ff99 	bl	8000550 <__aeabi_dmul>
 800561e:	a340      	add	r3, pc, #256	; (adr r3, 8005720 <__kernel_cos+0x140>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	4682      	mov	sl, r0
 8005626:	468b      	mov	fp, r1
 8005628:	4620      	mov	r0, r4
 800562a:	4629      	mov	r1, r5
 800562c:	f7fa ff90 	bl	8000550 <__aeabi_dmul>
 8005630:	a33d      	add	r3, pc, #244	; (adr r3, 8005728 <__kernel_cos+0x148>)
 8005632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005636:	f7fa fdd5 	bl	80001e4 <__adddf3>
 800563a:	4622      	mov	r2, r4
 800563c:	462b      	mov	r3, r5
 800563e:	f7fa ff87 	bl	8000550 <__aeabi_dmul>
 8005642:	a33b      	add	r3, pc, #236	; (adr r3, 8005730 <__kernel_cos+0x150>)
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	f7fa fdca 	bl	80001e0 <__aeabi_dsub>
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	f7fa ff7e 	bl	8000550 <__aeabi_dmul>
 8005654:	a338      	add	r3, pc, #224	; (adr r3, 8005738 <__kernel_cos+0x158>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fdc3 	bl	80001e4 <__adddf3>
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	f7fa ff75 	bl	8000550 <__aeabi_dmul>
 8005666:	a336      	add	r3, pc, #216	; (adr r3, 8005740 <__kernel_cos+0x160>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa fdb8 	bl	80001e0 <__aeabi_dsub>
 8005670:	4622      	mov	r2, r4
 8005672:	462b      	mov	r3, r5
 8005674:	f7fa ff6c 	bl	8000550 <__aeabi_dmul>
 8005678:	a333      	add	r3, pc, #204	; (adr r3, 8005748 <__kernel_cos+0x168>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa fdb1 	bl	80001e4 <__adddf3>
 8005682:	4622      	mov	r2, r4
 8005684:	462b      	mov	r3, r5
 8005686:	f7fa ff63 	bl	8000550 <__aeabi_dmul>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	f7fa ff5f 	bl	8000550 <__aeabi_dmul>
 8005692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005696:	4604      	mov	r4, r0
 8005698:	460d      	mov	r5, r1
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	f7fa ff57 	bl	8000550 <__aeabi_dmul>
 80056a2:	460b      	mov	r3, r1
 80056a4:	4602      	mov	r2, r0
 80056a6:	4629      	mov	r1, r5
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7fa fd99 	bl	80001e0 <__aeabi_dsub>
 80056ae:	4b2b      	ldr	r3, [pc, #172]	; (800575c <__kernel_cos+0x17c>)
 80056b0:	4598      	cmp	r8, r3
 80056b2:	4606      	mov	r6, r0
 80056b4:	460f      	mov	r7, r1
 80056b6:	dc10      	bgt.n	80056da <__kernel_cos+0xfa>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4650      	mov	r0, sl
 80056be:	4659      	mov	r1, fp
 80056c0:	f7fa fd8e 	bl	80001e0 <__aeabi_dsub>
 80056c4:	460b      	mov	r3, r1
 80056c6:	4926      	ldr	r1, [pc, #152]	; (8005760 <__kernel_cos+0x180>)
 80056c8:	4602      	mov	r2, r0
 80056ca:	2000      	movs	r0, #0
 80056cc:	f7fa fd88 	bl	80001e0 <__aeabi_dsub>
 80056d0:	ec41 0b10 	vmov	d0, r0, r1
 80056d4:	b003      	add	sp, #12
 80056d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056da:	4b22      	ldr	r3, [pc, #136]	; (8005764 <__kernel_cos+0x184>)
 80056dc:	4920      	ldr	r1, [pc, #128]	; (8005760 <__kernel_cos+0x180>)
 80056de:	4598      	cmp	r8, r3
 80056e0:	bfcc      	ite	gt
 80056e2:	4d21      	ldrgt	r5, [pc, #132]	; (8005768 <__kernel_cos+0x188>)
 80056e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80056e8:	2400      	movs	r4, #0
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	2000      	movs	r0, #0
 80056f0:	f7fa fd76 	bl	80001e0 <__aeabi_dsub>
 80056f4:	4622      	mov	r2, r4
 80056f6:	4680      	mov	r8, r0
 80056f8:	4689      	mov	r9, r1
 80056fa:	462b      	mov	r3, r5
 80056fc:	4650      	mov	r0, sl
 80056fe:	4659      	mov	r1, fp
 8005700:	f7fa fd6e 	bl	80001e0 <__aeabi_dsub>
 8005704:	4632      	mov	r2, r6
 8005706:	463b      	mov	r3, r7
 8005708:	f7fa fd6a 	bl	80001e0 <__aeabi_dsub>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4640      	mov	r0, r8
 8005712:	4649      	mov	r1, r9
 8005714:	e7da      	b.n	80056cc <__kernel_cos+0xec>
 8005716:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005750 <__kernel_cos+0x170>
 800571a:	e7db      	b.n	80056d4 <__kernel_cos+0xf4>
 800571c:	f3af 8000 	nop.w
 8005720:	be8838d4 	.word	0xbe8838d4
 8005724:	bda8fae9 	.word	0xbda8fae9
 8005728:	bdb4b1c4 	.word	0xbdb4b1c4
 800572c:	3e21ee9e 	.word	0x3e21ee9e
 8005730:	809c52ad 	.word	0x809c52ad
 8005734:	3e927e4f 	.word	0x3e927e4f
 8005738:	19cb1590 	.word	0x19cb1590
 800573c:	3efa01a0 	.word	0x3efa01a0
 8005740:	16c15177 	.word	0x16c15177
 8005744:	3f56c16c 	.word	0x3f56c16c
 8005748:	5555554c 	.word	0x5555554c
 800574c:	3fa55555 	.word	0x3fa55555
 8005750:	00000000 	.word	0x00000000
 8005754:	3ff00000 	.word	0x3ff00000
 8005758:	3fe00000 	.word	0x3fe00000
 800575c:	3fd33332 	.word	0x3fd33332
 8005760:	3ff00000 	.word	0x3ff00000
 8005764:	3fe90000 	.word	0x3fe90000
 8005768:	3fd20000 	.word	0x3fd20000
 800576c:	00000000 	.word	0x00000000

08005770 <__kernel_rem_pio2>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	ed2d 8b02 	vpush	{d8}
 8005778:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800577c:	f112 0f14 	cmn.w	r2, #20
 8005780:	9308      	str	r3, [sp, #32]
 8005782:	9101      	str	r1, [sp, #4]
 8005784:	4bc4      	ldr	r3, [pc, #784]	; (8005a98 <__kernel_rem_pio2+0x328>)
 8005786:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005788:	900b      	str	r0, [sp, #44]	; 0x2c
 800578a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800578e:	9302      	str	r3, [sp, #8]
 8005790:	9b08      	ldr	r3, [sp, #32]
 8005792:	f103 33ff 	add.w	r3, r3, #4294967295
 8005796:	bfa8      	it	ge
 8005798:	1ed4      	subge	r4, r2, #3
 800579a:	9306      	str	r3, [sp, #24]
 800579c:	bfb2      	itee	lt
 800579e:	2400      	movlt	r4, #0
 80057a0:	2318      	movge	r3, #24
 80057a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80057a6:	f06f 0317 	mvn.w	r3, #23
 80057aa:	fb04 3303 	mla	r3, r4, r3, r3
 80057ae:	eb03 0a02 	add.w	sl, r3, r2
 80057b2:	9b02      	ldr	r3, [sp, #8]
 80057b4:	9a06      	ldr	r2, [sp, #24]
 80057b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005a88 <__kernel_rem_pio2+0x318>
 80057ba:	eb03 0802 	add.w	r8, r3, r2
 80057be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80057c0:	1aa7      	subs	r7, r4, r2
 80057c2:	ae22      	add	r6, sp, #136	; 0x88
 80057c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80057c8:	2500      	movs	r5, #0
 80057ca:	4545      	cmp	r5, r8
 80057cc:	dd13      	ble.n	80057f6 <__kernel_rem_pio2+0x86>
 80057ce:	9b08      	ldr	r3, [sp, #32]
 80057d0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005a88 <__kernel_rem_pio2+0x318>
 80057d4:	aa22      	add	r2, sp, #136	; 0x88
 80057d6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80057da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80057de:	f04f 0800 	mov.w	r8, #0
 80057e2:	9b02      	ldr	r3, [sp, #8]
 80057e4:	4598      	cmp	r8, r3
 80057e6:	dc2f      	bgt.n	8005848 <__kernel_rem_pio2+0xd8>
 80057e8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80057ec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80057f0:	462f      	mov	r7, r5
 80057f2:	2600      	movs	r6, #0
 80057f4:	e01b      	b.n	800582e <__kernel_rem_pio2+0xbe>
 80057f6:	42ef      	cmn	r7, r5
 80057f8:	d407      	bmi.n	800580a <__kernel_rem_pio2+0x9a>
 80057fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80057fe:	f7fa fe3d 	bl	800047c <__aeabi_i2d>
 8005802:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005806:	3501      	adds	r5, #1
 8005808:	e7df      	b.n	80057ca <__kernel_rem_pio2+0x5a>
 800580a:	ec51 0b18 	vmov	r0, r1, d8
 800580e:	e7f8      	b.n	8005802 <__kernel_rem_pio2+0x92>
 8005810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005814:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005818:	f7fa fe9a 	bl	8000550 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005824:	f7fa fcde 	bl	80001e4 <__adddf3>
 8005828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800582c:	3601      	adds	r6, #1
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	429e      	cmp	r6, r3
 8005832:	f1a7 0708 	sub.w	r7, r7, #8
 8005836:	ddeb      	ble.n	8005810 <__kernel_rem_pio2+0xa0>
 8005838:	ed9d 7b04 	vldr	d7, [sp, #16]
 800583c:	f108 0801 	add.w	r8, r8, #1
 8005840:	ecab 7b02 	vstmia	fp!, {d7}
 8005844:	3508      	adds	r5, #8
 8005846:	e7cc      	b.n	80057e2 <__kernel_rem_pio2+0x72>
 8005848:	9b02      	ldr	r3, [sp, #8]
 800584a:	aa0e      	add	r2, sp, #56	; 0x38
 800584c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005850:	930d      	str	r3, [sp, #52]	; 0x34
 8005852:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005854:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005858:	9c02      	ldr	r4, [sp, #8]
 800585a:	930c      	str	r3, [sp, #48]	; 0x30
 800585c:	00e3      	lsls	r3, r4, #3
 800585e:	930a      	str	r3, [sp, #40]	; 0x28
 8005860:	ab9a      	add	r3, sp, #616	; 0x268
 8005862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005866:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800586a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800586e:	ab72      	add	r3, sp, #456	; 0x1c8
 8005870:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005874:	46c3      	mov	fp, r8
 8005876:	46a1      	mov	r9, r4
 8005878:	f1b9 0f00 	cmp.w	r9, #0
 800587c:	f1a5 0508 	sub.w	r5, r5, #8
 8005880:	dc77      	bgt.n	8005972 <__kernel_rem_pio2+0x202>
 8005882:	ec47 6b10 	vmov	d0, r6, r7
 8005886:	4650      	mov	r0, sl
 8005888:	f000 fc0a 	bl	80060a0 <scalbn>
 800588c:	ec57 6b10 	vmov	r6, r7, d0
 8005890:	2200      	movs	r2, #0
 8005892:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005896:	ee10 0a10 	vmov	r0, s0
 800589a:	4639      	mov	r1, r7
 800589c:	f7fa fe58 	bl	8000550 <__aeabi_dmul>
 80058a0:	ec41 0b10 	vmov	d0, r0, r1
 80058a4:	f000 fb7c 	bl	8005fa0 <floor>
 80058a8:	4b7c      	ldr	r3, [pc, #496]	; (8005a9c <__kernel_rem_pio2+0x32c>)
 80058aa:	ec51 0b10 	vmov	r0, r1, d0
 80058ae:	2200      	movs	r2, #0
 80058b0:	f7fa fe4e 	bl	8000550 <__aeabi_dmul>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fa fc90 	bl	80001e0 <__aeabi_dsub>
 80058c0:	460f      	mov	r7, r1
 80058c2:	4606      	mov	r6, r0
 80058c4:	f7fb f8de 	bl	8000a84 <__aeabi_d2iz>
 80058c8:	9004      	str	r0, [sp, #16]
 80058ca:	f7fa fdd7 	bl	800047c <__aeabi_i2d>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4630      	mov	r0, r6
 80058d4:	4639      	mov	r1, r7
 80058d6:	f7fa fc83 	bl	80001e0 <__aeabi_dsub>
 80058da:	f1ba 0f00 	cmp.w	sl, #0
 80058de:	4606      	mov	r6, r0
 80058e0:	460f      	mov	r7, r1
 80058e2:	dd6d      	ble.n	80059c0 <__kernel_rem_pio2+0x250>
 80058e4:	1e62      	subs	r2, r4, #1
 80058e6:	ab0e      	add	r3, sp, #56	; 0x38
 80058e8:	9d04      	ldr	r5, [sp, #16]
 80058ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80058ee:	f1ca 0118 	rsb	r1, sl, #24
 80058f2:	fa40 f301 	asr.w	r3, r0, r1
 80058f6:	441d      	add	r5, r3
 80058f8:	408b      	lsls	r3, r1
 80058fa:	1ac0      	subs	r0, r0, r3
 80058fc:	ab0e      	add	r3, sp, #56	; 0x38
 80058fe:	9504      	str	r5, [sp, #16]
 8005900:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005904:	f1ca 0317 	rsb	r3, sl, #23
 8005908:	fa40 fb03 	asr.w	fp, r0, r3
 800590c:	f1bb 0f00 	cmp.w	fp, #0
 8005910:	dd65      	ble.n	80059de <__kernel_rem_pio2+0x26e>
 8005912:	9b04      	ldr	r3, [sp, #16]
 8005914:	2200      	movs	r2, #0
 8005916:	3301      	adds	r3, #1
 8005918:	9304      	str	r3, [sp, #16]
 800591a:	4615      	mov	r5, r2
 800591c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005920:	4294      	cmp	r4, r2
 8005922:	f300 809c 	bgt.w	8005a5e <__kernel_rem_pio2+0x2ee>
 8005926:	f1ba 0f00 	cmp.w	sl, #0
 800592a:	dd07      	ble.n	800593c <__kernel_rem_pio2+0x1cc>
 800592c:	f1ba 0f01 	cmp.w	sl, #1
 8005930:	f000 80c0 	beq.w	8005ab4 <__kernel_rem_pio2+0x344>
 8005934:	f1ba 0f02 	cmp.w	sl, #2
 8005938:	f000 80c6 	beq.w	8005ac8 <__kernel_rem_pio2+0x358>
 800593c:	f1bb 0f02 	cmp.w	fp, #2
 8005940:	d14d      	bne.n	80059de <__kernel_rem_pio2+0x26e>
 8005942:	4632      	mov	r2, r6
 8005944:	463b      	mov	r3, r7
 8005946:	4956      	ldr	r1, [pc, #344]	; (8005aa0 <__kernel_rem_pio2+0x330>)
 8005948:	2000      	movs	r0, #0
 800594a:	f7fa fc49 	bl	80001e0 <__aeabi_dsub>
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	2d00      	cmp	r5, #0
 8005954:	d043      	beq.n	80059de <__kernel_rem_pio2+0x26e>
 8005956:	4650      	mov	r0, sl
 8005958:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005a90 <__kernel_rem_pio2+0x320>
 800595c:	f000 fba0 	bl	80060a0 <scalbn>
 8005960:	4630      	mov	r0, r6
 8005962:	4639      	mov	r1, r7
 8005964:	ec53 2b10 	vmov	r2, r3, d0
 8005968:	f7fa fc3a 	bl	80001e0 <__aeabi_dsub>
 800596c:	4606      	mov	r6, r0
 800596e:	460f      	mov	r7, r1
 8005970:	e035      	b.n	80059de <__kernel_rem_pio2+0x26e>
 8005972:	4b4c      	ldr	r3, [pc, #304]	; (8005aa4 <__kernel_rem_pio2+0x334>)
 8005974:	2200      	movs	r2, #0
 8005976:	4630      	mov	r0, r6
 8005978:	4639      	mov	r1, r7
 800597a:	f7fa fde9 	bl	8000550 <__aeabi_dmul>
 800597e:	f7fb f881 	bl	8000a84 <__aeabi_d2iz>
 8005982:	f7fa fd7b 	bl	800047c <__aeabi_i2d>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	ec43 2b18 	vmov	d8, r2, r3
 800598e:	4b46      	ldr	r3, [pc, #280]	; (8005aa8 <__kernel_rem_pio2+0x338>)
 8005990:	2200      	movs	r2, #0
 8005992:	f7fa fddd 	bl	8000550 <__aeabi_dmul>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4630      	mov	r0, r6
 800599c:	4639      	mov	r1, r7
 800599e:	f7fa fc1f 	bl	80001e0 <__aeabi_dsub>
 80059a2:	f7fb f86f 	bl	8000a84 <__aeabi_d2iz>
 80059a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059aa:	f84b 0b04 	str.w	r0, [fp], #4
 80059ae:	ec51 0b18 	vmov	r0, r1, d8
 80059b2:	f7fa fc17 	bl	80001e4 <__adddf3>
 80059b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80059ba:	4606      	mov	r6, r0
 80059bc:	460f      	mov	r7, r1
 80059be:	e75b      	b.n	8005878 <__kernel_rem_pio2+0x108>
 80059c0:	d106      	bne.n	80059d0 <__kernel_rem_pio2+0x260>
 80059c2:	1e63      	subs	r3, r4, #1
 80059c4:	aa0e      	add	r2, sp, #56	; 0x38
 80059c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80059ca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80059ce:	e79d      	b.n	800590c <__kernel_rem_pio2+0x19c>
 80059d0:	4b36      	ldr	r3, [pc, #216]	; (8005aac <__kernel_rem_pio2+0x33c>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	f7fb f842 	bl	8000a5c <__aeabi_dcmpge>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d13d      	bne.n	8005a58 <__kernel_rem_pio2+0x2e8>
 80059dc:	4683      	mov	fp, r0
 80059de:	2200      	movs	r2, #0
 80059e0:	2300      	movs	r3, #0
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	f7fb f81b 	bl	8000a20 <__aeabi_dcmpeq>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	f000 80c0 	beq.w	8005b70 <__kernel_rem_pio2+0x400>
 80059f0:	1e65      	subs	r5, r4, #1
 80059f2:	462b      	mov	r3, r5
 80059f4:	2200      	movs	r2, #0
 80059f6:	9902      	ldr	r1, [sp, #8]
 80059f8:	428b      	cmp	r3, r1
 80059fa:	da6c      	bge.n	8005ad6 <__kernel_rem_pio2+0x366>
 80059fc:	2a00      	cmp	r2, #0
 80059fe:	f000 8089 	beq.w	8005b14 <__kernel_rem_pio2+0x3a4>
 8005a02:	ab0e      	add	r3, sp, #56	; 0x38
 8005a04:	f1aa 0a18 	sub.w	sl, sl, #24
 8005a08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f000 80ad 	beq.w	8005b6c <__kernel_rem_pio2+0x3fc>
 8005a12:	4650      	mov	r0, sl
 8005a14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005a90 <__kernel_rem_pio2+0x320>
 8005a18:	f000 fb42 	bl	80060a0 <scalbn>
 8005a1c:	ab9a      	add	r3, sp, #616	; 0x268
 8005a1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005a22:	ec57 6b10 	vmov	r6, r7, d0
 8005a26:	00ec      	lsls	r4, r5, #3
 8005a28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005a2c:	46aa      	mov	sl, r5
 8005a2e:	f1ba 0f00 	cmp.w	sl, #0
 8005a32:	f280 80d6 	bge.w	8005be2 <__kernel_rem_pio2+0x472>
 8005a36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005a88 <__kernel_rem_pio2+0x318>
 8005a3a:	462e      	mov	r6, r5
 8005a3c:	2e00      	cmp	r6, #0
 8005a3e:	f2c0 8104 	blt.w	8005c4a <__kernel_rem_pio2+0x4da>
 8005a42:	ab72      	add	r3, sp, #456	; 0x1c8
 8005a44:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005a48:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005ab0 <__kernel_rem_pio2+0x340>
 8005a4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005a50:	f04f 0800 	mov.w	r8, #0
 8005a54:	1baf      	subs	r7, r5, r6
 8005a56:	e0ea      	b.n	8005c2e <__kernel_rem_pio2+0x4be>
 8005a58:	f04f 0b02 	mov.w	fp, #2
 8005a5c:	e759      	b.n	8005912 <__kernel_rem_pio2+0x1a2>
 8005a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a62:	b955      	cbnz	r5, 8005a7a <__kernel_rem_pio2+0x30a>
 8005a64:	b123      	cbz	r3, 8005a70 <__kernel_rem_pio2+0x300>
 8005a66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005a6a:	f8c8 3000 	str.w	r3, [r8]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	3201      	adds	r2, #1
 8005a72:	f108 0804 	add.w	r8, r8, #4
 8005a76:	461d      	mov	r5, r3
 8005a78:	e752      	b.n	8005920 <__kernel_rem_pio2+0x1b0>
 8005a7a:	1acb      	subs	r3, r1, r3
 8005a7c:	f8c8 3000 	str.w	r3, [r8]
 8005a80:	462b      	mov	r3, r5
 8005a82:	e7f5      	b.n	8005a70 <__kernel_rem_pio2+0x300>
 8005a84:	f3af 8000 	nop.w
	...
 8005a94:	3ff00000 	.word	0x3ff00000
 8005a98:	080063b0 	.word	0x080063b0
 8005a9c:	40200000 	.word	0x40200000
 8005aa0:	3ff00000 	.word	0x3ff00000
 8005aa4:	3e700000 	.word	0x3e700000
 8005aa8:	41700000 	.word	0x41700000
 8005aac:	3fe00000 	.word	0x3fe00000
 8005ab0:	08006370 	.word	0x08006370
 8005ab4:	1e62      	subs	r2, r4, #1
 8005ab6:	ab0e      	add	r3, sp, #56	; 0x38
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005ac0:	a90e      	add	r1, sp, #56	; 0x38
 8005ac2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005ac6:	e739      	b.n	800593c <__kernel_rem_pio2+0x1cc>
 8005ac8:	1e62      	subs	r2, r4, #1
 8005aca:	ab0e      	add	r3, sp, #56	; 0x38
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ad4:	e7f4      	b.n	8005ac0 <__kernel_rem_pio2+0x350>
 8005ad6:	a90e      	add	r1, sp, #56	; 0x38
 8005ad8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	e789      	b.n	80059f6 <__kernel_rem_pio2+0x286>
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	d0fa      	beq.n	8005ae2 <__kernel_rem_pio2+0x372>
 8005aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005af2:	446a      	add	r2, sp
 8005af4:	3a98      	subs	r2, #152	; 0x98
 8005af6:	920a      	str	r2, [sp, #40]	; 0x28
 8005af8:	9a08      	ldr	r2, [sp, #32]
 8005afa:	18e3      	adds	r3, r4, r3
 8005afc:	18a5      	adds	r5, r4, r2
 8005afe:	aa22      	add	r2, sp, #136	; 0x88
 8005b00:	f104 0801 	add.w	r8, r4, #1
 8005b04:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005b08:	9304      	str	r3, [sp, #16]
 8005b0a:	9b04      	ldr	r3, [sp, #16]
 8005b0c:	4543      	cmp	r3, r8
 8005b0e:	da04      	bge.n	8005b1a <__kernel_rem_pio2+0x3aa>
 8005b10:	461c      	mov	r4, r3
 8005b12:	e6a3      	b.n	800585c <__kernel_rem_pio2+0xec>
 8005b14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b16:	2301      	movs	r3, #1
 8005b18:	e7e4      	b.n	8005ae4 <__kernel_rem_pio2+0x374>
 8005b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b1c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005b20:	f7fa fcac 	bl	800047c <__aeabi_i2d>
 8005b24:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b2a:	46ab      	mov	fp, r5
 8005b2c:	461c      	mov	r4, r3
 8005b2e:	f04f 0900 	mov.w	r9, #0
 8005b32:	2600      	movs	r6, #0
 8005b34:	2700      	movs	r7, #0
 8005b36:	9b06      	ldr	r3, [sp, #24]
 8005b38:	4599      	cmp	r9, r3
 8005b3a:	dd06      	ble.n	8005b4a <__kernel_rem_pio2+0x3da>
 8005b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005b42:	f108 0801 	add.w	r8, r8, #1
 8005b46:	930a      	str	r3, [sp, #40]	; 0x28
 8005b48:	e7df      	b.n	8005b0a <__kernel_rem_pio2+0x39a>
 8005b4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005b4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005b52:	f7fa fcfd 	bl	8000550 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	4639      	mov	r1, r7
 8005b5e:	f7fa fb41 	bl	80001e4 <__adddf3>
 8005b62:	f109 0901 	add.w	r9, r9, #1
 8005b66:	4606      	mov	r6, r0
 8005b68:	460f      	mov	r7, r1
 8005b6a:	e7e4      	b.n	8005b36 <__kernel_rem_pio2+0x3c6>
 8005b6c:	3d01      	subs	r5, #1
 8005b6e:	e748      	b.n	8005a02 <__kernel_rem_pio2+0x292>
 8005b70:	ec47 6b10 	vmov	d0, r6, r7
 8005b74:	f1ca 0000 	rsb	r0, sl, #0
 8005b78:	f000 fa92 	bl	80060a0 <scalbn>
 8005b7c:	ec57 6b10 	vmov	r6, r7, d0
 8005b80:	4ba0      	ldr	r3, [pc, #640]	; (8005e04 <__kernel_rem_pio2+0x694>)
 8005b82:	ee10 0a10 	vmov	r0, s0
 8005b86:	2200      	movs	r2, #0
 8005b88:	4639      	mov	r1, r7
 8005b8a:	f7fa ff67 	bl	8000a5c <__aeabi_dcmpge>
 8005b8e:	b1f8      	cbz	r0, 8005bd0 <__kernel_rem_pio2+0x460>
 8005b90:	4b9d      	ldr	r3, [pc, #628]	; (8005e08 <__kernel_rem_pio2+0x698>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	f7fa fcda 	bl	8000550 <__aeabi_dmul>
 8005b9c:	f7fa ff72 	bl	8000a84 <__aeabi_d2iz>
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	f7fa fc6b 	bl	800047c <__aeabi_i2d>
 8005ba6:	4b97      	ldr	r3, [pc, #604]	; (8005e04 <__kernel_rem_pio2+0x694>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f7fa fcd1 	bl	8000550 <__aeabi_dmul>
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7fa fb13 	bl	80001e0 <__aeabi_dsub>
 8005bba:	f7fa ff63 	bl	8000a84 <__aeabi_d2iz>
 8005bbe:	1c65      	adds	r5, r4, #1
 8005bc0:	ab0e      	add	r3, sp, #56	; 0x38
 8005bc2:	f10a 0a18 	add.w	sl, sl, #24
 8005bc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005bca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005bce:	e720      	b.n	8005a12 <__kernel_rem_pio2+0x2a2>
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa ff56 	bl	8000a84 <__aeabi_d2iz>
 8005bd8:	ab0e      	add	r3, sp, #56	; 0x38
 8005bda:	4625      	mov	r5, r4
 8005bdc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005be0:	e717      	b.n	8005a12 <__kernel_rem_pio2+0x2a2>
 8005be2:	ab0e      	add	r3, sp, #56	; 0x38
 8005be4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005be8:	f7fa fc48 	bl	800047c <__aeabi_i2d>
 8005bec:	4632      	mov	r2, r6
 8005bee:	463b      	mov	r3, r7
 8005bf0:	f7fa fcae 	bl	8000550 <__aeabi_dmul>
 8005bf4:	4b84      	ldr	r3, [pc, #528]	; (8005e08 <__kernel_rem_pio2+0x698>)
 8005bf6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fca6 	bl	8000550 <__aeabi_dmul>
 8005c04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c08:	4606      	mov	r6, r0
 8005c0a:	460f      	mov	r7, r1
 8005c0c:	e70f      	b.n	8005a2e <__kernel_rem_pio2+0x2be>
 8005c0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005c12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005c16:	f7fa fc9b 	bl	8000550 <__aeabi_dmul>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c22:	f7fa fadf 	bl	80001e4 <__adddf3>
 8005c26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	4598      	cmp	r8, r3
 8005c32:	dc01      	bgt.n	8005c38 <__kernel_rem_pio2+0x4c8>
 8005c34:	45b8      	cmp	r8, r7
 8005c36:	ddea      	ble.n	8005c0e <__kernel_rem_pio2+0x49e>
 8005c38:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005c3c:	ab4a      	add	r3, sp, #296	; 0x128
 8005c3e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005c42:	ed87 7b00 	vstr	d7, [r7]
 8005c46:	3e01      	subs	r6, #1
 8005c48:	e6f8      	b.n	8005a3c <__kernel_rem_pio2+0x2cc>
 8005c4a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	dc0b      	bgt.n	8005c68 <__kernel_rem_pio2+0x4f8>
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc35      	bgt.n	8005cc0 <__kernel_rem_pio2+0x550>
 8005c54:	d059      	beq.n	8005d0a <__kernel_rem_pio2+0x59a>
 8005c56:	9b04      	ldr	r3, [sp, #16]
 8005c58:	f003 0007 	and.w	r0, r3, #7
 8005c5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005c60:	ecbd 8b02 	vpop	{d8}
 8005c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c68:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d1f3      	bne.n	8005c56 <__kernel_rem_pio2+0x4e6>
 8005c6e:	ab4a      	add	r3, sp, #296	; 0x128
 8005c70:	4423      	add	r3, r4
 8005c72:	9306      	str	r3, [sp, #24]
 8005c74:	461c      	mov	r4, r3
 8005c76:	469a      	mov	sl, r3
 8005c78:	9502      	str	r5, [sp, #8]
 8005c7a:	9b02      	ldr	r3, [sp, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f1aa 0a08 	sub.w	sl, sl, #8
 8005c82:	dc6b      	bgt.n	8005d5c <__kernel_rem_pio2+0x5ec>
 8005c84:	46aa      	mov	sl, r5
 8005c86:	f1ba 0f01 	cmp.w	sl, #1
 8005c8a:	f1a4 0408 	sub.w	r4, r4, #8
 8005c8e:	f300 8085 	bgt.w	8005d9c <__kernel_rem_pio2+0x62c>
 8005c92:	9c06      	ldr	r4, [sp, #24]
 8005c94:	2000      	movs	r0, #0
 8005c96:	3408      	adds	r4, #8
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2d01      	cmp	r5, #1
 8005c9c:	f300 809d 	bgt.w	8005dda <__kernel_rem_pio2+0x66a>
 8005ca0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005ca4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005ca8:	f1bb 0f00 	cmp.w	fp, #0
 8005cac:	f040 809b 	bne.w	8005de6 <__kernel_rem_pio2+0x676>
 8005cb0:	9b01      	ldr	r3, [sp, #4]
 8005cb2:	e9c3 5600 	strd	r5, r6, [r3]
 8005cb6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005cba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005cbe:	e7ca      	b.n	8005c56 <__kernel_rem_pio2+0x4e6>
 8005cc0:	3408      	adds	r4, #8
 8005cc2:	ab4a      	add	r3, sp, #296	; 0x128
 8005cc4:	441c      	add	r4, r3
 8005cc6:	462e      	mov	r6, r5
 8005cc8:	2000      	movs	r0, #0
 8005cca:	2100      	movs	r1, #0
 8005ccc:	2e00      	cmp	r6, #0
 8005cce:	da36      	bge.n	8005d3e <__kernel_rem_pio2+0x5ce>
 8005cd0:	f1bb 0f00 	cmp.w	fp, #0
 8005cd4:	d039      	beq.n	8005d4a <__kernel_rem_pio2+0x5da>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cdc:	9c01      	ldr	r4, [sp, #4]
 8005cde:	e9c4 2300 	strd	r2, r3, [r4]
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005cea:	f7fa fa79 	bl	80001e0 <__aeabi_dsub>
 8005cee:	ae4c      	add	r6, sp, #304	; 0x130
 8005cf0:	2401      	movs	r4, #1
 8005cf2:	42a5      	cmp	r5, r4
 8005cf4:	da2c      	bge.n	8005d50 <__kernel_rem_pio2+0x5e0>
 8005cf6:	f1bb 0f00 	cmp.w	fp, #0
 8005cfa:	d002      	beq.n	8005d02 <__kernel_rem_pio2+0x592>
 8005cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d00:	4619      	mov	r1, r3
 8005d02:	9b01      	ldr	r3, [sp, #4]
 8005d04:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005d08:	e7a5      	b.n	8005c56 <__kernel_rem_pio2+0x4e6>
 8005d0a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005d0e:	eb0d 0403 	add.w	r4, sp, r3
 8005d12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005d16:	2000      	movs	r0, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	2d00      	cmp	r5, #0
 8005d1c:	da09      	bge.n	8005d32 <__kernel_rem_pio2+0x5c2>
 8005d1e:	f1bb 0f00 	cmp.w	fp, #0
 8005d22:	d002      	beq.n	8005d2a <__kernel_rem_pio2+0x5ba>
 8005d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d28:	4619      	mov	r1, r3
 8005d2a:	9b01      	ldr	r3, [sp, #4]
 8005d2c:	e9c3 0100 	strd	r0, r1, [r3]
 8005d30:	e791      	b.n	8005c56 <__kernel_rem_pio2+0x4e6>
 8005d32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d36:	f7fa fa55 	bl	80001e4 <__adddf3>
 8005d3a:	3d01      	subs	r5, #1
 8005d3c:	e7ed      	b.n	8005d1a <__kernel_rem_pio2+0x5aa>
 8005d3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d42:	f7fa fa4f 	bl	80001e4 <__adddf3>
 8005d46:	3e01      	subs	r6, #1
 8005d48:	e7c0      	b.n	8005ccc <__kernel_rem_pio2+0x55c>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	e7c5      	b.n	8005cdc <__kernel_rem_pio2+0x56c>
 8005d50:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005d54:	f7fa fa46 	bl	80001e4 <__adddf3>
 8005d58:	3401      	adds	r4, #1
 8005d5a:	e7ca      	b.n	8005cf2 <__kernel_rem_pio2+0x582>
 8005d5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d60:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005d64:	9b02      	ldr	r3, [sp, #8]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4649      	mov	r1, r9
 8005d72:	f7fa fa37 	bl	80001e4 <__adddf3>
 8005d76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4640      	mov	r0, r8
 8005d80:	4649      	mov	r1, r9
 8005d82:	f7fa fa2d 	bl	80001e0 <__aeabi_dsub>
 8005d86:	4632      	mov	r2, r6
 8005d88:	463b      	mov	r3, r7
 8005d8a:	f7fa fa2b 	bl	80001e4 <__adddf3>
 8005d8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005d92:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d96:	ed8a 7b00 	vstr	d7, [sl]
 8005d9a:	e76e      	b.n	8005c7a <__kernel_rem_pio2+0x50a>
 8005d9c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005da0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005da4:	4640      	mov	r0, r8
 8005da6:	4632      	mov	r2, r6
 8005da8:	463b      	mov	r3, r7
 8005daa:	4649      	mov	r1, r9
 8005dac:	f7fa fa1a 	bl	80001e4 <__adddf3>
 8005db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4640      	mov	r0, r8
 8005dba:	4649      	mov	r1, r9
 8005dbc:	f7fa fa10 	bl	80001e0 <__aeabi_dsub>
 8005dc0:	4632      	mov	r2, r6
 8005dc2:	463b      	mov	r3, r7
 8005dc4:	f7fa fa0e 	bl	80001e4 <__adddf3>
 8005dc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005dd0:	ed84 7b00 	vstr	d7, [r4]
 8005dd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dd8:	e755      	b.n	8005c86 <__kernel_rem_pio2+0x516>
 8005dda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005dde:	f7fa fa01 	bl	80001e4 <__adddf3>
 8005de2:	3d01      	subs	r5, #1
 8005de4:	e759      	b.n	8005c9a <__kernel_rem_pio2+0x52a>
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	9a01      	ldr	r2, [sp, #4]
 8005dea:	601d      	str	r5, [r3, #0]
 8005dec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005df0:	605c      	str	r4, [r3, #4]
 8005df2:	609f      	str	r7, [r3, #8]
 8005df4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005df8:	60d3      	str	r3, [r2, #12]
 8005dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dfe:	6110      	str	r0, [r2, #16]
 8005e00:	6153      	str	r3, [r2, #20]
 8005e02:	e728      	b.n	8005c56 <__kernel_rem_pio2+0x4e6>
 8005e04:	41700000 	.word	0x41700000
 8005e08:	3e700000 	.word	0x3e700000
 8005e0c:	00000000 	.word	0x00000000

08005e10 <__kernel_sin>:
 8005e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e14:	ed2d 8b04 	vpush	{d8-d9}
 8005e18:	eeb0 8a41 	vmov.f32	s16, s2
 8005e1c:	eef0 8a61 	vmov.f32	s17, s3
 8005e20:	ec55 4b10 	vmov	r4, r5, d0
 8005e24:	b083      	sub	sp, #12
 8005e26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005e2e:	9001      	str	r0, [sp, #4]
 8005e30:	da06      	bge.n	8005e40 <__kernel_sin+0x30>
 8005e32:	ee10 0a10 	vmov	r0, s0
 8005e36:	4629      	mov	r1, r5
 8005e38:	f7fa fe24 	bl	8000a84 <__aeabi_d2iz>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d051      	beq.n	8005ee4 <__kernel_sin+0xd4>
 8005e40:	4622      	mov	r2, r4
 8005e42:	462b      	mov	r3, r5
 8005e44:	4620      	mov	r0, r4
 8005e46:	4629      	mov	r1, r5
 8005e48:	f7fa fb82 	bl	8000550 <__aeabi_dmul>
 8005e4c:	4682      	mov	sl, r0
 8005e4e:	468b      	mov	fp, r1
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fb7a 	bl	8000550 <__aeabi_dmul>
 8005e5c:	a341      	add	r3, pc, #260	; (adr r3, 8005f64 <__kernel_sin+0x154>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	4680      	mov	r8, r0
 8005e64:	4689      	mov	r9, r1
 8005e66:	4650      	mov	r0, sl
 8005e68:	4659      	mov	r1, fp
 8005e6a:	f7fa fb71 	bl	8000550 <__aeabi_dmul>
 8005e6e:	a33f      	add	r3, pc, #252	; (adr r3, 8005f6c <__kernel_sin+0x15c>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa f9b4 	bl	80001e0 <__aeabi_dsub>
 8005e78:	4652      	mov	r2, sl
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	f7fa fb68 	bl	8000550 <__aeabi_dmul>
 8005e80:	a33c      	add	r3, pc, #240	; (adr r3, 8005f74 <__kernel_sin+0x164>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa f9ad 	bl	80001e4 <__adddf3>
 8005e8a:	4652      	mov	r2, sl
 8005e8c:	465b      	mov	r3, fp
 8005e8e:	f7fa fb5f 	bl	8000550 <__aeabi_dmul>
 8005e92:	a33a      	add	r3, pc, #232	; (adr r3, 8005f7c <__kernel_sin+0x16c>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa f9a2 	bl	80001e0 <__aeabi_dsub>
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	465b      	mov	r3, fp
 8005ea0:	f7fa fb56 	bl	8000550 <__aeabi_dmul>
 8005ea4:	a337      	add	r3, pc, #220	; (adr r3, 8005f84 <__kernel_sin+0x174>)
 8005ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eaa:	f7fa f99b 	bl	80001e4 <__adddf3>
 8005eae:	9b01      	ldr	r3, [sp, #4]
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	b9eb      	cbnz	r3, 8005ef2 <__kernel_sin+0xe2>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4650      	mov	r0, sl
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	f7fa fb47 	bl	8000550 <__aeabi_dmul>
 8005ec2:	a325      	add	r3, pc, #148	; (adr r3, 8005f58 <__kernel_sin+0x148>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa f98a 	bl	80001e0 <__aeabi_dsub>
 8005ecc:	4642      	mov	r2, r8
 8005ece:	464b      	mov	r3, r9
 8005ed0:	f7fa fb3e 	bl	8000550 <__aeabi_dmul>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4629      	mov	r1, r5
 8005edc:	f7fa f982 	bl	80001e4 <__adddf3>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	ec45 4b10 	vmov	d0, r4, r5
 8005ee8:	b003      	add	sp, #12
 8005eea:	ecbd 8b04 	vpop	{d8-d9}
 8005eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <__kernel_sin+0x150>)
 8005ef4:	ec51 0b18 	vmov	r0, r1, d8
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f7fa fb29 	bl	8000550 <__aeabi_dmul>
 8005efe:	4632      	mov	r2, r6
 8005f00:	ec41 0b19 	vmov	d9, r0, r1
 8005f04:	463b      	mov	r3, r7
 8005f06:	4640      	mov	r0, r8
 8005f08:	4649      	mov	r1, r9
 8005f0a:	f7fa fb21 	bl	8000550 <__aeabi_dmul>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	ec51 0b19 	vmov	r0, r1, d9
 8005f16:	f7fa f963 	bl	80001e0 <__aeabi_dsub>
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	465b      	mov	r3, fp
 8005f1e:	f7fa fb17 	bl	8000550 <__aeabi_dmul>
 8005f22:	ec53 2b18 	vmov	r2, r3, d8
 8005f26:	f7fa f95b 	bl	80001e0 <__aeabi_dsub>
 8005f2a:	a30b      	add	r3, pc, #44	; (adr r3, 8005f58 <__kernel_sin+0x148>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	4640      	mov	r0, r8
 8005f36:	4649      	mov	r1, r9
 8005f38:	f7fa fb0a 	bl	8000550 <__aeabi_dmul>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4630      	mov	r0, r6
 8005f42:	4639      	mov	r1, r7
 8005f44:	f7fa f94e 	bl	80001e4 <__adddf3>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4629      	mov	r1, r5
 8005f50:	f7fa f946 	bl	80001e0 <__aeabi_dsub>
 8005f54:	e7c4      	b.n	8005ee0 <__kernel_sin+0xd0>
 8005f56:	bf00      	nop
 8005f58:	55555549 	.word	0x55555549
 8005f5c:	3fc55555 	.word	0x3fc55555
 8005f60:	3fe00000 	.word	0x3fe00000
 8005f64:	5acfd57c 	.word	0x5acfd57c
 8005f68:	3de5d93a 	.word	0x3de5d93a
 8005f6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005f70:	3e5ae5e6 	.word	0x3e5ae5e6
 8005f74:	57b1fe7d 	.word	0x57b1fe7d
 8005f78:	3ec71de3 	.word	0x3ec71de3
 8005f7c:	19c161d5 	.word	0x19c161d5
 8005f80:	3f2a01a0 	.word	0x3f2a01a0
 8005f84:	1110f8a6 	.word	0x1110f8a6
 8005f88:	3f811111 	.word	0x3f811111

08005f8c <fabs>:
 8005f8c:	ec51 0b10 	vmov	r0, r1, d0
 8005f90:	ee10 2a10 	vmov	r2, s0
 8005f94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f98:	ec43 2b10 	vmov	d0, r2, r3
 8005f9c:	4770      	bx	lr
	...

08005fa0 <floor>:
 8005fa0:	ec51 0b10 	vmov	r0, r1, d0
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005fac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005fb0:	2e13      	cmp	r6, #19
 8005fb2:	ee10 5a10 	vmov	r5, s0
 8005fb6:	ee10 8a10 	vmov	r8, s0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	dc32      	bgt.n	8006024 <floor+0x84>
 8005fbe:	2e00      	cmp	r6, #0
 8005fc0:	da14      	bge.n	8005fec <floor+0x4c>
 8005fc2:	a333      	add	r3, pc, #204	; (adr r3, 8006090 <floor+0xf0>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa f90c 	bl	80001e4 <__adddf3>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f7fa fd4e 	bl	8000a70 <__aeabi_dcmpgt>
 8005fd4:	b138      	cbz	r0, 8005fe6 <floor+0x46>
 8005fd6:	2c00      	cmp	r4, #0
 8005fd8:	da57      	bge.n	800608a <floor+0xea>
 8005fda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005fde:	431d      	orrs	r5, r3
 8005fe0:	d001      	beq.n	8005fe6 <floor+0x46>
 8005fe2:	4c2d      	ldr	r4, [pc, #180]	; (8006098 <floor+0xf8>)
 8005fe4:	2500      	movs	r5, #0
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4628      	mov	r0, r5
 8005fea:	e025      	b.n	8006038 <floor+0x98>
 8005fec:	4f2b      	ldr	r7, [pc, #172]	; (800609c <floor+0xfc>)
 8005fee:	4137      	asrs	r7, r6
 8005ff0:	ea01 0307 	and.w	r3, r1, r7
 8005ff4:	4303      	orrs	r3, r0
 8005ff6:	d01f      	beq.n	8006038 <floor+0x98>
 8005ff8:	a325      	add	r3, pc, #148	; (adr r3, 8006090 <floor+0xf0>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f7fa f8f1 	bl	80001e4 <__adddf3>
 8006002:	2200      	movs	r2, #0
 8006004:	2300      	movs	r3, #0
 8006006:	f7fa fd33 	bl	8000a70 <__aeabi_dcmpgt>
 800600a:	2800      	cmp	r0, #0
 800600c:	d0eb      	beq.n	8005fe6 <floor+0x46>
 800600e:	2c00      	cmp	r4, #0
 8006010:	bfbe      	ittt	lt
 8006012:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006016:	fa43 f606 	asrlt.w	r6, r3, r6
 800601a:	19a4      	addlt	r4, r4, r6
 800601c:	ea24 0407 	bic.w	r4, r4, r7
 8006020:	2500      	movs	r5, #0
 8006022:	e7e0      	b.n	8005fe6 <floor+0x46>
 8006024:	2e33      	cmp	r6, #51	; 0x33
 8006026:	dd0b      	ble.n	8006040 <floor+0xa0>
 8006028:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800602c:	d104      	bne.n	8006038 <floor+0x98>
 800602e:	ee10 2a10 	vmov	r2, s0
 8006032:	460b      	mov	r3, r1
 8006034:	f7fa f8d6 	bl	80001e4 <__adddf3>
 8006038:	ec41 0b10 	vmov	d0, r0, r1
 800603c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006040:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006044:	f04f 33ff 	mov.w	r3, #4294967295
 8006048:	fa23 f707 	lsr.w	r7, r3, r7
 800604c:	4207      	tst	r7, r0
 800604e:	d0f3      	beq.n	8006038 <floor+0x98>
 8006050:	a30f      	add	r3, pc, #60	; (adr r3, 8006090 <floor+0xf0>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa f8c5 	bl	80001e4 <__adddf3>
 800605a:	2200      	movs	r2, #0
 800605c:	2300      	movs	r3, #0
 800605e:	f7fa fd07 	bl	8000a70 <__aeabi_dcmpgt>
 8006062:	2800      	cmp	r0, #0
 8006064:	d0bf      	beq.n	8005fe6 <floor+0x46>
 8006066:	2c00      	cmp	r4, #0
 8006068:	da02      	bge.n	8006070 <floor+0xd0>
 800606a:	2e14      	cmp	r6, #20
 800606c:	d103      	bne.n	8006076 <floor+0xd6>
 800606e:	3401      	adds	r4, #1
 8006070:	ea25 0507 	bic.w	r5, r5, r7
 8006074:	e7b7      	b.n	8005fe6 <floor+0x46>
 8006076:	2301      	movs	r3, #1
 8006078:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800607c:	fa03 f606 	lsl.w	r6, r3, r6
 8006080:	4435      	add	r5, r6
 8006082:	4545      	cmp	r5, r8
 8006084:	bf38      	it	cc
 8006086:	18e4      	addcc	r4, r4, r3
 8006088:	e7f2      	b.n	8006070 <floor+0xd0>
 800608a:	2500      	movs	r5, #0
 800608c:	462c      	mov	r4, r5
 800608e:	e7aa      	b.n	8005fe6 <floor+0x46>
 8006090:	8800759c 	.word	0x8800759c
 8006094:	7e37e43c 	.word	0x7e37e43c
 8006098:	bff00000 	.word	0xbff00000
 800609c:	000fffff 	.word	0x000fffff

080060a0 <scalbn>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	ec55 4b10 	vmov	r4, r5, d0
 80060a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80060aa:	4606      	mov	r6, r0
 80060ac:	462b      	mov	r3, r5
 80060ae:	b99a      	cbnz	r2, 80060d8 <scalbn+0x38>
 80060b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80060b4:	4323      	orrs	r3, r4
 80060b6:	d036      	beq.n	8006126 <scalbn+0x86>
 80060b8:	4b39      	ldr	r3, [pc, #228]	; (80061a0 <scalbn+0x100>)
 80060ba:	4629      	mov	r1, r5
 80060bc:	ee10 0a10 	vmov	r0, s0
 80060c0:	2200      	movs	r2, #0
 80060c2:	f7fa fa45 	bl	8000550 <__aeabi_dmul>
 80060c6:	4b37      	ldr	r3, [pc, #220]	; (80061a4 <scalbn+0x104>)
 80060c8:	429e      	cmp	r6, r3
 80060ca:	4604      	mov	r4, r0
 80060cc:	460d      	mov	r5, r1
 80060ce:	da10      	bge.n	80060f2 <scalbn+0x52>
 80060d0:	a32b      	add	r3, pc, #172	; (adr r3, 8006180 <scalbn+0xe0>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	e03a      	b.n	800614e <scalbn+0xae>
 80060d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80060dc:	428a      	cmp	r2, r1
 80060de:	d10c      	bne.n	80060fa <scalbn+0x5a>
 80060e0:	ee10 2a10 	vmov	r2, s0
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa f87c 	bl	80001e4 <__adddf3>
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	e019      	b.n	8006126 <scalbn+0x86>
 80060f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80060f6:	460b      	mov	r3, r1
 80060f8:	3a36      	subs	r2, #54	; 0x36
 80060fa:	4432      	add	r2, r6
 80060fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006100:	428a      	cmp	r2, r1
 8006102:	dd08      	ble.n	8006116 <scalbn+0x76>
 8006104:	2d00      	cmp	r5, #0
 8006106:	a120      	add	r1, pc, #128	; (adr r1, 8006188 <scalbn+0xe8>)
 8006108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800610c:	da1c      	bge.n	8006148 <scalbn+0xa8>
 800610e:	a120      	add	r1, pc, #128	; (adr r1, 8006190 <scalbn+0xf0>)
 8006110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006114:	e018      	b.n	8006148 <scalbn+0xa8>
 8006116:	2a00      	cmp	r2, #0
 8006118:	dd08      	ble.n	800612c <scalbn+0x8c>
 800611a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800611e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006122:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006126:	ec45 4b10 	vmov	d0, r4, r5
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006130:	da19      	bge.n	8006166 <scalbn+0xc6>
 8006132:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006136:	429e      	cmp	r6, r3
 8006138:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800613c:	dd0a      	ble.n	8006154 <scalbn+0xb4>
 800613e:	a112      	add	r1, pc, #72	; (adr r1, 8006188 <scalbn+0xe8>)
 8006140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e2      	bne.n	800610e <scalbn+0x6e>
 8006148:	a30f      	add	r3, pc, #60	; (adr r3, 8006188 <scalbn+0xe8>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa f9ff 	bl	8000550 <__aeabi_dmul>
 8006152:	e7cb      	b.n	80060ec <scalbn+0x4c>
 8006154:	a10a      	add	r1, pc, #40	; (adr r1, 8006180 <scalbn+0xe0>)
 8006156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0b8      	beq.n	80060d0 <scalbn+0x30>
 800615e:	a10e      	add	r1, pc, #56	; (adr r1, 8006198 <scalbn+0xf8>)
 8006160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006164:	e7b4      	b.n	80060d0 <scalbn+0x30>
 8006166:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800616a:	3236      	adds	r2, #54	; 0x36
 800616c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006170:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006174:	4620      	mov	r0, r4
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <scalbn+0x108>)
 8006178:	2200      	movs	r2, #0
 800617a:	e7e8      	b.n	800614e <scalbn+0xae>
 800617c:	f3af 8000 	nop.w
 8006180:	c2f8f359 	.word	0xc2f8f359
 8006184:	01a56e1f 	.word	0x01a56e1f
 8006188:	8800759c 	.word	0x8800759c
 800618c:	7e37e43c 	.word	0x7e37e43c
 8006190:	8800759c 	.word	0x8800759c
 8006194:	fe37e43c 	.word	0xfe37e43c
 8006198:	c2f8f359 	.word	0xc2f8f359
 800619c:	81a56e1f 	.word	0x81a56e1f
 80061a0:	43500000 	.word	0x43500000
 80061a4:	ffff3cb0 	.word	0xffff3cb0
 80061a8:	3c900000 	.word	0x3c900000

080061ac <_init>:
 80061ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ae:	bf00      	nop
 80061b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b2:	bc08      	pop	{r3}
 80061b4:	469e      	mov	lr, r3
 80061b6:	4770      	bx	lr

080061b8 <_fini>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr
