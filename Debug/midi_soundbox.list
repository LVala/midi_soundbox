
midi_soundbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004680  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c08  08004c08  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c10  08004c10  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c10  08004c10  00014c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000018  08004c30  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08004c30  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab14  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df2  00000000  00000000  0002ab5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  0002c950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160fb  00000000  00000000  0002dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce1c  00000000  00000000  00043cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876d6  00000000  00000000  00050ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d81ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000d8200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004800 	.word	0x08004800

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08004800 	.word	0x08004800

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Codec_Write>:
#define VOLUME_CONVERT(Volume) (((Volume) > 100)? 255:((uint8_t)(((Volume) * 255) / 100)))

I2C_HandleTypeDef hi2c;
static uint8_t is_codec_stopped = 1;

uint8_t Codec_Write(uint8_t reg, uint8_t val) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c, CODEC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_MAX_TIMEOUT);
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004f8:	9302      	str	r3, [sp, #8]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	1dbb      	adds	r3, r7, #6
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2301      	movs	r3, #1
 8000504:	2194      	movs	r1, #148	; 0x94
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <Codec_Write+0x48>)
 8000508:	f001 fd66 	bl	8001fd8 <HAL_I2C_Mem_Write>
 800050c:	4603      	mov	r3, r0
 800050e:	73fb      	strb	r3, [r7, #15]

  return status != HAL_OK ? 1 : 0;
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf14      	ite	ne
 8000516:	2301      	movne	r3, #1
 8000518:	2300      	moveq	r3, #0
 800051a:	b2db      	uxtb	r3, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000034 	.word	0x20000034

08000528 <Codec_Init>:

uint32_t Codec_Init(I2C_HandleTypeDef i2c_handle) {
 8000528:	b084      	sub	sp, #16
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	f107 0c10 	add.w	ip, r7, #16
 8000534:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint32_t counter = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]

  // power on the codec (possibely need to turn it off first)
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	4839      	ldr	r0, [pc, #228]	; (8000628 <Codec_Init+0x100>)
 8000542:	f001 fbd1 	bl	8001ce8 <HAL_GPIO_WritePin>
  hi2c = i2c_handle;
 8000546:	4b39      	ldr	r3, [pc, #228]	; (800062c <Codec_Init+0x104>)
 8000548:	4618      	mov	r0, r3
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	2254      	movs	r2, #84	; 0x54
 8000550:	4619      	mov	r1, r3
 8000552:	f003 fbe3 	bl	8003d1c <memcpy>

  // keep codec powered off
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x01);
 8000556:	2101      	movs	r1, #1
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff ffbf 	bl	80004dc <Codec_Write>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4413      	add	r3, r2
 8000566:	607b      	str	r3, [r7, #4]
  // set output device to headphone
  counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xAF);
 8000568:	21af      	movs	r1, #175	; 0xaf
 800056a:	2004      	movs	r0, #4
 800056c:	f7ff ffb6 	bl	80004dc <Codec_Write>
 8000570:	4603      	mov	r3, r0
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	607b      	str	r3, [r7, #4]
  // cloc configuration: auto detection
  counter += Codec_Write(CODEC_REG_CLOCKING_CTL, 0x81);
 800057a:	2181      	movs	r1, #129	; 0x81
 800057c:	2005      	movs	r0, #5
 800057e:	f7ff ffad 	bl	80004dc <Codec_Write>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	607b      	str	r3, [r7, #4]
  // set slave mode and audio standard
  counter += Codec_Write(CODEC_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800058c:	2104      	movs	r1, #4
 800058e:	2006      	movs	r0, #6
 8000590:	f7ff ffa4 	bl	80004dc <Codec_Write>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	607b      	str	r3, [r7, #4]
  // set master volume to 0
  counter += Codec_SetVolume(0);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f894 	bl	80006cc <Codec_SetVolume>
 80005a4:	4602      	mov	r2, r0
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	607b      	str	r3, [r7, #4]

  // additional configuration, refer to link at the top of the file
  counter += Codec_Write(CODEC_REG_ANALOG_ZC_SR_SETT, 0x00);
 80005ac:	2100      	movs	r1, #0
 80005ae:	200a      	movs	r0, #10
 80005b0:	f7ff ff94 	bl	80004dc <Codec_Write>
 80005b4:	4603      	mov	r3, r0
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4413      	add	r3, r2
 80005bc:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_MISC_CTL, 0x04);
 80005be:	2104      	movs	r1, #4
 80005c0:	200e      	movs	r0, #14
 80005c2:	f7ff ff8b 	bl	80004dc <Codec_Write>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_LIMIT_CTL1, 0x00);
 80005d0:	2100      	movs	r1, #0
 80005d2:	2027      	movs	r0, #39	; 0x27
 80005d4:	f7ff ff82 	bl	80004dc <Codec_Write>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_TONE_CTL, 0x0F);
 80005e2:	210f      	movs	r1, #15
 80005e4:	201f      	movs	r0, #31
 80005e6:	f7ff ff79 	bl	80004dc <Codec_Write>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMA_VOL, 0x0A);
 80005f4:	210a      	movs	r1, #10
 80005f6:	201a      	movs	r0, #26
 80005f8:	f7ff ff70 	bl	80004dc <Codec_Write>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMB_VOL, 0x0A);
 8000606:	210a      	movs	r1, #10
 8000608:	201b      	movs	r0, #27
 800060a:	f7ff ff67 	bl	80004dc <Codec_Write>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	607b      	str	r3, [r7, #4]

  return counter;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr
 8000628:	40020c00 	.word	0x40020c00
 800062c:	20000034 	.word	0x20000034

08000630 <Codec_Play>:

uint32_t Codec_Play() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]

  if (is_codec_stopped) {
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <Codec_Play+0x50>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d018      	beq.n	8000674 <Codec_Play+0x44>
    // enable the digital soft ramp
	counter += Codec_Write(CODEC_REG_MISC_CTL, 0x06);
 8000642:	2106      	movs	r1, #6
 8000644:	200e      	movs	r0, #14
 8000646:	f7ff ff49 	bl	80004dc <Codec_Write>
 800064a:	4603      	mov	r3, r0
 800064c:	461a      	mov	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
	counter += Codec_SetMute(AUDIO_MUTE_OFF);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f88d 	bl	8000774 <Codec_SetMute>
 800065a:	4602      	mov	r2, r0
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	607b      	str	r3, [r7, #4]
	// power on the codec
	counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9E);
 8000662:	219e      	movs	r1, #158	; 0x9e
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff39 	bl	80004dc <Codec_Write>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
  }

  return counter;
 8000674:	687b      	ldr	r3, [r7, #4]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000000 	.word	0x20000000

08000684 <Codec_Stop>:

uint32_t Codec_Stop() {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]

  counter += Codec_SetMute(AUDIO_MUTE_ON);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f870 	bl	8000774 <Codec_SetMute>
 8000694:	4602      	mov	r2, r0
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	607b      	str	r3, [r7, #4]
  // disable digital soft ramp
  counter += Codec_Write(CODEC_REG_MISC_CTL, 0x04);
 800069c:	2104      	movs	r1, #4
 800069e:	200e      	movs	r0, #14
 80006a0:	f7ff ff1c 	bl	80004dc <Codec_Write>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	607b      	str	r3, [r7, #4]
  // power down the DAC and the speaker
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9F);
 80006ae:	219f      	movs	r1, #159	; 0x9f
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff13 	bl	80004dc <Codec_Write>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	607b      	str	r3, [r7, #4]

  return counter;
 80006c0:	687b      	ldr	r3, [r7, #4]
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <Codec_SetVolume>:

uint32_t Codec_SetVolume(uint8_t volume) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  uint8_t converted_vol = VOLUME_CONVERT(volume);
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b64      	cmp	r3, #100	; 0x64
 80006de:	d80b      	bhi.n	80006f8 <Codec_SetVolume+0x2c>
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	4613      	mov	r3, r2
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <Codec_SetVolume+0xa4>)
 80006ea:	fb82 1203 	smull	r1, r2, r2, r3
 80006ee:	1152      	asrs	r2, r2, #5
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	e000      	b.n	80006fa <Codec_SetVolume+0x2e>
 80006f8:	23ff      	movs	r3, #255	; 0xff
 80006fa:	72fb      	strb	r3, [r7, #11]

  if (converted_vol > 0xE6) {
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	2be6      	cmp	r3, #230	; 0xe6
 8000700:	d918      	bls.n	8000734 <Codec_SetVolume+0x68>
    counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol - 0xE7);
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	3319      	adds	r3, #25
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4619      	mov	r1, r3
 800070a:	2020      	movs	r0, #32
 800070c:	f7ff fee6 	bl	80004dc <Codec_Write>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol - 0xE7);
 800071a:	7afb      	ldrb	r3, [r7, #11]
 800071c:	3319      	adds	r3, #25
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	2021      	movs	r0, #33	; 0x21
 8000724:	f7ff feda 	bl	80004dc <Codec_Write>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e017      	b.n	8000764 <Codec_SetVolume+0x98>
  } else {
	counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol + 0x19);
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	3319      	adds	r3, #25
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	2020      	movs	r0, #32
 800073e:	f7ff fecd 	bl	80004dc <Codec_Write>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol + 0x19);
 800074c:	7afb      	ldrb	r3, [r7, #11]
 800074e:	3319      	adds	r3, #25
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	2021      	movs	r0, #33	; 0x21
 8000756:	f7ff fec1 	bl	80004dc <Codec_Write>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000764:	68fb      	ldr	r3, [r7, #12]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	51eb851f 	.word	0x51eb851f

08000774 <Codec_SetMute>:

uint32_t Codec_SetMute(uint8_t cmd) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  uint8_t counter = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	73fb      	strb	r3, [r7, #15]

  if (cmd == AUDIO_MUTE_ON) {
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d11b      	bne.n	80007c0 <Codec_SetMute+0x4c>
    counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xFF);
 8000788:	21ff      	movs	r1, #255	; 0xff
 800078a:	2004      	movs	r0, #4
 800078c:	f7ff fea6 	bl	80004dc <Codec_Write>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	4413      	add	r3, r2
 8000798:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x01);
 800079a:	2101      	movs	r1, #1
 800079c:	2022      	movs	r0, #34	; 0x22
 800079e:	f7ff fe9d 	bl	80004dc <Codec_Write>
 80007a2:	4603      	mov	r3, r0
 80007a4:	461a      	mov	r2, r3
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	4413      	add	r3, r2
 80007aa:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x01);
 80007ac:	2101      	movs	r1, #1
 80007ae:	2023      	movs	r0, #35	; 0x23
 80007b0:	f7ff fe94 	bl	80004dc <Codec_Write>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4413      	add	r3, r2
 80007bc:	73fb      	strb	r3, [r7, #15]
 80007be:	e01a      	b.n	80007f6 <Codec_SetMute+0x82>
  } else {
	counter += Codec_Write(CODEC_REG_POWER_CTL2, OUTPUT_DEVICE_HEADPHONE);
 80007c0:	21af      	movs	r1, #175	; 0xaf
 80007c2:	2004      	movs	r0, #4
 80007c4:	f7ff fe8a 	bl	80004dc <Codec_Write>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	4413      	add	r3, r2
 80007d0:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x00);
 80007d2:	2100      	movs	r1, #0
 80007d4:	2022      	movs	r0, #34	; 0x22
 80007d6:	f7ff fe81 	bl	80004dc <Codec_Write>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	4413      	add	r3, r2
 80007e2:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x00);
 80007e4:	2100      	movs	r1, #0
 80007e6:	2023      	movs	r0, #35	; 0x23
 80007e8:	f7ff fe78 	bl	80004dc <Codec_Write>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	4413      	add	r3, r2
 80007f4:	73fb      	strb	r3, [r7, #15]
  }

  return counter;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <make_sound>:
uint32_t myDacVal;

int16_t dataI2S[100];

//Build Sine wave
void make_sound(uint16_t start_index) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sample_N; i++)
 800080a:	2300      	movs	r3, #0
 800080c:	81fb      	strh	r3, [r7, #14]
 800080e:	e03d      	b.n	800088c <make_sound+0x8c>
  {
	mySinVal = sinf(i*2*PI*sample_dt);
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	ee07 3a90 	vmov	s15, r3
 8000818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800081c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80008a0 <make_sound+0xa0>
 8000820:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <make_sound+0xa4>)
 8000826:	edd3 7a00 	vldr	s15, [r3]
 800082a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800082e:	eeb0 0a67 	vmov.f32	s0, s15
 8000832:	f003 fa89 	bl	8003d48 <sinf>
 8000836:	eef0 7a40 	vmov.f32	s15, s0
 800083a:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <make_sound+0xa8>)
 800083c:	edc3 7a00 	vstr	s15, [r3]
	dataI2S[i*2] = (mySinVal )*8000;    //Right data (0 2 4 6 8 10 12)
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <make_sound+0xa8>)
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80008ac <make_sound+0xac>
 800084a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084e:	89fb      	ldrh	r3, [r7, #14]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000856:	ee17 2a90 	vmov	r2, s15
 800085a:	b211      	sxth	r1, r2
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <make_sound+0xb0>)
 800085e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	dataI2S[i*2 + 1] =(mySinVal )*8000; //Left data  (1 3 5 7 9 11 13)
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <make_sound+0xa8>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80008ac <make_sound+0xac>
 800086c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	3301      	adds	r3, #1
 8000876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800087a:	ee17 2a90 	vmov	r2, s15
 800087e:	b211      	sxth	r1, r2
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <make_sound+0xb0>)
 8000882:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i=0; i<sample_N; i++)
 8000886:	89fb      	ldrh	r3, [r7, #14]
 8000888:	3301      	adds	r3, #1
 800088a:	81fb      	strh	r3, [r7, #14]
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <make_sound+0xb4>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	89fa      	ldrh	r2, [r7, #14]
 8000892:	429a      	cmp	r2, r3
 8000894:	d3bc      	bcc.n	8000810 <make_sound+0x10>
  }
}
 8000896:	bf00      	nop
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40490fd0 	.word	0x40490fd0
 80008a4:	20000004 	.word	0x20000004
 80008a8:	20000184 	.word	0x20000184
 80008ac:	45fa0000 	.word	0x45fa0000
 80008b0:	20000188 	.word	0x20000188
 80008b4:	20000008 	.word	0x20000008

080008b8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  make_sound(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff9d 	bl	8000800 <make_sound>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  make_sound((uint16_t)sample_N/2);
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_I2S_TxCpltCallback+0x20>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff8d 	bl	8000800 <make_sound>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b095      	sub	sp, #84	; 0x54
 80008f8:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fa:	f000 fb59 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fe:	f000 f855 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 f937 	bl	8000b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000906:	f000 f915 	bl	8000b34 <MX_DMA_Init>
  MX_I2C1_Init();
 800090a:	f000 f8b7 	bl	8000a7c <MX_I2C1_Init>
  MX_I2S3_Init();
 800090e:	f000 f8e3 	bl	8000ad8 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  uint8_t counter = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]

  counter += Codec_Init(hi2c1);
 8000916:	4c20      	ldr	r4, [pc, #128]	; (8000998 <main+0xa4>)
 8000918:	4668      	mov	r0, sp
 800091a:	f104 0310 	add.w	r3, r4, #16
 800091e:	2244      	movs	r2, #68	; 0x44
 8000920:	4619      	mov	r1, r3
 8000922:	f003 f9fb 	bl	8003d1c <memcpy>
 8000926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800092a:	f7ff fdfd 	bl	8000528 <Codec_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	b2da      	uxtb	r2, r3
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	4413      	add	r3, r2
 8000936:	71fb      	strb	r3, [r7, #7]
  counter += Codec_SetVolume(70);
 8000938:	2046      	movs	r0, #70	; 0x46
 800093a:	f7ff fec7 	bl	80006cc <Codec_SetVolume>
 800093e:	4603      	mov	r3, r0
 8000940:	b2da      	uxtb	r2, r3
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4413      	add	r3, r2
 8000946:	71fb      	strb	r3, [r7, #7]
  counter += Codec_Play();
 8000948:	f7ff fe72 	bl	8000630 <Codec_Play>
 800094c:	4603      	mov	r3, r0
 800094e:	b2da      	uxtb	r2, r3
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4413      	add	r3, r2
 8000954:	71fb      	strb	r3, [r7, #7]
  if (counter) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <main+0x6c>
    Error_Handler();
 800095c:	f000 f978 	bl	8000c50 <Error_Handler>
  }

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, sample_N*2);
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <main+0xa8>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	b29b      	uxth	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <main+0xac>)
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <main+0xb0>)
 800096e:	f001 ff8b 	bl	8002888 <HAL_I2S_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <main+0xb4>)
 8000978:	f001 f9cf 	bl	8001d1a <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000980:	f000 fb88 	bl	8001094 <HAL_Delay>
	Codec_Stop();
 8000984:	f7ff fe7e 	bl	8000684 <Codec_Stop>
	HAL_Delay(1000);
 8000988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800098c:	f000 fb82 	bl	8001094 <HAL_Delay>
    Codec_Play();
 8000990:	f7ff fe4e 	bl	8000630 <Codec_Play>
	HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000994:	e7ed      	b.n	8000972 <main+0x7e>
 8000996:	bf00      	nop
 8000998:	20000088 	.word	0x20000088
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000188 	.word	0x20000188
 80009a4:	200000dc 	.word	0x200000dc
 80009a8:	40020c00 	.word	0x40020c00

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	; 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 f9bc 	bl	8003d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <SystemClock_Config+0xc8>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	4a26      	ldr	r2, [pc, #152]	; (8000a74 <SystemClock_Config+0xc8>)
 80009da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009de:	6413      	str	r3, [r2, #64]	; 0x40
 80009e0:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <SystemClock_Config+0xc8>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <SystemClock_Config+0xcc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <SystemClock_Config+0xcc>)
 80009f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <SystemClock_Config+0xcc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a12:	2302      	movs	r3, #2
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a20:	23c0      	movs	r3, #192	; 0xc0
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fb7b 	bl	800312c <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a3c:	f000 f908 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2302      	movs	r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a4c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f002 fddd 	bl	800361c <HAL_RCC_ClockConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a68:	f000 f8f2 	bl	8000c50 <Error_Handler>
  }
}
 8000a6c:	bf00      	nop
 8000a6e:	3750      	adds	r7, #80	; 0x50
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <MX_I2C1_Init+0x54>)
 8000a84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_I2C1_Init+0x58>)
 8000a8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_I2C1_Init+0x50>)
 8000a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_I2C1_Init+0x50>)
 8000aba:	f001 f949 	bl	8001d50 <HAL_I2C_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac4:	f000 f8c4 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000088 	.word	0x20000088
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	000186a0 	.word	0x000186a0

08000ad8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <MX_I2S3_Init+0x58>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000b00:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000b04:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2S3_Init+0x54>)
 8000b1a:	f001 fd75 	bl	8002608 <HAL_I2S_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000b24:	f000 f894 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000dc 	.word	0x200000dc
 8000b30:	40003c00 	.word	0x40003c00

08000b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2010      	movs	r0, #16
 8000b5c:	f000 fb99 	bl	8001292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000b60:	2010      	movs	r0, #16
 8000b62:	f000 fbb2 	bl	80012ca <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a2d      	ldr	r2, [pc, #180]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b27      	ldr	r3, [pc, #156]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_GPIO_Init+0xd4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000c16:	2200      	movs	r2, #0
 8000c18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <MX_GPIO_Init+0xd8>)
 8000c1e:	f001 f863 	bl	8001ce8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000c22:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c26:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_GPIO_Init+0xd8>)
 8000c3c:	f000 fed0 	bl	80019e0 <HAL_GPIO_Init>

}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <Error_Handler+0x18>)
 8000c5c:	f001 f844 	bl	8001ce8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x14>
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f000 fae6 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800

08000cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_I2C_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12c      	bne.n	8000d38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_I2C_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_I2C_MspInit+0x88>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000cfa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <HAL_I2C_MspInit+0x8c>)
 8000d18:	f000 fe62 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0x88>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_I2C_MspInit+0x88>)
 8000d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_I2C_MspInit+0x88>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400

08000d4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b090      	sub	sp, #64	; 0x40
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_I2S_MspInit+0x16c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	f040 8096 	bne.w	8000eae <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d82:	2301      	movs	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000d86:	23c8      	movs	r3, #200	; 0xc8
 8000d88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fe4c 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000da2:	f7ff ff55 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b44      	ldr	r3, [pc, #272]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a43      	ldr	r2, [pc, #268]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a3c      	ldr	r2, [pc, #240]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a35      	ldr	r2, [pc, #212]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <HAL_I2S_MspInit+0x170>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e12:	4619      	mov	r1, r3
 8000e14:	482a      	ldr	r0, [pc, #168]	; (8000ec0 <HAL_I2S_MspInit+0x174>)
 8000e16:	f000 fde3 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000e1a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e34:	4619      	mov	r1, r3
 8000e36:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <HAL_I2S_MspInit+0x178>)
 8000e38:	f000 fdd2 	bl	80019e0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e3e:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <HAL_I2S_MspInit+0x180>)
 8000e40:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e4a:	2240      	movs	r2, #64	; 0x40
 8000e4c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e62:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000e94:	f000 fa34 	bl	8001300 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8000e9e:	f7ff fed7 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_I2S_MspInit+0x17c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3740      	adds	r7, #64	; 0x40
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40003c00 	.word	0x40003c00
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020800 	.word	0x40020800
 8000ec8:	20000124 	.word	0x20000124
 8000ecc:	40026088 	.word	0x40026088

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f89a 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DMA1_Stream5_IRQHandler+0x10>)
 8000f2a:	f000 faef 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000124 	.word	0x20000124

08000f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f62:	490e      	ldr	r1, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f68:	e002      	b.n	8000f70 <LoopCopyDataInit>

08000f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6e:	3304      	adds	r3, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f74:	d3f9      	bcc.n	8000f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f78:	4c0b      	ldr	r4, [pc, #44]	; (8000fa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f7c:	e001      	b.n	8000f82 <LoopFillZerobss>

08000f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f80:	3204      	adds	r2, #4

08000f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f84:	d3fb      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd7 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fea3 	bl	8003cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fcb1 	bl	80008f4 <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000fa0:	08004c18 	.word	0x08004c18
  ldr r2, =_sbss
 8000fa4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000fa8:	20000254 	.word	0x20000254

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fe42 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f967 	bl	80012e6 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001030:	f000 f92f 	bl	8001292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000014 	.word	0x20000014
 8001050:	20000010 	.word	0x20000010

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000014 	.word	0x20000014
 8001078:	20000250 	.word	0x20000250

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000250 	.word	0x20000250

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <HAL_Delay+0x44>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000014 	.word	0x20000014

080010dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f8:	4013      	ands	r3, r2
 80010fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800110c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110e:	4a04      	ldr	r2, [pc, #16]	; (8001120 <__NVIC_SetPriorityGrouping+0x44>)
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	60d3      	str	r3, [r2, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001248:	d301      	bcc.n	800124e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124a:	2301      	movs	r3, #1
 800124c:	e00f      	b.n	800126e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <SysTick_Config+0x40>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001256:	210f      	movs	r1, #15
 8001258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800125c:	f7ff ff8e 	bl	800117c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <SysTick_Config+0x40>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <SysTick_Config+0x40>)
 8001268:	2207      	movs	r2, #7
 800126a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	e000e010 	.word	0xe000e010

0800127c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ff29 	bl	80010dc <__NVIC_SetPriorityGrouping>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a4:	f7ff ff3e 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	6978      	ldr	r0, [r7, #20]
 80012b0:	f7ff ff8e 	bl	80011d0 <NVIC_EncodePriority>
 80012b4:	4602      	mov	r2, r0
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4611      	mov	r1, r2
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff5d 	bl	800117c <__NVIC_SetPriority>
}
 80012c2:	bf00      	nop
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff31 	bl	8001140 <__NVIC_EnableIRQ>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa2 	bl	8001238 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff feb6 	bl	800107c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e099      	b.n	8001450 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133c:	e00f      	b.n	800135e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133e:	f7ff fe9d 	bl	800107c <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b05      	cmp	r3, #5
 800134a:	d908      	bls.n	800135e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e078      	b.n	8001450 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e8      	bne.n	800133e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_DMA_Init+0x158>)
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4313      	orrs	r3, r2
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f023 0307 	bic.w	r3, r3, #7
 80013de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d117      	bne.n	8001422 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00e      	beq.n	8001422 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 fa6f 	bl	80018e8 <DMA_CheckFifoParam>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800141e:	2301      	movs	r3, #1
 8001420:	e016      	b.n	8001450 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa26 	bl	800187c <DMA_CalcBaseAndBitshift>
 8001430:	4603      	mov	r3, r0
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	223f      	movs	r2, #63	; 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	f010803f 	.word	0xf010803f

0800145c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800147a:	2b01      	cmp	r3, #1
 800147c:	d101      	bne.n	8001482 <HAL_DMA_Start_IT+0x26>
 800147e:	2302      	movs	r3, #2
 8001480:	e040      	b.n	8001504 <HAL_DMA_Start_IT+0xa8>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b01      	cmp	r3, #1
 8001494:	d12f      	bne.n	80014f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2202      	movs	r2, #2
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f9b8 	bl	8001820 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	223f      	movs	r2, #63	; 0x3f
 80014b6:	409a      	lsls	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0216 	orr.w	r2, r2, #22
 80014ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f042 0208 	orr.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e005      	b.n	8001502 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014fe:	2302      	movs	r3, #2
 8001500:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001518:	4b8e      	ldr	r3, [pc, #568]	; (8001754 <HAL_DMA_IRQHandler+0x248>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a8e      	ldr	r2, [pc, #568]	; (8001758 <HAL_DMA_IRQHandler+0x24c>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0a9b      	lsrs	r3, r3, #10
 8001524:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001536:	2208      	movs	r2, #8
 8001538:	409a      	lsls	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d01a      	beq.n	8001578 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0204 	bic.w	r2, r2, #4
 800155e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	2208      	movs	r2, #8
 8001566:	409a      	lsls	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	2201      	movs	r2, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d012      	beq.n	80015ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2201      	movs	r2, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	f043 0202 	orr.w	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2204      	movs	r2, #4
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d012      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	2204      	movs	r2, #4
 80015d2:	409a      	lsls	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f043 0204 	orr.w	r2, r3, #4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	2210      	movs	r2, #16
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d043      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03c      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	2210      	movs	r2, #16
 8001608:	409a      	lsls	r2, r3
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d018      	beq.n	800164e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2b00      	cmp	r3, #0
 8001630:	d024      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	4798      	blx	r3
 800163a:	e01f      	b.n	800167c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001640:	2b00      	cmp	r3, #0
 8001642:	d01b      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
 800164c:	e016      	b.n	800167c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0208 	bic.w	r2, r2, #8
 800166a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001680:	2220      	movs	r2, #32
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 808f 	beq.w	80017ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 8087 	beq.w	80017ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2220      	movs	r2, #32
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d136      	bne.n	8001724 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0216 	bic.w	r2, r2, #22
 80016c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d103      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x1da>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0208 	bic.w	r2, r2, #8
 80016f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	223f      	movs	r2, #63	; 0x3f
 80016fc:	409a      	lsls	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001716:	2b00      	cmp	r3, #0
 8001718:	d07e      	beq.n	8001818 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4798      	blx	r3
        }
        return;
 8001722:	e079      	b.n	8001818 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d01d      	beq.n	800176e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10d      	bne.n	800175c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001744:	2b00      	cmp	r3, #0
 8001746:	d031      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
 8001750:	e02c      	b.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
 8001752:	bf00      	nop
 8001754:	2000000c 	.word	0x2000000c
 8001758:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d023      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
 800176c:	e01e      	b.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10f      	bne.n	800179c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0210 	bic.w	r2, r2, #16
 800178a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d032      	beq.n	800181a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d022      	beq.n	8001806 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2205      	movs	r2, #5
 80017c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	3301      	adds	r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d307      	bcc.n	80017f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f2      	bne.n	80017d8 <HAL_DMA_IRQHandler+0x2cc>
 80017f2:	e000      	b.n	80017f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d005      	beq.n	800181a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	4798      	blx	r3
 8001816:	e000      	b.n	800181a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001818:	bf00      	nop
    }
  }
}
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800183c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d108      	bne.n	8001860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800185e:	e007      	b.n	8001870 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3b10      	subs	r3, #16
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <DMA_CalcBaseAndBitshift+0x64>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001896:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d909      	bls.n	80018be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	1d1a      	adds	r2, r3, #4
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	659a      	str	r2, [r3, #88]	; 0x58
 80018bc:	e007      	b.n	80018ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	aaaaaaab 	.word	0xaaaaaaab
 80018e4:	08004830 	.word	0x08004830

080018e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11f      	bne.n	8001942 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d856      	bhi.n	80019b6 <DMA_CheckFifoParam+0xce>
 8001908:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <DMA_CheckFifoParam+0x28>)
 800190a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190e:	bf00      	nop
 8001910:	08001921 	.word	0x08001921
 8001914:	08001933 	.word	0x08001933
 8001918:	08001921 	.word	0x08001921
 800191c:	080019b7 	.word	0x080019b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d046      	beq.n	80019ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e043      	b.n	80019ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800193a:	d140      	bne.n	80019be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001940:	e03d      	b.n	80019be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194a:	d121      	bne.n	8001990 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d837      	bhi.n	80019c2 <DMA_CheckFifoParam+0xda>
 8001952:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <DMA_CheckFifoParam+0x70>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	08001969 	.word	0x08001969
 800195c:	0800196f 	.word	0x0800196f
 8001960:	08001969 	.word	0x08001969
 8001964:	08001981 	.word	0x08001981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      break;
 800196c:	e030      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d025      	beq.n	80019c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800197e:	e022      	b.n	80019c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001988:	d11f      	bne.n	80019ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800198e:	e01c      	b.n	80019ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d903      	bls.n	800199e <DMA_CheckFifoParam+0xb6>
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d003      	beq.n	80019a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800199c:	e018      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
      break;
 80019a2:	e015      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      break;
 80019b4:	e00b      	b.n	80019ce <DMA_CheckFifoParam+0xe6>
      break;
 80019b6:	bf00      	nop
 80019b8:	e00a      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
 80019bc:	e008      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
 80019c0:	e006      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c2:	bf00      	nop
 80019c4:	e004      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019c6:	bf00      	nop
 80019c8:	e002      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ca:	bf00      	nop
 80019cc:	e000      	b.n	80019d0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ce:	bf00      	nop
    }
  } 
  
  return status; 
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	e159      	b.n	8001cb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	f040 8148 	bne.w	8001caa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d005      	beq.n	8001a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d130      	bne.n	8001a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 0201 	and.w	r2, r3, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d017      	beq.n	8001ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d123      	bne.n	8001b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	69b9      	ldr	r1, [r7, #24]
 8001b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a2 	beq.w	8001caa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a56      	ldr	r2, [pc, #344]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_GPIO_Init+0x2e8>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	220f      	movs	r2, #15
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <HAL_GPIO_Init+0x2f0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x202>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_GPIO_Init+0x2f4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x1fe>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_GPIO_Init+0x2f8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x1fa>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x1f6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a45      	ldr	r2, [pc, #276]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x1f2>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x204>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_GPIO_Init+0x2ec>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f aea2 	bls.w	80019fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d04:	e003      	b.n	8001d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d2c:	887a      	ldrh	r2, [r7, #2]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	041a      	lsls	r2, r3, #16
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	619a      	str	r2, [r3, #24]
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e12b      	b.n	8001fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7fe ffa0 	bl	8000cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2224      	movs	r2, #36	; 0x24
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db4:	f001 fe2a 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8001db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4a81      	ldr	r2, [pc, #516]	; (8001fc4 <HAL_I2C_Init+0x274>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d807      	bhi.n	8001dd4 <HAL_I2C_Init+0x84>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4a80      	ldr	r2, [pc, #512]	; (8001fc8 <HAL_I2C_Init+0x278>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	bf94      	ite	ls
 8001dcc:	2301      	movls	r3, #1
 8001dce:	2300      	movhi	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	e006      	b.n	8001de2 <HAL_I2C_Init+0x92>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4a7d      	ldr	r2, [pc, #500]	; (8001fcc <HAL_I2C_Init+0x27c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	bf94      	ite	ls
 8001ddc:	2301      	movls	r3, #1
 8001dde:	2300      	movhi	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0e7      	b.n	8001fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4a78      	ldr	r2, [pc, #480]	; (8001fd0 <HAL_I2C_Init+0x280>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a6a      	ldr	r2, [pc, #424]	; (8001fc4 <HAL_I2C_Init+0x274>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d802      	bhi.n	8001e24 <HAL_I2C_Init+0xd4>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	e009      	b.n	8001e38 <HAL_I2C_Init+0xe8>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_I2C_Init+0x284>)
 8001e30:	fba2 2303 	umull	r2, r3, r2, r3
 8001e34:	099b      	lsrs	r3, r3, #6
 8001e36:	3301      	adds	r3, #1
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	495c      	ldr	r1, [pc, #368]	; (8001fc4 <HAL_I2C_Init+0x274>)
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d819      	bhi.n	8001e8c <HAL_I2C_Init+0x13c>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1e59      	subs	r1, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e66:	1c59      	adds	r1, r3, #1
 8001e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_I2C_Init+0x138>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	1e59      	subs	r1, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e80:	3301      	adds	r3, #1
 8001e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e86:	e051      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001e88:	2304      	movs	r3, #4
 8001e8a:	e04f      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d111      	bne.n	8001eb8 <HAL_I2C_Init+0x168>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	e012      	b.n	8001ede <HAL_I2C_Init+0x18e>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	0099      	lsls	r1, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_Init+0x196>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e022      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10e      	bne.n	8001f0c <HAL_I2C_Init+0x1bc>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1e58      	subs	r0, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	440b      	add	r3, r1
 8001efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f00:	3301      	adds	r3, #1
 8001f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0a:	e00f      	b.n	8001f2c <HAL_I2C_Init+0x1dc>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1e58      	subs	r0, r3, #1
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	0099      	lsls	r1, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f22:	3301      	adds	r3, #1
 8001f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	6809      	ldr	r1, [r1, #0]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69da      	ldr	r2, [r3, #28]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6911      	ldr	r1, [r2, #16]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68d2      	ldr	r2, [r2, #12]
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	000186a0 	.word	0x000186a0
 8001fc8:	001e847f 	.word	0x001e847f
 8001fcc:	003d08ff 	.word	0x003d08ff
 8001fd0:	431bde83 	.word	0x431bde83
 8001fd4:	10624dd3 	.word	0x10624dd3

08001fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	817b      	strh	r3, [r7, #10]
 8001fea:	460b      	mov	r3, r1
 8001fec:	813b      	strh	r3, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff2:	f7ff f843 	bl	800107c <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	f040 80d9 	bne.w	80021b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2319      	movs	r3, #25
 800200c:	2201      	movs	r2, #1
 800200e:	496d      	ldr	r1, [pc, #436]	; (80021c4 <HAL_I2C_Mem_Write+0x1ec>)
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f971 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
 800201e:	e0cc      	b.n	80021ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_I2C_Mem_Write+0x56>
 800202a:	2302      	movs	r3, #2
 800202c:	e0c5      	b.n	80021ba <HAL_I2C_Mem_Write+0x1e2>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d007      	beq.n	8002054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2221      	movs	r2, #33	; 0x21
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2240      	movs	r2, #64	; 0x40
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_I2C_Mem_Write+0x1f0>)
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002096:	88f8      	ldrh	r0, [r7, #6]
 8002098:	893a      	ldrh	r2, [r7, #8]
 800209a:	8979      	ldrh	r1, [r7, #10]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4603      	mov	r3, r0
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f890 	bl	80021cc <I2C_RequestMemoryWrite>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d052      	beq.n	8002158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e081      	b.n	80021ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 f9f2 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d107      	bne.n	80020de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b04      	cmp	r3, #4
 800211e:	d11b      	bne.n	8002158 <HAL_I2C_Mem_Write+0x180>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1aa      	bne.n	80020b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f9de 	bl	8002526 <I2C_WaitOnBTFFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b04      	cmp	r3, #4
 8002176:	d107      	bne.n	8002188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e016      	b.n	80021ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800219a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	e000      	b.n	80021ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021b8:	2302      	movs	r3, #2
  }
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	00100002 	.word	0x00100002
 80021c8:	ffff0000 	.word	0xffff0000

080021cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4603      	mov	r3, r0
 80021dc:	817b      	strh	r3, [r7, #10]
 80021de:	460b      	mov	r3, r1
 80021e0:	813b      	strh	r3, [r7, #8]
 80021e2:	4613      	mov	r3, r2
 80021e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f878 	bl	80022f8 <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800221c:	d103      	bne.n	8002226 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002224:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e05f      	b.n	80022ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <I2C_RequestMemoryWrite+0x128>)
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f8b0 	bl	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e04c      	b.n	80022ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002268:	6a39      	ldr	r1, [r7, #32]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f91a 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b04      	cmp	r3, #4
 800227c:	d107      	bne.n	800228e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e02b      	b.n	80022ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002298:	893b      	ldrh	r3, [r7, #8]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	e021      	b.n	80022e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f8f4 	bl	80024a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d107      	bne.n	80022da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e005      	b.n	80022ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022de:	893b      	ldrh	r3, [r7, #8]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	00010002 	.word	0x00010002

080022f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	4613      	mov	r3, r2
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002308:	e025      	b.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002310:	d021      	beq.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7fe feb3 	bl	800107c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d116      	bne.n	8002356 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f043 0220 	orr.w	r2, r3, #32
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e023      	b.n	800239e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d10d      	bne.n	800237c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4013      	ands	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf0c      	ite	eq
 8002372:	2301      	moveq	r3, #1
 8002374:	2300      	movne	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	e00c      	b.n	8002396 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4013      	ands	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	429a      	cmp	r2, r3
 800239a:	d0b6      	beq.n	800230a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b4:	e051      	b.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d123      	bne.n	800240e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f043 0204 	orr.w	r2, r3, #4
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e046      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002414:	d021      	beq.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002416:	f7fe fe31 	bl	800107c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	d302      	bcc.n	800242c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d116      	bne.n	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e020      	b.n	800249c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10c      	bne.n	800247e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	e00b      	b.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	43da      	mvns	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4013      	ands	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d18d      	bne.n	80023b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024b0:	e02d      	b.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f878 	bl	80025a8 <I2C_IsAcknowledgeFailed>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e02d      	b.n	800251e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024c8:	d021      	beq.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ca:	f7fe fdd7 	bl	800107c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d302      	bcc.n	80024e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d116      	bne.n	800250e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e007      	b.n	800251e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d1ca      	bne.n	80024b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002532:	e02d      	b.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f837 	bl	80025a8 <I2C_IsAcknowledgeFailed>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e02d      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800254a:	d021      	beq.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254c:	f7fe fd96 	bl	800107c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	d302      	bcc.n	8002562 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d1ca      	bne.n	8002534 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025be:	d11b      	bne.n	80025f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e000      	b.n	80025fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e128      	b.n	800286c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a90      	ldr	r2, [pc, #576]	; (8002874 <HAL_I2S_Init+0x26c>)
 8002632:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7fe fb89 	bl	8000d4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002650:	f023 030f 	bic.w	r3, r3, #15
 8002654:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2202      	movs	r2, #2
 800265c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d060      	beq.n	8002728 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800266e:	2310      	movs	r3, #16
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e001      	b.n	8002678 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002674:	2320      	movs	r3, #32
 8002676:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b20      	cmp	r3, #32
 800267e:	d802      	bhi.n	8002686 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002686:	2001      	movs	r0, #1
 8002688:	f001 fac4 	bl	8003c14 <HAL_RCCEx_GetPeriphCLKFreq>
 800268c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002696:	d125      	bne.n	80026e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	3305      	adds	r3, #5
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e01f      	b.n	8002702 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	3305      	adds	r3, #5
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	e00e      	b.n	8002702 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	3305      	adds	r3, #5
 8002700:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4a5c      	ldr	r2, [pc, #368]	; (8002878 <HAL_I2S_Init+0x270>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	08db      	lsrs	r3, r3, #3
 800270c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	61bb      	str	r3, [r7, #24]
 8002726:	e003      	b.n	8002730 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002728:	2302      	movs	r3, #2
 800272a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d902      	bls.n	800273c <HAL_I2S_Init+0x134>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2bff      	cmp	r3, #255	; 0xff
 800273a:	d907      	bls.n	800274c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e08f      	b.n	800286c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	ea42 0103 	orr.w	r1, r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	430a      	orrs	r2, r1
 800275e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800276a:	f023 030f 	bic.w	r3, r3, #15
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6851      	ldr	r1, [r2, #4]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68d2      	ldr	r2, [r2, #12]
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6992      	ldr	r2, [r2, #24]
 8002782:	430a      	orrs	r2, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d161      	bne.n	800285c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a38      	ldr	r2, [pc, #224]	; (800287c <HAL_I2S_Init+0x274>)
 800279c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a37      	ldr	r2, [pc, #220]	; (8002880 <HAL_I2S_Init+0x278>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_I2S_Init+0x1a4>
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_I2S_Init+0x27c>)
 80027aa:	e001      	b.n	80027b0 <HAL_I2S_Init+0x1a8>
 80027ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	4932      	ldr	r1, [pc, #200]	; (8002880 <HAL_I2S_Init+0x278>)
 80027b8:	428a      	cmp	r2, r1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2S_Init+0x1b8>
 80027bc:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_I2S_Init+0x27c>)
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x1bc>
 80027c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80027c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027c8:	f023 030f 	bic.w	r3, r3, #15
 80027cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2b      	ldr	r2, [pc, #172]	; (8002880 <HAL_I2S_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_I2S_Init+0x1d4>
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_I2S_Init+0x27c>)
 80027da:	e001      	b.n	80027e0 <HAL_I2S_Init+0x1d8>
 80027dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027e0:	2202      	movs	r2, #2
 80027e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <HAL_I2S_Init+0x278>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_I2S_Init+0x1ea>
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_I2S_Init+0x27c>)
 80027f0:	e001      	b.n	80027f6 <HAL_I2S_Init+0x1ee>
 80027f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002802:	d003      	beq.n	800280c <HAL_I2S_Init+0x204>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800280c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	e001      	b.n	8002818 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002814:	2300      	movs	r3, #0
 8002816:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002822:	4313      	orrs	r3, r2
 8002824:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800282c:	4313      	orrs	r3, r2
 800282e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002836:	4313      	orrs	r3, r2
 8002838:	b29a      	uxth	r2, r3
 800283a:	897b      	ldrh	r3, [r7, #10]
 800283c:	4313      	orrs	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002844:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_I2S_Init+0x278>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_I2S_Init+0x24c>
 8002850:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_I2S_Init+0x27c>)
 8002852:	e001      	b.n	8002858 <HAL_I2S_Init+0x250>
 8002854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002858:	897a      	ldrh	r2, [r7, #10]
 800285a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	08002b65 	.word	0x08002b65
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	08002c79 	.word	0x08002c79
 8002880:	40003800 	.word	0x40003800
 8002884:	40003400 	.word	0x40003400

08002888 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	4613      	mov	r3, r2
 8002894:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_I2S_Transmit_DMA+0x1a>
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e08e      	b.n	80029c4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_I2S_Transmit_DMA+0x2e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e086      	b.n	80029c4 <HAL_I2S_Transmit_DMA+0x13c>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d005      	beq.n	80028d6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
 80028d4:	e076      	b.n	80029c4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d002      	beq.n	8002902 <HAL_I2S_Transmit_DMA+0x7a>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d10a      	bne.n	8002918 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002916:	e005      	b.n	8002924 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	4a28      	ldr	r2, [pc, #160]	; (80029cc <HAL_I2S_Transmit_DMA+0x144>)
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_I2S_Transmit_DMA+0x148>)
 8002932:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <HAL_I2S_Transmit_DMA+0x14c>)
 800293a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002944:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800294c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002954:	f7fe fd82 	bl	800145c <HAL_DMA_Start_IT>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00f      	beq.n	800297e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f043 0208 	orr.w	r2, r3, #8
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e022      	b.n	80029c4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800299a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d107      	bne.n	80029ba <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0202 	orr.w	r2, r2, #2
 80029b8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	08002a43 	.word	0x08002a43
 80029d0:	08002a01 	.word	0x08002a01
 80029d4:	08002a5f 	.word	0x08002a5f

080029d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10e      	bne.n	8002a34 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0202 	bic.w	r2, r2, #2
 8002a24:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7fd ff4b 	bl	80008d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7fd ff31 	bl	80008b8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0203 	bic.w	r2, r2, #3
 8002a7a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a94:	f043 0208 	orr.w	r2, r3, #8
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff ffa5 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	881a      	ldrh	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	1c9a      	adds	r2, r3, #2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10e      	bne.n	8002afe <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7fd fee9 	bl	80008d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ff3e 	bl	80029d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d13a      	bne.n	8002bf6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d109      	bne.n	8002b9e <I2S_IRQHandler+0x3a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d102      	bne.n	8002b9e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffb4 	bl	8002b06 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d126      	bne.n	8002bf6 <I2S_IRQHandler+0x92>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d11f      	bne.n	8002bf6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bc4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	613b      	str	r3, [r7, #16]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f043 0202 	orr.w	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fefb 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d136      	bne.n	8002c70 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d109      	bne.n	8002c20 <I2S_IRQHandler+0xbc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b80      	cmp	r3, #128	; 0x80
 8002c18:	d102      	bne.n	8002c20 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff45 	bl	8002aaa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d122      	bne.n	8002c70 <I2S_IRQHandler+0x10c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d11b      	bne.n	8002c70 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c46:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	f043 0204 	orr.w	r2, r3, #4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff febe 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c70:	bf00      	nop
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a92      	ldr	r2, [pc, #584]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d101      	bne.n	8002c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c94:	e001      	b.n	8002c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a8b      	ldr	r2, [pc, #556]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d101      	bne.n	8002cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002cb0:	4b8a      	ldr	r3, [pc, #552]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cb2:	e001      	b.n	8002cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc4:	d004      	beq.n	8002cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 8099 	bne.w	8002e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d107      	bne.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f925 	bl	8002f34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9c8 	bl	8003094 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0a:	2b40      	cmp	r3, #64	; 0x40
 8002d0c:	d13a      	bne.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d035      	beq.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d101      	bne.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002d22:	4b6e      	ldr	r3, [pc, #440]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d24:	e001      	b.n	8002d2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4969      	ldr	r1, [pc, #420]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d32:	428b      	cmp	r3, r1
 8002d34:	d101      	bne.n	8002d3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002d36:	4b69      	ldr	r3, [pc, #420]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d38:	e001      	b.n	8002d3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002d3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	f043 0202 	orr.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff fe34 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	f040 80c3 	bne.w	8002f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 80bd 	beq.w	8002f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002daa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a49      	ldr	r2, [pc, #292]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002db6:	4b49      	ldr	r3, [pc, #292]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002db8:	e001      	b.n	8002dbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4944      	ldr	r1, [pc, #272]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dc6:	428b      	cmp	r3, r1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dcc:	e001      	b.n	8002dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f043 0204 	orr.w	r2, r3, #4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fdf6 	bl	80029ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e00:	e089      	b.n	8002f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d107      	bne.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8be 	bl	8002f98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8fd 	bl	8003030 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d12f      	bne.n	8002ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d02a      	beq.n	8002ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d101      	bne.n	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e66:	e001      	b.n	8002e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002e68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4919      	ldr	r1, [pc, #100]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e74:	428b      	cmp	r3, r1
 8002e76:	d101      	bne.n	8002e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e7a:	e001      	b.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f043 0202 	orr.w	r2, r3, #2
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff fda6 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d136      	bne.n	8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d031      	beq.n	8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ec0:	e001      	b.n	8002ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4902      	ldr	r1, [pc, #8]	; (8002ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ece:	428b      	cmp	r3, r1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002ed2:	4b02      	ldr	r3, [pc, #8]	; (8002edc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ed4:	e006      	b.n	8002ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002ed6:	bf00      	nop
 8002ed8:	40003800 	.word	0x40003800
 8002edc:	40003400 	.word	0x40003400
 8002ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ee8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff fd6c 	bl	80029ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f14:	e000      	b.n	8002f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f16:	bf00      	nop
}
 8002f18:	bf00      	nop
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	1c99      	adds	r1, r3, #2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6251      	str	r1, [r2, #36]	; 0x24
 8002f46:	881a      	ldrh	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d113      	bne.n	8002f8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffc9 	bl	8002f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c99      	adds	r1, r3, #2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6251      	str	r1, [r2, #36]	; 0x24
 8002faa:	8819      	ldrh	r1, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <I2SEx_TxISR_I2SExt+0x90>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <I2SEx_TxISR_I2SExt+0x22>
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <I2SEx_TxISR_I2SExt+0x94>)
 8002fb8:	e001      	b.n	8002fbe <I2SEx_TxISR_I2SExt+0x26>
 8002fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fbe:	460a      	mov	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d121      	bne.n	800301e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <I2SEx_TxISR_I2SExt+0x90>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d101      	bne.n	8002fe8 <I2SEx_TxISR_I2SExt+0x50>
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <I2SEx_TxISR_I2SExt+0x94>)
 8002fe6:	e001      	b.n	8002fec <I2SEx_TxISR_I2SExt+0x54>
 8002fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	490d      	ldr	r1, [pc, #52]	; (8003028 <I2SEx_TxISR_I2SExt+0x90>)
 8002ff4:	428b      	cmp	r3, r1
 8002ff6:	d101      	bne.n	8002ffc <I2SEx_TxISR_I2SExt+0x64>
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <I2SEx_TxISR_I2SExt+0x94>)
 8002ffa:	e001      	b.n	8003000 <I2SEx_TxISR_I2SExt+0x68>
 8002ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003004:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff81 	bl	8002f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40003800 	.word	0x40003800
 800302c:	40003400 	.word	0x40003400

08003030 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68d8      	ldr	r0, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	1c99      	adds	r1, r3, #2
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003048:	b282      	uxth	r2, r0
 800304a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d113      	bne.n	800308c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003072:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ff4a 	bl	8002f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a20      	ldr	r2, [pc, #128]	; (8003124 <I2SEx_RxISR_I2SExt+0x90>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d101      	bne.n	80030aa <I2SEx_RxISR_I2SExt+0x16>
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <I2SEx_RxISR_I2SExt+0x94>)
 80030a8:	e001      	b.n	80030ae <I2SEx_RxISR_I2SExt+0x1a>
 80030aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ae:	68d8      	ldr	r0, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	1c99      	adds	r1, r3, #2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80030ba:	b282      	uxth	r2, r0
 80030bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d121      	bne.n	800311a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a12      	ldr	r2, [pc, #72]	; (8003124 <I2SEx_RxISR_I2SExt+0x90>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d101      	bne.n	80030e4 <I2SEx_RxISR_I2SExt+0x50>
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <I2SEx_RxISR_I2SExt+0x94>)
 80030e2:	e001      	b.n	80030e8 <I2SEx_RxISR_I2SExt+0x54>
 80030e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	490d      	ldr	r1, [pc, #52]	; (8003124 <I2SEx_RxISR_I2SExt+0x90>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d101      	bne.n	80030f8 <I2SEx_RxISR_I2SExt+0x64>
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <I2SEx_RxISR_I2SExt+0x94>)
 80030f6:	e001      	b.n	80030fc <I2SEx_RxISR_I2SExt+0x68>
 80030f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003100:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff03 	bl	8002f20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40003800 	.word	0x40003800
 8003128:	40003400 	.word	0x40003400

0800312c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e267      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d075      	beq.n	8003236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800314a:	4b88      	ldr	r3, [pc, #544]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b85      	ldr	r3, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315e:	2b08      	cmp	r3, #8
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b82      	ldr	r3, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b7e      	ldr	r3, [pc, #504]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x108>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e242      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x74>
 8003192:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a75      	ldr	r2, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b70      	ldr	r3, [pc, #448]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6f      	ldr	r2, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6d      	ldr	r3, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6c      	ldr	r2, [pc, #432]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a68      	ldr	r2, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fd ff4a 	bl	800107c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fd ff46 	bl	800107c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e207      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xc0>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fd ff36 	bl	800107c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fd ff32 	bl	800107c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1f3      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0xe8>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1c7      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4937      	ldr	r1, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x244>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fd feeb 	bl	800107c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fd fee7 	bl	800107c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1a8      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4925      	ldr	r1, [pc, #148]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_OscConfig+0x244>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fd feca 	bl	800107c <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fd fec6 	bl	800107c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e187      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d036      	beq.n	8003384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCC_OscConfig+0x248>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fd feaa 	bl	800107c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7fd fea6 	bl	800107c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e167      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x200>
 800334a:	e01b      	b.n	8003384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_OscConfig+0x248>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fd fe93 	bl	800107c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	e00e      	b.n	8003378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335a:	f7fd fe8f 	bl	800107c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d907      	bls.n	8003378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e150      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
 800336c:	40023800 	.word	0x40023800
 8003370:	42470000 	.word	0x42470000
 8003374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ea      	bne.n	800335a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8097 	beq.w	80034c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003396:	4b81      	ldr	r3, [pc, #516]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b7d      	ldr	r3, [pc, #500]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b7a      	ldr	r3, [pc, #488]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b74      	ldr	r3, [pc, #464]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a73      	ldr	r2, [pc, #460]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fd fe4f 	bl	800107c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fd fe4b 	bl	800107c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e10c      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x474>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x2ea>
 8003408:	4b64      	ldr	r3, [pc, #400]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a63      	ldr	r2, [pc, #396]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x324>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x30c>
 800341e:	4b5f      	ldr	r3, [pc, #380]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a5e      	ldr	r2, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	4b5c      	ldr	r3, [pc, #368]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5b      	ldr	r2, [pc, #364]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0x324>
 8003438:	4b58      	ldr	r3, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a57      	ldr	r2, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	4b55      	ldr	r3, [pc, #340]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fd fe10 	bl	800107c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7fd fe0c 	bl	800107c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e0cb      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	4b49      	ldr	r3, [pc, #292]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ee      	beq.n	8003460 <HAL_RCC_OscConfig+0x334>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fd fdfa 	bl	800107c <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fd fdf6 	bl	800107c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0b5      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	4b3e      	ldr	r3, [pc, #248]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ee      	bne.n	800348c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4a38      	ldr	r2, [pc, #224]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80a1 	beq.w	800360c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <HAL_RCC_OscConfig+0x470>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d05c      	beq.n	8003590 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d141      	bne.n	8003562 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fdca 	bl	800107c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fdc6 	bl	800107c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e087      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b27      	ldr	r3, [pc, #156]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fd fd9f 	bl	800107c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003542:	f7fd fd9b 	bl	800107c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e05c      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x416>
 8003560:	e054      	b.n	800360c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fd fd88 	bl	800107c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003570:	f7fd fd84 	bl	800107c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e045      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x470>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x444>
 800358e:	e03d      	b.n	800360c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e038      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
 800359c:	40023800 	.word	0x40023800
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035a8:	4b1b      	ldr	r3, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x4ec>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d028      	beq.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d121      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d11a      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d111      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	085b      	lsrs	r3, r3, #1
 80035f0:	3b01      	subs	r3, #1
 80035f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800

0800361c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0cc      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b68      	ldr	r3, [pc, #416]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d90c      	bls.n	8003658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b65      	ldr	r3, [pc, #404]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0b8      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003670:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a58      	ldr	r2, [pc, #352]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800367a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	494d      	ldr	r1, [pc, #308]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d044      	beq.n	800373c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d119      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d003      	beq.n	80036da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036da:	4b3f      	ldr	r3, [pc, #252]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e06f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e067      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fa:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4934      	ldr	r1, [pc, #208]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370c:	f7fd fcb6 	bl	800107c <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fd fcb2 	bl	800107c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e04f      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	4b2b      	ldr	r3, [pc, #172]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 020c 	and.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	429a      	cmp	r2, r3
 800373a:	d1eb      	bne.n	8003714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800373c:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d20c      	bcs.n	8003764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e032      	b.n	80037ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	4916      	ldr	r1, [pc, #88]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d009      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	490e      	ldr	r1, [pc, #56]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037a2:	f000 f821 	bl	80037e8 <HAL_RCC_GetSysClockFreq>
 80037a6:	4602      	mov	r2, r0
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	490a      	ldr	r1, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	5ccb      	ldrb	r3, [r1, r3]
 80037b6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ba:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fd fc16 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40023c00 	.word	0x40023c00
 80037d8:	40023800 	.word	0x40023800
 80037dc:	08004818 	.word	0x08004818
 80037e0:	2000000c 	.word	0x2000000c
 80037e4:	20000010 	.word	0x20000010

080037e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ec:	b094      	sub	sp, #80	; 0x50
 80037ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	647b      	str	r3, [r7, #68]	; 0x44
 80037f4:	2300      	movs	r3, #0
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f8:	2300      	movs	r3, #0
 80037fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003800:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b08      	cmp	r3, #8
 800380a:	d00d      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x40>
 800380c:	2b08      	cmp	r3, #8
 800380e:	f200 80e1 	bhi.w	80039d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_RCC_GetSysClockFreq+0x34>
 8003816:	2b04      	cmp	r3, #4
 8003818:	d003      	beq.n	8003822 <HAL_RCC_GetSysClockFreq+0x3a>
 800381a:	e0db      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b73      	ldr	r3, [pc, #460]	; (80039ec <HAL_RCC_GetSysClockFreq+0x204>)
 800381e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003820:	e0db      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003822:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003826:	e0d8      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003828:	4b6f      	ldr	r3, [pc, #444]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003830:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d063      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383e:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	2200      	movs	r2, #0
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38
 8003848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
 8003852:	2300      	movs	r3, #0
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
 8003856:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800385a:	4622      	mov	r2, r4
 800385c:	462b      	mov	r3, r5
 800385e:	f04f 0000 	mov.w	r0, #0
 8003862:	f04f 0100 	mov.w	r1, #0
 8003866:	0159      	lsls	r1, r3, #5
 8003868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386c:	0150      	lsls	r0, r2, #5
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4621      	mov	r1, r4
 8003874:	1a51      	subs	r1, r2, r1
 8003876:	6139      	str	r1, [r7, #16]
 8003878:	4629      	mov	r1, r5
 800387a:	eb63 0301 	sbc.w	r3, r3, r1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800388c:	4659      	mov	r1, fp
 800388e:	018b      	lsls	r3, r1, #6
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003896:	4651      	mov	r1, sl
 8003898:	018a      	lsls	r2, r1, #6
 800389a:	4651      	mov	r1, sl
 800389c:	ebb2 0801 	subs.w	r8, r2, r1
 80038a0:	4659      	mov	r1, fp
 80038a2:	eb63 0901 	sbc.w	r9, r3, r1
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ba:	4690      	mov	r8, r2
 80038bc:	4699      	mov	r9, r3
 80038be:	4623      	mov	r3, r4
 80038c0:	eb18 0303 	adds.w	r3, r8, r3
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	462b      	mov	r3, r5
 80038c8:	eb49 0303 	adc.w	r3, r9, r3
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038da:	4629      	mov	r1, r5
 80038dc:	024b      	lsls	r3, r1, #9
 80038de:	4621      	mov	r1, r4
 80038e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038e4:	4621      	mov	r1, r4
 80038e6:	024a      	lsls	r2, r1, #9
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ee:	2200      	movs	r2, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f8:	f7fc fc6e 	bl	80001d8 <__aeabi_uldivmod>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4613      	mov	r3, r2
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	e058      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	099b      	lsrs	r3, r3, #6
 800390c:	2200      	movs	r2, #0
 800390e:	4618      	mov	r0, r3
 8003910:	4611      	mov	r1, r2
 8003912:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	f04f 0000 	mov.w	r0, #0
 8003928:	f04f 0100 	mov.w	r1, #0
 800392c:	0159      	lsls	r1, r3, #5
 800392e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003932:	0150      	lsls	r0, r2, #5
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4641      	mov	r1, r8
 800393a:	ebb2 0a01 	subs.w	sl, r2, r1
 800393e:	4649      	mov	r1, r9
 8003940:	eb63 0b01 	sbc.w	fp, r3, r1
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003950:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003954:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003958:	ebb2 040a 	subs.w	r4, r2, sl
 800395c:	eb63 050b 	sbc.w	r5, r3, fp
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	00eb      	lsls	r3, r5, #3
 800396a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800396e:	00e2      	lsls	r2, r4, #3
 8003970:	4614      	mov	r4, r2
 8003972:	461d      	mov	r5, r3
 8003974:	4643      	mov	r3, r8
 8003976:	18e3      	adds	r3, r4, r3
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	464b      	mov	r3, r9
 800397c:	eb45 0303 	adc.w	r3, r5, r3
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398e:	4629      	mov	r1, r5
 8003990:	028b      	lsls	r3, r1, #10
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003998:	4621      	mov	r1, r4
 800399a:	028a      	lsls	r2, r1, #10
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a2:	2200      	movs	r2, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	61fa      	str	r2, [r7, #28]
 80039a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ac:	f7fc fc14 	bl	80001d8 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetSysClockFreq+0x204>)
 80039d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3750      	adds	r7, #80	; 0x50
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	2000000c 	.word	0x2000000c

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0a9b      	lsrs	r3, r3, #10
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4903      	ldr	r1, [pc, #12]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	08004828 	.word	0x08004828

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d038      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a5c:	4b68      	ldr	r3, [pc, #416]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a62:	f7fd fb0b 	bl	800107c <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a6a:	f7fd fb07 	bl	800107c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0bd      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f0      	bne.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	071b      	lsls	r3, r3, #28
 8003a9a:	495a      	ldr	r1, [pc, #360]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aa2:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fae8 	bl	800107c <HAL_GetTick>
 8003aac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ab0:	f7fd fae4 	bl	800107c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e09a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac2:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8083 	beq.w	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	4a47      	ldr	r2, [pc, #284]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aea:	6413      	str	r3, [r2, #64]	; 0x40
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b04:	f7fd faba 	bl	800107c <HAL_GetTick>
 8003b08:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fd fab6 	bl	800107c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e06c      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02f      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d028      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b64:	4b27      	ldr	r3, [pc, #156]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d114      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fd fa84 	bl	800107c <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd fa80 	bl	800107c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e034      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0ee      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbc:	4911      	ldr	r1, [pc, #68]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	e005      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a0e      	ldr	r2, [pc, #56]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bdc:	4909      	ldr	r1, [pc, #36]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7d1a      	ldrb	r2, [r3, #20]
 8003bf2:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003bf4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	42470068 	.word	0x42470068
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42470e40 	.word	0x42470e40
 8003c10:	424711e0 	.word	0x424711e0

08003c14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d140      	bne.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003c32:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d131      	bne.n	8003cac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003c4a:	617b      	str	r3, [r7, #20]
          break;
 8003c4c:	e031      	b.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c5a:	d109      	bne.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c66:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e008      	b.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003c70:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9c:	0f1b      	lsrs	r3, r3, #28
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
          break;
 8003caa:	e002      	b.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
          break;
 8003cb0:	bf00      	nop
        }
      }
      break;
 8003cb2:	bf00      	nop
    }
  }
  return frequency;
 8003cb4:	697b      	ldr	r3, [r7, #20]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	00bb8000 	.word	0x00bb8000
 8003ccc:	007a1200 	.word	0x007a1200
 8003cd0:	00f42400 	.word	0x00f42400

08003cd4 <__libc_init_array>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	; (8003d0c <__libc_init_array+0x38>)
 8003cd8:	4c0d      	ldr	r4, [pc, #52]	; (8003d10 <__libc_init_array+0x3c>)
 8003cda:	1b64      	subs	r4, r4, r5
 8003cdc:	10a4      	asrs	r4, r4, #2
 8003cde:	2600      	movs	r6, #0
 8003ce0:	42a6      	cmp	r6, r4
 8003ce2:	d109      	bne.n	8003cf8 <__libc_init_array+0x24>
 8003ce4:	4d0b      	ldr	r5, [pc, #44]	; (8003d14 <__libc_init_array+0x40>)
 8003ce6:	4c0c      	ldr	r4, [pc, #48]	; (8003d18 <__libc_init_array+0x44>)
 8003ce8:	f000 fd8a 	bl	8004800 <_init>
 8003cec:	1b64      	subs	r4, r4, r5
 8003cee:	10a4      	asrs	r4, r4, #2
 8003cf0:	2600      	movs	r6, #0
 8003cf2:	42a6      	cmp	r6, r4
 8003cf4:	d105      	bne.n	8003d02 <__libc_init_array+0x2e>
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cfc:	4798      	blx	r3
 8003cfe:	3601      	adds	r6, #1
 8003d00:	e7ee      	b.n	8003ce0 <__libc_init_array+0xc>
 8003d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d06:	4798      	blx	r3
 8003d08:	3601      	adds	r6, #1
 8003d0a:	e7f2      	b.n	8003cf2 <__libc_init_array+0x1e>
 8003d0c:	08004c10 	.word	0x08004c10
 8003d10:	08004c10 	.word	0x08004c10
 8003d14:	08004c10 	.word	0x08004c10
 8003d18:	08004c14 	.word	0x08004c14

08003d1c <memcpy>:
 8003d1c:	440a      	add	r2, r1
 8003d1e:	4291      	cmp	r1, r2
 8003d20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003d24:	d100      	bne.n	8003d28 <memcpy+0xc>
 8003d26:	4770      	bx	lr
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d32:	4291      	cmp	r1, r2
 8003d34:	d1f9      	bne.n	8003d2a <memcpy+0xe>
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <memset>:
 8003d38:	4402      	add	r2, r0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <memset+0xa>
 8003d40:	4770      	bx	lr
 8003d42:	f803 1b01 	strb.w	r1, [r3], #1
 8003d46:	e7f9      	b.n	8003d3c <memset+0x4>

08003d48 <sinf>:
 8003d48:	ee10 3a10 	vmov	r3, s0
 8003d4c:	b507      	push	{r0, r1, r2, lr}
 8003d4e:	4a1f      	ldr	r2, [pc, #124]	; (8003dcc <sinf+0x84>)
 8003d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d54:	4293      	cmp	r3, r2
 8003d56:	dc07      	bgt.n	8003d68 <sinf+0x20>
 8003d58:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003dd0 <sinf+0x88>
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	b003      	add	sp, #12
 8003d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d64:	f000 bc48 	b.w	80045f8 <__kernel_sinf>
 8003d68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003d6c:	db04      	blt.n	8003d78 <sinf+0x30>
 8003d6e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003d72:	b003      	add	sp, #12
 8003d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d78:	4668      	mov	r0, sp
 8003d7a:	f000 f82b 	bl	8003dd4 <__ieee754_rem_pio2f>
 8003d7e:	f000 0003 	and.w	r0, r0, #3
 8003d82:	2801      	cmp	r0, #1
 8003d84:	d00a      	beq.n	8003d9c <sinf+0x54>
 8003d86:	2802      	cmp	r0, #2
 8003d88:	d00f      	beq.n	8003daa <sinf+0x62>
 8003d8a:	b9c0      	cbnz	r0, 8003dbe <sinf+0x76>
 8003d8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003d90:	ed9d 0a00 	vldr	s0, [sp]
 8003d94:	2001      	movs	r0, #1
 8003d96:	f000 fc2f 	bl	80045f8 <__kernel_sinf>
 8003d9a:	e7ea      	b.n	8003d72 <sinf+0x2a>
 8003d9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003da0:	ed9d 0a00 	vldr	s0, [sp]
 8003da4:	f000 f952 	bl	800404c <__kernel_cosf>
 8003da8:	e7e3      	b.n	8003d72 <sinf+0x2a>
 8003daa:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dae:	ed9d 0a00 	vldr	s0, [sp]
 8003db2:	2001      	movs	r0, #1
 8003db4:	f000 fc20 	bl	80045f8 <__kernel_sinf>
 8003db8:	eeb1 0a40 	vneg.f32	s0, s0
 8003dbc:	e7d9      	b.n	8003d72 <sinf+0x2a>
 8003dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dc2:	ed9d 0a00 	vldr	s0, [sp]
 8003dc6:	f000 f941 	bl	800404c <__kernel_cosf>
 8003dca:	e7f5      	b.n	8003db8 <sinf+0x70>
 8003dcc:	3f490fd8 	.word	0x3f490fd8
 8003dd0:	00000000 	.word	0x00000000

08003dd4 <__ieee754_rem_pio2f>:
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	ee10 6a10 	vmov	r6, s0
 8003dda:	4b8e      	ldr	r3, [pc, #568]	; (8004014 <__ieee754_rem_pio2f+0x240>)
 8003ddc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003de0:	429d      	cmp	r5, r3
 8003de2:	b087      	sub	sp, #28
 8003de4:	eef0 7a40 	vmov.f32	s15, s0
 8003de8:	4604      	mov	r4, r0
 8003dea:	dc05      	bgt.n	8003df8 <__ieee754_rem_pio2f+0x24>
 8003dec:	2300      	movs	r3, #0
 8003dee:	ed80 0a00 	vstr	s0, [r0]
 8003df2:	6043      	str	r3, [r0, #4]
 8003df4:	2000      	movs	r0, #0
 8003df6:	e01a      	b.n	8003e2e <__ieee754_rem_pio2f+0x5a>
 8003df8:	4b87      	ldr	r3, [pc, #540]	; (8004018 <__ieee754_rem_pio2f+0x244>)
 8003dfa:	429d      	cmp	r5, r3
 8003dfc:	dc46      	bgt.n	8003e8c <__ieee754_rem_pio2f+0xb8>
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800401c <__ieee754_rem_pio2f+0x248>
 8003e04:	4b86      	ldr	r3, [pc, #536]	; (8004020 <__ieee754_rem_pio2f+0x24c>)
 8003e06:	f025 050f 	bic.w	r5, r5, #15
 8003e0a:	dd1f      	ble.n	8003e4c <__ieee754_rem_pio2f+0x78>
 8003e0c:	429d      	cmp	r5, r3
 8003e0e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003e12:	d00e      	beq.n	8003e32 <__ieee754_rem_pio2f+0x5e>
 8003e14:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004024 <__ieee754_rem_pio2f+0x250>
 8003e18:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8003e1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003e20:	ed80 0a00 	vstr	s0, [r0]
 8003e24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e28:	2001      	movs	r0, #1
 8003e2a:	edc4 7a01 	vstr	s15, [r4, #4]
 8003e2e:	b007      	add	sp, #28
 8003e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e32:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004028 <__ieee754_rem_pio2f+0x254>
 8003e36:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800402c <__ieee754_rem_pio2f+0x258>
 8003e3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003e3e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8003e42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e46:	edc0 6a00 	vstr	s13, [r0]
 8003e4a:	e7eb      	b.n	8003e24 <__ieee754_rem_pio2f+0x50>
 8003e4c:	429d      	cmp	r5, r3
 8003e4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e52:	d00e      	beq.n	8003e72 <__ieee754_rem_pio2f+0x9e>
 8003e54:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004024 <__ieee754_rem_pio2f+0x250>
 8003e58:	ee37 0a87 	vadd.f32	s0, s15, s14
 8003e5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003e60:	ed80 0a00 	vstr	s0, [r0]
 8003e64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e6c:	edc4 7a01 	vstr	s15, [r4, #4]
 8003e70:	e7dd      	b.n	8003e2e <__ieee754_rem_pio2f+0x5a>
 8003e72:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004028 <__ieee754_rem_pio2f+0x254>
 8003e76:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800402c <__ieee754_rem_pio2f+0x258>
 8003e7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e7e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003e82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e86:	edc0 6a00 	vstr	s13, [r0]
 8003e8a:	e7eb      	b.n	8003e64 <__ieee754_rem_pio2f+0x90>
 8003e8c:	4b68      	ldr	r3, [pc, #416]	; (8004030 <__ieee754_rem_pio2f+0x25c>)
 8003e8e:	429d      	cmp	r5, r3
 8003e90:	dc72      	bgt.n	8003f78 <__ieee754_rem_pio2f+0x1a4>
 8003e92:	f000 fbf9 	bl	8004688 <fabsf>
 8003e96:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004034 <__ieee754_rem_pio2f+0x260>
 8003e9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003e9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eaa:	ee17 0a90 	vmov	r0, s15
 8003eae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800401c <__ieee754_rem_pio2f+0x248>
 8003eb2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003eb6:	281f      	cmp	r0, #31
 8003eb8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004024 <__ieee754_rem_pio2f+0x250>
 8003ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec0:	eeb1 6a47 	vneg.f32	s12, s14
 8003ec4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003ec8:	ee16 2a90 	vmov	r2, s13
 8003ecc:	dc1c      	bgt.n	8003f08 <__ieee754_rem_pio2f+0x134>
 8003ece:	495a      	ldr	r1, [pc, #360]	; (8004038 <__ieee754_rem_pio2f+0x264>)
 8003ed0:	1e47      	subs	r7, r0, #1
 8003ed2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003ed6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8003eda:	428b      	cmp	r3, r1
 8003edc:	d014      	beq.n	8003f08 <__ieee754_rem_pio2f+0x134>
 8003ede:	6022      	str	r2, [r4, #0]
 8003ee0:	ed94 7a00 	vldr	s14, [r4]
 8003ee4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003ee8:	2e00      	cmp	r6, #0
 8003eea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003eee:	ed84 0a01 	vstr	s0, [r4, #4]
 8003ef2:	da9c      	bge.n	8003e2e <__ieee754_rem_pio2f+0x5a>
 8003ef4:	eeb1 7a47 	vneg.f32	s14, s14
 8003ef8:	eeb1 0a40 	vneg.f32	s0, s0
 8003efc:	ed84 7a00 	vstr	s14, [r4]
 8003f00:	ed84 0a01 	vstr	s0, [r4, #4]
 8003f04:	4240      	negs	r0, r0
 8003f06:	e792      	b.n	8003e2e <__ieee754_rem_pio2f+0x5a>
 8003f08:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003f0c:	15eb      	asrs	r3, r5, #23
 8003f0e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8003f12:	2d08      	cmp	r5, #8
 8003f14:	dde3      	ble.n	8003ede <__ieee754_rem_pio2f+0x10a>
 8003f16:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004028 <__ieee754_rem_pio2f+0x254>
 8003f1a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800402c <__ieee754_rem_pio2f+0x258>
 8003f1e:	eef0 6a40 	vmov.f32	s13, s0
 8003f22:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003f26:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003f2a:	eea6 0a27 	vfma.f32	s0, s12, s15
 8003f2e:	eef0 7a40 	vmov.f32	s15, s0
 8003f32:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8003f36:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8003f3a:	ee15 2a90 	vmov	r2, s11
 8003f3e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8003f42:	1a5b      	subs	r3, r3, r1
 8003f44:	2b19      	cmp	r3, #25
 8003f46:	dc04      	bgt.n	8003f52 <__ieee754_rem_pio2f+0x17e>
 8003f48:	edc4 5a00 	vstr	s11, [r4]
 8003f4c:	eeb0 0a66 	vmov.f32	s0, s13
 8003f50:	e7c6      	b.n	8003ee0 <__ieee754_rem_pio2f+0x10c>
 8003f52:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800403c <__ieee754_rem_pio2f+0x268>
 8003f56:	eeb0 0a66 	vmov.f32	s0, s13
 8003f5a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8003f5e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8003f62:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004040 <__ieee754_rem_pio2f+0x26c>
 8003f66:	eee6 7a25 	vfma.f32	s15, s12, s11
 8003f6a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8003f6e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003f72:	ed84 7a00 	vstr	s14, [r4]
 8003f76:	e7b3      	b.n	8003ee0 <__ieee754_rem_pio2f+0x10c>
 8003f78:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003f7c:	db06      	blt.n	8003f8c <__ieee754_rem_pio2f+0x1b8>
 8003f7e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8003f82:	edc0 7a01 	vstr	s15, [r0, #4]
 8003f86:	edc0 7a00 	vstr	s15, [r0]
 8003f8a:	e733      	b.n	8003df4 <__ieee754_rem_pio2f+0x20>
 8003f8c:	15ea      	asrs	r2, r5, #23
 8003f8e:	3a86      	subs	r2, #134	; 0x86
 8003f90:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003f94:	ee07 3a90 	vmov	s15, r3
 8003f98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003f9c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004044 <__ieee754_rem_pio2f+0x270>
 8003fa0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fa8:	ed8d 7a03 	vstr	s14, [sp, #12]
 8003fac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003fb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fbc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003fc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fcc:	edcd 7a05 	vstr	s15, [sp, #20]
 8003fd0:	d11e      	bne.n	8004010 <__ieee754_rem_pio2f+0x23c>
 8003fd2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	bf14      	ite	ne
 8003fdc:	2302      	movne	r3, #2
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	4919      	ldr	r1, [pc, #100]	; (8004048 <__ieee754_rem_pio2f+0x274>)
 8003fe2:	9101      	str	r1, [sp, #4]
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	9100      	str	r1, [sp, #0]
 8003fe8:	a803      	add	r0, sp, #12
 8003fea:	4621      	mov	r1, r4
 8003fec:	f000 f88e 	bl	800410c <__kernel_rem_pio2f>
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	f6bf af1c 	bge.w	8003e2e <__ieee754_rem_pio2f+0x5a>
 8003ff6:	edd4 7a00 	vldr	s15, [r4]
 8003ffa:	eef1 7a67 	vneg.f32	s15, s15
 8003ffe:	edc4 7a00 	vstr	s15, [r4]
 8004002:	edd4 7a01 	vldr	s15, [r4, #4]
 8004006:	eef1 7a67 	vneg.f32	s15, s15
 800400a:	edc4 7a01 	vstr	s15, [r4, #4]
 800400e:	e779      	b.n	8003f04 <__ieee754_rem_pio2f+0x130>
 8004010:	2303      	movs	r3, #3
 8004012:	e7e5      	b.n	8003fe0 <__ieee754_rem_pio2f+0x20c>
 8004014:	3f490fd8 	.word	0x3f490fd8
 8004018:	4016cbe3 	.word	0x4016cbe3
 800401c:	3fc90f80 	.word	0x3fc90f80
 8004020:	3fc90fd0 	.word	0x3fc90fd0
 8004024:	37354443 	.word	0x37354443
 8004028:	37354400 	.word	0x37354400
 800402c:	2e85a308 	.word	0x2e85a308
 8004030:	43490f80 	.word	0x43490f80
 8004034:	3f22f984 	.word	0x3f22f984
 8004038:	08004838 	.word	0x08004838
 800403c:	2e85a300 	.word	0x2e85a300
 8004040:	248d3132 	.word	0x248d3132
 8004044:	43800000 	.word	0x43800000
 8004048:	080048b8 	.word	0x080048b8

0800404c <__kernel_cosf>:
 800404c:	ee10 3a10 	vmov	r3, s0
 8004050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004054:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004058:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800405c:	da05      	bge.n	800406a <__kernel_cosf+0x1e>
 800405e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004062:	ee17 2a90 	vmov	r2, s15
 8004066:	2a00      	cmp	r2, #0
 8004068:	d03d      	beq.n	80040e6 <__kernel_cosf+0x9a>
 800406a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800406e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80040ec <__kernel_cosf+0xa0>
 8004072:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80040f0 <__kernel_cosf+0xa4>
 8004076:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80040f4 <__kernel_cosf+0xa8>
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <__kernel_cosf+0xac>)
 800407c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004080:	4293      	cmp	r3, r2
 8004082:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80040fc <__kernel_cosf+0xb0>
 8004086:	eee7 7a25 	vfma.f32	s15, s14, s11
 800408a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004100 <__kernel_cosf+0xb4>
 800408e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004092:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004104 <__kernel_cosf+0xb8>
 8004096:	eee7 7a25 	vfma.f32	s15, s14, s11
 800409a:	eeb0 7a66 	vmov.f32	s14, s13
 800409e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80040a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80040a6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80040aa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80040ae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80040b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80040b6:	dc04      	bgt.n	80040c2 <__kernel_cosf+0x76>
 80040b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80040bc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80040c0:	4770      	bx	lr
 80040c2:	4a11      	ldr	r2, [pc, #68]	; (8004108 <__kernel_cosf+0xbc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfda      	itte	le
 80040c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80040cc:	ee06 3a90 	vmovle	s13, r3
 80040d0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80040d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80040d8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80040dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80040e4:	4770      	bx	lr
 80040e6:	eeb0 0a46 	vmov.f32	s0, s12
 80040ea:	4770      	bx	lr
 80040ec:	ad47d74e 	.word	0xad47d74e
 80040f0:	310f74f6 	.word	0x310f74f6
 80040f4:	3d2aaaab 	.word	0x3d2aaaab
 80040f8:	3e999999 	.word	0x3e999999
 80040fc:	b493f27c 	.word	0xb493f27c
 8004100:	37d00d01 	.word	0x37d00d01
 8004104:	bab60b61 	.word	0xbab60b61
 8004108:	3f480000 	.word	0x3f480000

0800410c <__kernel_rem_pio2f>:
 800410c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004110:	ed2d 8b04 	vpush	{d8-d9}
 8004114:	b0d9      	sub	sp, #356	; 0x164
 8004116:	4688      	mov	r8, r1
 8004118:	9002      	str	r0, [sp, #8]
 800411a:	49bb      	ldr	r1, [pc, #748]	; (8004408 <__kernel_rem_pio2f+0x2fc>)
 800411c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8004124:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004128:	1e59      	subs	r1, r3, #1
 800412a:	1d13      	adds	r3, r2, #4
 800412c:	db27      	blt.n	800417e <__kernel_rem_pio2f+0x72>
 800412e:	f1b2 0b03 	subs.w	fp, r2, #3
 8004132:	bf48      	it	mi
 8004134:	f102 0b04 	addmi.w	fp, r2, #4
 8004138:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800413c:	1c45      	adds	r5, r0, #1
 800413e:	00ec      	lsls	r4, r5, #3
 8004140:	1a47      	subs	r7, r0, r1
 8004142:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004418 <__kernel_rem_pio2f+0x30c>
 8004146:	9403      	str	r4, [sp, #12]
 8004148:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800414c:	eb0a 0c01 	add.w	ip, sl, r1
 8004150:	ae1c      	add	r6, sp, #112	; 0x70
 8004152:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8004156:	2400      	movs	r4, #0
 8004158:	4564      	cmp	r4, ip
 800415a:	dd12      	ble.n	8004182 <__kernel_rem_pio2f+0x76>
 800415c:	9b01      	ldr	r3, [sp, #4]
 800415e:	ac1c      	add	r4, sp, #112	; 0x70
 8004160:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004164:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8004168:	f04f 0c00 	mov.w	ip, #0
 800416c:	45d4      	cmp	ip, sl
 800416e:	dc27      	bgt.n	80041c0 <__kernel_rem_pio2f+0xb4>
 8004170:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004174:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004418 <__kernel_rem_pio2f+0x30c>
 8004178:	4627      	mov	r7, r4
 800417a:	2600      	movs	r6, #0
 800417c:	e016      	b.n	80041ac <__kernel_rem_pio2f+0xa0>
 800417e:	2000      	movs	r0, #0
 8004180:	e7dc      	b.n	800413c <__kernel_rem_pio2f+0x30>
 8004182:	42e7      	cmn	r7, r4
 8004184:	bf5d      	ittte	pl
 8004186:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800418a:	ee07 3a90 	vmovpl	s15, r3
 800418e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004192:	eef0 7a47 	vmovmi.f32	s15, s14
 8004196:	ece6 7a01 	vstmia	r6!, {s15}
 800419a:	3401      	adds	r4, #1
 800419c:	e7dc      	b.n	8004158 <__kernel_rem_pio2f+0x4c>
 800419e:	ecf9 6a01 	vldmia	r9!, {s13}
 80041a2:	ed97 7a00 	vldr	s14, [r7]
 80041a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80041aa:	3601      	adds	r6, #1
 80041ac:	428e      	cmp	r6, r1
 80041ae:	f1a7 0704 	sub.w	r7, r7, #4
 80041b2:	ddf4      	ble.n	800419e <__kernel_rem_pio2f+0x92>
 80041b4:	eceb 7a01 	vstmia	fp!, {s15}
 80041b8:	f10c 0c01 	add.w	ip, ip, #1
 80041bc:	3404      	adds	r4, #4
 80041be:	e7d5      	b.n	800416c <__kernel_rem_pio2f+0x60>
 80041c0:	ab08      	add	r3, sp, #32
 80041c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80041c6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004414 <__kernel_rem_pio2f+0x308>
 80041ca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004410 <__kernel_rem_pio2f+0x304>
 80041ce:	9304      	str	r3, [sp, #16]
 80041d0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80041d4:	4656      	mov	r6, sl
 80041d6:	00b3      	lsls	r3, r6, #2
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	ab58      	add	r3, sp, #352	; 0x160
 80041dc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80041e0:	ac08      	add	r4, sp, #32
 80041e2:	ab44      	add	r3, sp, #272	; 0x110
 80041e4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80041e8:	46a4      	mov	ip, r4
 80041ea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80041ee:	4637      	mov	r7, r6
 80041f0:	2f00      	cmp	r7, #0
 80041f2:	f1a0 0004 	sub.w	r0, r0, #4
 80041f6:	dc4f      	bgt.n	8004298 <__kernel_rem_pio2f+0x18c>
 80041f8:	4628      	mov	r0, r5
 80041fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80041fe:	f000 fa8d 	bl	800471c <scalbnf>
 8004202:	eeb0 8a40 	vmov.f32	s16, s0
 8004206:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800420a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800420e:	f000 fa43 	bl	8004698 <floorf>
 8004212:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004216:	eea0 8a67 	vfms.f32	s16, s0, s15
 800421a:	2d00      	cmp	r5, #0
 800421c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004220:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004224:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004228:	ee17 9a90 	vmov	r9, s15
 800422c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004230:	dd44      	ble.n	80042bc <__kernel_rem_pio2f+0x1b0>
 8004232:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8004236:	ab08      	add	r3, sp, #32
 8004238:	f1c5 0e08 	rsb	lr, r5, #8
 800423c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004240:	fa47 f00e 	asr.w	r0, r7, lr
 8004244:	4481      	add	r9, r0
 8004246:	fa00 f00e 	lsl.w	r0, r0, lr
 800424a:	1a3f      	subs	r7, r7, r0
 800424c:	f1c5 0007 	rsb	r0, r5, #7
 8004250:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8004254:	4107      	asrs	r7, r0
 8004256:	2f00      	cmp	r7, #0
 8004258:	dd3f      	ble.n	80042da <__kernel_rem_pio2f+0x1ce>
 800425a:	f04f 0e00 	mov.w	lr, #0
 800425e:	f109 0901 	add.w	r9, r9, #1
 8004262:	4673      	mov	r3, lr
 8004264:	4576      	cmp	r6, lr
 8004266:	dc6b      	bgt.n	8004340 <__kernel_rem_pio2f+0x234>
 8004268:	2d00      	cmp	r5, #0
 800426a:	dd04      	ble.n	8004276 <__kernel_rem_pio2f+0x16a>
 800426c:	2d01      	cmp	r5, #1
 800426e:	d078      	beq.n	8004362 <__kernel_rem_pio2f+0x256>
 8004270:	2d02      	cmp	r5, #2
 8004272:	f000 8081 	beq.w	8004378 <__kernel_rem_pio2f+0x26c>
 8004276:	2f02      	cmp	r7, #2
 8004278:	d12f      	bne.n	80042da <__kernel_rem_pio2f+0x1ce>
 800427a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800427e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004282:	b353      	cbz	r3, 80042da <__kernel_rem_pio2f+0x1ce>
 8004284:	4628      	mov	r0, r5
 8004286:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800428a:	f000 fa47 	bl	800471c <scalbnf>
 800428e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004292:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004296:	e020      	b.n	80042da <__kernel_rem_pio2f+0x1ce>
 8004298:	ee60 7a28 	vmul.f32	s15, s0, s17
 800429c:	3f01      	subs	r7, #1
 800429e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80042aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80042ae:	ecac 0a01 	vstmia	ip!, {s0}
 80042b2:	ed90 0a00 	vldr	s0, [r0]
 80042b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80042ba:	e799      	b.n	80041f0 <__kernel_rem_pio2f+0xe4>
 80042bc:	d105      	bne.n	80042ca <__kernel_rem_pio2f+0x1be>
 80042be:	1e70      	subs	r0, r6, #1
 80042c0:	ab08      	add	r3, sp, #32
 80042c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80042c6:	11ff      	asrs	r7, r7, #7
 80042c8:	e7c5      	b.n	8004256 <__kernel_rem_pio2f+0x14a>
 80042ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80042ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	da31      	bge.n	800433c <__kernel_rem_pio2f+0x230>
 80042d8:	2700      	movs	r7, #0
 80042da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	f040 809b 	bne.w	800441c <__kernel_rem_pio2f+0x310>
 80042e6:	1e74      	subs	r4, r6, #1
 80042e8:	46a4      	mov	ip, r4
 80042ea:	2000      	movs	r0, #0
 80042ec:	45d4      	cmp	ip, sl
 80042ee:	da4a      	bge.n	8004386 <__kernel_rem_pio2f+0x27a>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	d07a      	beq.n	80043ea <__kernel_rem_pio2f+0x2de>
 80042f4:	ab08      	add	r3, sp, #32
 80042f6:	3d08      	subs	r5, #8
 80042f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8081 	beq.w	8004404 <__kernel_rem_pio2f+0x2f8>
 8004302:	4628      	mov	r0, r5
 8004304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004308:	00a5      	lsls	r5, r4, #2
 800430a:	f000 fa07 	bl	800471c <scalbnf>
 800430e:	aa44      	add	r2, sp, #272	; 0x110
 8004310:	1d2b      	adds	r3, r5, #4
 8004312:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004414 <__kernel_rem_pio2f+0x308>
 8004316:	18d1      	adds	r1, r2, r3
 8004318:	4622      	mov	r2, r4
 800431a:	2a00      	cmp	r2, #0
 800431c:	f280 80ae 	bge.w	800447c <__kernel_rem_pio2f+0x370>
 8004320:	4622      	mov	r2, r4
 8004322:	2a00      	cmp	r2, #0
 8004324:	f2c0 80cc 	blt.w	80044c0 <__kernel_rem_pio2f+0x3b4>
 8004328:	a944      	add	r1, sp, #272	; 0x110
 800432a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800432e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800440c <__kernel_rem_pio2f+0x300>
 8004332:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004418 <__kernel_rem_pio2f+0x30c>
 8004336:	2000      	movs	r0, #0
 8004338:	1aa1      	subs	r1, r4, r2
 800433a:	e0b6      	b.n	80044aa <__kernel_rem_pio2f+0x39e>
 800433c:	2702      	movs	r7, #2
 800433e:	e78c      	b.n	800425a <__kernel_rem_pio2f+0x14e>
 8004340:	6820      	ldr	r0, [r4, #0]
 8004342:	b94b      	cbnz	r3, 8004358 <__kernel_rem_pio2f+0x24c>
 8004344:	b118      	cbz	r0, 800434e <__kernel_rem_pio2f+0x242>
 8004346:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800434a:	6020      	str	r0, [r4, #0]
 800434c:	2001      	movs	r0, #1
 800434e:	f10e 0e01 	add.w	lr, lr, #1
 8004352:	3404      	adds	r4, #4
 8004354:	4603      	mov	r3, r0
 8004356:	e785      	b.n	8004264 <__kernel_rem_pio2f+0x158>
 8004358:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800435c:	6020      	str	r0, [r4, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	e7f5      	b.n	800434e <__kernel_rem_pio2f+0x242>
 8004362:	1e74      	subs	r4, r6, #1
 8004364:	a808      	add	r0, sp, #32
 8004366:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800436a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800436e:	f10d 0c20 	add.w	ip, sp, #32
 8004372:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004376:	e77e      	b.n	8004276 <__kernel_rem_pio2f+0x16a>
 8004378:	1e74      	subs	r4, r6, #1
 800437a:	a808      	add	r0, sp, #32
 800437c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004380:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004384:	e7f3      	b.n	800436e <__kernel_rem_pio2f+0x262>
 8004386:	ab08      	add	r3, sp, #32
 8004388:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800438c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004390:	4318      	orrs	r0, r3
 8004392:	e7ab      	b.n	80042ec <__kernel_rem_pio2f+0x1e0>
 8004394:	f10c 0c01 	add.w	ip, ip, #1
 8004398:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800439c:	2c00      	cmp	r4, #0
 800439e:	d0f9      	beq.n	8004394 <__kernel_rem_pio2f+0x288>
 80043a0:	9b05      	ldr	r3, [sp, #20]
 80043a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80043a6:	eb0d 0003 	add.w	r0, sp, r3
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	18f4      	adds	r4, r6, r3
 80043ae:	ab1c      	add	r3, sp, #112	; 0x70
 80043b0:	1c77      	adds	r7, r6, #1
 80043b2:	384c      	subs	r0, #76	; 0x4c
 80043b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80043b8:	4466      	add	r6, ip
 80043ba:	42be      	cmp	r6, r7
 80043bc:	f6ff af0b 	blt.w	80041d6 <__kernel_rem_pio2f+0xca>
 80043c0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80043c4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80043c8:	ee07 3a90 	vmov	s15, r3
 80043cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d0:	f04f 0c00 	mov.w	ip, #0
 80043d4:	ece4 7a01 	vstmia	r4!, {s15}
 80043d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004418 <__kernel_rem_pio2f+0x30c>
 80043dc:	46a1      	mov	r9, r4
 80043de:	458c      	cmp	ip, r1
 80043e0:	dd07      	ble.n	80043f2 <__kernel_rem_pio2f+0x2e6>
 80043e2:	ece0 7a01 	vstmia	r0!, {s15}
 80043e6:	3701      	adds	r7, #1
 80043e8:	e7e7      	b.n	80043ba <__kernel_rem_pio2f+0x2ae>
 80043ea:	9804      	ldr	r0, [sp, #16]
 80043ec:	f04f 0c01 	mov.w	ip, #1
 80043f0:	e7d2      	b.n	8004398 <__kernel_rem_pio2f+0x28c>
 80043f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80043f6:	ed39 7a01 	vldmdb	r9!, {s14}
 80043fa:	f10c 0c01 	add.w	ip, ip, #1
 80043fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004402:	e7ec      	b.n	80043de <__kernel_rem_pio2f+0x2d2>
 8004404:	3c01      	subs	r4, #1
 8004406:	e775      	b.n	80042f4 <__kernel_rem_pio2f+0x1e8>
 8004408:	08004bfc 	.word	0x08004bfc
 800440c:	08004bd0 	.word	0x08004bd0
 8004410:	43800000 	.word	0x43800000
 8004414:	3b800000 	.word	0x3b800000
 8004418:	00000000 	.word	0x00000000
 800441c:	9b03      	ldr	r3, [sp, #12]
 800441e:	eeb0 0a48 	vmov.f32	s0, s16
 8004422:	1a98      	subs	r0, r3, r2
 8004424:	f000 f97a 	bl	800471c <scalbnf>
 8004428:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004410 <__kernel_rem_pio2f+0x304>
 800442c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004434:	db19      	blt.n	800446a <__kernel_rem_pio2f+0x35e>
 8004436:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004414 <__kernel_rem_pio2f+0x308>
 800443a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800443e:	aa08      	add	r2, sp, #32
 8004440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004444:	1c74      	adds	r4, r6, #1
 8004446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444a:	3508      	adds	r5, #8
 800444c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004454:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004458:	ee10 3a10 	vmov	r3, s0
 800445c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004460:	ee17 3a90 	vmov	r3, s15
 8004464:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004468:	e74b      	b.n	8004302 <__kernel_rem_pio2f+0x1f6>
 800446a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800446e:	aa08      	add	r2, sp, #32
 8004470:	ee10 3a10 	vmov	r3, s0
 8004474:	4634      	mov	r4, r6
 8004476:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800447a:	e742      	b.n	8004302 <__kernel_rem_pio2f+0x1f6>
 800447c:	a808      	add	r0, sp, #32
 800447e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004482:	9001      	str	r0, [sp, #4]
 8004484:	ee07 0a90 	vmov	s15, r0
 8004488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448c:	3a01      	subs	r2, #1
 800448e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004492:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004496:	ed61 7a01 	vstmdb	r1!, {s15}
 800449a:	e73e      	b.n	800431a <__kernel_rem_pio2f+0x20e>
 800449c:	ecfc 6a01 	vldmia	ip!, {s13}
 80044a0:	ecb6 7a01 	vldmia	r6!, {s14}
 80044a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80044a8:	3001      	adds	r0, #1
 80044aa:	4550      	cmp	r0, sl
 80044ac:	dc01      	bgt.n	80044b2 <__kernel_rem_pio2f+0x3a6>
 80044ae:	4288      	cmp	r0, r1
 80044b0:	ddf4      	ble.n	800449c <__kernel_rem_pio2f+0x390>
 80044b2:	a858      	add	r0, sp, #352	; 0x160
 80044b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80044b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80044bc:	3a01      	subs	r2, #1
 80044be:	e730      	b.n	8004322 <__kernel_rem_pio2f+0x216>
 80044c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80044c2:	2a02      	cmp	r2, #2
 80044c4:	dc09      	bgt.n	80044da <__kernel_rem_pio2f+0x3ce>
 80044c6:	2a00      	cmp	r2, #0
 80044c8:	dc2a      	bgt.n	8004520 <__kernel_rem_pio2f+0x414>
 80044ca:	d043      	beq.n	8004554 <__kernel_rem_pio2f+0x448>
 80044cc:	f009 0007 	and.w	r0, r9, #7
 80044d0:	b059      	add	sp, #356	; 0x164
 80044d2:	ecbd 8b04 	vpop	{d8-d9}
 80044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d1f5      	bne.n	80044cc <__kernel_rem_pio2f+0x3c0>
 80044e0:	ab30      	add	r3, sp, #192	; 0xc0
 80044e2:	442b      	add	r3, r5
 80044e4:	461a      	mov	r2, r3
 80044e6:	4619      	mov	r1, r3
 80044e8:	4620      	mov	r0, r4
 80044ea:	2800      	cmp	r0, #0
 80044ec:	f1a1 0104 	sub.w	r1, r1, #4
 80044f0:	dc51      	bgt.n	8004596 <__kernel_rem_pio2f+0x48a>
 80044f2:	4621      	mov	r1, r4
 80044f4:	2901      	cmp	r1, #1
 80044f6:	f1a2 0204 	sub.w	r2, r2, #4
 80044fa:	dc5c      	bgt.n	80045b6 <__kernel_rem_pio2f+0x4aa>
 80044fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004418 <__kernel_rem_pio2f+0x30c>
 8004500:	3304      	adds	r3, #4
 8004502:	2c01      	cmp	r4, #1
 8004504:	dc67      	bgt.n	80045d6 <__kernel_rem_pio2f+0x4ca>
 8004506:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800450a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800450e:	2f00      	cmp	r7, #0
 8004510:	d167      	bne.n	80045e2 <__kernel_rem_pio2f+0x4d6>
 8004512:	edc8 6a00 	vstr	s13, [r8]
 8004516:	ed88 7a01 	vstr	s14, [r8, #4]
 800451a:	edc8 7a02 	vstr	s15, [r8, #8]
 800451e:	e7d5      	b.n	80044cc <__kernel_rem_pio2f+0x3c0>
 8004520:	aa30      	add	r2, sp, #192	; 0xc0
 8004522:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004418 <__kernel_rem_pio2f+0x30c>
 8004526:	4413      	add	r3, r2
 8004528:	4622      	mov	r2, r4
 800452a:	2a00      	cmp	r2, #0
 800452c:	da24      	bge.n	8004578 <__kernel_rem_pio2f+0x46c>
 800452e:	b34f      	cbz	r7, 8004584 <__kernel_rem_pio2f+0x478>
 8004530:	eef1 7a47 	vneg.f32	s15, s14
 8004534:	edc8 7a00 	vstr	s15, [r8]
 8004538:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800453c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004540:	aa31      	add	r2, sp, #196	; 0xc4
 8004542:	2301      	movs	r3, #1
 8004544:	429c      	cmp	r4, r3
 8004546:	da20      	bge.n	800458a <__kernel_rem_pio2f+0x47e>
 8004548:	b10f      	cbz	r7, 800454e <__kernel_rem_pio2f+0x442>
 800454a:	eef1 7a67 	vneg.f32	s15, s15
 800454e:	edc8 7a01 	vstr	s15, [r8, #4]
 8004552:	e7bb      	b.n	80044cc <__kernel_rem_pio2f+0x3c0>
 8004554:	aa30      	add	r2, sp, #192	; 0xc0
 8004556:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004418 <__kernel_rem_pio2f+0x30c>
 800455a:	4413      	add	r3, r2
 800455c:	2c00      	cmp	r4, #0
 800455e:	da05      	bge.n	800456c <__kernel_rem_pio2f+0x460>
 8004560:	b10f      	cbz	r7, 8004566 <__kernel_rem_pio2f+0x45a>
 8004562:	eef1 7a67 	vneg.f32	s15, s15
 8004566:	edc8 7a00 	vstr	s15, [r8]
 800456a:	e7af      	b.n	80044cc <__kernel_rem_pio2f+0x3c0>
 800456c:	ed33 7a01 	vldmdb	r3!, {s14}
 8004570:	3c01      	subs	r4, #1
 8004572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004576:	e7f1      	b.n	800455c <__kernel_rem_pio2f+0x450>
 8004578:	ed73 7a01 	vldmdb	r3!, {s15}
 800457c:	3a01      	subs	r2, #1
 800457e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004582:	e7d2      	b.n	800452a <__kernel_rem_pio2f+0x41e>
 8004584:	eef0 7a47 	vmov.f32	s15, s14
 8004588:	e7d4      	b.n	8004534 <__kernel_rem_pio2f+0x428>
 800458a:	ecb2 7a01 	vldmia	r2!, {s14}
 800458e:	3301      	adds	r3, #1
 8004590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004594:	e7d6      	b.n	8004544 <__kernel_rem_pio2f+0x438>
 8004596:	edd1 7a00 	vldr	s15, [r1]
 800459a:	edd1 6a01 	vldr	s13, [r1, #4]
 800459e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80045a2:	3801      	subs	r0, #1
 80045a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045a8:	ed81 7a00 	vstr	s14, [r1]
 80045ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b0:	edc1 7a01 	vstr	s15, [r1, #4]
 80045b4:	e799      	b.n	80044ea <__kernel_rem_pio2f+0x3de>
 80045b6:	edd2 7a00 	vldr	s15, [r2]
 80045ba:	edd2 6a01 	vldr	s13, [r2, #4]
 80045be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80045c2:	3901      	subs	r1, #1
 80045c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045c8:	ed82 7a00 	vstr	s14, [r2]
 80045cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80045d4:	e78e      	b.n	80044f4 <__kernel_rem_pio2f+0x3e8>
 80045d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80045da:	3c01      	subs	r4, #1
 80045dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045e0:	e78f      	b.n	8004502 <__kernel_rem_pio2f+0x3f6>
 80045e2:	eef1 6a66 	vneg.f32	s13, s13
 80045e6:	eeb1 7a47 	vneg.f32	s14, s14
 80045ea:	edc8 6a00 	vstr	s13, [r8]
 80045ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80045f2:	eef1 7a67 	vneg.f32	s15, s15
 80045f6:	e790      	b.n	800451a <__kernel_rem_pio2f+0x40e>

080045f8 <__kernel_sinf>:
 80045f8:	ee10 3a10 	vmov	r3, s0
 80045fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004600:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004604:	da04      	bge.n	8004610 <__kernel_sinf+0x18>
 8004606:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800460a:	ee17 3a90 	vmov	r3, s15
 800460e:	b35b      	cbz	r3, 8004668 <__kernel_sinf+0x70>
 8004610:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004614:	eddf 7a15 	vldr	s15, [pc, #84]	; 800466c <__kernel_sinf+0x74>
 8004618:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004670 <__kernel_sinf+0x78>
 800461c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004620:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004674 <__kernel_sinf+0x7c>
 8004624:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004628:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004678 <__kernel_sinf+0x80>
 800462c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004630:	eddf 7a12 	vldr	s15, [pc, #72]	; 800467c <__kernel_sinf+0x84>
 8004634:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004638:	eee6 7a07 	vfma.f32	s15, s12, s14
 800463c:	b930      	cbnz	r0, 800464c <__kernel_sinf+0x54>
 800463e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004680 <__kernel_sinf+0x88>
 8004642:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004646:	eea6 0a26 	vfma.f32	s0, s12, s13
 800464a:	4770      	bx	lr
 800464c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004650:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004654:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004658:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800465c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004684 <__kernel_sinf+0x8c>
 8004660:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004664:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	2f2ec9d3 	.word	0x2f2ec9d3
 8004670:	b2d72f34 	.word	0xb2d72f34
 8004674:	3638ef1b 	.word	0x3638ef1b
 8004678:	b9500d01 	.word	0xb9500d01
 800467c:	3c088889 	.word	0x3c088889
 8004680:	be2aaaab 	.word	0xbe2aaaab
 8004684:	3e2aaaab 	.word	0x3e2aaaab

08004688 <fabsf>:
 8004688:	ee10 3a10 	vmov	r3, s0
 800468c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004690:	ee00 3a10 	vmov	s0, r3
 8004694:	4770      	bx	lr
	...

08004698 <floorf>:
 8004698:	ee10 3a10 	vmov	r3, s0
 800469c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80046a0:	3a7f      	subs	r2, #127	; 0x7f
 80046a2:	2a16      	cmp	r2, #22
 80046a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046a8:	dc2a      	bgt.n	8004700 <floorf+0x68>
 80046aa:	2a00      	cmp	r2, #0
 80046ac:	da11      	bge.n	80046d2 <floorf+0x3a>
 80046ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004710 <floorf+0x78>
 80046b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	dd05      	ble.n	80046cc <floorf+0x34>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da23      	bge.n	800470c <floorf+0x74>
 80046c4:	4a13      	ldr	r2, [pc, #76]	; (8004714 <floorf+0x7c>)
 80046c6:	2900      	cmp	r1, #0
 80046c8:	bf18      	it	ne
 80046ca:	4613      	movne	r3, r2
 80046cc:	ee00 3a10 	vmov	s0, r3
 80046d0:	4770      	bx	lr
 80046d2:	4911      	ldr	r1, [pc, #68]	; (8004718 <floorf+0x80>)
 80046d4:	4111      	asrs	r1, r2
 80046d6:	420b      	tst	r3, r1
 80046d8:	d0fa      	beq.n	80046d0 <floorf+0x38>
 80046da:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004710 <floorf+0x78>
 80046de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	ddef      	ble.n	80046cc <floorf+0x34>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bfbe      	ittt	lt
 80046f0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80046f4:	fa40 f202 	asrlt.w	r2, r0, r2
 80046f8:	189b      	addlt	r3, r3, r2
 80046fa:	ea23 0301 	bic.w	r3, r3, r1
 80046fe:	e7e5      	b.n	80046cc <floorf+0x34>
 8004700:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004704:	d3e4      	bcc.n	80046d0 <floorf+0x38>
 8004706:	ee30 0a00 	vadd.f32	s0, s0, s0
 800470a:	4770      	bx	lr
 800470c:	2300      	movs	r3, #0
 800470e:	e7dd      	b.n	80046cc <floorf+0x34>
 8004710:	7149f2ca 	.word	0x7149f2ca
 8004714:	bf800000 	.word	0xbf800000
 8004718:	007fffff 	.word	0x007fffff

0800471c <scalbnf>:
 800471c:	ee10 3a10 	vmov	r3, s0
 8004720:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004724:	d025      	beq.n	8004772 <scalbnf+0x56>
 8004726:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800472a:	d302      	bcc.n	8004732 <scalbnf+0x16>
 800472c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004730:	4770      	bx	lr
 8004732:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004736:	d122      	bne.n	800477e <scalbnf+0x62>
 8004738:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <scalbnf+0xc8>)
 800473a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80047e8 <scalbnf+0xcc>
 800473e:	4298      	cmp	r0, r3
 8004740:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004744:	db16      	blt.n	8004774 <scalbnf+0x58>
 8004746:	ee10 3a10 	vmov	r3, s0
 800474a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800474e:	3a19      	subs	r2, #25
 8004750:	4402      	add	r2, r0
 8004752:	2afe      	cmp	r2, #254	; 0xfe
 8004754:	dd15      	ble.n	8004782 <scalbnf+0x66>
 8004756:	ee10 3a10 	vmov	r3, s0
 800475a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80047ec <scalbnf+0xd0>
 800475e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80047f0 <scalbnf+0xd4>
 8004762:	2b00      	cmp	r3, #0
 8004764:	eeb0 7a67 	vmov.f32	s14, s15
 8004768:	bfb8      	it	lt
 800476a:	eef0 7a66 	vmovlt.f32	s15, s13
 800476e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004772:	4770      	bx	lr
 8004774:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80047f4 <scalbnf+0xd8>
 8004778:	ee20 0a27 	vmul.f32	s0, s0, s15
 800477c:	4770      	bx	lr
 800477e:	0dd2      	lsrs	r2, r2, #23
 8004780:	e7e6      	b.n	8004750 <scalbnf+0x34>
 8004782:	2a00      	cmp	r2, #0
 8004784:	dd06      	ble.n	8004794 <scalbnf+0x78>
 8004786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800478a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800478e:	ee00 3a10 	vmov	s0, r3
 8004792:	4770      	bx	lr
 8004794:	f112 0f16 	cmn.w	r2, #22
 8004798:	da1a      	bge.n	80047d0 <scalbnf+0xb4>
 800479a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800479e:	4298      	cmp	r0, r3
 80047a0:	ee10 3a10 	vmov	r3, s0
 80047a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	dd0a      	ble.n	80047c0 <scalbnf+0xa4>
 80047aa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80047ec <scalbnf+0xd0>
 80047ae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80047f0 <scalbnf+0xd4>
 80047b2:	eef0 7a40 	vmov.f32	s15, s0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf18      	it	ne
 80047ba:	eeb0 0a47 	vmovne.f32	s0, s14
 80047be:	e7db      	b.n	8004778 <scalbnf+0x5c>
 80047c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80047f4 <scalbnf+0xd8>
 80047c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80047f8 <scalbnf+0xdc>
 80047c8:	eef0 7a40 	vmov.f32	s15, s0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	e7f3      	b.n	80047b8 <scalbnf+0x9c>
 80047d0:	3219      	adds	r2, #25
 80047d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047d6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80047da:	eddf 7a08 	vldr	s15, [pc, #32]	; 80047fc <scalbnf+0xe0>
 80047de:	ee07 3a10 	vmov	s14, r3
 80047e2:	e7c4      	b.n	800476e <scalbnf+0x52>
 80047e4:	ffff3cb0 	.word	0xffff3cb0
 80047e8:	4c000000 	.word	0x4c000000
 80047ec:	7149f2ca 	.word	0x7149f2ca
 80047f0:	f149f2ca 	.word	0xf149f2ca
 80047f4:	0da24260 	.word	0x0da24260
 80047f8:	8da24260 	.word	0x8da24260
 80047fc:	33000000 	.word	0x33000000

08004800 <_init>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr

0800480c <_fini>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr
