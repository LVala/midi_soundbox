
midi_soundbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005564  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005700  08005700  00015700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f8  080058f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005900  08005900  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c70  20000010  08005918  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c80  08005918  00024c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd47  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a2  00000000  00000000  0002bd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002e330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001741f  00000000  00000000  0002f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000feee  00000000  00000000  00046aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087924  00000000  00000000  000569dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c14  00000000  00000000  000de354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080056e4 	.word	0x080056e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080056e4 	.word	0x080056e4

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <Codec_Write>:

#define VOLUME_CONVERT(Volume) (((Volume) > 100)? 255:((uint8_t)(((Volume) * 255) / 100)))

static uint8_t is_codec_stopped = 1;

uint8_t Codec_Write(uint8_t reg, uint8_t val) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af04      	add	r7, sp, #16
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c1, CODEC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_MAX_TIMEOUT);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	2194      	movs	r1, #148	; 0x94
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <Codec_Write+0x48>)
 8000cd4:	f001 fe10 	bl	80028f8 <HAL_I2C_Mem_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]

  return status != HAL_OK ? 1 : 0;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000002c 	.word	0x2000002c

08000cf4 <Codec_Init>:

uint32_t Codec_Init() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  // expects I2C already initialized

  uint32_t counter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]

  // power on the codec (possibely need to turn it off first)
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4834      	ldr	r0, [pc, #208]	; (8000dd4 <Codec_Init+0xe0>)
 8000d04:	f001 fc9a 	bl	800263c <HAL_GPIO_WritePin>

  // keep codec powered off
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x01);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff ffcc 	bl	8000ca8 <Codec_Write>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	607b      	str	r3, [r7, #4]
  // set output device to headphone
  counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xAF);
 8000d1a:	21af      	movs	r1, #175	; 0xaf
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f7ff ffc3 	bl	8000ca8 <Codec_Write>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
  // cloc configuration: auto detection
  counter += Codec_Write(CODEC_REG_CLOCKING_CTL, 0x81);
 8000d2c:	2181      	movs	r1, #129	; 0x81
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f7ff ffba 	bl	8000ca8 <Codec_Write>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	607b      	str	r3, [r7, #4]
  // set slave mode and audio standard
  counter += Codec_Write(CODEC_REG_INTERFACE_CTL1, 0x07);
 8000d3e:	2107      	movs	r1, #7
 8000d40:	2006      	movs	r0, #6
 8000d42:	f7ff ffb1 	bl	8000ca8 <Codec_Write>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
  // set master volume to 0
  counter += Codec_SetVolume(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f86b 	bl	8000e2c <Codec_SetVolume>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	607b      	str	r3, [r7, #4]

  // additional configuration, refer to link at the top of the file
  counter += Codec_Write(CODEC_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	200a      	movs	r0, #10
 8000d62:	f7ff ffa1 	bl	8000ca8 <Codec_Write>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_MISC_CTL, 0x04);
 8000d70:	2104      	movs	r1, #4
 8000d72:	200e      	movs	r0, #14
 8000d74:	f7ff ff98 	bl	8000ca8 <Codec_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_LIMIT_CTL1, 0x00);
 8000d82:	2100      	movs	r1, #0
 8000d84:	2027      	movs	r0, #39	; 0x27
 8000d86:	f7ff ff8f 	bl	8000ca8 <Codec_Write>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_TONE_CTL, 0x0F);
 8000d94:	210f      	movs	r1, #15
 8000d96:	201f      	movs	r0, #31
 8000d98:	f7ff ff86 	bl	8000ca8 <Codec_Write>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMA_VOL, 0x0A);
 8000da6:	210a      	movs	r1, #10
 8000da8:	201a      	movs	r0, #26
 8000daa:	f7ff ff7d 	bl	8000ca8 <Codec_Write>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMB_VOL, 0x0A);
 8000db8:	210a      	movs	r1, #10
 8000dba:	201b      	movs	r0, #27
 8000dbc:	f7ff ff74 	bl	8000ca8 <Codec_Write>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	607b      	str	r3, [r7, #4]

  return counter;
 8000dca:	687b      	ldr	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <Codec_Play>:

uint32_t Codec_Play() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]

  if (is_codec_stopped) {
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <Codec_Play+0x50>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d018      	beq.n	8000e1c <Codec_Play+0x44>
    // enable the digital soft ramp
	counter += Codec_Write(CODEC_REG_MISC_CTL, 0x06);
 8000dea:	2106      	movs	r1, #6
 8000dec:	200e      	movs	r0, #14
 8000dee:	f7ff ff5b 	bl	8000ca8 <Codec_Write>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	607b      	str	r3, [r7, #4]
	counter += Codec_SetMute(AUDIO_MUTE_OFF);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f869 	bl	8000ed4 <Codec_SetMute>
 8000e02:	4602      	mov	r2, r0
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	607b      	str	r3, [r7, #4]
	// power on the codec
	counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9E);
 8000e0a:	219e      	movs	r1, #158	; 0x9e
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff ff4b 	bl	8000ca8 <Codec_Write>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	607b      	str	r3, [r7, #4]
  }

  return counter;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000

08000e2c <Codec_SetVolume>:
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9F);

  return counter;
}

uint32_t Codec_SetVolume(uint8_t volume) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  uint8_t converted_vol = VOLUME_CONVERT(volume);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d80b      	bhi.n	8000e58 <Codec_SetVolume+0x2c>
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	4613      	mov	r3, r2
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <Codec_SetVolume+0xa4>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1152      	asrs	r2, r2, #5
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	e000      	b.n	8000e5a <Codec_SetVolume+0x2e>
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	72fb      	strb	r3, [r7, #11]

  if (converted_vol > 0xE6) {
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2be6      	cmp	r3, #230	; 0xe6
 8000e60:	d918      	bls.n	8000e94 <Codec_SetVolume+0x68>
    counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol - 0xE7);
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	3319      	adds	r3, #25
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	f7ff ff1c 	bl	8000ca8 <Codec_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol - 0xE7);
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	3319      	adds	r3, #25
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	2021      	movs	r0, #33	; 0x21
 8000e84:	f7ff ff10 	bl	8000ca8 <Codec_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e017      	b.n	8000ec4 <Codec_SetVolume+0x98>
  } else {
	counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol + 0x19);
 8000e94:	7afb      	ldrb	r3, [r7, #11]
 8000e96:	3319      	adds	r3, #25
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f7ff ff03 	bl	8000ca8 <Codec_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol + 0x19);
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	3319      	adds	r3, #25
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2021      	movs	r0, #33	; 0x21
 8000eb6:	f7ff fef7 	bl	8000ca8 <Codec_Write>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	51eb851f 	.word	0x51eb851f

08000ed4 <Codec_SetMute>:

uint32_t Codec_SetMute(uint8_t cmd) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  uint8_t counter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  if (cmd == AUDIO_MUTE_ON) {
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d11b      	bne.n	8000f20 <Codec_SetMute+0x4c>
    counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xFF);
 8000ee8:	21ff      	movs	r1, #255	; 0xff
 8000eea:	2004      	movs	r0, #4
 8000eec:	f7ff fedc 	bl	8000ca8 <Codec_Write>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x01);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2022      	movs	r0, #34	; 0x22
 8000efe:	f7ff fed3 	bl	8000ca8 <Codec_Write>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4413      	add	r3, r2
 8000f0a:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x01);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2023      	movs	r0, #35	; 0x23
 8000f10:	f7ff feca 	bl	8000ca8 <Codec_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e01a      	b.n	8000f56 <Codec_SetMute+0x82>
  } else {
	counter += Codec_Write(CODEC_REG_POWER_CTL2, OUTPUT_DEVICE_HEADPHONE);
 8000f20:	21af      	movs	r1, #175	; 0xaf
 8000f22:	2004      	movs	r0, #4
 8000f24:	f7ff fec0 	bl	8000ca8 <Codec_Write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4413      	add	r3, r2
 8000f30:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x00);
 8000f32:	2100      	movs	r1, #0
 8000f34:	2022      	movs	r0, #34	; 0x22
 8000f36:	f7ff feb7 	bl	8000ca8 <Codec_Write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4413      	add	r3, r2
 8000f42:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x00);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2023      	movs	r0, #35	; 0x23
 8000f48:	f7ff feae 	bl	8000ca8 <Codec_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4413      	add	r3, r2
 8000f54:	73fb      	strb	r3, [r7, #15]
  }

  return counter;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_DMA_Init+0x3c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <MX_DMA_Init+0x3c>)
 8000f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_DMA_Init+0x3c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2010      	movs	r0, #16
 8000f88:	f000 fe15 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f8c:	2010      	movs	r0, #16
 8000f8e:	f000 fe2e 	bl	8001bee <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <MX_GPIO_Init+0xec>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <MX_GPIO_Init+0xec>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <MX_GPIO_Init+0xec>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b2d      	ldr	r3, [pc, #180]	; (800108c <MX_GPIO_Init+0xec>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a2c      	ldr	r2, [pc, #176]	; (800108c <MX_GPIO_Init+0xec>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_GPIO_Init+0xec>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_GPIO_Init+0xec>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a25      	ldr	r2, [pc, #148]	; (800108c <MX_GPIO_Init+0xec>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xec>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_GPIO_Init+0xec>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a1e      	ldr	r2, [pc, #120]	; (800108c <MX_GPIO_Init+0xec>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_GPIO_Init+0xec>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_GPIO_Init+0xec>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_GPIO_Init+0xec>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_GPIO_Init+0xec>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001042:	2200      	movs	r2, #0
 8001044:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001048:	4811      	ldr	r0, [pc, #68]	; (8001090 <MX_GPIO_Init+0xf0>)
 800104a:	f001 faf7 	bl	800263c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_GPIO_Init+0xf4>)
 8001062:	f001 f94f 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD4 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001066:	f24f 0310 	movw	r3, #61456	; 0xf010
 800106a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0xf0>)
 8001080:	f001 f940 	bl	8002304 <HAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40020000 	.word	0x40020000

08001098 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f001 facb 	bl	8002670 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 fa04 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000002c 	.word	0x2000002c
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_I2C_MspInit+0x84>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d12c      	bne.n	8001170 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001132:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001144:	2304      	movs	r3, #4
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <HAL_I2C_MspInit+0x8c>)
 8001150:	f001 f8d8 	bl	8002304 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_I2C_MspInit+0x88>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_I2C_MspInit+0x88>)
 800115e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_I2C_MspInit+0x88>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40005400 	.word	0x40005400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400

08001184 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_I2S3_Init+0x54>)
 800118a:	4a14      	ldr	r2, [pc, #80]	; (80011dc <MX_I2S3_Init+0x58>)
 800118c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800118e:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2S3_Init+0x54>)
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_I2S3_Init+0x54>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_I2S3_Init+0x54>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_I2S3_Init+0x54>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_I2S3_Init+0x54>)
 80011ac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011b0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_I2S3_Init+0x54>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_I2S3_Init+0x54>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_I2S3_Init+0x54>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_I2S3_Init+0x54>)
 80011c6:	f001 feaf 	bl	8002f28 <HAL_I2S_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80011d0:	f000 f98c 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000080 	.word	0x20000080
 80011dc:	40003c00 	.word	0x40003c00

080011e0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_I2S_MspInit+0x16c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	f040 8096 	bne.w	8001342 <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800121a:	23c8      	movs	r3, #200	; 0xc8
 800121c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800121e:	2305      	movs	r3, #5
 8001220:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f892 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001236:	f000 f959 	bl	80014ec <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_I2S_MspInit+0x170>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a43      	ldr	r2, [pc, #268]	; (8001350 <HAL_I2S_MspInit+0x170>)
 8001244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <HAL_I2S_MspInit+0x170>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_I2S_MspInit+0x170>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <HAL_I2S_MspInit+0x170>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_I2S_MspInit+0x170>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_I2S_MspInit+0x170>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a35      	ldr	r2, [pc, #212]	; (8001350 <HAL_I2S_MspInit+0x170>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <HAL_I2S_MspInit+0x170>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800128e:	2310      	movs	r3, #16
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800129e:	2306      	movs	r3, #6
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a6:	4619      	mov	r1, r3
 80012a8:	482a      	ldr	r0, [pc, #168]	; (8001354 <HAL_I2S_MspInit+0x174>)
 80012aa:	f001 f82b 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80012ae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c0:	2306      	movs	r3, #6
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c8:	4619      	mov	r1, r3
 80012ca:	4823      	ldr	r0, [pc, #140]	; (8001358 <HAL_I2S_MspInit+0x178>)
 80012cc:	f001 f81a 	bl	8002304 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_I2S_MspInit+0x180>)
 80012d4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80012d6:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e2:	4b1e      	ldr	r3, [pc, #120]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f6:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_I2S_MspInit+0x17c>)
 80012fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fe:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <HAL_I2S_MspInit+0x17c>)
 8001302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001306:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_I2S_MspInit+0x17c>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_I2S_MspInit+0x17c>)
 8001310:	2204      	movs	r2, #4
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_I2S_MspInit+0x17c>)
 8001316:	2203      	movs	r2, #3
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_I2S_MspInit+0x17c>)
 800131c:	2200      	movs	r2, #0
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_I2S_MspInit+0x17c>)
 8001322:	2200      	movs	r2, #0
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <HAL_I2S_MspInit+0x17c>)
 8001328:	f000 fc7c 	bl	8001c24 <HAL_DMA_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001332:	f000 f8db 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_I2S_MspInit+0x17c>)
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
 800133c:	4a07      	ldr	r2, [pc, #28]	; (800135c <HAL_I2S_MspInit+0x17c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001342:	bf00      	nop
 8001344:	3740      	adds	r7, #64	; 0x40
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40003c00 	.word	0x40003c00
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020800 	.word	0x40020800
 800135c:	200000c8 	.word	0x200000c8
 8001360:	40026088 	.word	0x40026088

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136a:	f000 fad7 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136e:	f000 f855 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001372:	f7ff fe15 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001376:	f7ff fdf3 	bl	8000f60 <MX_DMA_Init>
  MX_I2C1_Init();
 800137a:	f7ff fe8d 	bl	8001098 <MX_I2C1_Init>
  MX_I2S3_Init();
 800137e:	f7ff ff01 	bl	8001184 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  uint8_t counter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	71bb      	strb	r3, [r7, #6]

  counter += Codec_Init();
 8001386:	f7ff fcb5 	bl	8000cf4 <Codec_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	b2da      	uxtb	r2, r3
 800138e:	79bb      	ldrb	r3, [r7, #6]
 8001390:	4413      	add	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
  counter += Codec_SetVolume(80);
 8001394:	2050      	movs	r0, #80	; 0x50
 8001396:	f7ff fd49 	bl	8000e2c <Codec_SetVolume>
 800139a:	4603      	mov	r3, r0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	4413      	add	r3, r2
 80013a2:	71bb      	strb	r3, [r7, #6]
  counter += Codec_Play();
 80013a4:	f7ff fd18 	bl	8000dd8 <Codec_Play>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	4413      	add	r3, r2
 80013b0:	71bb      	strb	r3, [r7, #6]
  if (counter) {
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <main+0x58>
    Error_Handler();
 80013b8:	f000 f898 	bl	80014ec <Error_Handler>
  }

  Synth_Init();
 80013bc:	f000 f900 	bl	80015c0 <Synth_Init>
  Synth_Play();
 80013c0:	f000 f90e 	bl	80015e0 <Synth_Play>

  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ca:	4811      	ldr	r0, [pc, #68]	; (8001410 <main+0xac>)
 80013cc:	f001 f936 	bl	800263c <HAL_GPIO_WritePin>

  int8_t wasClicked = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// turn off the codec when button is pressed
	if (HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin)) {
 80013d4:	2101      	movs	r1, #1
 80013d6:	480f      	ldr	r0, [pc, #60]	; (8001414 <main+0xb0>)
 80013d8:	f001 f918 	bl	800260c <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d012      	beq.n	8001408 <main+0xa4>
//		Codec_Stop();
		if (!wasClicked) {
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f4      	bne.n	80013d4 <main+0x70>
//			Wavetable_NoteOff(&wavetable);
			Wavetable_NoteOn(&wavetable, wavetable.pitch_hz + 20);
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <main+0xb4>)
 80013ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80013f0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <main+0xb4>)
 80013fe:	f000 f9e9 	bl	80017d4 <Wavetable_NoteOn>
			wasClicked = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	e7e5      	b.n	80013d4 <main+0x70>
		}
	} else {
		wasClicked = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(PUSH_BUTTON_GPIO_Port, PUSH_BUTTON_Pin)) {
 800140c:	e7e2      	b.n	80013d4 <main+0x70>
 800140e:	bf00      	nop
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40020000 	.word	0x40020000
 8001418:	20000528 	.word	0x20000528

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	2230      	movs	r2, #48	; 0x30
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f003 f906 	bl	800463c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <SystemClock_Config+0xc8>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a26      	ldr	r2, [pc, #152]	; (80014e4 <SystemClock_Config+0xc8>)
 800144a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <SystemClock_Config+0xc8>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <SystemClock_Config+0xcc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <SystemClock_Config+0xcc>)
 8001466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <SystemClock_Config+0xcc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800147c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800148c:	2304      	movs	r3, #4
 800148e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001494:	2304      	movs	r3, #4
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001498:	2308      	movs	r3, #8
 800149a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0320 	add.w	r3, r7, #32
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fad3 	bl	8003a4c <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014ac:	f000 f81e 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2103      	movs	r1, #3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fd35 	bl	8003f3c <HAL_RCC_ClockConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d8:	f000 f808 	bl	80014ec <Error_Handler>
  }
}
 80014dc:	bf00      	nop
 80014de:	3750      	adds	r7, #80	; 0x50
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40007000 	.word	0x40007000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <Error_Handler+0x18>)
 80014f8:	f001 f8a0 	bl	800263c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  __disable_irq();
  while (1)
 8001500:	e7fe      	b.n	8001500 <Error_Handler+0x14>
 8001502:	bf00      	nop
 8001504:	40020c00 	.word	0x40020c00

08001508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <HAL_MspInit+0x4c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a0f      	ldr	r2, [pc, #60]	; (8001554 <HAL_MspInit+0x4c>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x4c>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x4c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x4c>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001546:	2007      	movs	r0, #7
 8001548:	f000 fb2a 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800

08001558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800155c:	e7fe      	b.n	800155c <NMI_Handler+0x4>

0800155e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler+0x4>

08001564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <MemManage_Handler+0x4>

0800156a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156e:	e7fe      	b.n	800156e <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <UsageFault_Handler+0x4>

08001576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 fa0c 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Stream5_IRQHandler+0x10>)
 80015b2:	f000 fc3d 	bl	8001e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000c8 	.word	0x200000c8

080015c0 <Synth_Init>:
float sample_N;

// temporary, single voice
Wavetable_State wavetable;

void Synth_Init() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  Wavetable_Init(&wavetable, WAVE_SINE);
 80015c4:	2100      	movs	r1, #0
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <Synth_Init+0x1c>)
 80015c8:	f000 f8d4 	bl	8001774 <Wavetable_Init>
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES);
 80015cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 f813 	bl	80015fc <UpdateAudioBuffer>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000528 	.word	0x20000528

080015e0 <Synth_Play>:

void Synth_Play() {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  HAL_I2S_Transmit_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SAMPLES);
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	4902      	ldr	r1, [pc, #8]	; (80015f4 <Synth_Play+0x14>)
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <Synth_Play+0x18>)
 80015ec:	f001 fddc 	bl	80031a8 <HAL_I2S_Transmit_DMA>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000128 	.word	0x20000128
 80015f8:	20000080 	.word	0x20000080

080015fc <UpdateAudioBuffer>:

static void UpdateAudioBuffer(uint32_t start_frame, uint32_t end_frame) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  // start_frame is inclusive, end_frame exclusive
  static float buffer[AUDIO_BUFFER_SAMPLES];
  Wavetable_GetSamples(&wavetable, buffer, end_frame - start_frame);
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4923      	ldr	r1, [pc, #140]	; (800169c <UpdateAudioBuffer+0xa0>)
 8001610:	4823      	ldr	r0, [pc, #140]	; (80016a0 <UpdateAudioBuffer+0xa4>)
 8001612:	f000 f905 	bl	8001820 <Wavetable_GetSamples>

  uint32_t i = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	e033      	b.n	8001688 <UpdateAudioBuffer+0x8c>
    audio_buffer[2*frame] = (int16_t)(buffer[2*i] * 32000);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <UpdateAudioBuffer+0xa0>)
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80016a4 <UpdateAudioBuffer+0xa8>
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163a:	ee17 3a90 	vmov	r3, s15
 800163e:	b21a      	sxth	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	b291      	uxth	r1, r2
 8001646:	4a18      	ldr	r2, [pc, #96]	; (80016a8 <UpdateAudioBuffer+0xac>)
 8001648:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	audio_buffer[2*frame+1] = (int16_t)(buffer[2*i+1] * 32000);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	3301      	adds	r3, #1
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <UpdateAudioBuffer+0xa0>)
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80016a4 <UpdateAudioBuffer+0xa8>
 8001660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 3a90 	vmov	r3, s15
 800166c:	b21a      	sxth	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	3301      	adds	r3, #1
 8001674:	b291      	uxth	r1, r2
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <UpdateAudioBuffer+0xac>)
 8001678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	i++;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3301      	adds	r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d3c7      	bcc.n	8001620 <UpdateAudioBuffer+0x24>
//	int16_t sample_int = (int16_t)(sample * 32000);
//	audio_buffer[2*i] = sample_int;
//	audio_buffer[2*i+1] = sample_int;
//	phase += 0.5*d_phase;
//  }
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000538 	.word	0x20000538
 80016a0:	20000528 	.word	0x20000528
 80016a4:	46fa0000 	.word	0x46fa0000
 80016a8:	20000128 	.word	0x20000128

080016ac <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES/2);
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff ffa0 	bl	80015fc <UpdateAudioBuffer>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(AUDIO_BUFFER_FRAMES/2, AUDIO_BUFFER_FRAMES);
 80016cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d0:	2080      	movs	r0, #128	; 0x80
 80016d2:	f7ff ff93 	bl	80015fc <UpdateAudioBuffer>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <sineWavetableInit>:
#include "wavetable.h"

float sine_wavetable[WAVETABLE_LEN];
static uint8_t wavetables_initialized = 0;

static void sineWavetableInit() {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
  float d_phase = (2.0f * (float)M_PI) / WAVETABLE_LEN;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <sineWavetableInit+0x68>)
 800170c:	607b      	str	r3, [r7, #4]
  float phase = 0;
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 8001714:	2300      	movs	r3, #0
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	e01f      	b.n	800175a <sineWavetableInit+0x56>
    sine_wavetable[i] = sin(phase);
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f7fe ffea 	bl	80006f4 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	ec43 2b10 	vmov	d0, r2, r3
 8001728:	f002 ff92 	bl	8004650 <sin>
 800172c:	ec53 2b10 	vmov	r2, r3, d0
 8001730:	897c      	ldrh	r4, [r7, #10]
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff f8e5 	bl	8000904 <__aeabi_d2f>
 800173a:	4602      	mov	r2, r0
 800173c:	490c      	ldr	r1, [pc, #48]	; (8001770 <sineWavetableInit+0x6c>)
 800173e:	00a3      	lsls	r3, r4, #2
 8001740:	440b      	add	r3, r1
 8001742:	601a      	str	r2, [r3, #0]
	phase += d_phase;
 8001744:	ed97 7a03 	vldr	s14, [r7, #12]
 8001748:	edd7 7a01 	vldr	s15, [r7, #4]
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	edc7 7a03 	vstr	s15, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 8001754:	897b      	ldrh	r3, [r7, #10]
 8001756:	3301      	adds	r3, #1
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	897b      	ldrh	r3, [r7, #10]
 800175c:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8001760:	d3db      	bcc.n	800171a <sineWavetableInit+0x16>
  }
}
 8001762:	bf00      	nop
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	3acb7232 	.word	0x3acb7232
 8001770:	20000d38 	.word	0x20000d38

08001774 <Wavetable_Init>:

void Wavetable_Init(Wavetable_State *state, uint8_t wave) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  if (!wavetables_initialized) {
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <Wavetable_Init+0x50>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <Wavetable_Init+0x18>
    sineWavetableInit();
 8001788:	f7ff ffbc 	bl	8001704 <sineWavetableInit>
  }

  state->wave = wave;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	701a      	strb	r2, [r3, #0]
  // state->active = 1;
  state->phase = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  state->pitch_hz = 93.75;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <Wavetable_Init+0x54>)
 800179e:	60da      	str	r2, [r3, #12]
  state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80017a6:	eddf 6a09 	vldr	s13, [pc, #36]	; 80017cc <Wavetable_Init+0x58>
 80017aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ae:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80017d0 <Wavetable_Init+0x5c>
 80017b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20004c78 	.word	0x20004c78
 80017c8:	42bb8000 	.word	0x42bb8000
 80017cc:	473b8000 	.word	0x473b8000
 80017d0:	457d0000 	.word	0x457d0000

080017d4 <Wavetable_NoteOn>:

void Wavetable_NoteOn(Wavetable_State *state, float pitch_hz) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	ed87 0a00 	vstr	s0, [r7]
	// state->active = 1;
	state->phase = 0;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	605a      	str	r2, [r3, #4]
	state->pitch_hz = pitch_hz;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	60da      	str	r2, [r3, #12]
	state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80017f4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001818 <Wavetable_NoteOn+0x44>
 80017f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017fc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800181c <Wavetable_NoteOn+0x48>
 8001800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	473b8000 	.word	0x473b8000
 800181c:	457d0000 	.word	0x457d0000

08001820 <Wavetable_GetSamples>:
	state->phase = 0;
	state->pitch_hz = 0;
	state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
}

void Wavetable_GetSamples(Wavetable_State *state, float *buffer, int num_frames) {
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  float sample;
  for (uint32_t i = 0; i<num_frames; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e03a      	b.n	80018a8 <Wavetable_GetSamples+0x88>
    sample = sine_wavetable[(uint32_t)state->phase];
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	edd3 7a01 	vldr	s15, [r3, #4]
 8001838:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800183c:	ee17 3a90 	vmov	r3, s15
 8001840:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <Wavetable_GetSamples+0xa0>)
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	613b      	str	r3, [r7, #16]
	buffer[2*i] = sample;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	601a      	str	r2, [r3, #0]
	buffer[2*i+1] = sample;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	3304      	adds	r3, #4
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	4413      	add	r3, r2
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	601a      	str	r2, [r3, #0]
	state->phase += state->d_phase;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	ed93 7a01 	vldr	s14, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	edc3 7a01 	vstr	s15, [r3, #4]
	if (state->phase > WAVETABLE_LEN) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001880:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80018c4 <Wavetable_GetSamples+0xa4>
 8001884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	dd09      	ble.n	80018a2 <Wavetable_GetSamples+0x82>
      state->phase -= WAVETABLE_LEN;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	edd3 7a01 	vldr	s15, [r3, #4]
 8001894:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80018c4 <Wavetable_GetSamples+0xa4>
 8001898:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	edc3 7a01 	vstr	s15, [r3, #4]
  for (uint32_t i = 0; i<num_frames; i++) {
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	3301      	adds	r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3c0      	bcc.n	8001832 <Wavetable_GetSamples+0x12>
	}
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000d38 	.word	0x20000d38
 80018c4:	457d0000 	.word	0x457d0000

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001900 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018ce:	490e      	ldr	r1, [pc, #56]	; (8001908 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018e4:	4c0b      	ldr	r4, [pc, #44]	; (8001914 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f2:	f7ff fef5 	bl	80016e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f002 fe7d 	bl	80045f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff fd33 	bl	8001364 <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800190c:	08005908 	.word	0x08005908
  ldr r2, =_sbss
 8001910:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001914:	20004c80 	.word	0x20004c80

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>
	...

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <HAL_Init+0x40>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800192a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	; (800195c <HAL_Init+0x40>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_Init+0x40>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f92b 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f808 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001950:	f7ff fdda 	bl	8001508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_InitTick+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f943 	bl	8001c0a <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800199c:	f000 f90b 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_InitTick+0x5c>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000004 	.word	0x20000004
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000008 	.word	0x20000008

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	2000000c 	.word	0x2000000c
 80019e4:	20004c7c 	.word	0x20004c7c

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20004c7c 	.word	0x20004c7c

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
	...

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b80:	f7ff ff8e 	bl	8001aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff29 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff3e 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff8e 	bl	8001af4 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5d 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff31 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff feda 	bl	80019e8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e099      	b.n	8001d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2202      	movs	r2, #2
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0201 	bic.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c60:	e00f      	b.n	8001c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c62:	f7ff fec1 	bl	80019e8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d908      	bls.n	8001c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2220      	movs	r2, #32
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e078      	b.n	8001d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e8      	bne.n	8001c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <HAL_DMA_Init+0x158>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d107      	bne.n	8001cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f023 0307 	bic.w	r3, r3, #7
 8001d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d117      	bne.n	8001d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00e      	beq.n	8001d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fa6f 	bl	800220c <DMA_CheckFifoParam>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2240      	movs	r2, #64	; 0x40
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d42:	2301      	movs	r3, #1
 8001d44:	e016      	b.n	8001d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 fa26 	bl	80021a0 <DMA_CalcBaseAndBitshift>
 8001d54:	4603      	mov	r3, r0
 8001d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	f010803f 	.word	0xf010803f

08001d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_DMA_Start_IT+0x26>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e040      	b.n	8001e28 <HAL_DMA_Start_IT+0xa8>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d12f      	bne.n	8001e1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68b9      	ldr	r1, [r7, #8]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f9b8 	bl	8002144 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	223f      	movs	r2, #63	; 0x3f
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0216 	orr.w	r2, r2, #22
 8001dee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0208 	orr.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e005      	b.n	8001e26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e22:	2302      	movs	r3, #2
 8001e24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e3c:	4b8e      	ldr	r3, [pc, #568]	; (8002078 <HAL_DMA_IRQHandler+0x248>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a8e      	ldr	r2, [pc, #568]	; (800207c <HAL_DMA_IRQHandler+0x24c>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0a9b      	lsrs	r3, r3, #10
 8001e48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01a      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0204 	bic.w	r2, r2, #4
 8001e82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2208      	movs	r2, #8
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d012      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d012      	beq.n	8001f08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00b      	beq.n	8001f08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	f043 0204 	orr.w	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d043      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03c      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2a:	2210      	movs	r2, #16
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d108      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d024      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	4798      	blx	r3
 8001f5e:	e01f      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01b      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
 8001f70:	e016      	b.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0208 	bic.w	r2, r2, #8
 8001f8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 808f 	beq.w	80020d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 8087 	beq.w	80020d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d136      	bne.n	8002048 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0216 	bic.w	r2, r2, #22
 8001fe8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <HAL_DMA_IRQHandler+0x1da>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002006:	2b00      	cmp	r3, #0
 8002008:	d007      	beq.n	800201a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0208 	bic.w	r2, r2, #8
 8002018:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	223f      	movs	r2, #63	; 0x3f
 8002020:	409a      	lsls	r2, r3
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07e      	beq.n	800213c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	4798      	blx	r3
        }
        return;
 8002046:	e079      	b.n	800213c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01d      	beq.n	8002092 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	2b00      	cmp	r3, #0
 800206a:	d031      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
 8002074:	e02c      	b.n	80020d0 <HAL_DMA_IRQHandler+0x2a0>
 8002076:	bf00      	nop
 8002078:	20000004 	.word	0x20000004
 800207c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
 8002090:	e01e      	b.n	80020d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10f      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0210 	bic.w	r2, r2, #16
 80020ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d032      	beq.n	800213e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d022      	beq.n	800212a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2205      	movs	r2, #5
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	3301      	adds	r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	429a      	cmp	r2, r3
 8002106:	d307      	bcc.n	8002118 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f2      	bne.n	80020fc <HAL_DMA_IRQHandler+0x2cc>
 8002116:	e000      	b.n	800211a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002118:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	4798      	blx	r3
 800213a:	e000      	b.n	800213e <HAL_DMA_IRQHandler+0x30e>
        return;
 800213c:	bf00      	nop
    }
  }
}
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002160:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d108      	bne.n	8002184 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002182:	e007      	b.n	8002194 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	60da      	str	r2, [r3, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3b10      	subs	r3, #16
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <DMA_CalcBaseAndBitshift+0x64>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <DMA_CalcBaseAndBitshift+0x68>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d909      	bls.n	80021e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	1d1a      	adds	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	659a      	str	r2, [r3, #88]	; 0x58
 80021e0:	e007      	b.n	80021f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	aaaaaaab 	.word	0xaaaaaaab
 8002208:	08005718 	.word	0x08005718

0800220c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11f      	bne.n	8002266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d856      	bhi.n	80022da <DMA_CheckFifoParam+0xce>
 800222c:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <DMA_CheckFifoParam+0x28>)
 800222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002232:	bf00      	nop
 8002234:	08002245 	.word	0x08002245
 8002238:	08002257 	.word	0x08002257
 800223c:	08002245 	.word	0x08002245
 8002240:	080022db 	.word	0x080022db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d046      	beq.n	80022de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002254:	e043      	b.n	80022de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800225e:	d140      	bne.n	80022e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e03d      	b.n	80022e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800226e:	d121      	bne.n	80022b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d837      	bhi.n	80022e6 <DMA_CheckFifoParam+0xda>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <DMA_CheckFifoParam+0x70>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800228d 	.word	0x0800228d
 8002280:	08002293 	.word	0x08002293
 8002284:	0800228d 	.word	0x0800228d
 8002288:	080022a5 	.word	0x080022a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
      break;
 8002290:	e030      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d025      	beq.n	80022ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a2:	e022      	b.n	80022ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ac:	d11f      	bne.n	80022ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022b2:	e01c      	b.n	80022ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d903      	bls.n	80022c2 <DMA_CheckFifoParam+0xb6>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d003      	beq.n	80022c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022c0:	e018      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      break;
 80022c6:	e015      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00e      	beq.n	80022f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e00b      	b.n	80022f2 <DMA_CheckFifoParam+0xe6>
      break;
 80022da:	bf00      	nop
 80022dc:	e00a      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e008      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e2:	bf00      	nop
 80022e4:	e006      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
 80022e8:	e004      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022ea:	bf00      	nop
 80022ec:	e002      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ee:	bf00      	nop
 80022f0:	e000      	b.n	80022f4 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
    }
  } 
  
  return status; 
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e159      	b.n	80025d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8148 	bne.w	80025ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d005      	beq.n	8002356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	2b02      	cmp	r3, #2
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d017      	beq.n	80023f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d123      	bne.n	8002448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a2 	beq.w	80025ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a6:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x2f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x202>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x1fe>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_GPIO_Init+0x2f8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x1fa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a46      	ldr	r2, [pc, #280]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x1f6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_GPIO_Init+0x300>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x1f2>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_GPIO_Init+0x304>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_GPIO_Init+0x304>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f aea2 	bls.w	8002320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e001      	b.n	800262e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002658:	e003      	b.n	8002662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e12b      	b.n	80028da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe fd2c 	bl	80010f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d4:	f001 fe2a 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 80026d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4a81      	ldr	r2, [pc, #516]	; (80028e4 <HAL_I2C_Init+0x274>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d807      	bhi.n	80026f4 <HAL_I2C_Init+0x84>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a80      	ldr	r2, [pc, #512]	; (80028e8 <HAL_I2C_Init+0x278>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e006      	b.n	8002702 <HAL_I2C_Init+0x92>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a7d      	ldr	r2, [pc, #500]	; (80028ec <HAL_I2C_Init+0x27c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	bf94      	ite	ls
 80026fc:	2301      	movls	r3, #1
 80026fe:	2300      	movhi	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0e7      	b.n	80028da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4a78      	ldr	r2, [pc, #480]	; (80028f0 <HAL_I2C_Init+0x280>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	0c9b      	lsrs	r3, r3, #18
 8002714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a6a      	ldr	r2, [pc, #424]	; (80028e4 <HAL_I2C_Init+0x274>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d802      	bhi.n	8002744 <HAL_I2C_Init+0xd4>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3301      	adds	r3, #1
 8002742:	e009      	b.n	8002758 <HAL_I2C_Init+0xe8>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a69      	ldr	r2, [pc, #420]	; (80028f4 <HAL_I2C_Init+0x284>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	099b      	lsrs	r3, r3, #6
 8002756:	3301      	adds	r3, #1
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800276a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	495c      	ldr	r1, [pc, #368]	; (80028e4 <HAL_I2C_Init+0x274>)
 8002774:	428b      	cmp	r3, r1
 8002776:	d819      	bhi.n	80027ac <HAL_I2C_Init+0x13c>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e59      	subs	r1, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fbb1 f3f3 	udiv	r3, r1, r3
 8002786:	1c59      	adds	r1, r3, #1
 8002788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800278c:	400b      	ands	r3, r1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_I2C_Init+0x138>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1e59      	subs	r1, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fbb1 f3f3 	udiv	r3, r1, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a6:	e051      	b.n	800284c <HAL_I2C_Init+0x1dc>
 80027a8:	2304      	movs	r3, #4
 80027aa:	e04f      	b.n	800284c <HAL_I2C_Init+0x1dc>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d111      	bne.n	80027d8 <HAL_I2C_Init+0x168>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e012      	b.n	80027fe <HAL_I2C_Init+0x18e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Init+0x196>
 8002802:	2301      	movs	r3, #1
 8002804:	e022      	b.n	800284c <HAL_I2C_Init+0x1dc>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10e      	bne.n	800282c <HAL_I2C_Init+0x1bc>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e58      	subs	r0, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	440b      	add	r3, r1
 800281c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282a:	e00f      	b.n	800284c <HAL_I2C_Init+0x1dc>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e58      	subs	r0, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	0099      	lsls	r1, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	6809      	ldr	r1, [r1, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800287a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6911      	ldr	r1, [r2, #16]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68d2      	ldr	r2, [r2, #12]
 8002886:	4311      	orrs	r1, r2
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	430b      	orrs	r3, r1
 800288e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	000186a0 	.word	0x000186a0
 80028e8:	001e847f 	.word	0x001e847f
 80028ec:	003d08ff 	.word	0x003d08ff
 80028f0:	431bde83 	.word	0x431bde83
 80028f4:	10624dd3 	.word	0x10624dd3

080028f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002912:	f7ff f869 	bl	80019e8 <HAL_GetTick>
 8002916:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b20      	cmp	r3, #32
 8002922:	f040 80d9 	bne.w	8002ad8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2319      	movs	r3, #25
 800292c:	2201      	movs	r2, #1
 800292e:	496d      	ldr	r1, [pc, #436]	; (8002ae4 <HAL_I2C_Mem_Write+0x1ec>)
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f971 	bl	8002c18 <I2C_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
 800293e:	e0cc      	b.n	8002ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_I2C_Mem_Write+0x56>
 800294a:	2302      	movs	r3, #2
 800294c:	e0c5      	b.n	8002ada <HAL_I2C_Mem_Write+0x1e2>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d007      	beq.n	8002974 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2221      	movs	r2, #33	; 0x21
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a3a      	ldr	r2, [r7, #32]
 800299e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a4d      	ldr	r2, [pc, #308]	; (8002ae8 <HAL_I2C_Mem_Write+0x1f0>)
 80029b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029b6:	88f8      	ldrh	r0, [r7, #6]
 80029b8:	893a      	ldrh	r2, [r7, #8]
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4603      	mov	r3, r0
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f890 	bl	8002aec <I2C_RequestMemoryWrite>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d052      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e081      	b.n	8002ada <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9f2 	bl	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e06b      	b.n	8002ada <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d11b      	bne.n	8002a78 <HAL_I2C_Mem_Write+0x180>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d017      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1aa      	bne.n	80029d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9de 	bl	8002e46 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00d      	beq.n	8002aac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d107      	bne.n	8002aa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e016      	b.n	8002ada <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e000      	b.n	8002ada <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ad8:	2302      	movs	r3, #2
  }
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	00100002 	.word	0x00100002
 8002ae8:	ffff0000 	.word	0xffff0000

08002aec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f878 	bl	8002c18 <I2C_WaitOnFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d103      	bne.n	8002b46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e05f      	b.n	8002c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b4a:	897b      	ldrh	r3, [r7, #10]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	6a3a      	ldr	r2, [r7, #32]
 8002b5e:	492d      	ldr	r1, [pc, #180]	; (8002c14 <I2C_RequestMemoryWrite+0x128>)
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f8b0 	bl	8002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04c      	b.n	8002c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	6a39      	ldr	r1, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f91a 	bl	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00d      	beq.n	8002bb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d107      	bne.n	8002bae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e02b      	b.n	8002c0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb8:	893b      	ldrh	r3, [r7, #8]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]
 8002bc2:	e021      	b.n	8002c08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f8f4 	bl	8002dc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d107      	bne.n	8002bfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e005      	b.n	8002c0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	00010002 	.word	0x00010002

08002c18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c28:	e025      	b.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c30:	d021      	beq.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c32:	f7fe fed9 	bl	80019e8 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d302      	bcc.n	8002c48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d116      	bne.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e023      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	0c1b      	lsrs	r3, r3, #16
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10d      	bne.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	e00c      	b.n	8002cb6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d0b6      	beq.n	8002c2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	e051      	b.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce4:	d123      	bne.n	8002d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cfe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f043 0204 	orr.w	r2, r3, #4
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e046      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d34:	d021      	beq.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d36:	f7fe fe57 	bl	80019e8 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d302      	bcc.n	8002d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d116      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f043 0220 	orr.w	r2, r3, #32
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e020      	b.n	8002dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d10c      	bne.n	8002d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e00b      	b.n	8002db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	43da      	mvns	r2, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4013      	ands	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d18d      	bne.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd0:	e02d      	b.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f878 	bl	8002ec8 <I2C_IsAcknowledgeFailed>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e02d      	b.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d021      	beq.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fdfd 	bl	80019e8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f043 0220 	orr.w	r2, r3, #32
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e38:	2b80      	cmp	r3, #128	; 0x80
 8002e3a:	d1ca      	bne.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e52:	e02d      	b.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f837 	bl	8002ec8 <I2C_IsAcknowledgeFailed>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e02d      	b.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6a:	d021      	beq.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6c:	f7fe fdbc 	bl	80019e8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d302      	bcc.n	8002e82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d116      	bne.n	8002eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f043 0220 	orr.w	r2, r3, #32
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e007      	b.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d1ca      	bne.n	8002e54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d11b      	bne.n	8002f18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f043 0204 	orr.w	r2, r3, #4
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e128      	b.n	800318c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a90      	ldr	r2, [pc, #576]	; (8003194 <HAL_I2S_Init+0x26c>)
 8002f52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fe f943 	bl	80011e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f70:	f023 030f 	bic.w	r3, r3, #15
 8002f74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d060      	beq.n	8003048 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e001      	b.n	8002f98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d802      	bhi.n	8002fa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f001 fac4 	bl	8004534 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d125      	bne.n	8003004 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	3305      	adds	r3, #5
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e01f      	b.n	8003022 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	3305      	adds	r3, #5
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e00e      	b.n	8003022 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	461a      	mov	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	3305      	adds	r3, #5
 8003020:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_I2S_Init+0x270>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003048:	2302      	movs	r3, #2
 800304a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d902      	bls.n	800305c <HAL_I2S_Init+0x134>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2bff      	cmp	r3, #255	; 0xff
 800305a:	d907      	bls.n	800306c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e08f      	b.n	800318c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	ea42 0103 	orr.w	r1, r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	430a      	orrs	r2, r1
 800307e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68d2      	ldr	r2, [r2, #12]
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6992      	ldr	r2, [r2, #24]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d161      	bne.n	800317c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a38      	ldr	r2, [pc, #224]	; (800319c <HAL_I2S_Init+0x274>)
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a37      	ldr	r2, [pc, #220]	; (80031a0 <HAL_I2S_Init+0x278>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_I2S_Init+0x1a4>
 80030c8:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <HAL_I2S_Init+0x27c>)
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x1a8>
 80030cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	4932      	ldr	r1, [pc, #200]	; (80031a0 <HAL_I2S_Init+0x278>)
 80030d8:	428a      	cmp	r2, r1
 80030da:	d101      	bne.n	80030e0 <HAL_I2S_Init+0x1b8>
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_I2S_Init+0x27c>)
 80030de:	e001      	b.n	80030e4 <HAL_I2S_Init+0x1bc>
 80030e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80030e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_I2S_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_I2S_Init+0x1d4>
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_I2S_Init+0x27c>)
 80030fa:	e001      	b.n	8003100 <HAL_I2S_Init+0x1d8>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003100:	2202      	movs	r2, #2
 8003102:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_I2S_Init+0x278>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_I2S_Init+0x1ea>
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_I2S_Init+0x27c>)
 8003110:	e001      	b.n	8003116 <HAL_I2S_Init+0x1ee>
 8003112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003122:	d003      	beq.n	800312c <HAL_I2S_Init+0x204>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800312c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003142:	4313      	orrs	r3, r2
 8003144:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800314c:	4313      	orrs	r3, r2
 800314e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003156:	4313      	orrs	r3, r2
 8003158:	b29a      	uxth	r2, r3
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	4313      	orrs	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003164:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <HAL_I2S_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_I2S_Init+0x24c>
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_I2S_Init+0x27c>)
 8003172:	e001      	b.n	8003178 <HAL_I2S_Init+0x250>
 8003174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003178:	897a      	ldrh	r2, [r7, #10]
 800317a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	08003485 	.word	0x08003485
 8003198:	cccccccd 	.word	0xcccccccd
 800319c:	08003599 	.word	0x08003599
 80031a0:	40003800 	.word	0x40003800
 80031a4:	40003400 	.word	0x40003400

080031a8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_I2S_Transmit_DMA+0x1a>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e08e      	b.n	80032e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_I2S_Transmit_DMA+0x2e>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e086      	b.n	80032e4 <HAL_I2S_Transmit_DMA+0x13c>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d005      	beq.n	80031f6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
 80031f4:	e076      	b.n	80032e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2203      	movs	r2, #3
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d002      	beq.n	8003222 <HAL_I2S_Transmit_DMA+0x7a>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b05      	cmp	r3, #5
 8003220:	d10a      	bne.n	8003238 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003236:	e005      	b.n	8003244 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_I2S_Transmit_DMA+0x144>)
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_I2S_Transmit_DMA+0x148>)
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4a26      	ldr	r2, [pc, #152]	; (80032f4 <HAL_I2S_Transmit_DMA+0x14c>)
 800325a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003264:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800326c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003274:	f7fe fd84 	bl	8001d80 <HAL_DMA_Start_IT>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00f      	beq.n	800329e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	f043 0208 	orr.w	r2, r3, #8
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e022      	b.n	80032e4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d107      	bne.n	80032bc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ba:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0202 	orr.w	r2, r2, #2
 80032d8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	08003363 	.word	0x08003363
 80032f0:	08003321 	.word	0x08003321
 80032f4:	0800337f 	.word	0x0800337f

080032f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10e      	bne.n	8003354 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0202 	bic.w	r2, r2, #2
 8003344:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7fe f9b5 	bl	80016c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7fe f99b 	bl	80016ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0203 	bic.w	r2, r2, #3
 800339a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0208 	orr.w	r2, r3, #8
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f7ff ffa5 	bl	800330c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	881a      	ldrh	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c9a      	adds	r2, r3, #2
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10e      	bne.n	800341e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fe f953 	bl	80016c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	b292      	uxth	r2, r2
 800343a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ff3e 	bl	80032f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800347c:	bf00      	nop
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b04      	cmp	r3, #4
 800349e:	d13a      	bne.n	8003516 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d109      	bne.n	80034be <I2S_IRQHandler+0x3a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d102      	bne.n	80034be <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ffb4 	bl	8003426 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b40      	cmp	r3, #64	; 0x40
 80034c6:	d126      	bne.n	8003516 <I2S_IRQHandler+0x92>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d11f      	bne.n	8003516 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034e4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0202 	orr.w	r2, r3, #2
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff fefb 	bl	800330c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b03      	cmp	r3, #3
 8003520:	d136      	bne.n	8003590 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b02      	cmp	r3, #2
 800352a:	d109      	bne.n	8003540 <I2S_IRQHandler+0xbc>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d102      	bne.n	8003540 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff45 	bl	80033ca <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b08      	cmp	r3, #8
 8003548:	d122      	bne.n	8003590 <I2S_IRQHandler+0x10c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d11b      	bne.n	8003590 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003566:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f043 0204 	orr.w	r2, r3, #4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff febe 	bl	800330c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a92      	ldr	r2, [pc, #584]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035b2:	4b92      	ldr	r3, [pc, #584]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035b4:	e001      	b.n	80035ba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a8b      	ldr	r2, [pc, #556]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035d0:	4b8a      	ldr	r3, [pc, #552]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d2:	e001      	b.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e4:	d004      	beq.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8099 	bne.w	8003722 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d107      	bne.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f925 	bl	8003854 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f9c8 	bl	80039b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d13a      	bne.n	80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d035      	beq.n	80036a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d101      	bne.n	8003646 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003642:	4b6e      	ldr	r3, [pc, #440]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003644:	e001      	b.n	800364a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003646:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4969      	ldr	r1, [pc, #420]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003652:	428b      	cmp	r3, r1
 8003654:	d101      	bne.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003656:	4b69      	ldr	r3, [pc, #420]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003658:	e001      	b.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003662:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003672:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f043 0202 	orr.w	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff fe34 	bl	800330c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	f040 80c3 	bne.w	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80bd 	beq.w	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a49      	ldr	r2, [pc, #292]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d101      	bne.n	80036da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036d6:	4b49      	ldr	r3, [pc, #292]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036d8:	e001      	b.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4944      	ldr	r1, [pc, #272]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036e6:	428b      	cmp	r3, r1
 80036e8:	d101      	bne.n	80036ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80036ea:	4b44      	ldr	r3, [pc, #272]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036ec:	e001      	b.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80036ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fdf6 	bl	800330c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003720:	e089      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d107      	bne.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f8be 	bl	80038b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8fd 	bl	8003950 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d12f      	bne.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02a      	beq.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003778:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003786:	e001      	b.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4919      	ldr	r1, [pc, #100]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d101      	bne.n	800379c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003798:	4b18      	ldr	r3, [pc, #96]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379a:	e001      	b.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800379c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f043 0202 	orr.w	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff fda6 	bl	800330c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d136      	bne.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d031      	beq.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e0:	e001      	b.n	80037e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4902      	ldr	r1, [pc, #8]	; (80037f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ee:	428b      	cmp	r3, r1
 80037f0:	d106      	bne.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80037f2:	4b02      	ldr	r3, [pc, #8]	; (80037fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037f4:	e006      	b.n	8003804 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80037f6:	bf00      	nop
 80037f8:	40003800 	.word	0x40003800
 80037fc:	40003400 	.word	0x40003400
 8003800:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003804:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003808:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003818:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fd6c 	bl	800330c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003834:	e000      	b.n	8003838 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003836:	bf00      	nop
}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c99      	adds	r1, r3, #2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6251      	str	r1, [r2, #36]	; 0x24
 8003866:	881a      	ldrh	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003894:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d106      	bne.n	80038ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ffc9 	bl	8003840 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c99      	adds	r1, r3, #2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6251      	str	r1, [r2, #36]	; 0x24
 80038ca:	8819      	ldrh	r1, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <I2SEx_TxISR_I2SExt+0x90>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <I2SEx_TxISR_I2SExt+0x22>
 80038d6:	4b1d      	ldr	r3, [pc, #116]	; (800394c <I2SEx_TxISR_I2SExt+0x94>)
 80038d8:	e001      	b.n	80038de <I2SEx_TxISR_I2SExt+0x26>
 80038da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038de:	460a      	mov	r2, r1
 80038e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d121      	bne.n	800393e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <I2SEx_TxISR_I2SExt+0x90>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d101      	bne.n	8003908 <I2SEx_TxISR_I2SExt+0x50>
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <I2SEx_TxISR_I2SExt+0x94>)
 8003906:	e001      	b.n	800390c <I2SEx_TxISR_I2SExt+0x54>
 8003908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	490d      	ldr	r1, [pc, #52]	; (8003948 <I2SEx_TxISR_I2SExt+0x90>)
 8003914:	428b      	cmp	r3, r1
 8003916:	d101      	bne.n	800391c <I2SEx_TxISR_I2SExt+0x64>
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <I2SEx_TxISR_I2SExt+0x94>)
 800391a:	e001      	b.n	8003920 <I2SEx_TxISR_I2SExt+0x68>
 800391c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003920:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003924:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff81 	bl	8003840 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40003800 	.word	0x40003800
 800394c:	40003400 	.word	0x40003400

08003950 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68d8      	ldr	r0, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	1c99      	adds	r1, r3, #2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003968:	b282      	uxth	r2, r0
 800396a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d113      	bne.n	80039ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003992:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ff4a 	bl	8003840 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <I2SEx_RxISR_I2SExt+0x90>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <I2SEx_RxISR_I2SExt+0x16>
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <I2SEx_RxISR_I2SExt+0x94>)
 80039c8:	e001      	b.n	80039ce <I2SEx_RxISR_I2SExt+0x1a>
 80039ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ce:	68d8      	ldr	r0, [r3, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	1c99      	adds	r1, r3, #2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039da:	b282      	uxth	r2, r0
 80039dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d121      	bne.n	8003a3a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <I2SEx_RxISR_I2SExt+0x90>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <I2SEx_RxISR_I2SExt+0x50>
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <I2SEx_RxISR_I2SExt+0x94>)
 8003a02:	e001      	b.n	8003a08 <I2SEx_RxISR_I2SExt+0x54>
 8003a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	490d      	ldr	r1, [pc, #52]	; (8003a44 <I2SEx_RxISR_I2SExt+0x90>)
 8003a10:	428b      	cmp	r3, r1
 8003a12:	d101      	bne.n	8003a18 <I2SEx_RxISR_I2SExt+0x64>
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <I2SEx_RxISR_I2SExt+0x94>)
 8003a16:	e001      	b.n	8003a1c <I2SEx_RxISR_I2SExt+0x68>
 8003a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a20:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ff03 	bl	8003840 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40003800 	.word	0x40003800
 8003a48:	40003400 	.word	0x40003400

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e267      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d075      	beq.n	8003b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6a:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d00c      	beq.n	8003a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a76:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d112      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a82:	4b82      	ldr	r3, [pc, #520]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	4b7e      	ldr	r3, [pc, #504]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d05b      	beq.n	8003b54 <HAL_RCC_OscConfig+0x108>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d157      	bne.n	8003b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e242      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x74>
 8003ab2:	4b76      	ldr	r3, [pc, #472]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a75      	ldr	r2, [pc, #468]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e01d      	b.n	8003afc <HAL_RCC_OscConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x98>
 8003aca:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6f      	ldr	r2, [pc, #444]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6c      	ldr	r2, [pc, #432]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e00b      	b.n	8003afc <HAL_RCC_OscConfig+0xb0>
 8003ae4:	4b69      	ldr	r3, [pc, #420]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a68      	ldr	r2, [pc, #416]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b66      	ldr	r3, [pc, #408]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a65      	ldr	r2, [pc, #404]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d013      	beq.n	8003b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fd ff70 	bl	80019e8 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b0c:	f7fd ff6c 	bl	80019e8 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e207      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b5b      	ldr	r3, [pc, #364]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0xc0>
 8003b2a:	e014      	b.n	8003b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fd ff5c 	bl	80019e8 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fd ff58 	bl	80019e8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1f3      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b46:	4b51      	ldr	r3, [pc, #324]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0xe8>
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d063      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d11c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b7a:	4b44      	ldr	r3, [pc, #272]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b86:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <HAL_RCC_OscConfig+0x152>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d001      	beq.n	8003b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e1c7      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4937      	ldr	r1, [pc, #220]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	e03a      	b.n	8003c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bbc:	4b34      	ldr	r3, [pc, #208]	; (8003c90 <HAL_RCC_OscConfig+0x244>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fd ff11 	bl	80019e8 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fd ff0d 	bl	80019e8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e1a8      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bdc:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4925      	ldr	r1, [pc, #148]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]
 8003bfc:	e015      	b.n	8003c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x244>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fd fef0 	bl	80019e8 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c0c:	f7fd feec 	bl	80019e8 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e187      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d036      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x248>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c44:	f7fd fed0 	bl	80019e8 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4c:	f7fd fecc 	bl	80019e8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e167      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_OscConfig+0x240>)
 8003c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x200>
 8003c6a:	e01b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_OscConfig+0x248>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7fd feb9 	bl	80019e8 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c78:	e00e      	b.n	8003c98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c7a:	f7fd feb5 	bl	80019e8 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d907      	bls.n	8003c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e150      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	42470000 	.word	0x42470000
 8003c94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	4b88      	ldr	r3, [pc, #544]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ea      	bne.n	8003c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8097 	beq.w	8003de0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb6:	4b81      	ldr	r3, [pc, #516]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	4b7d      	ldr	r3, [pc, #500]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a7c      	ldr	r2, [pc, #496]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce2:	4b77      	ldr	r3, [pc, #476]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cee:	4b74      	ldr	r3, [pc, #464]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a73      	ldr	r2, [pc, #460]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfa:	f7fd fe75 	bl	80019e8 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d02:	f7fd fe71 	bl	80019e8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e10c      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b6a      	ldr	r3, [pc, #424]	; (8003ec0 <HAL_RCC_OscConfig+0x474>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x2ea>
 8003d28:	4b64      	ldr	r3, [pc, #400]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a63      	ldr	r2, [pc, #396]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
 8003d34:	e01c      	b.n	8003d70 <HAL_RCC_OscConfig+0x324>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x30c>
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a5e      	ldr	r2, [pc, #376]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a5b      	ldr	r2, [pc, #364]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0x324>
 8003d58:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	6713      	str	r3, [r2, #112]	; 0x70
 8003d64:	4b55      	ldr	r3, [pc, #340]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a54      	ldr	r2, [pc, #336]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d6a:	f023 0304 	bic.w	r3, r3, #4
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d015      	beq.n	8003da4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d78:	f7fd fe36 	bl	80019e8 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7e:	e00a      	b.n	8003d96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7fd fe32 	bl	80019e8 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0cb      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d96:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0ee      	beq.n	8003d80 <HAL_RCC_OscConfig+0x334>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da4:	f7fd fe20 	bl	80019e8 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fd fe1c 	bl	80019e8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e0b5      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc2:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ee      	bne.n	8003dac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd4:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	4a38      	ldr	r2, [pc, #224]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80a1 	beq.w	8003f2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dea:	4b34      	ldr	r3, [pc, #208]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d05c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d141      	bne.n	8003e82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_OscConfig+0x478>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fdf0 	bl	80019e8 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd fdec 	bl	80019e8 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e087      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	085b      	lsrs	r3, r3, #1
 8003e42:	3b01      	subs	r3, #1
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	491b      	ldr	r1, [pc, #108]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x478>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd fdc5 	bl	80019e8 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e62:	f7fd fdc1 	bl	80019e8 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e05c      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x416>
 8003e80:	e054      	b.n	8003f2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_RCC_OscConfig+0x478>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd fdae 	bl	80019e8 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd fdaa 	bl	80019e8 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e045      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_OscConfig+0x470>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x444>
 8003eae:	e03d      	b.n	8003f2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e038      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCC_OscConfig+0x4ec>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d028      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d121      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d11a      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef8:	4013      	ands	r3, r2
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	3b01      	subs	r3, #1
 8003f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800

08003f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0cc      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d90c      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0b8      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	494d      	ldr	r1, [pc, #308]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d044      	beq.n	800405c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d119      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e07f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d003      	beq.n	8003ffa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e06f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800400a:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e067      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b37      	ldr	r3, [pc, #220]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4934      	ldr	r1, [pc, #208]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800402c:	f7fd fcdc 	bl	80019e8 <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fd fcd8 	bl	80019e8 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e04f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d20c      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e032      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4916      	ldr	r1, [pc, #88]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040c2:	f000 f821 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040c6:	4602      	mov	r2, r0
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	490a      	ldr	r1, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	5ccb      	ldrb	r3, [r1, r3]
 80040d6:	fa22 f303 	lsr.w	r3, r2, r3
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1c8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fc3c 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023c00 	.word	0x40023c00
 80040f8:	40023800 	.word	0x40023800
 80040fc:	08005700 	.word	0x08005700
 8004100:	20000004 	.word	0x20000004
 8004104:	20000008 	.word	0x20000008

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b094      	sub	sp, #80	; 0x50
 800410e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	647b      	str	r3, [r7, #68]	; 0x44
 8004114:	2300      	movs	r3, #0
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	2300      	movs	r3, #0
 800411a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d00d      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x40>
 800412c:	2b08      	cmp	r3, #8
 800412e:	f200 80e1 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x34>
 8004136:	2b04      	cmp	r3, #4
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x3a>
 800413a:	e0db      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b73      	ldr	r3, [pc, #460]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004140:	e0db      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004142:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_GetSysClockFreq+0x208>)
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004146:	e0d8      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	2200      	movs	r2, #0
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
 8004168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
 8004176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	0159      	lsls	r1, r3, #5
 8004188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800418c:	0150      	lsls	r0, r2, #5
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4621      	mov	r1, r4
 8004194:	1a51      	subs	r1, r2, r1
 8004196:	6139      	str	r1, [r7, #16]
 8004198:	4629      	mov	r1, r5
 800419a:	eb63 0301 	sbc.w	r3, r3, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ac:	4659      	mov	r1, fp
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b6:	4651      	mov	r1, sl
 80041b8:	018a      	lsls	r2, r1, #6
 80041ba:	4651      	mov	r1, sl
 80041bc:	ebb2 0801 	subs.w	r8, r2, r1
 80041c0:	4659      	mov	r1, fp
 80041c2:	eb63 0901 	sbc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	462b      	mov	r3, r5
 80041e8:	eb49 0303 	adc.w	r3, r9, r3
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041fa:	4629      	mov	r1, r5
 80041fc:	024b      	lsls	r3, r1, #9
 80041fe:	4621      	mov	r1, r4
 8004200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004204:	4621      	mov	r1, r4
 8004206:	024a      	lsls	r2, r1, #9
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420e:	2200      	movs	r2, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
 8004212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004218:	f7fc fbc4 	bl	80009a4 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4613      	mov	r3, r2
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004224:	e058      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	2200      	movs	r2, #0
 800422e:	4618      	mov	r0, r3
 8004230:	4611      	mov	r1, r2
 8004232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	0159      	lsls	r1, r3, #5
 800424e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004252:	0150      	lsls	r0, r2, #5
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4641      	mov	r1, r8
 800425a:	ebb2 0a01 	subs.w	sl, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb63 0b01 	sbc.w	fp, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004278:	ebb2 040a 	subs.w	r4, r2, sl
 800427c:	eb63 050b 	sbc.w	r5, r3, fp
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	00eb      	lsls	r3, r5, #3
 800428a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	4643      	mov	r3, r8
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	464b      	mov	r3, r9
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ae:	4629      	mov	r1, r5
 80042b0:	028b      	lsls	r3, r1, #10
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b8:	4621      	mov	r1, r4
 80042ba:	028a      	lsls	r2, r1, #10
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	61fa      	str	r2, [r7, #28]
 80042c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042cc:	f7fc fb6a 	bl	80009a4 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 80042f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3750      	adds	r7, #80	; 0x50
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000004 	.word	0x20000004

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	08005710 	.word	0x08005710

08004354 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d105      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004378:	2b00      	cmp	r3, #0
 800437a:	d038      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800437c:	4b68      	ldr	r3, [pc, #416]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004382:	f7fd fb31 	bl	80019e8 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800438a:	f7fd fb2d 	bl	80019e8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e0bd      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	019b      	lsls	r3, r3, #6
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	495a      	ldr	r1, [pc, #360]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c2:	4b57      	ldr	r3, [pc, #348]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043c8:	f7fd fb0e 	bl	80019e8 <HAL_GetTick>
 80043cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043d0:	f7fd fb0a 	bl	80019e8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e09a      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e2:	4b50      	ldr	r3, [pc, #320]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8083 	beq.w	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	4b48      	ldr	r3, [pc, #288]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	4a47      	ldr	r2, [pc, #284]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6413      	str	r3, [r2, #64]	; 0x40
 800440c:	4b45      	ldr	r3, [pc, #276]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a42      	ldr	r2, [pc, #264]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004424:	f7fd fae0 	bl	80019e8 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fd fadc 	bl	80019e8 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e06c      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800444a:	4b36      	ldr	r3, [pc, #216]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d02f      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d028      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004468:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004478:	4b2c      	ldr	r3, [pc, #176]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800447e:	4a29      	ldr	r2, [pc, #164]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004484:	4b27      	ldr	r3, [pc, #156]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b01      	cmp	r3, #1
 800448e:	d114      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004490:	f7fd faaa 	bl	80019e8 <HAL_GetTick>
 8004494:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004496:	e00a      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004498:	f7fd faa6 	bl	80019e8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e034      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0ee      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044c6:	d10d      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044dc:	4911      	ldr	r1, [pc, #68]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
 80044e2:	e005      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80044e4:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a0e      	ldr	r2, [pc, #56]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	4909      	ldr	r1, [pc, #36]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7d1a      	ldrb	r2, [r3, #20]
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004514:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	42470068 	.word	0x42470068
 8004524:	40023800 	.word	0x40023800
 8004528:	40007000 	.word	0x40007000
 800452c:	42470e40 	.word	0x42470e40
 8004530:	424711e0 	.word	0x424711e0

08004534 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d140      	bne.n	80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004552:	4b24      	ldr	r3, [pc, #144]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d131      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004568:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800456a:	617b      	str	r3, [r7, #20]
          break;
 800456c:	e031      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457a:	d109      	bne.n	8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004586:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	e008      	b.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004590:	4b14      	ldr	r3, [pc, #80]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a8:	099b      	lsrs	r3, r3, #6
 80045aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80045b6:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045bc:	0f1b      	lsrs	r3, r3, #28
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
          break;
 80045ca:	e002      	b.n	80045d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]
          break;
 80045d0:	bf00      	nop
        }
      }
      break;
 80045d2:	bf00      	nop
    }
  }
  return frequency;
 80045d4:	697b      	ldr	r3, [r7, #20]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	00bb8000 	.word	0x00bb8000
 80045ec:	007a1200 	.word	0x007a1200
 80045f0:	00f42400 	.word	0x00f42400

080045f4 <__libc_init_array>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4d0d      	ldr	r5, [pc, #52]	; (800462c <__libc_init_array+0x38>)
 80045f8:	4c0d      	ldr	r4, [pc, #52]	; (8004630 <__libc_init_array+0x3c>)
 80045fa:	1b64      	subs	r4, r4, r5
 80045fc:	10a4      	asrs	r4, r4, #2
 80045fe:	2600      	movs	r6, #0
 8004600:	42a6      	cmp	r6, r4
 8004602:	d109      	bne.n	8004618 <__libc_init_array+0x24>
 8004604:	4d0b      	ldr	r5, [pc, #44]	; (8004634 <__libc_init_array+0x40>)
 8004606:	4c0c      	ldr	r4, [pc, #48]	; (8004638 <__libc_init_array+0x44>)
 8004608:	f001 f86c 	bl	80056e4 <_init>
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	2600      	movs	r6, #0
 8004612:	42a6      	cmp	r6, r4
 8004614:	d105      	bne.n	8004622 <__libc_init_array+0x2e>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	f855 3b04 	ldr.w	r3, [r5], #4
 800461c:	4798      	blx	r3
 800461e:	3601      	adds	r6, #1
 8004620:	e7ee      	b.n	8004600 <__libc_init_array+0xc>
 8004622:	f855 3b04 	ldr.w	r3, [r5], #4
 8004626:	4798      	blx	r3
 8004628:	3601      	adds	r6, #1
 800462a:	e7f2      	b.n	8004612 <__libc_init_array+0x1e>
 800462c:	08005900 	.word	0x08005900
 8004630:	08005900 	.word	0x08005900
 8004634:	08005900 	.word	0x08005900
 8004638:	08005904 	.word	0x08005904

0800463c <memset>:
 800463c:	4402      	add	r2, r0
 800463e:	4603      	mov	r3, r0
 8004640:	4293      	cmp	r3, r2
 8004642:	d100      	bne.n	8004646 <memset+0xa>
 8004644:	4770      	bx	lr
 8004646:	f803 1b01 	strb.w	r1, [r3], #1
 800464a:	e7f9      	b.n	8004640 <memset+0x4>
 800464c:	0000      	movs	r0, r0
	...

08004650 <sin>:
 8004650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004652:	ec53 2b10 	vmov	r2, r3, d0
 8004656:	4828      	ldr	r0, [pc, #160]	; (80046f8 <sin+0xa8>)
 8004658:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800465c:	4281      	cmp	r1, r0
 800465e:	dc07      	bgt.n	8004670 <sin+0x20>
 8004660:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80046f0 <sin+0xa0>
 8004664:	2000      	movs	r0, #0
 8004666:	b005      	add	sp, #20
 8004668:	f85d eb04 	ldr.w	lr, [sp], #4
 800466c:	f000 be6c 	b.w	8005348 <__kernel_sin>
 8004670:	4822      	ldr	r0, [pc, #136]	; (80046fc <sin+0xac>)
 8004672:	4281      	cmp	r1, r0
 8004674:	dd09      	ble.n	800468a <sin+0x3a>
 8004676:	ee10 0a10 	vmov	r0, s0
 800467a:	4619      	mov	r1, r3
 800467c:	f7fb feda 	bl	8000434 <__aeabi_dsub>
 8004680:	ec41 0b10 	vmov	d0, r0, r1
 8004684:	b005      	add	sp, #20
 8004686:	f85d fb04 	ldr.w	pc, [sp], #4
 800468a:	4668      	mov	r0, sp
 800468c:	f000 f838 	bl	8004700 <__ieee754_rem_pio2>
 8004690:	f000 0003 	and.w	r0, r0, #3
 8004694:	2801      	cmp	r0, #1
 8004696:	d00c      	beq.n	80046b2 <sin+0x62>
 8004698:	2802      	cmp	r0, #2
 800469a:	d011      	beq.n	80046c0 <sin+0x70>
 800469c:	b9f0      	cbnz	r0, 80046dc <sin+0x8c>
 800469e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046a2:	ed9d 0b00 	vldr	d0, [sp]
 80046a6:	2001      	movs	r0, #1
 80046a8:	f000 fe4e 	bl	8005348 <__kernel_sin>
 80046ac:	ec51 0b10 	vmov	r0, r1, d0
 80046b0:	e7e6      	b.n	8004680 <sin+0x30>
 80046b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046b6:	ed9d 0b00 	vldr	d0, [sp]
 80046ba:	f000 fa2d 	bl	8004b18 <__kernel_cos>
 80046be:	e7f5      	b.n	80046ac <sin+0x5c>
 80046c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046c4:	ed9d 0b00 	vldr	d0, [sp]
 80046c8:	2001      	movs	r0, #1
 80046ca:	f000 fe3d 	bl	8005348 <__kernel_sin>
 80046ce:	ec53 2b10 	vmov	r2, r3, d0
 80046d2:	ee10 0a10 	vmov	r0, s0
 80046d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80046da:	e7d1      	b.n	8004680 <sin+0x30>
 80046dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80046e0:	ed9d 0b00 	vldr	d0, [sp]
 80046e4:	f000 fa18 	bl	8004b18 <__kernel_cos>
 80046e8:	e7f1      	b.n	80046ce <sin+0x7e>
 80046ea:	bf00      	nop
 80046ec:	f3af 8000 	nop.w
	...
 80046f8:	3fe921fb 	.word	0x3fe921fb
 80046fc:	7fefffff 	.word	0x7fefffff

08004700 <__ieee754_rem_pio2>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	ed2d 8b02 	vpush	{d8}
 8004708:	ec55 4b10 	vmov	r4, r5, d0
 800470c:	4bca      	ldr	r3, [pc, #808]	; (8004a38 <__ieee754_rem_pio2+0x338>)
 800470e:	b08b      	sub	sp, #44	; 0x2c
 8004710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004714:	4598      	cmp	r8, r3
 8004716:	4682      	mov	sl, r0
 8004718:	9502      	str	r5, [sp, #8]
 800471a:	dc08      	bgt.n	800472e <__ieee754_rem_pio2+0x2e>
 800471c:	2200      	movs	r2, #0
 800471e:	2300      	movs	r3, #0
 8004720:	ed80 0b00 	vstr	d0, [r0]
 8004724:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004728:	f04f 0b00 	mov.w	fp, #0
 800472c:	e028      	b.n	8004780 <__ieee754_rem_pio2+0x80>
 800472e:	4bc3      	ldr	r3, [pc, #780]	; (8004a3c <__ieee754_rem_pio2+0x33c>)
 8004730:	4598      	cmp	r8, r3
 8004732:	dc78      	bgt.n	8004826 <__ieee754_rem_pio2+0x126>
 8004734:	9b02      	ldr	r3, [sp, #8]
 8004736:	4ec2      	ldr	r6, [pc, #776]	; (8004a40 <__ieee754_rem_pio2+0x340>)
 8004738:	2b00      	cmp	r3, #0
 800473a:	ee10 0a10 	vmov	r0, s0
 800473e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x300>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	4629      	mov	r1, r5
 8004746:	dd39      	ble.n	80047bc <__ieee754_rem_pio2+0xbc>
 8004748:	f7fb fe74 	bl	8000434 <__aeabi_dsub>
 800474c:	45b0      	cmp	r8, r6
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	d01b      	beq.n	800478c <__ieee754_rem_pio2+0x8c>
 8004754:	a3ac      	add	r3, pc, #688	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	f7fb fe6b 	bl	8000434 <__aeabi_dsub>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	e9ca 2300 	strd	r2, r3, [sl]
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fb fe63 	bl	8000434 <__aeabi_dsub>
 800476e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fe5e 	bl	8000434 <__aeabi_dsub>
 8004778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800477c:	f04f 0b01 	mov.w	fp, #1
 8004780:	4658      	mov	r0, fp
 8004782:	b00b      	add	sp, #44	; 0x2c
 8004784:	ecbd 8b02 	vpop	{d8}
 8004788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x310>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fe4f 	bl	8000434 <__aeabi_dsub>
 8004796:	a3a0      	add	r3, pc, #640	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	4604      	mov	r4, r0
 800479e:	460d      	mov	r5, r1
 80047a0:	f7fb fe48 	bl	8000434 <__aeabi_dsub>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	e9ca 2300 	strd	r2, r3, [sl]
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f7fb fe40 	bl	8000434 <__aeabi_dsub>
 80047b4:	a398      	add	r3, pc, #608	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	e7db      	b.n	8004774 <__ieee754_rem_pio2+0x74>
 80047bc:	f7fb fe3c 	bl	8000438 <__adddf3>
 80047c0:	45b0      	cmp	r8, r6
 80047c2:	4604      	mov	r4, r0
 80047c4:	460d      	mov	r5, r1
 80047c6:	d016      	beq.n	80047f6 <__ieee754_rem_pio2+0xf6>
 80047c8:	a38f      	add	r3, pc, #572	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f7fb fe33 	bl	8000438 <__adddf3>
 80047d2:	4602      	mov	r2, r0
 80047d4:	460b      	mov	r3, r1
 80047d6:	e9ca 2300 	strd	r2, r3, [sl]
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	f7fb fe29 	bl	8000434 <__aeabi_dsub>
 80047e2:	a389      	add	r3, pc, #548	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f7fb fe26 	bl	8000438 <__adddf3>
 80047ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80047f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047f4:	e7c4      	b.n	8004780 <__ieee754_rem_pio2+0x80>
 80047f6:	a386      	add	r3, pc, #536	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x310>)
 80047f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fc:	f7fb fe1c 	bl	8000438 <__adddf3>
 8004800:	a385      	add	r3, pc, #532	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	4604      	mov	r4, r0
 8004808:	460d      	mov	r5, r1
 800480a:	f7fb fe15 	bl	8000438 <__adddf3>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	e9ca 2300 	strd	r2, r3, [sl]
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fb fe0b 	bl	8000434 <__aeabi_dsub>
 800481e:	a37e      	add	r3, pc, #504	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	e7e0      	b.n	80047e8 <__ieee754_rem_pio2+0xe8>
 8004826:	4b87      	ldr	r3, [pc, #540]	; (8004a44 <__ieee754_rem_pio2+0x344>)
 8004828:	4598      	cmp	r8, r3
 800482a:	f300 80d9 	bgt.w	80049e0 <__ieee754_rem_pio2+0x2e0>
 800482e:	f000 fe49 	bl	80054c4 <fabs>
 8004832:	ec55 4b10 	vmov	r4, r5, d0
 8004836:	ee10 0a10 	vmov	r0, s0
 800483a:	a379      	add	r3, pc, #484	; (adr r3, 8004a20 <__ieee754_rem_pio2+0x320>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	4629      	mov	r1, r5
 8004842:	f7fb fcc9 	bl	80001d8 <__aeabi_dmul>
 8004846:	4b80      	ldr	r3, [pc, #512]	; (8004a48 <__ieee754_rem_pio2+0x348>)
 8004848:	2200      	movs	r2, #0
 800484a:	f7fb fdf5 	bl	8000438 <__adddf3>
 800484e:	f7fc f831 	bl	80008b4 <__aeabi_d2iz>
 8004852:	4683      	mov	fp, r0
 8004854:	f7fb ff3c 	bl	80006d0 <__aeabi_i2d>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	ec43 2b18 	vmov	d8, r2, r3
 8004860:	a367      	add	r3, pc, #412	; (adr r3, 8004a00 <__ieee754_rem_pio2+0x300>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb fcb7 	bl	80001d8 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fddf 	bl	8000434 <__aeabi_dsub>
 8004876:	a364      	add	r3, pc, #400	; (adr r3, 8004a08 <__ieee754_rem_pio2+0x308>)
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	4606      	mov	r6, r0
 800487e:	460f      	mov	r7, r1
 8004880:	ec51 0b18 	vmov	r0, r1, d8
 8004884:	f7fb fca8 	bl	80001d8 <__aeabi_dmul>
 8004888:	f1bb 0f1f 	cmp.w	fp, #31
 800488c:	4604      	mov	r4, r0
 800488e:	460d      	mov	r5, r1
 8004890:	dc0d      	bgt.n	80048ae <__ieee754_rem_pio2+0x1ae>
 8004892:	4b6e      	ldr	r3, [pc, #440]	; (8004a4c <__ieee754_rem_pio2+0x34c>)
 8004894:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8004898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489c:	4543      	cmp	r3, r8
 800489e:	d006      	beq.n	80048ae <__ieee754_rem_pio2+0x1ae>
 80048a0:	4622      	mov	r2, r4
 80048a2:	462b      	mov	r3, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	4639      	mov	r1, r7
 80048a8:	f7fb fdc4 	bl	8000434 <__aeabi_dsub>
 80048ac:	e00f      	b.n	80048ce <__ieee754_rem_pio2+0x1ce>
 80048ae:	462b      	mov	r3, r5
 80048b0:	4622      	mov	r2, r4
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb fdbd 	bl	8000434 <__aeabi_dsub>
 80048ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80048be:	9303      	str	r3, [sp, #12]
 80048c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80048c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80048c8:	f1b8 0f10 	cmp.w	r8, #16
 80048cc:	dc02      	bgt.n	80048d4 <__ieee754_rem_pio2+0x1d4>
 80048ce:	e9ca 0100 	strd	r0, r1, [sl]
 80048d2:	e039      	b.n	8004948 <__ieee754_rem_pio2+0x248>
 80048d4:	a34e      	add	r3, pc, #312	; (adr r3, 8004a10 <__ieee754_rem_pio2+0x310>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	ec51 0b18 	vmov	r0, r1, d8
 80048de:	f7fb fc7b 	bl	80001d8 <__aeabi_dmul>
 80048e2:	4604      	mov	r4, r0
 80048e4:	460d      	mov	r5, r1
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4630      	mov	r0, r6
 80048ec:	4639      	mov	r1, r7
 80048ee:	f7fb fda1 	bl	8000434 <__aeabi_dsub>
 80048f2:	4602      	mov	r2, r0
 80048f4:	460b      	mov	r3, r1
 80048f6:	4680      	mov	r8, r0
 80048f8:	4689      	mov	r9, r1
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	f7fb fd99 	bl	8000434 <__aeabi_dsub>
 8004902:	4622      	mov	r2, r4
 8004904:	462b      	mov	r3, r5
 8004906:	f7fb fd95 	bl	8000434 <__aeabi_dsub>
 800490a:	a343      	add	r3, pc, #268	; (adr r3, 8004a18 <__ieee754_rem_pio2+0x318>)
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	ec51 0b18 	vmov	r0, r1, d8
 8004918:	f7fb fc5e 	bl	80001d8 <__aeabi_dmul>
 800491c:	4622      	mov	r2, r4
 800491e:	462b      	mov	r3, r5
 8004920:	f7fb fd88 	bl	8000434 <__aeabi_dsub>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4604      	mov	r4, r0
 800492a:	460d      	mov	r5, r1
 800492c:	4640      	mov	r0, r8
 800492e:	4649      	mov	r1, r9
 8004930:	f7fb fd80 	bl	8000434 <__aeabi_dsub>
 8004934:	9a03      	ldr	r2, [sp, #12]
 8004936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b31      	cmp	r3, #49	; 0x31
 800493e:	dc24      	bgt.n	800498a <__ieee754_rem_pio2+0x28a>
 8004940:	e9ca 0100 	strd	r0, r1, [sl]
 8004944:	4646      	mov	r6, r8
 8004946:	464f      	mov	r7, r9
 8004948:	e9da 8900 	ldrd	r8, r9, [sl]
 800494c:	4630      	mov	r0, r6
 800494e:	4642      	mov	r2, r8
 8004950:	464b      	mov	r3, r9
 8004952:	4639      	mov	r1, r7
 8004954:	f7fb fd6e 	bl	8000434 <__aeabi_dsub>
 8004958:	462b      	mov	r3, r5
 800495a:	4622      	mov	r2, r4
 800495c:	f7fb fd6a 	bl	8000434 <__aeabi_dsub>
 8004960:	9b02      	ldr	r3, [sp, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004968:	f6bf af0a 	bge.w	8004780 <__ieee754_rem_pio2+0x80>
 800496c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004970:	f8ca 3004 	str.w	r3, [sl, #4]
 8004974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004978:	f8ca 8000 	str.w	r8, [sl]
 800497c:	f8ca 0008 	str.w	r0, [sl, #8]
 8004980:	f8ca 300c 	str.w	r3, [sl, #12]
 8004984:	f1cb 0b00 	rsb	fp, fp, #0
 8004988:	e6fa      	b.n	8004780 <__ieee754_rem_pio2+0x80>
 800498a:	a327      	add	r3, pc, #156	; (adr r3, 8004a28 <__ieee754_rem_pio2+0x328>)
 800498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004990:	ec51 0b18 	vmov	r0, r1, d8
 8004994:	f7fb fc20 	bl	80001d8 <__aeabi_dmul>
 8004998:	4604      	mov	r4, r0
 800499a:	460d      	mov	r5, r1
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4640      	mov	r0, r8
 80049a2:	4649      	mov	r1, r9
 80049a4:	f7fb fd46 	bl	8000434 <__aeabi_dsub>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	4640      	mov	r0, r8
 80049b2:	4649      	mov	r1, r9
 80049b4:	f7fb fd3e 	bl	8000434 <__aeabi_dsub>
 80049b8:	4622      	mov	r2, r4
 80049ba:	462b      	mov	r3, r5
 80049bc:	f7fb fd3a 	bl	8000434 <__aeabi_dsub>
 80049c0:	a31b      	add	r3, pc, #108	; (adr r3, 8004a30 <__ieee754_rem_pio2+0x330>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	4604      	mov	r4, r0
 80049c8:	460d      	mov	r5, r1
 80049ca:	ec51 0b18 	vmov	r0, r1, d8
 80049ce:	f7fb fc03 	bl	80001d8 <__aeabi_dmul>
 80049d2:	4622      	mov	r2, r4
 80049d4:	462b      	mov	r3, r5
 80049d6:	f7fb fd2d 	bl	8000434 <__aeabi_dsub>
 80049da:	4604      	mov	r4, r0
 80049dc:	460d      	mov	r5, r1
 80049de:	e75f      	b.n	80048a0 <__ieee754_rem_pio2+0x1a0>
 80049e0:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <__ieee754_rem_pio2+0x350>)
 80049e2:	4598      	cmp	r8, r3
 80049e4:	dd36      	ble.n	8004a54 <__ieee754_rem_pio2+0x354>
 80049e6:	ee10 2a10 	vmov	r2, s0
 80049ea:	462b      	mov	r3, r5
 80049ec:	4620      	mov	r0, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	f7fb fd20 	bl	8000434 <__aeabi_dsub>
 80049f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80049f8:	e9ca 0100 	strd	r0, r1, [sl]
 80049fc:	e694      	b.n	8004728 <__ieee754_rem_pio2+0x28>
 80049fe:	bf00      	nop
 8004a00:	54400000 	.word	0x54400000
 8004a04:	3ff921fb 	.word	0x3ff921fb
 8004a08:	1a626331 	.word	0x1a626331
 8004a0c:	3dd0b461 	.word	0x3dd0b461
 8004a10:	1a600000 	.word	0x1a600000
 8004a14:	3dd0b461 	.word	0x3dd0b461
 8004a18:	2e037073 	.word	0x2e037073
 8004a1c:	3ba3198a 	.word	0x3ba3198a
 8004a20:	6dc9c883 	.word	0x6dc9c883
 8004a24:	3fe45f30 	.word	0x3fe45f30
 8004a28:	2e000000 	.word	0x2e000000
 8004a2c:	3ba3198a 	.word	0x3ba3198a
 8004a30:	252049c1 	.word	0x252049c1
 8004a34:	397b839a 	.word	0x397b839a
 8004a38:	3fe921fb 	.word	0x3fe921fb
 8004a3c:	4002d97b 	.word	0x4002d97b
 8004a40:	3ff921fb 	.word	0x3ff921fb
 8004a44:	413921fb 	.word	0x413921fb
 8004a48:	3fe00000 	.word	0x3fe00000
 8004a4c:	08005720 	.word	0x08005720
 8004a50:	7fefffff 	.word	0x7fefffff
 8004a54:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004a58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004a5c:	ee10 0a10 	vmov	r0, s0
 8004a60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004a64:	ee10 6a10 	vmov	r6, s0
 8004a68:	460f      	mov	r7, r1
 8004a6a:	f7fb ff23 	bl	80008b4 <__aeabi_d2iz>
 8004a6e:	f7fb fe2f 	bl	80006d0 <__aeabi_i2d>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4630      	mov	r0, r6
 8004a78:	4639      	mov	r1, r7
 8004a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a7e:	f7fb fcd9 	bl	8000434 <__aeabi_dsub>
 8004a82:	4b23      	ldr	r3, [pc, #140]	; (8004b10 <__ieee754_rem_pio2+0x410>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	f7fb fba7 	bl	80001d8 <__aeabi_dmul>
 8004a8a:	460f      	mov	r7, r1
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	f7fb ff11 	bl	80008b4 <__aeabi_d2iz>
 8004a92:	f7fb fe1d 	bl	80006d0 <__aeabi_i2d>
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004aa2:	f7fb fcc7 	bl	8000434 <__aeabi_dsub>
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <__ieee754_rem_pio2+0x410>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f7fb fb95 	bl	80001d8 <__aeabi_dmul>
 8004aae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ab2:	ad04      	add	r5, sp, #16
 8004ab4:	f04f 0803 	mov.w	r8, #3
 8004ab8:	46a9      	mov	r9, r5
 8004aba:	2600      	movs	r6, #0
 8004abc:	2700      	movs	r7, #0
 8004abe:	4632      	mov	r2, r6
 8004ac0:	463b      	mov	r3, r7
 8004ac2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004ac6:	46c3      	mov	fp, r8
 8004ac8:	3d08      	subs	r5, #8
 8004aca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004ace:	f7fb febf 	bl	8000850 <__aeabi_dcmpeq>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	d1f3      	bne.n	8004abe <__ieee754_rem_pio2+0x3be>
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <__ieee754_rem_pio2+0x414>)
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	2302      	movs	r3, #2
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	4622      	mov	r2, r4
 8004ae0:	465b      	mov	r3, fp
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	4648      	mov	r0, r9
 8004ae6:	f000 f8df 	bl	8004ca8 <__kernel_rem_pio2>
 8004aea:	9b02      	ldr	r3, [sp, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	4683      	mov	fp, r0
 8004af0:	f6bf ae46 	bge.w	8004780 <__ieee754_rem_pio2+0x80>
 8004af4:	e9da 2100 	ldrd	r2, r1, [sl]
 8004af8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004afc:	e9ca 2300 	strd	r2, r3, [sl]
 8004b00:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b08:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004b0c:	e73a      	b.n	8004984 <__ieee754_rem_pio2+0x284>
 8004b0e:	bf00      	nop
 8004b10:	41700000 	.word	0x41700000
 8004b14:	080057a0 	.word	0x080057a0

08004b18 <__kernel_cos>:
 8004b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	ec57 6b10 	vmov	r6, r7, d0
 8004b20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004b24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004b28:	ed8d 1b00 	vstr	d1, [sp]
 8004b2c:	da07      	bge.n	8004b3e <__kernel_cos+0x26>
 8004b2e:	ee10 0a10 	vmov	r0, s0
 8004b32:	4639      	mov	r1, r7
 8004b34:	f7fb febe 	bl	80008b4 <__aeabi_d2iz>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f000 8088 	beq.w	8004c4e <__kernel_cos+0x136>
 8004b3e:	4632      	mov	r2, r6
 8004b40:	463b      	mov	r3, r7
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb fb47 	bl	80001d8 <__aeabi_dmul>
 8004b4a:	4b51      	ldr	r3, [pc, #324]	; (8004c90 <__kernel_cos+0x178>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4604      	mov	r4, r0
 8004b50:	460d      	mov	r5, r1
 8004b52:	f7fb fb41 	bl	80001d8 <__aeabi_dmul>
 8004b56:	a340      	add	r3, pc, #256	; (adr r3, 8004c58 <__kernel_cos+0x140>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	4682      	mov	sl, r0
 8004b5e:	468b      	mov	fp, r1
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb fb38 	bl	80001d8 <__aeabi_dmul>
 8004b68:	a33d      	add	r3, pc, #244	; (adr r3, 8004c60 <__kernel_cos+0x148>)
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f7fb fc63 	bl	8000438 <__adddf3>
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	f7fb fb2f 	bl	80001d8 <__aeabi_dmul>
 8004b7a:	a33b      	add	r3, pc, #236	; (adr r3, 8004c68 <__kernel_cos+0x150>)
 8004b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b80:	f7fb fc58 	bl	8000434 <__aeabi_dsub>
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	f7fb fb26 	bl	80001d8 <__aeabi_dmul>
 8004b8c:	a338      	add	r3, pc, #224	; (adr r3, 8004c70 <__kernel_cos+0x158>)
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f7fb fc51 	bl	8000438 <__adddf3>
 8004b96:	4622      	mov	r2, r4
 8004b98:	462b      	mov	r3, r5
 8004b9a:	f7fb fb1d 	bl	80001d8 <__aeabi_dmul>
 8004b9e:	a336      	add	r3, pc, #216	; (adr r3, 8004c78 <__kernel_cos+0x160>)
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f7fb fc46 	bl	8000434 <__aeabi_dsub>
 8004ba8:	4622      	mov	r2, r4
 8004baa:	462b      	mov	r3, r5
 8004bac:	f7fb fb14 	bl	80001d8 <__aeabi_dmul>
 8004bb0:	a333      	add	r3, pc, #204	; (adr r3, 8004c80 <__kernel_cos+0x168>)
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f7fb fc3f 	bl	8000438 <__adddf3>
 8004bba:	4622      	mov	r2, r4
 8004bbc:	462b      	mov	r3, r5
 8004bbe:	f7fb fb0b 	bl	80001d8 <__aeabi_dmul>
 8004bc2:	4622      	mov	r2, r4
 8004bc4:	462b      	mov	r3, r5
 8004bc6:	f7fb fb07 	bl	80001d8 <__aeabi_dmul>
 8004bca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bce:	4604      	mov	r4, r0
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb faff 	bl	80001d8 <__aeabi_dmul>
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4629      	mov	r1, r5
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7fb fc27 	bl	8000434 <__aeabi_dsub>
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <__kernel_cos+0x17c>)
 8004be8:	4598      	cmp	r8, r3
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	dc10      	bgt.n	8004c12 <__kernel_cos+0xfa>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4650      	mov	r0, sl
 8004bf6:	4659      	mov	r1, fp
 8004bf8:	f7fb fc1c 	bl	8000434 <__aeabi_dsub>
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4926      	ldr	r1, [pc, #152]	; (8004c98 <__kernel_cos+0x180>)
 8004c00:	4602      	mov	r2, r0
 8004c02:	2000      	movs	r0, #0
 8004c04:	f7fb fc16 	bl	8000434 <__aeabi_dsub>
 8004c08:	ec41 0b10 	vmov	d0, r0, r1
 8004c0c:	b003      	add	sp, #12
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <__kernel_cos+0x184>)
 8004c14:	4920      	ldr	r1, [pc, #128]	; (8004c98 <__kernel_cos+0x180>)
 8004c16:	4598      	cmp	r8, r3
 8004c18:	bfcc      	ite	gt
 8004c1a:	4d21      	ldrgt	r5, [pc, #132]	; (8004ca0 <__kernel_cos+0x188>)
 8004c1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004c20:	2400      	movs	r4, #0
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	2000      	movs	r0, #0
 8004c28:	f7fb fc04 	bl	8000434 <__aeabi_dsub>
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	4680      	mov	r8, r0
 8004c30:	4689      	mov	r9, r1
 8004c32:	462b      	mov	r3, r5
 8004c34:	4650      	mov	r0, sl
 8004c36:	4659      	mov	r1, fp
 8004c38:	f7fb fbfc 	bl	8000434 <__aeabi_dsub>
 8004c3c:	4632      	mov	r2, r6
 8004c3e:	463b      	mov	r3, r7
 8004c40:	f7fb fbf8 	bl	8000434 <__aeabi_dsub>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4640      	mov	r0, r8
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	e7da      	b.n	8004c04 <__kernel_cos+0xec>
 8004c4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004c88 <__kernel_cos+0x170>
 8004c52:	e7db      	b.n	8004c0c <__kernel_cos+0xf4>
 8004c54:	f3af 8000 	nop.w
 8004c58:	be8838d4 	.word	0xbe8838d4
 8004c5c:	bda8fae9 	.word	0xbda8fae9
 8004c60:	bdb4b1c4 	.word	0xbdb4b1c4
 8004c64:	3e21ee9e 	.word	0x3e21ee9e
 8004c68:	809c52ad 	.word	0x809c52ad
 8004c6c:	3e927e4f 	.word	0x3e927e4f
 8004c70:	19cb1590 	.word	0x19cb1590
 8004c74:	3efa01a0 	.word	0x3efa01a0
 8004c78:	16c15177 	.word	0x16c15177
 8004c7c:	3f56c16c 	.word	0x3f56c16c
 8004c80:	5555554c 	.word	0x5555554c
 8004c84:	3fa55555 	.word	0x3fa55555
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	3ff00000 	.word	0x3ff00000
 8004c90:	3fe00000 	.word	0x3fe00000
 8004c94:	3fd33332 	.word	0x3fd33332
 8004c98:	3ff00000 	.word	0x3ff00000
 8004c9c:	3fe90000 	.word	0x3fe90000
 8004ca0:	3fd20000 	.word	0x3fd20000
 8004ca4:	00000000 	.word	0x00000000

08004ca8 <__kernel_rem_pio2>:
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	ed2d 8b02 	vpush	{d8}
 8004cb0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004cb4:	f112 0f14 	cmn.w	r2, #20
 8004cb8:	9308      	str	r3, [sp, #32]
 8004cba:	9101      	str	r1, [sp, #4]
 8004cbc:	4bc4      	ldr	r3, [pc, #784]	; (8004fd0 <__kernel_rem_pio2+0x328>)
 8004cbe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004cc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8004cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	9b08      	ldr	r3, [sp, #32]
 8004cca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004cce:	bfa8      	it	ge
 8004cd0:	1ed4      	subge	r4, r2, #3
 8004cd2:	9306      	str	r3, [sp, #24]
 8004cd4:	bfb2      	itee	lt
 8004cd6:	2400      	movlt	r4, #0
 8004cd8:	2318      	movge	r3, #24
 8004cda:	fb94 f4f3 	sdivge	r4, r4, r3
 8004cde:	f06f 0317 	mvn.w	r3, #23
 8004ce2:	fb04 3303 	mla	r3, r4, r3, r3
 8004ce6:	eb03 0a02 	add.w	sl, r3, r2
 8004cea:	9b02      	ldr	r3, [sp, #8]
 8004cec:	9a06      	ldr	r2, [sp, #24]
 8004cee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004fc0 <__kernel_rem_pio2+0x318>
 8004cf2:	eb03 0802 	add.w	r8, r3, r2
 8004cf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004cf8:	1aa7      	subs	r7, r4, r2
 8004cfa:	ae22      	add	r6, sp, #136	; 0x88
 8004cfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004d00:	2500      	movs	r5, #0
 8004d02:	4545      	cmp	r5, r8
 8004d04:	dd13      	ble.n	8004d2e <__kernel_rem_pio2+0x86>
 8004d06:	9b08      	ldr	r3, [sp, #32]
 8004d08:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004fc0 <__kernel_rem_pio2+0x318>
 8004d0c:	aa22      	add	r2, sp, #136	; 0x88
 8004d0e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004d12:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004d16:	f04f 0800 	mov.w	r8, #0
 8004d1a:	9b02      	ldr	r3, [sp, #8]
 8004d1c:	4598      	cmp	r8, r3
 8004d1e:	dc2f      	bgt.n	8004d80 <__kernel_rem_pio2+0xd8>
 8004d20:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004d24:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004d28:	462f      	mov	r7, r5
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	e01b      	b.n	8004d66 <__kernel_rem_pio2+0xbe>
 8004d2e:	42ef      	cmn	r7, r5
 8004d30:	d407      	bmi.n	8004d42 <__kernel_rem_pio2+0x9a>
 8004d32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004d36:	f7fb fccb 	bl	80006d0 <__aeabi_i2d>
 8004d3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004d3e:	3501      	adds	r5, #1
 8004d40:	e7df      	b.n	8004d02 <__kernel_rem_pio2+0x5a>
 8004d42:	ec51 0b18 	vmov	r0, r1, d8
 8004d46:	e7f8      	b.n	8004d3a <__kernel_rem_pio2+0x92>
 8004d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004d50:	f7fb fa42 	bl	80001d8 <__aeabi_dmul>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d5c:	f7fb fb6c 	bl	8000438 <__adddf3>
 8004d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d64:	3601      	adds	r6, #1
 8004d66:	9b06      	ldr	r3, [sp, #24]
 8004d68:	429e      	cmp	r6, r3
 8004d6a:	f1a7 0708 	sub.w	r7, r7, #8
 8004d6e:	ddeb      	ble.n	8004d48 <__kernel_rem_pio2+0xa0>
 8004d70:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004d74:	f108 0801 	add.w	r8, r8, #1
 8004d78:	ecab 7b02 	vstmia	fp!, {d7}
 8004d7c:	3508      	adds	r5, #8
 8004d7e:	e7cc      	b.n	8004d1a <__kernel_rem_pio2+0x72>
 8004d80:	9b02      	ldr	r3, [sp, #8]
 8004d82:	aa0e      	add	r2, sp, #56	; 0x38
 8004d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004d88:	930d      	str	r3, [sp, #52]	; 0x34
 8004d8a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004d8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004d90:	9c02      	ldr	r4, [sp, #8]
 8004d92:	930c      	str	r3, [sp, #48]	; 0x30
 8004d94:	00e3      	lsls	r3, r4, #3
 8004d96:	930a      	str	r3, [sp, #40]	; 0x28
 8004d98:	ab9a      	add	r3, sp, #616	; 0x268
 8004d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004d9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004da2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004da6:	ab72      	add	r3, sp, #456	; 0x1c8
 8004da8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004dac:	46c3      	mov	fp, r8
 8004dae:	46a1      	mov	r9, r4
 8004db0:	f1b9 0f00 	cmp.w	r9, #0
 8004db4:	f1a5 0508 	sub.w	r5, r5, #8
 8004db8:	dc77      	bgt.n	8004eaa <__kernel_rem_pio2+0x202>
 8004dba:	ec47 6b10 	vmov	d0, r6, r7
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f000 fc0a 	bl	80055d8 <scalbn>
 8004dc4:	ec57 6b10 	vmov	r6, r7, d0
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004dce:	ee10 0a10 	vmov	r0, s0
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fa00 	bl	80001d8 <__aeabi_dmul>
 8004dd8:	ec41 0b10 	vmov	d0, r0, r1
 8004ddc:	f000 fb7c 	bl	80054d8 <floor>
 8004de0:	4b7c      	ldr	r3, [pc, #496]	; (8004fd4 <__kernel_rem_pio2+0x32c>)
 8004de2:	ec51 0b10 	vmov	r0, r1, d0
 8004de6:	2200      	movs	r2, #0
 8004de8:	f7fb f9f6 	bl	80001d8 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4630      	mov	r0, r6
 8004df2:	4639      	mov	r1, r7
 8004df4:	f7fb fb1e 	bl	8000434 <__aeabi_dsub>
 8004df8:	460f      	mov	r7, r1
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	f7fb fd5a 	bl	80008b4 <__aeabi_d2iz>
 8004e00:	9004      	str	r0, [sp, #16]
 8004e02:	f7fb fc65 	bl	80006d0 <__aeabi_i2d>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	f7fb fb11 	bl	8000434 <__aeabi_dsub>
 8004e12:	f1ba 0f00 	cmp.w	sl, #0
 8004e16:	4606      	mov	r6, r0
 8004e18:	460f      	mov	r7, r1
 8004e1a:	dd6d      	ble.n	8004ef8 <__kernel_rem_pio2+0x250>
 8004e1c:	1e62      	subs	r2, r4, #1
 8004e1e:	ab0e      	add	r3, sp, #56	; 0x38
 8004e20:	9d04      	ldr	r5, [sp, #16]
 8004e22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004e26:	f1ca 0118 	rsb	r1, sl, #24
 8004e2a:	fa40 f301 	asr.w	r3, r0, r1
 8004e2e:	441d      	add	r5, r3
 8004e30:	408b      	lsls	r3, r1
 8004e32:	1ac0      	subs	r0, r0, r3
 8004e34:	ab0e      	add	r3, sp, #56	; 0x38
 8004e36:	9504      	str	r5, [sp, #16]
 8004e38:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004e3c:	f1ca 0317 	rsb	r3, sl, #23
 8004e40:	fa40 fb03 	asr.w	fp, r0, r3
 8004e44:	f1bb 0f00 	cmp.w	fp, #0
 8004e48:	dd65      	ble.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	3301      	adds	r3, #1
 8004e50:	9304      	str	r3, [sp, #16]
 8004e52:	4615      	mov	r5, r2
 8004e54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004e58:	4294      	cmp	r4, r2
 8004e5a:	f300 809c 	bgt.w	8004f96 <__kernel_rem_pio2+0x2ee>
 8004e5e:	f1ba 0f00 	cmp.w	sl, #0
 8004e62:	dd07      	ble.n	8004e74 <__kernel_rem_pio2+0x1cc>
 8004e64:	f1ba 0f01 	cmp.w	sl, #1
 8004e68:	f000 80c0 	beq.w	8004fec <__kernel_rem_pio2+0x344>
 8004e6c:	f1ba 0f02 	cmp.w	sl, #2
 8004e70:	f000 80c6 	beq.w	8005000 <__kernel_rem_pio2+0x358>
 8004e74:	f1bb 0f02 	cmp.w	fp, #2
 8004e78:	d14d      	bne.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004e7a:	4632      	mov	r2, r6
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	4956      	ldr	r1, [pc, #344]	; (8004fd8 <__kernel_rem_pio2+0x330>)
 8004e80:	2000      	movs	r0, #0
 8004e82:	f7fb fad7 	bl	8000434 <__aeabi_dsub>
 8004e86:	4606      	mov	r6, r0
 8004e88:	460f      	mov	r7, r1
 8004e8a:	2d00      	cmp	r5, #0
 8004e8c:	d043      	beq.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004e8e:	4650      	mov	r0, sl
 8004e90:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004fc8 <__kernel_rem_pio2+0x320>
 8004e94:	f000 fba0 	bl	80055d8 <scalbn>
 8004e98:	4630      	mov	r0, r6
 8004e9a:	4639      	mov	r1, r7
 8004e9c:	ec53 2b10 	vmov	r2, r3, d0
 8004ea0:	f7fb fac8 	bl	8000434 <__aeabi_dsub>
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	460f      	mov	r7, r1
 8004ea8:	e035      	b.n	8004f16 <__kernel_rem_pio2+0x26e>
 8004eaa:	4b4c      	ldr	r3, [pc, #304]	; (8004fdc <__kernel_rem_pio2+0x334>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	f7fb f991 	bl	80001d8 <__aeabi_dmul>
 8004eb6:	f7fb fcfd 	bl	80008b4 <__aeabi_d2iz>
 8004eba:	f7fb fc09 	bl	80006d0 <__aeabi_i2d>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	ec43 2b18 	vmov	d8, r2, r3
 8004ec6:	4b46      	ldr	r3, [pc, #280]	; (8004fe0 <__kernel_rem_pio2+0x338>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f7fb f985 	bl	80001d8 <__aeabi_dmul>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb faad 	bl	8000434 <__aeabi_dsub>
 8004eda:	f7fb fceb 	bl	80008b4 <__aeabi_d2iz>
 8004ede:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ee2:	f84b 0b04 	str.w	r0, [fp], #4
 8004ee6:	ec51 0b18 	vmov	r0, r1, d8
 8004eea:	f7fb faa5 	bl	8000438 <__adddf3>
 8004eee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	460f      	mov	r7, r1
 8004ef6:	e75b      	b.n	8004db0 <__kernel_rem_pio2+0x108>
 8004ef8:	d106      	bne.n	8004f08 <__kernel_rem_pio2+0x260>
 8004efa:	1e63      	subs	r3, r4, #1
 8004efc:	aa0e      	add	r2, sp, #56	; 0x38
 8004efe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004f02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004f06:	e79d      	b.n	8004e44 <__kernel_rem_pio2+0x19c>
 8004f08:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <__kernel_rem_pio2+0x33c>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f7fb fcbe 	bl	800088c <__aeabi_dcmpge>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d13d      	bne.n	8004f90 <__kernel_rem_pio2+0x2e8>
 8004f14:	4683      	mov	fp, r0
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	f7fb fc97 	bl	8000850 <__aeabi_dcmpeq>
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f000 80c0 	beq.w	80050a8 <__kernel_rem_pio2+0x400>
 8004f28:	1e65      	subs	r5, r4, #1
 8004f2a:	462b      	mov	r3, r5
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	9902      	ldr	r1, [sp, #8]
 8004f30:	428b      	cmp	r3, r1
 8004f32:	da6c      	bge.n	800500e <__kernel_rem_pio2+0x366>
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	f000 8089 	beq.w	800504c <__kernel_rem_pio2+0x3a4>
 8004f3a:	ab0e      	add	r3, sp, #56	; 0x38
 8004f3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004f40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80ad 	beq.w	80050a4 <__kernel_rem_pio2+0x3fc>
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004fc8 <__kernel_rem_pio2+0x320>
 8004f50:	f000 fb42 	bl	80055d8 <scalbn>
 8004f54:	ab9a      	add	r3, sp, #616	; 0x268
 8004f56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004f5a:	ec57 6b10 	vmov	r6, r7, d0
 8004f5e:	00ec      	lsls	r4, r5, #3
 8004f60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004f64:	46aa      	mov	sl, r5
 8004f66:	f1ba 0f00 	cmp.w	sl, #0
 8004f6a:	f280 80d6 	bge.w	800511a <__kernel_rem_pio2+0x472>
 8004f6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004fc0 <__kernel_rem_pio2+0x318>
 8004f72:	462e      	mov	r6, r5
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	f2c0 8104 	blt.w	8005182 <__kernel_rem_pio2+0x4da>
 8004f7a:	ab72      	add	r3, sp, #456	; 0x1c8
 8004f7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004f80:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004fe8 <__kernel_rem_pio2+0x340>
 8004f84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004f88:	f04f 0800 	mov.w	r8, #0
 8004f8c:	1baf      	subs	r7, r5, r6
 8004f8e:	e0ea      	b.n	8005166 <__kernel_rem_pio2+0x4be>
 8004f90:	f04f 0b02 	mov.w	fp, #2
 8004f94:	e759      	b.n	8004e4a <__kernel_rem_pio2+0x1a2>
 8004f96:	f8d8 3000 	ldr.w	r3, [r8]
 8004f9a:	b955      	cbnz	r5, 8004fb2 <__kernel_rem_pio2+0x30a>
 8004f9c:	b123      	cbz	r3, 8004fa8 <__kernel_rem_pio2+0x300>
 8004f9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004fa2:	f8c8 3000 	str.w	r3, [r8]
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	3201      	adds	r2, #1
 8004faa:	f108 0804 	add.w	r8, r8, #4
 8004fae:	461d      	mov	r5, r3
 8004fb0:	e752      	b.n	8004e58 <__kernel_rem_pio2+0x1b0>
 8004fb2:	1acb      	subs	r3, r1, r3
 8004fb4:	f8c8 3000 	str.w	r3, [r8]
 8004fb8:	462b      	mov	r3, r5
 8004fba:	e7f5      	b.n	8004fa8 <__kernel_rem_pio2+0x300>
 8004fbc:	f3af 8000 	nop.w
	...
 8004fcc:	3ff00000 	.word	0x3ff00000
 8004fd0:	080058e8 	.word	0x080058e8
 8004fd4:	40200000 	.word	0x40200000
 8004fd8:	3ff00000 	.word	0x3ff00000
 8004fdc:	3e700000 	.word	0x3e700000
 8004fe0:	41700000 	.word	0x41700000
 8004fe4:	3fe00000 	.word	0x3fe00000
 8004fe8:	080058a8 	.word	0x080058a8
 8004fec:	1e62      	subs	r2, r4, #1
 8004fee:	ab0e      	add	r3, sp, #56	; 0x38
 8004ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004ff8:	a90e      	add	r1, sp, #56	; 0x38
 8004ffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004ffe:	e739      	b.n	8004e74 <__kernel_rem_pio2+0x1cc>
 8005000:	1e62      	subs	r2, r4, #1
 8005002:	ab0e      	add	r3, sp, #56	; 0x38
 8005004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005008:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800500c:	e7f4      	b.n	8004ff8 <__kernel_rem_pio2+0x350>
 800500e:	a90e      	add	r1, sp, #56	; 0x38
 8005010:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005014:	3b01      	subs	r3, #1
 8005016:	430a      	orrs	r2, r1
 8005018:	e789      	b.n	8004f2e <__kernel_rem_pio2+0x286>
 800501a:	3301      	adds	r3, #1
 800501c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005020:	2900      	cmp	r1, #0
 8005022:	d0fa      	beq.n	800501a <__kernel_rem_pio2+0x372>
 8005024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005026:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800502a:	446a      	add	r2, sp
 800502c:	3a98      	subs	r2, #152	; 0x98
 800502e:	920a      	str	r2, [sp, #40]	; 0x28
 8005030:	9a08      	ldr	r2, [sp, #32]
 8005032:	18e3      	adds	r3, r4, r3
 8005034:	18a5      	adds	r5, r4, r2
 8005036:	aa22      	add	r2, sp, #136	; 0x88
 8005038:	f104 0801 	add.w	r8, r4, #1
 800503c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005040:	9304      	str	r3, [sp, #16]
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	4543      	cmp	r3, r8
 8005046:	da04      	bge.n	8005052 <__kernel_rem_pio2+0x3aa>
 8005048:	461c      	mov	r4, r3
 800504a:	e6a3      	b.n	8004d94 <__kernel_rem_pio2+0xec>
 800504c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800504e:	2301      	movs	r3, #1
 8005050:	e7e4      	b.n	800501c <__kernel_rem_pio2+0x374>
 8005052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005054:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005058:	f7fb fb3a 	bl	80006d0 <__aeabi_i2d>
 800505c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005062:	46ab      	mov	fp, r5
 8005064:	461c      	mov	r4, r3
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	2600      	movs	r6, #0
 800506c:	2700      	movs	r7, #0
 800506e:	9b06      	ldr	r3, [sp, #24]
 8005070:	4599      	cmp	r9, r3
 8005072:	dd06      	ble.n	8005082 <__kernel_rem_pio2+0x3da>
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	e8e3 6702 	strd	r6, r7, [r3], #8
 800507a:	f108 0801 	add.w	r8, r8, #1
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
 8005080:	e7df      	b.n	8005042 <__kernel_rem_pio2+0x39a>
 8005082:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005086:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800508a:	f7fb f8a5 	bl	80001d8 <__aeabi_dmul>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb f9cf 	bl	8000438 <__adddf3>
 800509a:	f109 0901 	add.w	r9, r9, #1
 800509e:	4606      	mov	r6, r0
 80050a0:	460f      	mov	r7, r1
 80050a2:	e7e4      	b.n	800506e <__kernel_rem_pio2+0x3c6>
 80050a4:	3d01      	subs	r5, #1
 80050a6:	e748      	b.n	8004f3a <__kernel_rem_pio2+0x292>
 80050a8:	ec47 6b10 	vmov	d0, r6, r7
 80050ac:	f1ca 0000 	rsb	r0, sl, #0
 80050b0:	f000 fa92 	bl	80055d8 <scalbn>
 80050b4:	ec57 6b10 	vmov	r6, r7, d0
 80050b8:	4ba0      	ldr	r3, [pc, #640]	; (800533c <__kernel_rem_pio2+0x694>)
 80050ba:	ee10 0a10 	vmov	r0, s0
 80050be:	2200      	movs	r2, #0
 80050c0:	4639      	mov	r1, r7
 80050c2:	f7fb fbe3 	bl	800088c <__aeabi_dcmpge>
 80050c6:	b1f8      	cbz	r0, 8005108 <__kernel_rem_pio2+0x460>
 80050c8:	4b9d      	ldr	r3, [pc, #628]	; (8005340 <__kernel_rem_pio2+0x698>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb f882 	bl	80001d8 <__aeabi_dmul>
 80050d4:	f7fb fbee 	bl	80008b4 <__aeabi_d2iz>
 80050d8:	4680      	mov	r8, r0
 80050da:	f7fb faf9 	bl	80006d0 <__aeabi_i2d>
 80050de:	4b97      	ldr	r3, [pc, #604]	; (800533c <__kernel_rem_pio2+0x694>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	f7fb f879 	bl	80001d8 <__aeabi_dmul>
 80050e6:	460b      	mov	r3, r1
 80050e8:	4602      	mov	r2, r0
 80050ea:	4639      	mov	r1, r7
 80050ec:	4630      	mov	r0, r6
 80050ee:	f7fb f9a1 	bl	8000434 <__aeabi_dsub>
 80050f2:	f7fb fbdf 	bl	80008b4 <__aeabi_d2iz>
 80050f6:	1c65      	adds	r5, r4, #1
 80050f8:	ab0e      	add	r3, sp, #56	; 0x38
 80050fa:	f10a 0a18 	add.w	sl, sl, #24
 80050fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005102:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005106:	e720      	b.n	8004f4a <__kernel_rem_pio2+0x2a2>
 8005108:	4630      	mov	r0, r6
 800510a:	4639      	mov	r1, r7
 800510c:	f7fb fbd2 	bl	80008b4 <__aeabi_d2iz>
 8005110:	ab0e      	add	r3, sp, #56	; 0x38
 8005112:	4625      	mov	r5, r4
 8005114:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005118:	e717      	b.n	8004f4a <__kernel_rem_pio2+0x2a2>
 800511a:	ab0e      	add	r3, sp, #56	; 0x38
 800511c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005120:	f7fb fad6 	bl	80006d0 <__aeabi_i2d>
 8005124:	4632      	mov	r2, r6
 8005126:	463b      	mov	r3, r7
 8005128:	f7fb f856 	bl	80001d8 <__aeabi_dmul>
 800512c:	4b84      	ldr	r3, [pc, #528]	; (8005340 <__kernel_rem_pio2+0x698>)
 800512e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005132:	2200      	movs	r2, #0
 8005134:	4630      	mov	r0, r6
 8005136:	4639      	mov	r1, r7
 8005138:	f7fb f84e 	bl	80001d8 <__aeabi_dmul>
 800513c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005140:	4606      	mov	r6, r0
 8005142:	460f      	mov	r7, r1
 8005144:	e70f      	b.n	8004f66 <__kernel_rem_pio2+0x2be>
 8005146:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800514a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800514e:	f7fb f843 	bl	80001d8 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800515a:	f7fb f96d 	bl	8000438 <__adddf3>
 800515e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	9b02      	ldr	r3, [sp, #8]
 8005168:	4598      	cmp	r8, r3
 800516a:	dc01      	bgt.n	8005170 <__kernel_rem_pio2+0x4c8>
 800516c:	45b8      	cmp	r8, r7
 800516e:	ddea      	ble.n	8005146 <__kernel_rem_pio2+0x49e>
 8005170:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005174:	ab4a      	add	r3, sp, #296	; 0x128
 8005176:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800517a:	ed87 7b00 	vstr	d7, [r7]
 800517e:	3e01      	subs	r6, #1
 8005180:	e6f8      	b.n	8004f74 <__kernel_rem_pio2+0x2cc>
 8005182:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005184:	2b02      	cmp	r3, #2
 8005186:	dc0b      	bgt.n	80051a0 <__kernel_rem_pio2+0x4f8>
 8005188:	2b00      	cmp	r3, #0
 800518a:	dc35      	bgt.n	80051f8 <__kernel_rem_pio2+0x550>
 800518c:	d059      	beq.n	8005242 <__kernel_rem_pio2+0x59a>
 800518e:	9b04      	ldr	r3, [sp, #16]
 8005190:	f003 0007 	and.w	r0, r3, #7
 8005194:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005198:	ecbd 8b02 	vpop	{d8}
 800519c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d1f3      	bne.n	800518e <__kernel_rem_pio2+0x4e6>
 80051a6:	ab4a      	add	r3, sp, #296	; 0x128
 80051a8:	4423      	add	r3, r4
 80051aa:	9306      	str	r3, [sp, #24]
 80051ac:	461c      	mov	r4, r3
 80051ae:	469a      	mov	sl, r3
 80051b0:	9502      	str	r5, [sp, #8]
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f1aa 0a08 	sub.w	sl, sl, #8
 80051ba:	dc6b      	bgt.n	8005294 <__kernel_rem_pio2+0x5ec>
 80051bc:	46aa      	mov	sl, r5
 80051be:	f1ba 0f01 	cmp.w	sl, #1
 80051c2:	f1a4 0408 	sub.w	r4, r4, #8
 80051c6:	f300 8085 	bgt.w	80052d4 <__kernel_rem_pio2+0x62c>
 80051ca:	9c06      	ldr	r4, [sp, #24]
 80051cc:	2000      	movs	r0, #0
 80051ce:	3408      	adds	r4, #8
 80051d0:	2100      	movs	r1, #0
 80051d2:	2d01      	cmp	r5, #1
 80051d4:	f300 809d 	bgt.w	8005312 <__kernel_rem_pio2+0x66a>
 80051d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80051dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80051e0:	f1bb 0f00 	cmp.w	fp, #0
 80051e4:	f040 809b 	bne.w	800531e <__kernel_rem_pio2+0x676>
 80051e8:	9b01      	ldr	r3, [sp, #4]
 80051ea:	e9c3 5600 	strd	r5, r6, [r3]
 80051ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80051f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80051f6:	e7ca      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 80051f8:	3408      	adds	r4, #8
 80051fa:	ab4a      	add	r3, sp, #296	; 0x128
 80051fc:	441c      	add	r4, r3
 80051fe:	462e      	mov	r6, r5
 8005200:	2000      	movs	r0, #0
 8005202:	2100      	movs	r1, #0
 8005204:	2e00      	cmp	r6, #0
 8005206:	da36      	bge.n	8005276 <__kernel_rem_pio2+0x5ce>
 8005208:	f1bb 0f00 	cmp.w	fp, #0
 800520c:	d039      	beq.n	8005282 <__kernel_rem_pio2+0x5da>
 800520e:	4602      	mov	r2, r0
 8005210:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005214:	9c01      	ldr	r4, [sp, #4]
 8005216:	e9c4 2300 	strd	r2, r3, [r4]
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005222:	f7fb f907 	bl	8000434 <__aeabi_dsub>
 8005226:	ae4c      	add	r6, sp, #304	; 0x130
 8005228:	2401      	movs	r4, #1
 800522a:	42a5      	cmp	r5, r4
 800522c:	da2c      	bge.n	8005288 <__kernel_rem_pio2+0x5e0>
 800522e:	f1bb 0f00 	cmp.w	fp, #0
 8005232:	d002      	beq.n	800523a <__kernel_rem_pio2+0x592>
 8005234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005238:	4619      	mov	r1, r3
 800523a:	9b01      	ldr	r3, [sp, #4]
 800523c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005240:	e7a5      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 8005242:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005246:	eb0d 0403 	add.w	r4, sp, r3
 800524a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800524e:	2000      	movs	r0, #0
 8005250:	2100      	movs	r1, #0
 8005252:	2d00      	cmp	r5, #0
 8005254:	da09      	bge.n	800526a <__kernel_rem_pio2+0x5c2>
 8005256:	f1bb 0f00 	cmp.w	fp, #0
 800525a:	d002      	beq.n	8005262 <__kernel_rem_pio2+0x5ba>
 800525c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005260:	4619      	mov	r1, r3
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	e9c3 0100 	strd	r0, r1, [r3]
 8005268:	e791      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 800526a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800526e:	f7fb f8e3 	bl	8000438 <__adddf3>
 8005272:	3d01      	subs	r5, #1
 8005274:	e7ed      	b.n	8005252 <__kernel_rem_pio2+0x5aa>
 8005276:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800527a:	f7fb f8dd 	bl	8000438 <__adddf3>
 800527e:	3e01      	subs	r6, #1
 8005280:	e7c0      	b.n	8005204 <__kernel_rem_pio2+0x55c>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	e7c5      	b.n	8005214 <__kernel_rem_pio2+0x56c>
 8005288:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800528c:	f7fb f8d4 	bl	8000438 <__adddf3>
 8005290:	3401      	adds	r4, #1
 8005292:	e7ca      	b.n	800522a <__kernel_rem_pio2+0x582>
 8005294:	e9da 8900 	ldrd	r8, r9, [sl]
 8005298:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800529c:	9b02      	ldr	r3, [sp, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	4632      	mov	r2, r6
 80052a4:	463b      	mov	r3, r7
 80052a6:	4640      	mov	r0, r8
 80052a8:	4649      	mov	r1, r9
 80052aa:	f7fb f8c5 	bl	8000438 <__adddf3>
 80052ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4640      	mov	r0, r8
 80052b8:	4649      	mov	r1, r9
 80052ba:	f7fb f8bb 	bl	8000434 <__aeabi_dsub>
 80052be:	4632      	mov	r2, r6
 80052c0:	463b      	mov	r3, r7
 80052c2:	f7fb f8b9 	bl	8000438 <__adddf3>
 80052c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80052ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80052ce:	ed8a 7b00 	vstr	d7, [sl]
 80052d2:	e76e      	b.n	80051b2 <__kernel_rem_pio2+0x50a>
 80052d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80052d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80052dc:	4640      	mov	r0, r8
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fb f8a8 	bl	8000438 <__adddf3>
 80052e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4640      	mov	r0, r8
 80052f2:	4649      	mov	r1, r9
 80052f4:	f7fb f89e 	bl	8000434 <__aeabi_dsub>
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	f7fb f89c 	bl	8000438 <__adddf3>
 8005300:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005308:	ed84 7b00 	vstr	d7, [r4]
 800530c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005310:	e755      	b.n	80051be <__kernel_rem_pio2+0x516>
 8005312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005316:	f7fb f88f 	bl	8000438 <__adddf3>
 800531a:	3d01      	subs	r5, #1
 800531c:	e759      	b.n	80051d2 <__kernel_rem_pio2+0x52a>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	9a01      	ldr	r2, [sp, #4]
 8005322:	601d      	str	r5, [r3, #0]
 8005324:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005328:	605c      	str	r4, [r3, #4]
 800532a:	609f      	str	r7, [r3, #8]
 800532c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005330:	60d3      	str	r3, [r2, #12]
 8005332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005336:	6110      	str	r0, [r2, #16]
 8005338:	6153      	str	r3, [r2, #20]
 800533a:	e728      	b.n	800518e <__kernel_rem_pio2+0x4e6>
 800533c:	41700000 	.word	0x41700000
 8005340:	3e700000 	.word	0x3e700000
 8005344:	00000000 	.word	0x00000000

08005348 <__kernel_sin>:
 8005348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800534c:	ed2d 8b04 	vpush	{d8-d9}
 8005350:	eeb0 8a41 	vmov.f32	s16, s2
 8005354:	eef0 8a61 	vmov.f32	s17, s3
 8005358:	ec55 4b10 	vmov	r4, r5, d0
 800535c:	b083      	sub	sp, #12
 800535e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005362:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005366:	9001      	str	r0, [sp, #4]
 8005368:	da06      	bge.n	8005378 <__kernel_sin+0x30>
 800536a:	ee10 0a10 	vmov	r0, s0
 800536e:	4629      	mov	r1, r5
 8005370:	f7fb faa0 	bl	80008b4 <__aeabi_d2iz>
 8005374:	2800      	cmp	r0, #0
 8005376:	d051      	beq.n	800541c <__kernel_sin+0xd4>
 8005378:	4622      	mov	r2, r4
 800537a:	462b      	mov	r3, r5
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fa ff2a 	bl	80001d8 <__aeabi_dmul>
 8005384:	4682      	mov	sl, r0
 8005386:	468b      	mov	fp, r1
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4620      	mov	r0, r4
 800538e:	4629      	mov	r1, r5
 8005390:	f7fa ff22 	bl	80001d8 <__aeabi_dmul>
 8005394:	a341      	add	r3, pc, #260	; (adr r3, 800549c <__kernel_sin+0x154>)
 8005396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	4650      	mov	r0, sl
 80053a0:	4659      	mov	r1, fp
 80053a2:	f7fa ff19 	bl	80001d8 <__aeabi_dmul>
 80053a6:	a33f      	add	r3, pc, #252	; (adr r3, 80054a4 <__kernel_sin+0x15c>)
 80053a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ac:	f7fb f842 	bl	8000434 <__aeabi_dsub>
 80053b0:	4652      	mov	r2, sl
 80053b2:	465b      	mov	r3, fp
 80053b4:	f7fa ff10 	bl	80001d8 <__aeabi_dmul>
 80053b8:	a33c      	add	r3, pc, #240	; (adr r3, 80054ac <__kernel_sin+0x164>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fb f83b 	bl	8000438 <__adddf3>
 80053c2:	4652      	mov	r2, sl
 80053c4:	465b      	mov	r3, fp
 80053c6:	f7fa ff07 	bl	80001d8 <__aeabi_dmul>
 80053ca:	a33a      	add	r3, pc, #232	; (adr r3, 80054b4 <__kernel_sin+0x16c>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb f830 	bl	8000434 <__aeabi_dsub>
 80053d4:	4652      	mov	r2, sl
 80053d6:	465b      	mov	r3, fp
 80053d8:	f7fa fefe 	bl	80001d8 <__aeabi_dmul>
 80053dc:	a337      	add	r3, pc, #220	; (adr r3, 80054bc <__kernel_sin+0x174>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f7fb f829 	bl	8000438 <__adddf3>
 80053e6:	9b01      	ldr	r3, [sp, #4]
 80053e8:	4606      	mov	r6, r0
 80053ea:	460f      	mov	r7, r1
 80053ec:	b9eb      	cbnz	r3, 800542a <__kernel_sin+0xe2>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4650      	mov	r0, sl
 80053f4:	4659      	mov	r1, fp
 80053f6:	f7fa feef 	bl	80001d8 <__aeabi_dmul>
 80053fa:	a325      	add	r3, pc, #148	; (adr r3, 8005490 <__kernel_sin+0x148>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fb f818 	bl	8000434 <__aeabi_dsub>
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	f7fa fee6 	bl	80001d8 <__aeabi_dmul>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4620      	mov	r0, r4
 8005412:	4629      	mov	r1, r5
 8005414:	f7fb f810 	bl	8000438 <__adddf3>
 8005418:	4604      	mov	r4, r0
 800541a:	460d      	mov	r5, r1
 800541c:	ec45 4b10 	vmov	d0, r4, r5
 8005420:	b003      	add	sp, #12
 8005422:	ecbd 8b04 	vpop	{d8-d9}
 8005426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800542a:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <__kernel_sin+0x150>)
 800542c:	ec51 0b18 	vmov	r0, r1, d8
 8005430:	2200      	movs	r2, #0
 8005432:	f7fa fed1 	bl	80001d8 <__aeabi_dmul>
 8005436:	4632      	mov	r2, r6
 8005438:	ec41 0b19 	vmov	d9, r0, r1
 800543c:	463b      	mov	r3, r7
 800543e:	4640      	mov	r0, r8
 8005440:	4649      	mov	r1, r9
 8005442:	f7fa fec9 	bl	80001d8 <__aeabi_dmul>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	ec51 0b19 	vmov	r0, r1, d9
 800544e:	f7fa fff1 	bl	8000434 <__aeabi_dsub>
 8005452:	4652      	mov	r2, sl
 8005454:	465b      	mov	r3, fp
 8005456:	f7fa febf 	bl	80001d8 <__aeabi_dmul>
 800545a:	ec53 2b18 	vmov	r2, r3, d8
 800545e:	f7fa ffe9 	bl	8000434 <__aeabi_dsub>
 8005462:	a30b      	add	r3, pc, #44	; (adr r3, 8005490 <__kernel_sin+0x148>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	4606      	mov	r6, r0
 800546a:	460f      	mov	r7, r1
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fa feb2 	bl	80001d8 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa ffdc 	bl	8000438 <__adddf3>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4620      	mov	r0, r4
 8005486:	4629      	mov	r1, r5
 8005488:	f7fa ffd4 	bl	8000434 <__aeabi_dsub>
 800548c:	e7c4      	b.n	8005418 <__kernel_sin+0xd0>
 800548e:	bf00      	nop
 8005490:	55555549 	.word	0x55555549
 8005494:	3fc55555 	.word	0x3fc55555
 8005498:	3fe00000 	.word	0x3fe00000
 800549c:	5acfd57c 	.word	0x5acfd57c
 80054a0:	3de5d93a 	.word	0x3de5d93a
 80054a4:	8a2b9ceb 	.word	0x8a2b9ceb
 80054a8:	3e5ae5e6 	.word	0x3e5ae5e6
 80054ac:	57b1fe7d 	.word	0x57b1fe7d
 80054b0:	3ec71de3 	.word	0x3ec71de3
 80054b4:	19c161d5 	.word	0x19c161d5
 80054b8:	3f2a01a0 	.word	0x3f2a01a0
 80054bc:	1110f8a6 	.word	0x1110f8a6
 80054c0:	3f811111 	.word	0x3f811111

080054c4 <fabs>:
 80054c4:	ec51 0b10 	vmov	r0, r1, d0
 80054c8:	ee10 2a10 	vmov	r2, s0
 80054cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054d0:	ec43 2b10 	vmov	d0, r2, r3
 80054d4:	4770      	bx	lr
	...

080054d8 <floor>:
 80054d8:	ec51 0b10 	vmov	r0, r1, d0
 80054dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80054e4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80054e8:	2e13      	cmp	r6, #19
 80054ea:	ee10 5a10 	vmov	r5, s0
 80054ee:	ee10 8a10 	vmov	r8, s0
 80054f2:	460c      	mov	r4, r1
 80054f4:	dc32      	bgt.n	800555c <floor+0x84>
 80054f6:	2e00      	cmp	r6, #0
 80054f8:	da14      	bge.n	8005524 <floor+0x4c>
 80054fa:	a333      	add	r3, pc, #204	; (adr r3, 80055c8 <floor+0xf0>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f7fa ff9a 	bl	8000438 <__adddf3>
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	f7fb f9ca 	bl	80008a0 <__aeabi_dcmpgt>
 800550c:	b138      	cbz	r0, 800551e <floor+0x46>
 800550e:	2c00      	cmp	r4, #0
 8005510:	da57      	bge.n	80055c2 <floor+0xea>
 8005512:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005516:	431d      	orrs	r5, r3
 8005518:	d001      	beq.n	800551e <floor+0x46>
 800551a:	4c2d      	ldr	r4, [pc, #180]	; (80055d0 <floor+0xf8>)
 800551c:	2500      	movs	r5, #0
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	e025      	b.n	8005570 <floor+0x98>
 8005524:	4f2b      	ldr	r7, [pc, #172]	; (80055d4 <floor+0xfc>)
 8005526:	4137      	asrs	r7, r6
 8005528:	ea01 0307 	and.w	r3, r1, r7
 800552c:	4303      	orrs	r3, r0
 800552e:	d01f      	beq.n	8005570 <floor+0x98>
 8005530:	a325      	add	r3, pc, #148	; (adr r3, 80055c8 <floor+0xf0>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fa ff7f 	bl	8000438 <__adddf3>
 800553a:	2200      	movs	r2, #0
 800553c:	2300      	movs	r3, #0
 800553e:	f7fb f9af 	bl	80008a0 <__aeabi_dcmpgt>
 8005542:	2800      	cmp	r0, #0
 8005544:	d0eb      	beq.n	800551e <floor+0x46>
 8005546:	2c00      	cmp	r4, #0
 8005548:	bfbe      	ittt	lt
 800554a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800554e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005552:	19a4      	addlt	r4, r4, r6
 8005554:	ea24 0407 	bic.w	r4, r4, r7
 8005558:	2500      	movs	r5, #0
 800555a:	e7e0      	b.n	800551e <floor+0x46>
 800555c:	2e33      	cmp	r6, #51	; 0x33
 800555e:	dd0b      	ble.n	8005578 <floor+0xa0>
 8005560:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005564:	d104      	bne.n	8005570 <floor+0x98>
 8005566:	ee10 2a10 	vmov	r2, s0
 800556a:	460b      	mov	r3, r1
 800556c:	f7fa ff64 	bl	8000438 <__adddf3>
 8005570:	ec41 0b10 	vmov	d0, r0, r1
 8005574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005578:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800557c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005580:	fa23 f707 	lsr.w	r7, r3, r7
 8005584:	4207      	tst	r7, r0
 8005586:	d0f3      	beq.n	8005570 <floor+0x98>
 8005588:	a30f      	add	r3, pc, #60	; (adr r3, 80055c8 <floor+0xf0>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	f7fa ff53 	bl	8000438 <__adddf3>
 8005592:	2200      	movs	r2, #0
 8005594:	2300      	movs	r3, #0
 8005596:	f7fb f983 	bl	80008a0 <__aeabi_dcmpgt>
 800559a:	2800      	cmp	r0, #0
 800559c:	d0bf      	beq.n	800551e <floor+0x46>
 800559e:	2c00      	cmp	r4, #0
 80055a0:	da02      	bge.n	80055a8 <floor+0xd0>
 80055a2:	2e14      	cmp	r6, #20
 80055a4:	d103      	bne.n	80055ae <floor+0xd6>
 80055a6:	3401      	adds	r4, #1
 80055a8:	ea25 0507 	bic.w	r5, r5, r7
 80055ac:	e7b7      	b.n	800551e <floor+0x46>
 80055ae:	2301      	movs	r3, #1
 80055b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80055b4:	fa03 f606 	lsl.w	r6, r3, r6
 80055b8:	4435      	add	r5, r6
 80055ba:	4545      	cmp	r5, r8
 80055bc:	bf38      	it	cc
 80055be:	18e4      	addcc	r4, r4, r3
 80055c0:	e7f2      	b.n	80055a8 <floor+0xd0>
 80055c2:	2500      	movs	r5, #0
 80055c4:	462c      	mov	r4, r5
 80055c6:	e7aa      	b.n	800551e <floor+0x46>
 80055c8:	8800759c 	.word	0x8800759c
 80055cc:	7e37e43c 	.word	0x7e37e43c
 80055d0:	bff00000 	.word	0xbff00000
 80055d4:	000fffff 	.word	0x000fffff

080055d8 <scalbn>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	ec55 4b10 	vmov	r4, r5, d0
 80055de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80055e2:	4606      	mov	r6, r0
 80055e4:	462b      	mov	r3, r5
 80055e6:	b99a      	cbnz	r2, 8005610 <scalbn+0x38>
 80055e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80055ec:	4323      	orrs	r3, r4
 80055ee:	d036      	beq.n	800565e <scalbn+0x86>
 80055f0:	4b39      	ldr	r3, [pc, #228]	; (80056d8 <scalbn+0x100>)
 80055f2:	4629      	mov	r1, r5
 80055f4:	ee10 0a10 	vmov	r0, s0
 80055f8:	2200      	movs	r2, #0
 80055fa:	f7fa fded 	bl	80001d8 <__aeabi_dmul>
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <scalbn+0x104>)
 8005600:	429e      	cmp	r6, r3
 8005602:	4604      	mov	r4, r0
 8005604:	460d      	mov	r5, r1
 8005606:	da10      	bge.n	800562a <scalbn+0x52>
 8005608:	a32b      	add	r3, pc, #172	; (adr r3, 80056b8 <scalbn+0xe0>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	e03a      	b.n	8005686 <scalbn+0xae>
 8005610:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005614:	428a      	cmp	r2, r1
 8005616:	d10c      	bne.n	8005632 <scalbn+0x5a>
 8005618:	ee10 2a10 	vmov	r2, s0
 800561c:	4620      	mov	r0, r4
 800561e:	4629      	mov	r1, r5
 8005620:	f7fa ff0a 	bl	8000438 <__adddf3>
 8005624:	4604      	mov	r4, r0
 8005626:	460d      	mov	r5, r1
 8005628:	e019      	b.n	800565e <scalbn+0x86>
 800562a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800562e:	460b      	mov	r3, r1
 8005630:	3a36      	subs	r2, #54	; 0x36
 8005632:	4432      	add	r2, r6
 8005634:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005638:	428a      	cmp	r2, r1
 800563a:	dd08      	ble.n	800564e <scalbn+0x76>
 800563c:	2d00      	cmp	r5, #0
 800563e:	a120      	add	r1, pc, #128	; (adr r1, 80056c0 <scalbn+0xe8>)
 8005640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005644:	da1c      	bge.n	8005680 <scalbn+0xa8>
 8005646:	a120      	add	r1, pc, #128	; (adr r1, 80056c8 <scalbn+0xf0>)
 8005648:	e9d1 0100 	ldrd	r0, r1, [r1]
 800564c:	e018      	b.n	8005680 <scalbn+0xa8>
 800564e:	2a00      	cmp	r2, #0
 8005650:	dd08      	ble.n	8005664 <scalbn+0x8c>
 8005652:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005656:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800565a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800565e:	ec45 4b10 	vmov	d0, r4, r5
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005668:	da19      	bge.n	800569e <scalbn+0xc6>
 800566a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800566e:	429e      	cmp	r6, r3
 8005670:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005674:	dd0a      	ble.n	800568c <scalbn+0xb4>
 8005676:	a112      	add	r1, pc, #72	; (adr r1, 80056c0 <scalbn+0xe8>)
 8005678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e2      	bne.n	8005646 <scalbn+0x6e>
 8005680:	a30f      	add	r3, pc, #60	; (adr r3, 80056c0 <scalbn+0xe8>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fda7 	bl	80001d8 <__aeabi_dmul>
 800568a:	e7cb      	b.n	8005624 <scalbn+0x4c>
 800568c:	a10a      	add	r1, pc, #40	; (adr r1, 80056b8 <scalbn+0xe0>)
 800568e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0b8      	beq.n	8005608 <scalbn+0x30>
 8005696:	a10e      	add	r1, pc, #56	; (adr r1, 80056d0 <scalbn+0xf8>)
 8005698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800569c:	e7b4      	b.n	8005608 <scalbn+0x30>
 800569e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80056a2:	3236      	adds	r2, #54	; 0x36
 80056a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80056ac:	4620      	mov	r0, r4
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <scalbn+0x108>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	e7e8      	b.n	8005686 <scalbn+0xae>
 80056b4:	f3af 8000 	nop.w
 80056b8:	c2f8f359 	.word	0xc2f8f359
 80056bc:	01a56e1f 	.word	0x01a56e1f
 80056c0:	8800759c 	.word	0x8800759c
 80056c4:	7e37e43c 	.word	0x7e37e43c
 80056c8:	8800759c 	.word	0x8800759c
 80056cc:	fe37e43c 	.word	0xfe37e43c
 80056d0:	c2f8f359 	.word	0xc2f8f359
 80056d4:	81a56e1f 	.word	0x81a56e1f
 80056d8:	43500000 	.word	0x43500000
 80056dc:	ffff3cb0 	.word	0xffff3cb0
 80056e0:	3c900000 	.word	0x3c900000

080056e4 <_init>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr

080056f0 <_fini>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr
