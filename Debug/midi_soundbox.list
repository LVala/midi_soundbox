
midi_soundbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800dd28  0800dd28  0001dd28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e510  0800e510  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e510  0800e510  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e518  0800e518  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e518  0800e518  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e51c  0800e51c  0001e51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800e520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008aa4  2000009c  0800e5bc  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008b40  0800e5bc  00028b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9cb  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f85  00000000  00000000  0003ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00041a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  00042f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7f5  00000000  00000000  00044240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e4a  00000000  00000000  00062a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933ea  00000000  00000000  0008487f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117c69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006378  00000000  00000000  00117cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd0c 	.word	0x0800dd0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800dd0c 	.word	0x0800dd0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <ADSR_Init>:
#include "adsr.h"

static float get_sample(ADSR_State *self, float time);

void ADSR_Init(ADSR_State *self, float attack, float decay, float sustain, float release, float scale) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6178      	str	r0, [r7, #20]
 8000f54:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f58:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f5c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f60:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f64:	ed87 2a00 	vstr	s4, [r7]
  self->attack  = attack;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]
  self->decay   = decay;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	605a      	str	r2, [r3, #4]
  self->sustain = sustain;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	609a      	str	r2, [r3, #8]
  self->release = release;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	60da      	str	r2, [r3, #12]
  self->scale   = scale;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	611a      	str	r2, [r3, #16]
  ADSR_Reset(self);
 8000f86:	6978      	ldr	r0, [r7, #20]
 8000f88:	f000 f804 	bl	8000f94 <ADSR_Reset>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <ADSR_Reset>:

void ADSR_Reset(ADSR_State *self) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  self->max_amplitude = -1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <ADSR_Reset+0x34>)
 8000fa0:	615a      	str	r2, [r3, #20]
  self->cur_amplitude = -1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <ADSR_Reset+0x34>)
 8000fa6:	621a      	str	r2, [r3, #32]
  self->start_time = -1;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <ADSR_Reset+0x34>)
 8000fac:	619a      	str	r2, [r3, #24]
  self->release_time = -1;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <ADSR_Reset+0x34>)
 8000fb2:	61da      	str	r2, [r3, #28]
  self->release_amplitude = -1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <ADSR_Reset+0x34>)
 8000fb8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	bf800000 	.word	0xbf800000

08000fcc <ADSR_NoteOn>:

void ADSR_NoteOn(ADSR_State *self, int8_t velocity, float time) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fda:	72fb      	strb	r3, [r7, #11]
  self->max_amplitude = self->scale * (float)velocity/127.0;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fe2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001028 <ADSR_NoteOn+0x5c>
 8000ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	edc3 7a05 	vstr	s15, [r3, #20]
  self->start_time = time;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	619a      	str	r2, [r3, #24]
  self->release_time = -1;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <ADSR_NoteOn+0x60>)
 800100a:	61da      	str	r2, [r3, #28]
  self->cur_amplitude = 0;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  self->release_amplitude = 0;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	42fe0000 	.word	0x42fe0000
 800102c:	bf800000 	.word	0xbf800000

08001030 <ADSR_NoteOff>:

void ADSR_NoteOff(ADSR_State *self, float time) {
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	ed87 0a00 	vstr	s0, [r7]
  if(self->release_time > 0) {
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	dc07      	bgt.n	800105c <ADSR_NoteOff+0x2c>
    return;
  }
  self->release_time = time;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	61da      	str	r2, [r3, #28]
  self->release_amplitude = self->cur_amplitude;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1a      	ldr	r2, [r3, #32]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
 800105a:	e000      	b.n	800105e <ADSR_NoteOff+0x2e>
    return;
 800105c:	bf00      	nop
}
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <ADSR_GetSamples>:

void ADSR_GetSamples(ADSR_State *self, float *inout_samples, int frame_count, float time)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
  float cur_time = time;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	61fb      	str	r3, [r7, #28]
  for(int frame = 0; frame < frame_count; frame++) {
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	e03a      	b.n	80010f8 <ADSR_GetSamples+0x90>
    float sample_f = get_sample(self, cur_time);
 8001082:	ed97 0a07 	vldr	s0, [r7, #28]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f842 	bl	8001110 <get_sample>
 800108c:	ed87 0a05 	vstr	s0, [r7, #20]
    inout_samples[2*frame]   *= sample_f;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	ed93 7a00 	vldr	s14, [r3]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	edc3 7a00 	vstr	s15, [r3]
    inout_samples[2*frame+1] *= sample_f;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	3304      	adds	r3, #4
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	4413      	add	r3, r2
 80010ba:	ed93 7a00 	vldr	s14, [r3]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	3304      	adds	r3, #4
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	4413      	add	r3, r2
 80010c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	edc3 7a00 	vstr	s15, [r3]
    cur_time = time + (float)frame/48000; //SAMPLE RATE (or FRAME RATE)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800110c <ADSR_GetSamples+0xa4>
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	ed97 7a00 	vldr	s14, [r7]
 80010ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ee:	edc7 7a07 	vstr	s15, [r7, #28]
  for(int frame = 0; frame < frame_count; frame++) {
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbc0      	blt.n	8001082 <ADSR_GetSamples+0x1a>
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	473b8000 	.word	0x473b8000

08001110 <get_sample>:

// TEST_MODE sets amplitude = 1.0 when active.
#define TEST_MODE 1

static float get_sample(ADSR_State *self, float time)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	ed87 0a00 	vstr	s0, [r7]
  if( self->start_time < 0) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d502      	bpl.n	8001132 <get_sample+0x22>
    // reset state
    return 0;
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e07f      	b.n	8001232 <get_sample+0x122>
  }
  if (self->release_time < self->start_time) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	ed93 7a07 	vldr	s14, [r3, #28]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edd3 7a06 	vldr	s15, [r3, #24]
 800113e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	d558      	bpl.n	80011fa <get_sample+0xea>
    // Attack, Decay, Sustain
    float cur_time = time - self->start_time;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a06 	vldr	s15, [r3, #24]
 800114e:	ed97 7a00 	vldr	s14, [r7]
 8001152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001156:	edc7 7a02 	vstr	s15, [r7, #8]
    if (cur_time <= self->attack) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edd3 7a00 	vldr	s15, [r3]
 8001160:	ed97 7a02 	vldr	s14, [r7, #8]
 8001164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116c:	d80c      	bhi.n	8001188 <get_sample+0x78>
      // Attack
      self->cur_amplitude = cur_time / self->attack;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a00 	vldr	s14, [r3]
 8001174:	edd7 6a02 	vldr	s13, [r7, #8]
 8001178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edc3 7a08 	vstr	s15, [r3, #32]
#if TEST_MODE == 1
      return 1.0;
 8001182:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001186:	e054      	b.n	8001232 <get_sample+0x122>
#else
      return self->cur_amplitude * self->max_amplitude;
#endif
    }
    cur_time -= self->attack;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001196:	edc7 7a02 	vstr	s15, [r7, #8]
    if (cur_time <= self->decay) {
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ac:	d81e      	bhi.n	80011ec <get_sample+0xdc>
      // Decay
      self->cur_amplitude =
          self->sustain + (1.0f - self->sustain) * (1.0f - cur_time / self->decay);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	ed93 6a01 	vldr	s12, [r3, #4]
 80011c8:	edd7 5a02 	vldr	s11, [r7, #8]
 80011cc:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80011d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80011d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80011d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
      self->cur_amplitude =
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edc3 7a08 	vstr	s15, [r3, #32]
#if TEST_MODE == 1
      return 1.0;
 80011e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011ea:	e022      	b.n	8001232 <get_sample+0x122>
#else
      return self->cur_amplitude * self->max_amplitude;
#endif
    }
    // Sustain
    self->cur_amplitude = self->sustain;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	621a      	str	r2, [r3, #32]
#if TEST_MODE == 1
    return 1.0;
 80011f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80011f8:	e01b      	b.n	8001232 <get_sample+0x122>
#else
    return self->cur_amplitude * self->max_amplitude;
#endif
  }
  else {
    float cur_time = time - self->release_time;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001200:	ed97 7a00 	vldr	s14, [r7]
 8001204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001208:	edc7 7a03 	vstr	s15, [r7, #12]
    if (cur_time <= self->release) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001212:	ed97 7a03 	vldr	s14, [r7, #12]
 8001216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d802      	bhi.n	8001226 <get_sample+0x116>
      // Release
#if TEST_MODE == 1
      return 1.0;
 8001220:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001224:	e005      	b.n	8001232 <get_sample+0x122>
#else
      return self->release_amplitude * (1.0f - cur_time / self->release) * self->max_amplitude;
#endif
    }
    // done
    self->cur_amplitude = 0.0f;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	621a      	str	r2, [r3, #32]
    return self->cur_amplitude;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb0 0a67 	vmov.f32	s0, s15
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <ADSR_Active>:

int8_t ADSR_Active(ADSR_State *self, float time) {
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	ed87 0a00 	vstr	s0, [r7]
  if (self->start_time < 0.0) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	edd3 7a06 	vldr	s15, [r3, #24]
 8001256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	d501      	bpl.n	8001264 <ADSR_Active+0x20>
    return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e027      	b.n	80012b4 <ADSR_Active+0x70>
  }
  else if (time >= self->start_time) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edd3 7a06 	vldr	s15, [r3, #24]
 800126a:	ed97 7a00 	vldr	s14, [r7]
 800126e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	db1c      	blt.n	80012b2 <ADSR_Active+0x6e>
    if (self->release_time < 0.0) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	edd3 7a07 	vldr	s15, [r3, #28]
 800127e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	d501      	bpl.n	800128c <ADSR_Active+0x48>
      return 1; // prior to noteOff
 8001288:	2301      	movs	r3, #1
 800128a:	e013      	b.n	80012b4 <ADSR_Active+0x70>
    }
    else if (time - self->release_time <= self->release) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	ed97 7a00 	vldr	s14, [r7]
 8001296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	d801      	bhi.n	80012ae <ADSR_Active+0x6a>
      return 1; // during release
 80012aa:	2301      	movs	r3, #1
 80012ac:	e002      	b.n	80012b4 <ADSR_Active+0x70>
    }
    else {
      return 0; // after release
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <ADSR_Active+0x70>
    }
  }
  // time prior to startTime?
  return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <ADSR_Releasing>:

int8_t ADSR_Releasing(ADSR_State *self, float time) {
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	ed87 0a00 	vstr	s0, [r7]
  return self->release_time > 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80012d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	bfcc      	ite	gt
 80012dc:	2301      	movgt	r3, #1
 80012de:	2300      	movle	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	b25b      	sxtb	r3, r3
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <Codec_Write>:

#define VOLUME_CONVERT(Volume) (((Volume) > 100)? 255:((uint8_t)(((Volume) * 255) / 100)))

static uint8_t is_codec_stopped = 1;

uint8_t Codec_Write(uint8_t reg, uint8_t val) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af04      	add	r7, sp, #16
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	4613      	mov	r3, r2
 80012fe:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c1, CODEC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_MAX_TIMEOUT);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	b29a      	uxth	r2, r3
 8001308:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	2301      	movs	r3, #1
 8001310:	9301      	str	r3, [sp, #4]
 8001312:	1dbb      	adds	r3, r7, #6
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	2194      	movs	r1, #148	; 0x94
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <Codec_Write+0x48>)
 800131c:	f004 f868 	bl	80053f0 <HAL_I2C_Mem_Write>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

  return status != HAL_OK ? 1 : 0;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200000bc 	.word	0x200000bc

0800133c <Codec_Init>:

uint32_t Codec_Init() {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  // expects I2C already initialized

  uint32_t counter = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]

  // power on the codec (possibely need to turn it off first)
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	4834      	ldr	r0, [pc, #208]	; (800141c <Codec_Init+0xe0>)
 800134c:	f002 fae8 	bl	8003920 <HAL_GPIO_WritePin>

  // keep codec powered off
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x01);
 8001350:	2101      	movs	r1, #1
 8001352:	2002      	movs	r0, #2
 8001354:	f7ff ffcc 	bl	80012f0 <Codec_Write>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	607b      	str	r3, [r7, #4]
  // set output device to headphone
  counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xAF);
 8001362:	21af      	movs	r1, #175	; 0xaf
 8001364:	2004      	movs	r0, #4
 8001366:	f7ff ffc3 	bl	80012f0 <Codec_Write>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	607b      	str	r3, [r7, #4]
  // cloc configuration: auto detection
  counter += Codec_Write(CODEC_REG_CLOCKING_CTL, 0x81);
 8001374:	2181      	movs	r1, #129	; 0x81
 8001376:	2005      	movs	r0, #5
 8001378:	f7ff ffba 	bl	80012f0 <Codec_Write>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	607b      	str	r3, [r7, #4]
  // set slave mode and audio standard
  counter += Codec_Write(CODEC_REG_INTERFACE_CTL1, 0x07);
 8001386:	2107      	movs	r1, #7
 8001388:	2006      	movs	r0, #6
 800138a:	f7ff ffb1 	bl	80012f0 <Codec_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	607b      	str	r3, [r7, #4]
  // set master volume to 0
  counter += Codec_SetVolume(0);
 8001398:	2000      	movs	r0, #0
 800139a:	f000 f86b 	bl	8001474 <Codec_SetVolume>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	607b      	str	r3, [r7, #4]

  // additional configuration, refer to link at the top of the file
  counter += Codec_Write(CODEC_REG_ANALOG_ZC_SR_SETT, 0x00);
 80013a6:	2100      	movs	r1, #0
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff ffa1 	bl	80012f0 <Codec_Write>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_MISC_CTL, 0x04);
 80013b8:	2104      	movs	r1, #4
 80013ba:	200e      	movs	r0, #14
 80013bc:	f7ff ff98 	bl	80012f0 <Codec_Write>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_LIMIT_CTL1, 0x00);
 80013ca:	2100      	movs	r1, #0
 80013cc:	2027      	movs	r0, #39	; 0x27
 80013ce:	f7ff ff8f 	bl	80012f0 <Codec_Write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_TONE_CTL, 0x0F);
 80013dc:	210f      	movs	r1, #15
 80013de:	201f      	movs	r0, #31
 80013e0:	f7ff ff86 	bl	80012f0 <Codec_Write>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMA_VOL, 0x0A);
 80013ee:	210a      	movs	r1, #10
 80013f0:	201a      	movs	r0, #26
 80013f2:	f7ff ff7d 	bl	80012f0 <Codec_Write>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMB_VOL, 0x0A);
 8001400:	210a      	movs	r1, #10
 8001402:	201b      	movs	r0, #27
 8001404:	f7ff ff74 	bl	80012f0 <Codec_Write>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	607b      	str	r3, [r7, #4]

  return counter;
 8001412:	687b      	ldr	r3, [r7, #4]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40020c00 	.word	0x40020c00

08001420 <Codec_Play>:

uint32_t Codec_Play() {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]

  if (is_codec_stopped) {
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <Codec_Play+0x50>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d018      	beq.n	8001464 <Codec_Play+0x44>
    // enable the digital soft ramp
	counter += Codec_Write(CODEC_REG_MISC_CTL, 0x06);
 8001432:	2106      	movs	r1, #6
 8001434:	200e      	movs	r0, #14
 8001436:	f7ff ff5b 	bl	80012f0 <Codec_Write>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	607b      	str	r3, [r7, #4]
	counter += Codec_SetMute(AUDIO_MUTE_OFF);
 8001444:	2000      	movs	r0, #0
 8001446:	f000 f869 	bl	800151c <Codec_SetMute>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	607b      	str	r3, [r7, #4]
	// power on the codec
	counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9E);
 8001452:	219e      	movs	r1, #158	; 0x9e
 8001454:	2002      	movs	r0, #2
 8001456:	f7ff ff4b 	bl	80012f0 <Codec_Write>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	607b      	str	r3, [r7, #4]
  }

  return counter;
 8001464:	687b      	ldr	r3, [r7, #4]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000

08001474 <Codec_SetVolume>:
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9F);

  return counter;
}

uint32_t Codec_SetVolume(uint8_t volume) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  uint8_t converted_vol = VOLUME_CONVERT(volume);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d80b      	bhi.n	80014a0 <Codec_SetVolume+0x2c>
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	4613      	mov	r3, r2
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	1a9b      	subs	r3, r3, r2
 8001490:	4a21      	ldr	r2, [pc, #132]	; (8001518 <Codec_SetVolume+0xa4>)
 8001492:	fb82 1203 	smull	r1, r2, r2, r3
 8001496:	1152      	asrs	r2, r2, #5
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	e000      	b.n	80014a2 <Codec_SetVolume+0x2e>
 80014a0:	23ff      	movs	r3, #255	; 0xff
 80014a2:	72fb      	strb	r3, [r7, #11]

  if (converted_vol > 0xE6) {
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	2be6      	cmp	r3, #230	; 0xe6
 80014a8:	d918      	bls.n	80014dc <Codec_SetVolume+0x68>
    counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol - 0xE7);
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	3319      	adds	r3, #25
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4619      	mov	r1, r3
 80014b2:	2020      	movs	r0, #32
 80014b4:	f7ff ff1c 	bl	80012f0 <Codec_Write>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol - 0xE7);
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	3319      	adds	r3, #25
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	2021      	movs	r0, #33	; 0x21
 80014cc:	f7ff ff10 	bl	80012f0 <Codec_Write>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e017      	b.n	800150c <Codec_SetVolume+0x98>
  } else {
	counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol + 0x19);
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	3319      	adds	r3, #25
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	2020      	movs	r0, #32
 80014e6:	f7ff ff03 	bl	80012f0 <Codec_Write>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol + 0x19);
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3319      	adds	r3, #25
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2021      	movs	r0, #33	; 0x21
 80014fe:	f7ff fef7 	bl	80012f0 <Codec_Write>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800150c:	68fb      	ldr	r3, [r7, #12]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	51eb851f 	.word	0x51eb851f

0800151c <Codec_SetMute>:

uint32_t Codec_SetMute(uint8_t cmd) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  uint8_t counter = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]

  if (cmd == AUDIO_MUTE_ON) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d11b      	bne.n	8001568 <Codec_SetMute+0x4c>
    counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xFF);
 8001530:	21ff      	movs	r1, #255	; 0xff
 8001532:	2004      	movs	r0, #4
 8001534:	f7ff fedc 	bl	80012f0 <Codec_Write>
 8001538:	4603      	mov	r3, r0
 800153a:	461a      	mov	r2, r3
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	4413      	add	r3, r2
 8001540:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x01);
 8001542:	2101      	movs	r1, #1
 8001544:	2022      	movs	r0, #34	; 0x22
 8001546:	f7ff fed3 	bl	80012f0 <Codec_Write>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4413      	add	r3, r2
 8001552:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x01);
 8001554:	2101      	movs	r1, #1
 8001556:	2023      	movs	r0, #35	; 0x23
 8001558:	f7ff feca 	bl	80012f0 <Codec_Write>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	4413      	add	r3, r2
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e01a      	b.n	800159e <Codec_SetMute+0x82>
  } else {
	counter += Codec_Write(CODEC_REG_POWER_CTL2, OUTPUT_DEVICE_HEADPHONE);
 8001568:	21af      	movs	r1, #175	; 0xaf
 800156a:	2004      	movs	r0, #4
 800156c:	f7ff fec0 	bl	80012f0 <Codec_Write>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	4413      	add	r3, r2
 8001578:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x00);
 800157a:	2100      	movs	r1, #0
 800157c:	2022      	movs	r0, #34	; 0x22
 800157e:	f7ff feb7 	bl	80012f0 <Codec_Write>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4413      	add	r3, r2
 800158a:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x00);
 800158c:	2100      	movs	r1, #0
 800158e:	2023      	movs	r0, #35	; 0x23
 8001590:	f7ff feae 	bl	80012f0 <Codec_Write>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	4413      	add	r3, r2
 800159c:	73fb      	strb	r3, [r7, #15]
  }

  return counter;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <__io_putchar>:


#if 1
	int __io_putchar(int ch)

	{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
		while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 80015b0:	bf00      	nop
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <__io_putchar+0x34>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	2b80      	cmp	r3, #128	; 0x80
 80015c0:	d1f7      	bne.n	80015b2 <__io_putchar+0xa>
		pUart->Instance->DR = (uint16_t)ch;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <__io_putchar+0x34>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
		return 0;
 80015ce:	2300      	movs	r3, #0
	}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200000b8 	.word	0x200000b8

080015e0 <debug_init>:

#endif


void debug_init(UART_HandleTypeDef* handler)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	pUart = handler;
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <debug_init+0x1c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200000b8 	.word	0x200000b8

08001600 <debug_chr>:

extern char inkey(void);

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	__io_putchar(chr);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ffcb 	bl	80015a8 <__io_putchar>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_DMA_Init+0x3c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <MX_DMA_Init+0x3c>)
 800162c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_DMA_Init+0x3c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2010      	movs	r0, #16
 8001644:	f001 fc41 	bl	8002eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001648:	2010      	movs	r0, #16
 800164a:	f001 fc5a 	bl	8002f02 <HAL_NVIC_EnableIRQ>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <MX_GPIO_Init+0x114>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <MX_GPIO_Init+0x114>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <MX_GPIO_Init+0x114>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b37      	ldr	r3, [pc, #220]	; (8001770 <MX_GPIO_Init+0x114>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a36      	ldr	r2, [pc, #216]	; (8001770 <MX_GPIO_Init+0x114>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <MX_GPIO_Init+0x114>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b30      	ldr	r3, [pc, #192]	; (8001770 <MX_GPIO_Init+0x114>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <MX_GPIO_Init+0x114>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <MX_GPIO_Init+0x114>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <MX_GPIO_Init+0x114>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <MX_GPIO_Init+0x114>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <MX_GPIO_Init+0x114>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b22      	ldr	r3, [pc, #136]	; (8001770 <MX_GPIO_Init+0x114>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <MX_GPIO_Init+0x114>)
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <MX_GPIO_Init+0x114>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	481c      	ldr	r0, [pc, #112]	; (8001774 <MX_GPIO_Init+0x118>)
 8001704:	f002 f90c 	bl	8003920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001708:	2200      	movs	r2, #0
 800170a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800170e:	481a      	ldr	r0, [pc, #104]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001710:	f002 f906 	bl	8003920 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001714:	2301      	movs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4812      	ldr	r0, [pc, #72]	; (8001774 <MX_GPIO_Init+0x118>)
 800172c:	f001 ff74 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8001730:	2301      	movs	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	480e      	ldr	r0, [pc, #56]	; (800177c <MX_GPIO_Init+0x120>)
 8001744:	f001 ff68 	bl	8003618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD4 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8001748:	f24f 0310 	movw	r3, #61456	; 0xf010
 800174c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_GPIO_Init+0x11c>)
 8001762:	f001 ff59 	bl	8003618 <HAL_GPIO_Init>

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40020800 	.word	0x40020800
 8001778:	40020c00 	.word	0x40020c00
 800177c:	40020000 	.word	0x40020000

08001780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <MX_I2C1_Init+0x54>)
 8001788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_I2C1_Init+0x50>)
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <MX_I2C1_Init+0x58>)
 800178e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_I2C1_Init+0x50>)
 800179e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_I2C1_Init+0x50>)
 80017be:	f003 fcd3 	bl	8005168 <HAL_I2C_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017c8:	f000 fa0c 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200000bc 	.word	0x200000bc
 80017d4:	40005400 	.word	0x40005400
 80017d8:	000186a0 	.word	0x000186a0

080017dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_I2C_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12c      	bne.n	8001858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800181a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182c:	2304      	movs	r3, #4
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <HAL_I2C_MspInit+0x8c>)
 8001838:	f001 feee 	bl	8003618 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_I2C_MspInit+0x88>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40005400 	.word	0x40005400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_I2S3_Init+0x54>)
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <MX_I2S3_Init+0x58>)
 8001874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_I2S3_Init+0x54>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_I2S3_Init+0x54>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_I2S3_Init+0x54>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <MX_I2S3_Init+0x54>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_I2S3_Init+0x54>)
 8001894:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001898:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_I2S3_Init+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <MX_I2S3_Init+0x54>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_I2S3_Init+0x54>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_I2S3_Init+0x54>)
 80018ae:	f004 f8b7 	bl	8005a20 <HAL_I2S_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80018b8:	f000 f994 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000110 	.word	0x20000110
 80018c4:	40003c00 	.word	0x40003c00

080018c8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	; 0x40
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_I2S_MspInit+0x16c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	f040 8096 	bne.w	8001a2a <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018fe:	2301      	movs	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001902:	23c8      	movs	r3, #200	; 0xc8
 8001904:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001906:	2305      	movs	r3, #5
 8001908:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4618      	mov	r0, r3
 8001914:	f005 faae 	bl	8006e74 <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 800191e:	f000 f961 	bl	8001be4 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a43      	ldr	r2, [pc, #268]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 800192c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a3c      	ldr	r2, [pc, #240]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a35      	ldr	r2, [pc, #212]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_I2S_MspInit+0x170>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001976:	2310      	movs	r3, #16
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001986:	2306      	movs	r3, #6
 8001988:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	482a      	ldr	r0, [pc, #168]	; (8001a3c <HAL_I2S_MspInit+0x174>)
 8001992:	f001 fe41 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001996:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a8:	2306      	movs	r3, #6
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4823      	ldr	r0, [pc, #140]	; (8001a40 <HAL_I2S_MspInit+0x178>)
 80019b4:	f001 fe30 	bl	8003618 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_I2S_MspInit+0x180>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019de:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a0e:	480d      	ldr	r0, [pc, #52]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 8001a10:	f001 fa92 	bl	8002f38 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8001a1a:	f000 f8e3 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_I2S_MspInit+0x17c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3740      	adds	r7, #64	; 0x40
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40003c00 	.word	0x40003c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020800 	.word	0x40020800
 8001a44:	20000158 	.word	0x20000158
 8001a48:	40026088 	.word	0x40026088

08001a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a52:	f001 f8c9 	bl	8002be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a56:	f000 f85d 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5a:	f7ff fdff 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a5e:	f7ff fddd 	bl	800161c <MX_DMA_Init>
  MX_I2C1_Init();
 8001a62:	f7ff fe8d 	bl	8001780 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001a66:	f7ff ff01 	bl	800186c <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8001a6a:	f008 ff3f 	bl	800a8ec <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 8001a6e:	f000 fe37 	bl	80026e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_DriverVbusFS(0);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f009 fa26 	bl	800aec4 <MX_DriverVbusFS>

  // TODO temporary
  debug_init(&huart1);
 8001a78:	4823      	ldr	r0, [pc, #140]	; (8001b08 <main+0xbc>)
 8001a7a:	f7ff fdb1 	bl	80015e0 <debug_init>
  xprintf(ANSI_BG_MAGENTA "\nMIDI_SOUNDBOX" ANSI_BG_DEFAULT "\n");
 8001a7e:	4823      	ldr	r0, [pc, #140]	; (8001b0c <main+0xc0>)
 8001a80:	f000 fd72 	bl	8002568 <xprintf>

  uint8_t counter = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	71bb      	strb	r3, [r7, #6]

  counter += Codec_Init();
 8001a88:	f7ff fc58 	bl	800133c <Codec_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	4413      	add	r3, r2
 8001a94:	71bb      	strb	r3, [r7, #6]
  counter += Codec_SetVolume(80);
 8001a96:	2050      	movs	r0, #80	; 0x50
 8001a98:	f7ff fcec 	bl	8001474 <Codec_SetVolume>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	71bb      	strb	r3, [r7, #6]
  counter += Codec_Play();
 8001aa6:	f7ff fcbb 	bl	8001420 <Codec_Play>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	79bb      	ldrb	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	71bb      	strb	r3, [r7, #6]
  if (counter) {
 8001ab4:	79bb      	ldrb	r3, [r7, #6]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <main+0x72>
    Error_Handler();
 8001aba:	f000 f893 	bl	8001be4 <Error_Handler>
  }

  Synth_Init();
 8001abe:	f000 f98b 	bl	8001dd8 <Synth_Init>
  if (Synth_Play() != 0) {
 8001ac2:	f000 f9ab 	bl	8001e1c <Synth_Play>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <main+0x84>
	Error_Handler();
 8001acc:	f000 f88a 	bl	8001be4 <Error_Handler>
  }

  uint8_t midi_started = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001ad4:	f008 ff30 	bl	800a938 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (Appli_state == APPLICATION_READY && !midi_started) {
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <main+0xc4>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d107      	bne.n	8001af0 <main+0xa4>
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <main+0xa4>
      Midi_Start();
 8001ae6:	f000 f88f 	bl	8001c08 <Midi_Start>
      midi_started = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	e00a      	b.n	8001b06 <main+0xba>
    } else if (Appli_state != APPLICATION_READY && midi_started) {
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <main+0xc4>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d0ed      	beq.n	8001ad4 <main+0x88>
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ea      	beq.n	8001ad4 <main+0x88>
      Midi_Stop();
 8001afe:	f000 f891 	bl	8001c24 <Midi_Stop>
      midi_started = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
    MX_USB_HOST_Process();
 8001b06:	e7e5      	b.n	8001ad4 <main+0x88>
 8001b08:	200004b4 	.word	0x200004b4
 8001b0c:	0800dd28 	.word	0x0800dd28
 8001b10:	20008828 	.word	0x20008828

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	; 0x50
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	2230      	movs	r2, #48	; 0x30
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f009 fa24 	bl	800af70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <SystemClock_Config+0xc8>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <SystemClock_Config+0xc8>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6413      	str	r3, [r2, #64]	; 0x40
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <SystemClock_Config+0xc8>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <SystemClock_Config+0xcc>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <SystemClock_Config+0xcc>)
 8001b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1e      	ldr	r3, [pc, #120]	; (8001be0 <SystemClock_Config+0xcc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b84:	2304      	movs	r3, #4
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b88:	23c0      	movs	r3, #192	; 0xc0
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001b90:	2308      	movs	r3, #8
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 fcd3 	bl	8006544 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba4:	f000 f81e 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba8:	230f      	movs	r3, #15
 8001baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bac:	2302      	movs	r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2103      	movs	r1, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f004 ff35 	bl	8006a34 <HAL_RCC_ClockConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bd0:	f000 f808 	bl	8001be4 <Error_Handler>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3750      	adds	r7, #80	; 0x50
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <Error_Handler+0x1c>)
 8001bf0:	f001 fe96 	bl	8003920 <HAL_GPIO_WritePin>
  xprintf("ERROR!");
 8001bf4:	4803      	ldr	r0, [pc, #12]	; (8001c04 <Error_Handler+0x20>)
 8001bf6:	f000 fcb7 	bl	8002568 <xprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bfa:	b672      	cpsid	i
}
 8001bfc:	bf00      	nop
  __disable_irq();
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <Error_Handler+0x1a>
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	0800dd48 	.word	0x0800dd48

08001c08 <Midi_Start>:
extern USBH_HandleTypeDef hUsbHostFS;
uint8_t MIDI_RX_Buffer[RX_BUFF_SIZE];

static void HandleMidi(uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1);

void Midi_Start(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8001c0c:	2240      	movs	r2, #64	; 0x40
 8001c0e:	4903      	ldr	r1, [pc, #12]	; (8001c1c <Midi_Start+0x14>)
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <Midi_Start+0x18>)
 8001c12:	f006 ff3a 	bl	8008a8a <USBH_MIDI_Receive>
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200001b8 	.word	0x200001b8
 8001c20:	20008380 	.word	0x20008380

08001c24 <Midi_Stop>:

void Midi_Stop(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  USBH_MIDI_Stop(&hUsbHostFS);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <Midi_Stop+0x10>)
 8001c2a:	f006 feae 	bl	800898a <USBH_MIDI_Stop>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20008380 	.word	0x20008380

08001c38 <USBH_MIDI_ReceiveCallback>:

void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  // each USB midi package is 4 bytes long
  uint16_t numberOfPackets = USBH_MIDI_GetLastReceivedDataSize(&hUsbHostFS) / 4;
 8001c40:	481e      	ldr	r0, [pc, #120]	; (8001cbc <USBH_MIDI_ReceiveCallback+0x84>)
 8001c42:	f006 ff06 	bl	8008a52 <USBH_MIDI_GetLastReceivedDataSize>
 8001c46:	4603      	mov	r3, r0
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	81bb      	strh	r3, [r7, #12]

  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	81fb      	strh	r3, [r7, #14]
 8001c50:	e027      	b.n	8001ca2 <USBH_MIDI_ReceiveCallback+0x6a>
    uint8_t cin_cable   = MIDI_RX_Buffer[4*i+0];
 8001c52:	89fb      	ldrh	r3, [r7, #14]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4a1a      	ldr	r2, [pc, #104]	; (8001cc0 <USBH_MIDI_ReceiveCallback+0x88>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	72fb      	strb	r3, [r7, #11]
    uint8_t midi_cmd    = MIDI_RX_Buffer[4*i+1];
 8001c5c:	89fb      	ldrh	r3, [r7, #14]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <USBH_MIDI_ReceiveCallback+0x88>)
 8001c64:	5cd3      	ldrb	r3, [r2, r3]
 8001c66:	72bb      	strb	r3, [r7, #10]
    uint8_t midi_param0 = MIDI_RX_Buffer[4*i+2];
 8001c68:	89fb      	ldrh	r3, [r7, #14]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <USBH_MIDI_ReceiveCallback+0x88>)
 8001c70:	5cd3      	ldrb	r3, [r2, r3]
 8001c72:	727b      	strb	r3, [r7, #9]
    uint8_t midi_param1 = MIDI_RX_Buffer[4*i+3];
 8001c74:	89fb      	ldrh	r3, [r7, #14]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3303      	adds	r3, #3
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <USBH_MIDI_ReceiveCallback+0x88>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	723b      	strb	r3, [r7, #8]
    if(cin_cable == 0 || cin_cable == 11) {
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <USBH_MIDI_ReceiveCallback+0x62>
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	2b0b      	cmp	r3, #11
 8001c8a:	d006      	beq.n	8001c9a <USBH_MIDI_ReceiveCallback+0x62>
      continue;
    }
    HandleMidi(midi_cmd, midi_param0, midi_param1);
 8001c8c:	7a3a      	ldrb	r2, [r7, #8]
 8001c8e:	7a79      	ldrb	r1, [r7, #9]
 8001c90:	7abb      	ldrb	r3, [r7, #10]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f816 	bl	8001cc4 <HandleMidi>
 8001c98:	e000      	b.n	8001c9c <USBH_MIDI_ReceiveCallback+0x64>
      continue;
 8001c9a:	bf00      	nop
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	81fb      	strh	r3, [r7, #14]
 8001ca2:	89fa      	ldrh	r2, [r7, #14]
 8001ca4:	89bb      	ldrh	r3, [r7, #12]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d3d3      	bcc.n	8001c52 <USBH_MIDI_ReceiveCallback+0x1a>
  }

  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 8001caa:	2240      	movs	r2, #64	; 0x40
 8001cac:	4904      	ldr	r1, [pc, #16]	; (8001cc0 <USBH_MIDI_ReceiveCallback+0x88>)
 8001cae:	4803      	ldr	r0, [pc, #12]	; (8001cbc <USBH_MIDI_ReceiveCallback+0x84>)
 8001cb0:	f006 feeb 	bl	8008a8a <USBH_MIDI_Receive>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20008380 	.word	0x20008380
 8001cc0:	200001b8 	.word	0x200001b8

08001cc4 <HandleMidi>:

static void HandleMidi(uint8_t midi_cmd, uint8_t midi_param0, uint8_t midi_param1) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	71bb      	strb	r3, [r7, #6]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	717b      	strb	r3, [r7, #5]
  switch (midi_cmd & 0xf0) {
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d002      	beq.n	8001ce6 <HandleMidi+0x22>
 8001ce0:	2b90      	cmp	r3, #144	; 0x90
 8001ce2:	d007      	beq.n	8001cf4 <HandleMidi+0x30>
	break;
  case 0x90:
	Synth_NoteOn(midi_param0, midi_param1);
	break;
  }
}
 8001ce4:	e00d      	b.n	8001d02 <HandleMidi+0x3e>
	Synth_NoteOff(midi_param0, midi_param1);
 8001ce6:	797a      	ldrb	r2, [r7, #5]
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f8f9 	bl	8001ee4 <Synth_NoteOff>
	break;
 8001cf2:	e006      	b.n	8001d02 <HandleMidi+0x3e>
	Synth_NoteOn(midi_param0, midi_param1);
 8001cf4:	797a      	ldrb	r2, [r7, #5]
 8001cf6:	79bb      	ldrb	r3, [r7, #6]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f89e 	bl	8001e3c <Synth_NoteOn>
	break;
 8001d00:	bf00      	nop
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	; 0x44
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d4a:	2007      	movs	r0, #7
 8001d4c:	f001 f8b2 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d50:	bf00      	nop
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40023800 	.word	0x40023800

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f000 ff70 	bl	8002c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <DMA1_Stream5_IRQHandler+0x10>)
 8001db6:	f001 f9c5 	bl	8003144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000158 	.word	0x20000158

08001dc4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <OTG_FS_IRQHandler+0x10>)
 8001dca:	f002 f82d 	bl	8003e28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000882c 	.word	0x2000882c

08001dd8 <Synth_Init>:

Wavetable_State wavetables[POLY_MAX];

float synth_time = 0.0; // synthesizer clock for adsr

void Synth_Init() {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  for(int note = 0; note<POLY_MAX; note++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	e00d      	b.n	8001e00 <Synth_Init+0x28>
    Wavetable_Init(&wavetables[note], WAVE_SINE);
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <Synth_Init+0x40>)
 8001df0:	4413      	add	r3, r2
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fe01 	bl	80029fc <Wavetable_Init>
  for(int note = 0; note<POLY_MAX; note++) {
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	ddee      	ble.n	8001de4 <Synth_Init+0xc>
  }
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES);
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f000 f8c1 	bl	8001f90 <UpdateAudioBuffer>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200003f8 	.word	0x200003f8

08001e1c <Synth_Play>:

uint8_t Synth_Play() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  return HAL_I2S_Transmit_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SAMPLES);
 8001e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <Synth_Play+0x18>)
 8001e26:	4804      	ldr	r0, [pc, #16]	; (8001e38 <Synth_Play+0x1c>)
 8001e28:	f003 ff3a 	bl	8005ca0 <HAL_I2S_Transmit_DMA>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200001f8 	.word	0x200001f8
 8001e38:	20000110 	.word	0x20000110

08001e3c <Synth_NoteOn>:

void Synth_NoteOn(uint8_t midi_param0, uint8_t midi_param1) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	460a      	mov	r2, r1
 8001e46:	71fb      	strb	r3, [r7, #7]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	71bb      	strb	r3, [r7, #6]
  for (int8_t i=0; i<POLY_MAX; i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e03b      	b.n	8001eca <Synth_NoteOn+0x8e>
    if (ADSR_Active(&(&wavetables[i])->adsr_state, synth_time) == 0) {
 8001e52:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e56:	4613      	mov	r3, r2
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	3310      	adds	r3, #16
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <Synth_NoteOn+0xa0>)
 8001e62:	4413      	add	r3, r2
 8001e64:	3304      	adds	r3, #4
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <Synth_NoteOn+0xa4>)
 8001e68:	edd2 7a00 	vldr	s15, [r2]
 8001e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f9e7 	bl	8001244 <ADSR_Active>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d120      	bne.n	8001ebe <Synth_NoteOn+0x82>
	  // activete the note
      Wavetable_NoteOn(&wavetables[i], midi_param0);
 8001e7c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e80:	4613      	mov	r3, r2
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <Synth_NoteOn+0xa0>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fdfd 	bl	8002a90 <Wavetable_NoteOn>
      ADSR_NoteOn(&(&wavetables[i])->adsr_state, 127.0, synth_time);
 8001e96:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	3310      	adds	r3, #16
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <Synth_NoteOn+0xa0>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <Synth_NoteOn+0xa4>)
 8001eac:	edd2 7a00 	vldr	s15, [r2]
 8001eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb4:	217f      	movs	r1, #127	; 0x7f
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f888 	bl	8000fcc <ADSR_NoteOn>
      break;
 8001ebc:	e00a      	b.n	8001ed4 <Synth_NoteOn+0x98>
  for (int8_t i=0; i<POLY_MAX; i++) {
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	ddbf      	ble.n	8001e52 <Synth_NoteOn+0x16>
	}
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	200003f8 	.word	0x200003f8
 8001ee0:	200004ac 	.word	0x200004ac

08001ee4 <Synth_NoteOff>:

void Synth_NoteOff(uint8_t midi_param0, uint8_t midi_param1) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	460a      	mov	r2, r1
 8001eee:	71fb      	strb	r3, [r7, #7]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	71bb      	strb	r3, [r7, #6]
  for (int8_t i=0; i<POLY_MAX; i++) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e03d      	b.n	8001f76 <Synth_NoteOff+0x92>
    if (wavetables[i].pitch_midi == midi_param0) {
 8001efa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001efe:	4922      	ldr	r1, [pc, #136]	; (8001f88 <Synth_NoteOff+0xa4>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	330c      	adds	r3, #12
 8001f0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f10:	461a      	mov	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d128      	bne.n	8001f6a <Synth_NoteOff+0x86>
      if (ADSR_Releasing(&(&wavetables[i])->adsr_state, synth_time) == 1) {
 8001f18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3310      	adds	r3, #16
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <Synth_NoteOff+0xa4>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <Synth_NoteOff+0xa8>)
 8001f2e:	edd2 7a00 	vldr	s15, [r2]
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f9c2 	bl	80012c0 <ADSR_Releasing>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d012      	beq.n	8001f68 <Synth_NoteOff+0x84>
        // note already releasing
    	continue;
      }
      ADSR_NoteOff(&(&wavetables[i])->adsr_state, synth_time);
 8001f42:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f46:	4613      	mov	r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	3310      	adds	r3, #16
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <Synth_NoteOff+0xa4>)
 8001f52:	4413      	add	r3, r2
 8001f54:	3304      	adds	r3, #4
 8001f56:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <Synth_NoteOff+0xa8>)
 8001f58:	edd2 7a00 	vldr	s15, [r2]
 8001f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f865 	bl	8001030 <ADSR_NoteOff>
      break;
 8001f66:	e00b      	b.n	8001f80 <Synth_NoteOff+0x9c>
    	continue;
 8001f68:	bf00      	nop
  for (int8_t i=0; i<POLY_MAX; i++) {
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	ddbd      	ble.n	8001efa <Synth_NoteOff+0x16>
    }
  }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200003f8 	.word	0x200003f8
 8001f8c:	200004ac 	.word	0x200004ac

08001f90 <UpdateAudioBuffer>:

static void UpdateAudioBuffer(uint32_t start_frame, uint32_t end_frame) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	f6ad 0d28 	subw	sp, sp, #2088	; 0x828
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001f9c:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8001fa0:	6018      	str	r0, [r3, #0]
 8001fa2:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001fa6:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8001faa:	6019      	str	r1, [r3, #0]
  // start_frame is inclusive, end_frame exclusive
  float buffer[AUDIO_BUFFER_SAMPLES];
  for(int i = 0; i<AUDIO_BUFFER_SAMPLES; i++) {buffer[i] = 0;}
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8001fb2:	e00f      	b.n	8001fd4 <UpdateAudioBuffer+0x44>
 8001fb4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001fb8:	f5a3 6284 	sub.w	r2, r3, #1056	; 0x420
 8001fbc:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8001fd4:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001fd8:	2bff      	cmp	r3, #255	; 0xff
 8001fda:	ddeb      	ble.n	8001fb4 <UpdateAudioBuffer+0x24>
  float _buffer[AUDIO_BUFFER_SAMPLES];
  for(int i = 0; i<AUDIO_BUFFER_SAMPLES; i++) {_buffer[i] = 0;}
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8001fe2:	e00f      	b.n	8002004 <UpdateAudioBuffer+0x74>
 8001fe4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8001fe8:	f5a3 6202 	sub.w	r2, r3, #2080	; 0x820
 8001fec:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8001ffe:	3301      	adds	r3, #1
 8002000:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 8002004:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8002008:	2bff      	cmp	r3, #255	; 0xff
 800200a:	ddeb      	ble.n	8001fe4 <UpdateAudioBuffer+0x54>

  for(int note = 0; note < POLY_MAX; note++) {
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8002012:	e09e      	b.n	8002152 <UpdateAudioBuffer+0x1c2>
    Wavetable_GetSamples(&wavetables[note], _buffer, end_frame - start_frame);
 8002014:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4a7d      	ldr	r2, [pc, #500]	; (8002218 <UpdateAudioBuffer+0x288>)
 8002022:	1898      	adds	r0, r3, r2
 8002024:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002028:	f6a3 0228 	subw	r2, r3, #2088	; 0x828
 800202c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002030:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	461a      	mov	r2, r3
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	4619      	mov	r1, r3
 8002042:	f000 fd53 	bl	8002aec <Wavetable_GetSamples>
    ADSR_GetSamples(&(&wavetables[note])->adsr_state, _buffer, end_frame - start_frame, synth_time);
 8002046:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	3310      	adds	r3, #16
 8002054:	4a70      	ldr	r2, [pc, #448]	; (8002218 <UpdateAudioBuffer+0x288>)
 8002056:	4413      	add	r3, r2
 8002058:	1d18      	adds	r0, r3, #4
 800205a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800205e:	f6a3 0228 	subw	r2, r3, #2088	; 0x828
 8002062:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002066:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	461a      	mov	r2, r3
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <UpdateAudioBuffer+0x28c>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	eeb0 0a67 	vmov.f32	s0, s15
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fff1 	bl	8001068 <ADSR_GetSamples>

    for(int i = 0; i < end_frame - start_frame; i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 800208c:	e04d      	b.n	800212a <UpdateAudioBuffer+0x19a>
      buffer[2*i] += _buffer[2*i];
 800208e:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8002098:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	ed93 7a00 	vldr	s14, [r3]
 80020a4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80020ae:	f5a2 6202 	sub.w	r2, r2, #2080	; 0x820
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80020c8:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	edc3 7a00 	vstr	s15, [r3]
      buffer[2*i+1] += _buffer[2*i+1];
 80020d4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3301      	adds	r3, #1
 80020dc:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80020e0:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	3301      	adds	r3, #1
 80020f4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 80020f8:	f5a2 6202 	sub.w	r2, r2, #2080	; 0x820
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	3301      	adds	r3, #1
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	f607 0228 	addw	r2, r7, #2088	; 0x828
 8002114:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < end_frame - start_frame; i++) {
 8002120:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002124:	3301      	adds	r3, #1
 8002126:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 800212a:	f607 0328 	addw	r3, r7, #2088	; 0x828
 800212e:	f6a3 0228 	subw	r2, r3, #2088	; 0x828
 8002132:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002136:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8002144:	429a      	cmp	r2, r3
 8002146:	d8a2      	bhi.n	800208e <UpdateAudioBuffer+0xfe>
  for(int note = 0; note < POLY_MAX; note++) {
 8002148:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800214c:	3301      	adds	r3, #1
 800214e:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8002152:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8002156:	2b02      	cmp	r3, #2
 8002158:	f77f af5c 	ble.w	8002014 <UpdateAudioBuffer+0x84>
    }
  }

  uint32_t i = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 8002162:	f607 0328 	addw	r3, r7, #2088	; 0x828
 8002166:	f6a3 0324 	subw	r3, r3, #2084	; 0x824
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 8002170:	e043      	b.n	80021fa <UpdateAudioBuffer+0x26a>
    float scaled = buffer[2*i] * scaled_base;
 8002172:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	f607 0228 	addw	r2, r7, #2088	; 0x828
 800217c:	f5a2 6284 	sub.w	r2, r2, #1056	; 0x420
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	ed93 7a00 	vldr	s14, [r3]
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <UpdateAudioBuffer+0x290>)
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002198:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 800219c:	edc3 7a00 	vstr	s15, [r3]
    uint16_t value = (uint16_t)(base + scaled);
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <UpdateAudioBuffer+0x294>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ac:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021bc:	ee17 3a90 	vmov	r3, s15
 80021c0:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

	audio_buffer[2*frame] = value;
 80021c4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4917      	ldr	r1, [pc, #92]	; (8002228 <UpdateAudioBuffer+0x298>)
 80021cc:	f8b7 280a 	ldrh.w	r2, [r7, #2058]	; 0x80a
 80021d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    audio_buffer[2*frame+1] = value;
 80021d4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	3301      	adds	r3, #1
 80021dc:	4912      	ldr	r1, [pc, #72]	; (8002228 <UpdateAudioBuffer+0x298>)
 80021de:	f8b7 280a 	ldrh.w	r2, [r7, #2058]	; 0x80a
 80021e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    i++;
 80021e6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80021ea:	3301      	adds	r3, #1
 80021ec:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 80021f0:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80021f4:	3301      	adds	r3, #1
 80021f6:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
 80021fa:	f607 0328 	addw	r3, r7, #2088	; 0x828
 80021fe:	f6a3 0328 	subw	r3, r3, #2088	; 0x828
 8002202:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d3b2      	bcc.n	8002172 <UpdateAudioBuffer+0x1e2>
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	f607 0728 	addw	r7, r7, #2088	; 0x828
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200003f8 	.word	0x200003f8
 800221c:	200004ac 	.word	0x200004ac
 8002220:	20000004 	.word	0x20000004
 8002224:	20000002 	.word	0x20000002
 8002228:	200001f8 	.word	0x200001f8

0800222c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES/2);
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff feaa 	bl	8001f90 <UpdateAudioBuffer>
  synth_time += (float)(AUDIO_BUFFER_FRAMES/2)/SAMPLE_RATE;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800225c <HAL_I2S_TxHalfCpltCallback+0x30>
 8002246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800224a:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 800224c:	edc3 7a00 	vstr	s15, [r3]
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200004ac 	.word	0x200004ac
 800225c:	3aaec33e 	.word	0x3aaec33e

08002260 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(AUDIO_BUFFER_FRAMES/2, AUDIO_BUFFER_FRAMES);
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	2040      	movs	r0, #64	; 0x40
 800226c:	f7ff fe90 	bl	8001f90 <UpdateAudioBuffer>
  synth_time += (float)(AUDIO_BUFFER_FRAMES/2)/SAMPLE_RATE;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_I2S_TxCpltCallback+0x2c>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002290 <HAL_I2S_TxCpltCallback+0x30>
 800227a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_I2S_TxCpltCallback+0x2c>)
 8002280:	edc3 7a00 	vstr	s15, [r3]
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200004ac 	.word	0x200004ac
 8002290:	3aaec33e 	.word	0x3aaec33e

08002294 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e00a      	b.n	80022bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	4601      	mov	r1, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf0      	blt.n	80022a6 <_read+0x12>
	}

return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e009      	b.n	80022f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff f95d 	bl	80015a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbf1      	blt.n	80022e0 <_write+0x12>
	}
	return len;
 80022fc:	687b      	ldr	r3, [r7, #4]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <_close>:

int _close(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return -1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800232e:	605a      	str	r2, [r3, #4]
	return 0;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <_isatty>:

int _isatty(int file)
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	return 1;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f008 fdac 	bl	800aefc <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20020000 	.word	0x20020000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	200004b0 	.word	0x200004b0
 80023d8:	20008b40 	.word	0x20008b40

080023dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <SystemInit+0x20>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <SystemInit+0x20>)
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <xputc>:




void xputc (char c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	debug_chr(c);
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f8f7 	bl	8001600 <debug_chr>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <xputs>:




void xputs (const char* str)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
	while (*str)
 8002422:	e006      	b.n	8002432 <xputs+0x18>
		xputc(*str++);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ffe7 	bl	8002400 <xputc>
	while (*str)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f4      	bne.n	8002424 <xputs+0xa>
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <xitoa>:




void xitoa (long val, int radix, int len)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	uint8_t c, r, sgn = 0, pad = ' ';
 8002450:	2300      	movs	r3, #0
 8002452:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002456:	2320      	movs	r3, #32
 8002458:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t s[20], i = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint32_t v;


	if (radix < 0) {
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da0b      	bge.n	8002480 <xitoa+0x3c>
		radix = -radix;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	425b      	negs	r3, r3
 800246c:	60bb      	str	r3, [r7, #8]
		if (val < 0) {
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da05      	bge.n	8002480 <xitoa+0x3c>
			val = -val;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	425b      	negs	r3, r3
 8002478:	60fb      	str	r3, [r7, #12]
			sgn = '-';
 800247a:	232d      	movs	r3, #45	; 0x2d
 800247c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}
	}
	v = val;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
	r = radix;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (len < 0) {
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da05      	bge.n	800249c <xitoa+0x58>
		len = -len;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	425b      	negs	r3, r3
 8002494:	607b      	str	r3, [r7, #4]
		pad = '0';
 8002496:	2330      	movs	r3, #48	; 0x30
 8002498:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	}
	if (len > 20) return;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b14      	cmp	r3, #20
 80024a0:	dc5e      	bgt.n	8002560 <xitoa+0x11c>
	do {
		c = (uint8_t)(v % r);
 80024a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80024ac:	fb01 f202 	mul.w	r2, r1, r2
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c >= 10) c += 7;
 80024b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	d904      	bls.n	80024c8 <xitoa+0x84>
 80024be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c2:	3307      	adds	r3, #7
 80024c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		c += '0';
 80024c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024cc:	3330      	adds	r3, #48	; 0x30
 80024ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		s[i++] = c;
 80024d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80024dc:	3330      	adds	r3, #48	; 0x30
 80024de:	443b      	add	r3, r7
 80024e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80024e4:	f803 2c20 	strb.w	r2, [r3, #-32]
		v /= r;
 80024e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
	} while (v);
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1d3      	bne.n	80024a2 <xitoa+0x5e>
	if (sgn) s[i++] = sgn;
 80024fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <xitoa+0xec>
 8002502:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 800250c:	3330      	adds	r3, #48	; 0x30
 800250e:	443b      	add	r3, r7
 8002510:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002514:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8002518:	e00a      	b.n	8002530 <xitoa+0xec>
		s[i++] = pad;
 800251a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8002524:	3330      	adds	r3, #48	; 0x30
 8002526:	443b      	add	r3, r7
 8002528:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800252c:	f803 2c20 	strb.w	r2, [r3, #-32]
	while (i < len)
 8002530:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	dcef      	bgt.n	800251a <xitoa+0xd6>
	do
		xputc(s[--i]);
 800253a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800253e:	3b01      	subs	r3, #1
 8002540:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002544:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002548:	3330      	adds	r3, #48	; 0x30
 800254a:	443b      	add	r3, r7
 800254c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff55 	bl	8002400 <xputc>
	while (i);
 8002556:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ed      	bne.n	800253a <xitoa+0xf6>
 800255e:	e000      	b.n	8002562 <xitoa+0x11e>
	if (len > 20) return;
 8002560:	bf00      	nop
}
 8002562:	3730      	adds	r7, #48	; 0x30
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <xprintf>:

void xprintf (const char* str, ...)
{
 8002568:	b40f      	push	{r0, r1, r2, r3}
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
 8002570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002574:	603b      	str	r3, [r7, #0]

	while ((d = *str++) != 0) {
 8002576:	e09f      	b.n	80026b8 <xprintf+0x150>
		if (d != '%') {
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b25      	cmp	r3, #37	; 0x25
 800257c:	d005      	beq.n	800258a <xprintf+0x22>
			xputc(d); continue;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff3c 	bl	8002400 <xputc>
 8002588:	e096      	b.n	80026b8 <xprintf+0x150>
		}
		d = *str++; w = r = s = l = 0;
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	623a      	str	r2, [r7, #32]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	60fb      	str	r3, [r7, #12]
		if (d == '0') {
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2b30      	cmp	r3, #48	; 0x30
 80025a8:	d118      	bne.n	80025dc <xprintf+0x74>
			d = *str++; s = 1;
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	623a      	str	r2, [r7, #32]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	2301      	movs	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
		}
		while ((d >= '0')&&(d <= '9')) {
 80025b8:	e010      	b.n	80025dc <xprintf+0x74>
			w += w * 10 + (d - '0');
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	461a      	mov	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3b30      	subs	r3, #48	; 0x30
 80025ca:	4413      	add	r3, r2
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
			d = *str++;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	623a      	str	r2, [r7, #32]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]
		while ((d >= '0')&&(d <= '9')) {
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b2f      	cmp	r3, #47	; 0x2f
 80025e0:	dd02      	ble.n	80025e8 <xprintf+0x80>
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b39      	cmp	r3, #57	; 0x39
 80025e6:	dde8      	ble.n	80025ba <xprintf+0x52>
		}
		if (s) w = -w;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <xprintf+0x8c>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	425b      	negs	r3, r3
 80025f2:	60fb      	str	r3, [r7, #12]
		if (d == 'l') {
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b6c      	cmp	r3, #108	; 0x6c
 80025f8:	d106      	bne.n	8002608 <xprintf+0xa0>
			l = 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
			d = *str++;
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	623a      	str	r2, [r7, #32]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	617b      	str	r3, [r7, #20]
		}
		if (!d) break;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d05e      	beq.n	80026cc <xprintf+0x164>
		if (d == 's') {
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b73      	cmp	r3, #115	; 0x73
 8002612:	d107      	bne.n	8002624 <xprintf+0xbc>
			xputs(va_arg(arp, char*));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	1d1a      	adds	r2, r3, #4
 8002618:	603a      	str	r2, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fefc 	bl	800241a <xputs>
			continue;
 8002622:	e049      	b.n	80026b8 <xprintf+0x150>
		}
		if (d == 'c') {
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b63      	cmp	r3, #99	; 0x63
 8002628:	d108      	bne.n	800263c <xprintf+0xd4>
			xputc((char)va_arg(arp, int));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	1d1a      	adds	r2, r3, #4
 800262e:	603a      	str	r2, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fee3 	bl	8002400 <xputc>
			continue;
 800263a:	e03d      	b.n	80026b8 <xprintf+0x150>
		}
		if (d == 'u') r = 10;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b75      	cmp	r3, #117	; 0x75
 8002640:	d101      	bne.n	8002646 <xprintf+0xde>
 8002642:	230a      	movs	r3, #10
 8002644:	613b      	str	r3, [r7, #16]
		if (d == 'd') r = -10;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b64      	cmp	r3, #100	; 0x64
 800264a:	d102      	bne.n	8002652 <xprintf+0xea>
 800264c:	f06f 0309 	mvn.w	r3, #9
 8002650:	613b      	str	r3, [r7, #16]
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b58      	cmp	r3, #88	; 0x58
 8002656:	d002      	beq.n	800265e <xprintf+0xf6>
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b78      	cmp	r3, #120	; 0x78
 800265c:	d101      	bne.n	8002662 <xprintf+0xfa>
 800265e:	2310      	movs	r3, #16
 8002660:	613b      	str	r3, [r7, #16]
		if (d == 'b') r = 2;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b62      	cmp	r3, #98	; 0x62
 8002666:	d101      	bne.n	800266c <xprintf+0x104>
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
		if (!r) break;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02e      	beq.n	80026d0 <xprintf+0x168>
		if (l) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <xprintf+0x124>
			xitoa((long)va_arg(arp, long), r, w);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	603a      	str	r2, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	6939      	ldr	r1, [r7, #16]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fedd 	bl	8002444 <xitoa>
 800268a:	e015      	b.n	80026b8 <xprintf+0x150>
		} else {
			if (r > 0)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	dd09      	ble.n	80026a6 <xprintf+0x13e>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	1d1a      	adds	r2, r3, #4
 8002696:	603a      	str	r2, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fed0 	bl	8002444 <xitoa>
 80026a4:	e008      	b.n	80026b8 <xprintf+0x150>
			else
				xitoa((long)va_arg(arp, int), r, w);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	1d1a      	adds	r2, r3, #4
 80026aa:	603a      	str	r2, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6939      	ldr	r1, [r7, #16]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fec6 	bl	8002444 <xitoa>
	while ((d = *str++) != 0) {
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	623a      	str	r2, [r7, #32]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f af57 	bne.w	8002578 <xprintf+0x10>
		}
	}

	va_end(arp);
}
 80026ca:	e002      	b.n	80026d2 <xprintf+0x16a>
		if (!d) break;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <xprintf+0x16a>
		if (!r) break;
 80026d0:	bf00      	nop
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026dc:	b004      	add	sp, #16
 80026de:	4770      	bx	lr

080026e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_USART1_UART_Init+0x4c>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <MX_USART1_UART_Init+0x50>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <MX_USART1_UART_Init+0x4c>)
 80026ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_USART1_UART_Init+0x4c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_USART1_UART_Init+0x4c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	; (800272c <MX_USART1_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_USART1_UART_Init+0x4c>)
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <MX_USART1_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_USART1_UART_Init+0x4c>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_USART1_UART_Init+0x4c>)
 8002718:	f004 fcfc 	bl	8007114 <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002722:	f7ff fa5f 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200004b4 	.word	0x200004b4
 8002730:	40011000 	.word	0x40011000

08002734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <HAL_UART_MspInit+0x84>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d12c      	bne.n	80027b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_UART_MspInit+0x88>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_UART_MspInit+0x88>)
 8002760:	f043 0310 	orr.w	r3, r3, #16
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <HAL_UART_MspInit+0x88>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_UART_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_UART_MspInit+0x88>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_UART_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800278e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a0:	2307      	movs	r3, #7
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4619      	mov	r1, r3
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <HAL_UART_MspInit+0x8c>)
 80027ac:	f000 ff34 	bl	8003618 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020000 	.word	0x40020000

080027c4 <PitchToFreq>:
float sine_wavetable[WAVETABLE_LEN];
static uint8_t wavetables_initialized = 0;

float CHROMATIC_BASE = pow(2.0f, 1.0f / 12.0f);

static float PitchToFreq(uint8_t pitch_midi) {
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  return 440*pow(CHROMATIC_BASE, (float)pitch_midi - 69);
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <PitchToFreq+0x6c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fd feb8 	bl	8000548 <__aeabi_f2d>
 80027d8:	4604      	mov	r4, r0
 80027da:	460d      	mov	r5, r1
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002834 <PitchToFreq+0x70>
 80027ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fea9 	bl	8000548 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	ec43 2b11 	vmov	d1, r2, r3
 80027fe:	ec45 4b10 	vmov	d0, r4, r5
 8002802:	f009 fc01 	bl	800c008 <pow>
 8002806:	ec51 0b10 	vmov	r0, r1, d0
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <PitchToFreq+0x74>)
 8002810:	f7fd fef2 	bl	80005f8 <__aeabi_dmul>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f9c4 	bl	8000ba8 <__aeabi_d2f>
 8002820:	4603      	mov	r3, r0
 8002822:	ee07 3a90 	vmov	s15, r3
}
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bdb0      	pop	{r4, r5, r7, pc}
 8002830:	2000000c 	.word	0x2000000c
 8002834:	428a0000 	.word	0x428a0000
 8002838:	407b8000 	.word	0x407b8000

0800283c <SineWavetableInit>:

static void SineWavetableInit() {
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
  float d_phase = (2.0f * (float)M_PI) / WAVETABLE_LEN;
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <SineWavetableInit+0x68>)
 8002844:	607b      	str	r3, [r7, #4]
  float phase = 0;
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 800284c:	2300      	movs	r3, #0
 800284e:	817b      	strh	r3, [r7, #10]
 8002850:	e01f      	b.n	8002892 <SineWavetableInit+0x56>
    sine_wavetable[i] = sin(phase);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7fd fe78 	bl	8000548 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	ec43 2b10 	vmov	d0, r2, r3
 8002860:	f009 fb7a 	bl	800bf58 <sin>
 8002864:	ec53 2b10 	vmov	r2, r3, d0
 8002868:	897c      	ldrh	r4, [r7, #10]
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f7fe f99b 	bl	8000ba8 <__aeabi_d2f>
 8002872:	4602      	mov	r2, r0
 8002874:	490c      	ldr	r1, [pc, #48]	; (80028a8 <SineWavetableInit+0x6c>)
 8002876:	00a3      	lsls	r3, r4, #2
 8002878:	440b      	add	r3, r1
 800287a:	601a      	str	r2, [r3, #0]
	phase += d_phase;
 800287c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002880:	edd7 7a01 	vldr	s15, [r7, #4]
 8002884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002888:	edc7 7a03 	vstr	s15, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 800288c:	897b      	ldrh	r3, [r7, #10]
 800288e:	3301      	adds	r3, #1
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8002898:	d3db      	bcc.n	8002852 <SineWavetableInit+0x16>
  }
}
 800289a:	bf00      	nop
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	3acb7232 	.word	0x3acb7232
 80028a8:	20004438 	.word	0x20004438
 80028ac:	00000000 	.word	0x00000000

080028b0 <SawWavetableInit>:

static void SawWavetableInit() {
 80028b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
  float octaves = (int)(SAMPLE_RATE / 2.0 / 440.0);
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <SawWavetableInit+0x138>)
 80028ba:	60bb      	str	r3, [r7, #8]
  for(int octave = 1; octave < octaves; octave++) {
 80028bc:	2301      	movs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e078      	b.n	80029b4 <SawWavetableInit+0x104>
    float d_phase = (octave * 2.0f * (float)M_PI) / WAVETABLE_LEN;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028d0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80029ec <SawWavetableInit+0x13c>
 80028d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028d8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80029f0 <SawWavetableInit+0x140>
 80028dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e0:	edc7 7a01 	vstr	s15, [r7, #4]
	float phase = 0;
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
	float sign = (octave & 1) ? -1.0f : 1.0f;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <SawWavetableInit+0x48>
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <SawWavetableInit+0x144>)
 80028f6:	e001      	b.n	80028fc <SawWavetableInit+0x4c>
 80028f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028fc:	603b      	str	r3, [r7, #0]
	for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 80028fe:	2300      	movs	r3, #0
 8002900:	81fb      	strh	r3, [r7, #14]
 8002902:	e050      	b.n	80029a6 <SawWavetableInit+0xf6>
	  saw_wavetable[i] += (sign * sin(phase) / octave) * (2.0f / (float)M_PI);
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <SawWavetableInit+0x148>)
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	4604      	mov	r4, r0
 8002916:	460d      	mov	r5, r1
 8002918:	6838      	ldr	r0, [r7, #0]
 800291a:	f7fd fe15 	bl	8000548 <__aeabi_f2d>
 800291e:	4680      	mov	r8, r0
 8002920:	4689      	mov	r9, r1
 8002922:	6938      	ldr	r0, [r7, #16]
 8002924:	f7fd fe10 	bl	8000548 <__aeabi_f2d>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	ec43 2b10 	vmov	d0, r2, r3
 8002930:	f009 fb12 	bl	800bf58 <sin>
 8002934:	ec53 2b10 	vmov	r2, r3, d0
 8002938:	4640      	mov	r0, r8
 800293a:	4649      	mov	r1, r9
 800293c:	f7fd fe5c 	bl	80005f8 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4690      	mov	r8, r2
 8002946:	4699      	mov	r9, r3
 8002948:	6978      	ldr	r0, [r7, #20]
 800294a:	f7fd fdeb 	bl	8000524 <__aeabi_i2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f7fd ff79 	bl	800084c <__aeabi_ddiv>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	a31f      	add	r3, pc, #124	; (adr r3, 80029e0 <SawWavetableInit+0x130>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe46 	bl	80005f8 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fc8a 	bl	800028c <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	89fc      	ldrh	r4, [r7, #14]
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f7fe f911 	bl	8000ba8 <__aeabi_d2f>
 8002986:	4602      	mov	r2, r0
 8002988:	491b      	ldr	r1, [pc, #108]	; (80029f8 <SawWavetableInit+0x148>)
 800298a:	00a3      	lsls	r3, r4, #2
 800298c:	440b      	add	r3, r1
 800298e:	601a      	str	r2, [r3, #0]
	  phase += d_phase;
 8002990:	ed97 7a04 	vldr	s14, [r7, #16]
 8002994:	edd7 7a01 	vldr	s15, [r7, #4]
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 80029a0:	89fb      	ldrh	r3, [r7, #14]
 80029a2:	3301      	adds	r3, #1
 80029a4:	81fb      	strh	r3, [r7, #14]
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 80029ac:	d3aa      	bcc.n	8002904 <SawWavetableInit+0x54>
  for(int octave = 1; octave < octaves; octave++) {
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029be:	ed97 7a02 	vldr	s14, [r7, #8]
 80029c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	f73f af7a 	bgt.w	80028c2 <SawWavetableInit+0x12>
	  }
	}
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029da:	bf00      	nop
 80029dc:	f3af 8000 	nop.w
 80029e0:	60000000 	.word	0x60000000
 80029e4:	3fe45f30 	.word	0x3fe45f30
 80029e8:	42580000 	.word	0x42580000
 80029ec:	40490fdb 	.word	0x40490fdb
 80029f0:	457d0000 	.word	0x457d0000
 80029f4:	bf800000 	.word	0xbf800000
 80029f8:	200004f8 	.word	0x200004f8

080029fc <Wavetable_Init>:

void Wavetable_Init(Wavetable_State *state, uint8_t wave) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
  if (!wavetables_initialized) {
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <Wavetable_Init+0x7c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <Wavetable_Init+0x1c>
    SineWavetableInit();
 8002a10:	f7ff ff14 	bl	800283c <SineWavetableInit>
    SawWavetableInit();
 8002a14:	f7ff ff4c 	bl	80028b0 <SawWavetableInit>
  }

  state->wave = wave;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	701a      	strb	r2, [r3, #0]
  state->phase = 0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	605a      	str	r2, [r3, #4]
  state->pitch_midi = 0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	731a      	strb	r2, [r3, #12]
  state->pitch_hz = 0;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a3a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002a7c <Wavetable_Init+0x80>
 8002a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a42:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002a80 <Wavetable_Init+0x84>
 8002a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	edc3 7a02 	vstr	s15, [r3, #8]

  ADSR_Init(&state->adsr_state, DEFAULT_ATTACK, DEFAULT_DECAY, DEFAULT_SUSTAIN, DEFAULT_RELEASE, DEFAULT_SCALE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3314      	adds	r3, #20
 8002a54:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8002a58:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8002a84 <Wavetable_Init+0x88>
 8002a5c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8002a88 <Wavetable_Init+0x8c>
 8002a60:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002a8c <Wavetable_Init+0x90>
 8002a64:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002a84 <Wavetable_Init+0x88>
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fa6f 	bl	8000f4c <ADSR_Init>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20008378 	.word	0x20008378
 8002a7c:	473b8000 	.word	0x473b8000
 8002a80:	457d0000 	.word	0x457d0000
 8002a84:	3dcccccd 	.word	0x3dcccccd
 8002a88:	3f4ccccd 	.word	0x3f4ccccd
 8002a8c:	3d4ccccd 	.word	0x3d4ccccd

08002a90 <Wavetable_NoteOn>:

void Wavetable_NoteOn(Wavetable_State *state, uint8_t pitch_midi) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  state->phase = 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
  state->pitch_midi = pitch_midi;
 8002aa4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	731a      	strb	r2, [r3, #12]
  state->pitch_hz = PitchToFreq(pitch_midi);
 8002aac:	78fb      	ldrb	r3, [r7, #3]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fe88 	bl	80027c4 <PitchToFreq>
 8002ab4:	eef0 7a40 	vmov.f32	s15, s0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	edc3 7a04 	vstr	s15, [r3, #16]
  state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ac4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002ae4 <Wavetable_NoteOn+0x54>
 8002ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002acc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002ae8 <Wavetable_NoteOn+0x58>
 8002ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	473b8000 	.word	0x473b8000
 8002ae8:	457d0000 	.word	0x457d0000

08002aec <Wavetable_GetSamples>:
	state->pitch_hz = 0;
	state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
  }
}

void Wavetable_GetSamples(Wavetable_State *state, float *buffer, int num_frames) {
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  float sample;
  for (uint32_t i = 0; i<num_frames; i++) {
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e03a      	b.n	8002b74 <Wavetable_GetSamples+0x88>
    sample = sine_wavetable[(uint32_t)state->phase];
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b08:	ee17 3a90 	vmov	r3, s15
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <Wavetable_GetSamples+0xa0>)
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	613b      	str	r3, [r7, #16]
	buffer[2*i] = sample;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	601a      	str	r2, [r3, #0]
	buffer[2*i+1] = sample;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	3304      	adds	r3, #4
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	601a      	str	r2, [r3, #0]
	state->phase += state->d_phase;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	edc3 7a01 	vstr	s15, [r3, #4]
	if (state->phase > WAVETABLE_LEN) {
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b4c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002b90 <Wavetable_GetSamples+0xa4>
 8002b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	dd09      	ble.n	8002b6e <Wavetable_GetSamples+0x82>
      state->phase -= WAVETABLE_LEN;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b60:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b90 <Wavetable_GetSamples+0xa4>
 8002b64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	edc3 7a01 	vstr	s15, [r3, #4]
  for (uint32_t i = 0; i<num_frames; i++) {
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d3c0      	bcc.n	8002afe <Wavetable_GetSamples+0x12>
	}
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20004438 	.word	0x20004438
 8002b90:	457d0000 	.word	0x457d0000

08002b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b98:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b9a:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b9c:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba0:	e002      	b.n	8002ba8 <LoopCopyDataInit>

08002ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba6:	3304      	adds	r3, #4

08002ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bac:	d3f9      	bcc.n	8002ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bae:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bb0:	4c0b      	ldr	r4, [pc, #44]	; (8002be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb4:	e001      	b.n	8002bba <LoopFillZerobss>

08002bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb8:	3204      	adds	r2, #4

08002bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bbc:	d3fb      	bcc.n	8002bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bbe:	f7ff fc0d 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bc2:	f008 f9a1 	bl	800af08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc6:	f7fe ff41 	bl	8001a4c <main>
  bx  lr    
 8002bca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002bd8:	0800e520 	.word	0x0800e520
  ldr r2, =_sbss
 8002bdc:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002be0:	20008b40 	.word	0x20008b40

08002be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be4:	e7fe      	b.n	8002be4 <ADC_IRQHandler>
	...

08002be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_Init+0x40>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <HAL_Init+0x40>)
 8002bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_Init+0x40>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_Init+0x40>)
 8002bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_Init+0x40>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a07      	ldr	r2, [pc, #28]	; (8002c28 <HAL_Init+0x40>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c10:	2003      	movs	r0, #3
 8002c12:	f000 f94f 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f000 f808 	bl	8002c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c1c:	f7ff f876 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00

08002c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_InitTick+0x54>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_InitTick+0x58>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f967 	bl	8002f1e <HAL_SYSTICK_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00e      	b.n	8002c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d80a      	bhi.n	8002c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c60:	2200      	movs	r2, #0
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c68:	f000 f92f 	bl	8002eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c6c:	4a06      	ldr	r2, [pc, #24]	; (8002c88 <HAL_InitTick+0x5c>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	e000      	b.n	8002c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20000008 	.word	0x20000008
 8002c84:	20000014 	.word	0x20000014
 8002c88:	20000010 	.word	0x20000010

08002c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_IncTick+0x20>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <HAL_IncTick+0x24>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_IncTick+0x24>)
 8002c9e:	6013      	str	r3, [r2, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000014 	.word	0x20000014
 8002cb0:	2000837c 	.word	0x2000837c

08002cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_GetTick+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	2000837c 	.word	0x2000837c

08002ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd4:	f7ff ffee 	bl	8002cb4 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce4:	d005      	beq.n	8002cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_Delay+0x44>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf2:	bf00      	nop
 8002cf4:	f7ff ffde 	bl	8002cb4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d8f7      	bhi.n	8002cf4 <HAL_Delay+0x28>
  {
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000014 	.word	0x20000014

08002d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60d3      	str	r3, [r2, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	db0b      	blt.n	8002da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 021f 	and.w	r2, r3, #31
 8002d90:	4907      	ldr	r1, [pc, #28]	; (8002db0 <__NVIC_EnableIRQ+0x38>)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2001      	movs	r0, #1
 8002d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	e000e100 	.word	0xe000e100

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	; (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	; (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e80:	d301      	bcc.n	8002e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <SysTick_Config+0x40>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8e:	210f      	movs	r1, #15
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e94:	f7ff ff8e 	bl	8002db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SysTick_Config+0x40>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <SysTick_Config+0x40>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff29 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff3e 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff8e 	bl	8002e08 <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5d 	bl	8002db4 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff ff31 	bl	8002d78 <__NVIC_EnableIRQ>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b082      	sub	sp, #8
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ffa2 	bl	8002e70 <SysTick_Config>
 8002f2c:	4603      	mov	r3, r0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f44:	f7ff feb6 	bl	8002cb4 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e099      	b.n	8003088 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f74:	e00f      	b.n	8002f96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f76:	f7ff fe9d 	bl	8002cb4 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d908      	bls.n	8002f96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2203      	movs	r2, #3
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e078      	b.n	8003088 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e8      	bne.n	8002f76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_DMA_Init+0x158>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d107      	bne.n	8003000 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f023 0307 	bic.w	r3, r3, #7
 8003016:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2b04      	cmp	r3, #4
 8003028:	d117      	bne.n	800305a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fa6f 	bl	8003520 <DMA_CheckFifoParam>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2240      	movs	r2, #64	; 0x40
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003056:	2301      	movs	r3, #1
 8003058:	e016      	b.n	8003088 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa26 	bl	80034b4 <DMA_CalcBaseAndBitshift>
 8003068:	4603      	mov	r3, r0
 800306a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003070:	223f      	movs	r2, #63	; 0x3f
 8003072:	409a      	lsls	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	f010803f 	.word	0xf010803f

08003094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_DMA_Start_IT+0x26>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e040      	b.n	800313c <HAL_DMA_Start_IT+0xa8>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d12f      	bne.n	800312e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f9b8 	bl	8003458 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	223f      	movs	r2, #63	; 0x3f
 80030ee:	409a      	lsls	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0216 	orr.w	r2, r2, #22
 8003102:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0208 	orr.w	r2, r2, #8
 800311a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e005      	b.n	800313a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003150:	4b8e      	ldr	r3, [pc, #568]	; (800338c <HAL_DMA_IRQHandler+0x248>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a8e      	ldr	r2, [pc, #568]	; (8003390 <HAL_DMA_IRQHandler+0x24c>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0a9b      	lsrs	r3, r3, #10
 800315c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	2208      	movs	r2, #8
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4013      	ands	r3, r2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01a      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2208      	movs	r2, #8
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2201      	movs	r2, #1
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2201      	movs	r2, #1
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f043 0202 	orr.w	r2, r3, #2
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ea:	2204      	movs	r2, #4
 80031ec:	409a      	lsls	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d012      	beq.n	800321c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2204      	movs	r2, #4
 800320a:	409a      	lsls	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	2210      	movs	r2, #16
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d043      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d03c      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	2210      	movs	r2, #16
 8003240:	409a      	lsls	r2, r3
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d018      	beq.n	8003286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d024      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	e01f      	b.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
 8003284:	e016      	b.n	80032b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0208 	bic.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	2220      	movs	r2, #32
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 808f 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 8087 	beq.w	80033e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2220      	movs	r2, #32
 80032dc:	409a      	lsls	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b05      	cmp	r3, #5
 80032ec:	d136      	bne.n	800335c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0216 	bic.w	r2, r2, #22
 80032fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d103      	bne.n	800331e <HAL_DMA_IRQHandler+0x1da>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0208 	bic.w	r2, r2, #8
 800332c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003332:	223f      	movs	r2, #63	; 0x3f
 8003334:	409a      	lsls	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d07e      	beq.n	8003450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
        }
        return;
 800335a:	e079      	b.n	8003450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	2b00      	cmp	r3, #0
 800337e:	d031      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e02c      	b.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
 800338a:	bf00      	nop
 800338c:	20000008 	.word	0x20000008
 8003390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d023      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
 80033a4:	e01e      	b.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0210 	bic.w	r2, r2, #16
 80033c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d032      	beq.n	8003452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d022      	beq.n	800343e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2205      	movs	r2, #5
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3301      	adds	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	429a      	cmp	r2, r3
 800341a:	d307      	bcc.n	800342c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f2      	bne.n	8003410 <HAL_DMA_IRQHandler+0x2cc>
 800342a:	e000      	b.n	800342e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800342c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
 800344e:	e000      	b.n	8003452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003450:	bf00      	nop
    }
  }
}
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003474:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d108      	bne.n	8003498 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003496:	e007      	b.n	80034a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	3b10      	subs	r3, #16
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <DMA_CalcBaseAndBitshift+0x64>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ce:	4a13      	ldr	r2, [pc, #76]	; (800351c <DMA_CalcBaseAndBitshift+0x68>)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d909      	bls.n	80034f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	1d1a      	adds	r2, r3, #4
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	; 0x58
 80034f4:	e007      	b.n	8003506 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034fe:	f023 0303 	bic.w	r3, r3, #3
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	aaaaaaab 	.word	0xaaaaaaab
 800351c:	0800e268 	.word	0x0800e268

08003520 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11f      	bne.n	800357a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d856      	bhi.n	80035ee <DMA_CheckFifoParam+0xce>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <DMA_CheckFifoParam+0x28>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003559 	.word	0x08003559
 800354c:	0800356b 	.word	0x0800356b
 8003550:	08003559 	.word	0x08003559
 8003554:	080035ef 	.word	0x080035ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d046      	beq.n	80035f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e043      	b.n	80035f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003572:	d140      	bne.n	80035f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e03d      	b.n	80035f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003582:	d121      	bne.n	80035c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d837      	bhi.n	80035fa <DMA_CheckFifoParam+0xda>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <DMA_CheckFifoParam+0x70>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035a7 	.word	0x080035a7
 8003598:	080035a1 	.word	0x080035a1
 800359c:	080035b9 	.word	0x080035b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      break;
 80035a4:	e030      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d025      	beq.n	80035fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035b6:	e022      	b.n	80035fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035c0:	d11f      	bne.n	8003602 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035c6:	e01c      	b.n	8003602 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d903      	bls.n	80035d6 <DMA_CheckFifoParam+0xb6>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d003      	beq.n	80035dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035d4:	e018      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
      break;
 80035da:	e015      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00e      	beq.n	8003606 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
      break;
 80035ec:	e00b      	b.n	8003606 <DMA_CheckFifoParam+0xe6>
      break;
 80035ee:	bf00      	nop
 80035f0:	e00a      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f2:	bf00      	nop
 80035f4:	e008      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035f6:	bf00      	nop
 80035f8:	e006      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fa:	bf00      	nop
 80035fc:	e004      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;   
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
    }
  } 
  
  return status; 
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop

08003618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e159      	b.n	80038e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	f040 8148 	bne.w	80038e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	2b01      	cmp	r3, #1
 800365c:	d005      	beq.n	800366a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003666:	2b02      	cmp	r3, #2
 8003668:	d130      	bne.n	80036cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	2203      	movs	r2, #3
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036a0:	2201      	movs	r2, #1
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 0201 	and.w	r2, r3, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d017      	beq.n	8003708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4313      	orrs	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d123      	bne.n	800375c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	08da      	lsrs	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3208      	adds	r2, #8
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	220f      	movs	r2, #15
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	08da      	lsrs	r2, r3, #3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3208      	adds	r2, #8
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0203 	and.w	r2, r3, #3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a2 	beq.w	80038e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	4b57      	ldr	r3, [pc, #348]	; (8003900 <HAL_GPIO_Init+0x2e8>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a56      	ldr	r2, [pc, #344]	; (8003900 <HAL_GPIO_Init+0x2e8>)
 80037a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b54      	ldr	r3, [pc, #336]	; (8003900 <HAL_GPIO_Init+0x2e8>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ba:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_GPIO_Init+0x2ec>)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	220f      	movs	r2, #15
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a49      	ldr	r2, [pc, #292]	; (8003908 <HAL_GPIO_Init+0x2f0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d019      	beq.n	800381a <HAL_GPIO_Init+0x202>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a48      	ldr	r2, [pc, #288]	; (800390c <HAL_GPIO_Init+0x2f4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_GPIO_Init+0x1fe>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a47      	ldr	r2, [pc, #284]	; (8003910 <HAL_GPIO_Init+0x2f8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00d      	beq.n	8003812 <HAL_GPIO_Init+0x1fa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a46      	ldr	r2, [pc, #280]	; (8003914 <HAL_GPIO_Init+0x2fc>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <HAL_GPIO_Init+0x1f6>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a45      	ldr	r2, [pc, #276]	; (8003918 <HAL_GPIO_Init+0x300>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_GPIO_Init+0x1f2>
 8003806:	2304      	movs	r3, #4
 8003808:	e008      	b.n	800381c <HAL_GPIO_Init+0x204>
 800380a:	2307      	movs	r3, #7
 800380c:	e006      	b.n	800381c <HAL_GPIO_Init+0x204>
 800380e:	2303      	movs	r3, #3
 8003810:	e004      	b.n	800381c <HAL_GPIO_Init+0x204>
 8003812:	2302      	movs	r3, #2
 8003814:	e002      	b.n	800381c <HAL_GPIO_Init+0x204>
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_GPIO_Init+0x204>
 800381a:	2300      	movs	r3, #0
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f002 0203 	and.w	r2, r2, #3
 8003822:	0092      	lsls	r2, r2, #2
 8003824:	4093      	lsls	r3, r2
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800382c:	4935      	ldr	r1, [pc, #212]	; (8003904 <HAL_GPIO_Init+0x2ec>)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_GPIO_Init+0x304>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <HAL_GPIO_Init+0x304>)
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003864:	4b2d      	ldr	r3, [pc, #180]	; (800391c <HAL_GPIO_Init+0x304>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003888:	4a24      	ldr	r2, [pc, #144]	; (800391c <HAL_GPIO_Init+0x304>)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800388e:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_GPIO_Init+0x304>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b2:	4a1a      	ldr	r2, [pc, #104]	; (800391c <HAL_GPIO_Init+0x304>)
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b8:	4b18      	ldr	r3, [pc, #96]	; (800391c <HAL_GPIO_Init+0x304>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_GPIO_Init+0x304>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	f67f aea2 	bls.w	8003634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40013800 	.word	0x40013800
 8003908:	40020000 	.word	0x40020000
 800390c:	40020400 	.word	0x40020400
 8003910:	40020800 	.word	0x40020800
 8003914:	40020c00 	.word	0x40020c00
 8003918:	40021000 	.word	0x40021000
 800391c:	40013c00 	.word	0x40013c00

08003920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	807b      	strh	r3, [r7, #2]
 800392c:	4613      	mov	r3, r2
 800392e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003930:	787b      	ldrb	r3, [r7, #1]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800393c:	e003      	b.n	8003946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800393e:	887b      	ldrh	r3, [r7, #2]
 8003940:	041a      	lsls	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	619a      	str	r2, [r3, #24]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr

08003952 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003954:	b08f      	sub	sp, #60	; 0x3c
 8003956:	af0a      	add	r7, sp, #40	; 0x28
 8003958:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e054      	b.n	8003a0e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f007 f812 	bl	800a9a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2203      	movs	r2, #3
 8003988:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f003 feea 	bl	800777c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	687e      	ldr	r6, [r7, #4]
 80039b0:	466d      	mov	r5, sp
 80039b2:	f106 0410 	add.w	r4, r6, #16
 80039b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80039c6:	1d33      	adds	r3, r6, #4
 80039c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	f003 fe64 	bl	8007698 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f003 fee1 	bl	800779e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	603b      	str	r3, [r7, #0]
 80039e2:	687e      	ldr	r6, [r7, #4]
 80039e4:	466d      	mov	r5, sp
 80039e6:	f106 0410 	add.w	r4, r6, #16
 80039ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039fa:	1d33      	adds	r3, r6, #4
 80039fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039fe:	6838      	ldr	r0, [r7, #0]
 8003a00:	f004 f86a 	bl	8007ad8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a16 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003a16:	b590      	push	{r4, r7, lr}
 8003a18:	b089      	sub	sp, #36	; 0x24
 8003a1a:	af04      	add	r7, sp, #16
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	4608      	mov	r0, r1
 8003a20:	4611      	mov	r1, r2
 8003a22:	461a      	mov	r2, r3
 8003a24:	4603      	mov	r3, r0
 8003a26:	70fb      	strb	r3, [r7, #3]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	70bb      	strb	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_HCD_HC_Init+0x28>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e076      	b.n	8003b2c <HAL_HCD_HC_Init+0x116>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	333d      	adds	r3, #61	; 0x3d
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3338      	adds	r3, #56	; 0x38
 8003a66:	787a      	ldrb	r2, [r7, #1]
 8003a68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3340      	adds	r3, #64	; 0x40
 8003a78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a7a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3339      	adds	r3, #57	; 0x39
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	333f      	adds	r3, #63	; 0x3f
 8003a9c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003aa0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	78ba      	ldrb	r2, [r7, #2]
 8003aa6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aaa:	b2d0      	uxtb	r0, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	333a      	adds	r3, #58	; 0x3a
 8003ab8:	4602      	mov	r2, r0
 8003aba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003abc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da09      	bge.n	8003ad8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	333b      	adds	r3, #59	; 0x3b
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e008      	b.n	8003aea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	333b      	adds	r3, #59	; 0x3b
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	333c      	adds	r3, #60	; 0x3c
 8003af8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003afc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	787c      	ldrb	r4, [r7, #1]
 8003b04:	78ba      	ldrb	r2, [r7, #2]
 8003b06:	78f9      	ldrb	r1, [r7, #3]
 8003b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b0a:	9302      	str	r3, [sp, #8]
 8003b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	4623      	mov	r3, r4
 8003b1a:	f004 f963 	bl	8007de4 <USB_HC_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd90      	pop	{r4, r7, pc}

08003b34 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_HCD_HC_Halt+0x1e>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e00f      	b.n	8003b72 <HAL_HCD_HC_Halt+0x3e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 fbb3 	bl	80082ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	70fb      	strb	r3, [r7, #3]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	70bb      	strb	r3, [r7, #2]
 8003b92:	4613      	mov	r3, r2
 8003b94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	333b      	adds	r3, #59	; 0x3b
 8003ba4:	78ba      	ldrb	r2, [r7, #2]
 8003ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	212c      	movs	r1, #44	; 0x2c
 8003bae:	fb01 f303 	mul.w	r3, r1, r3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	333f      	adds	r3, #63	; 0x3f
 8003bb6:	787a      	ldrb	r2, [r7, #1]
 8003bb8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003bba:	7c3b      	ldrb	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d112      	bne.n	8003be6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3342      	adds	r3, #66	; 0x42
 8003bce:	2203      	movs	r2, #3
 8003bd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	212c      	movs	r1, #44	; 0x2c
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	333d      	adds	r3, #61	; 0x3d
 8003be0:	7f3a      	ldrb	r2, [r7, #28]
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e008      	b.n	8003bf8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3342      	adds	r3, #66	; 0x42
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003bf8:	787b      	ldrb	r3, [r7, #1]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	f200 80c6 	bhi.w	8003d8c <HAL_HCD_HC_SubmitRequest+0x210>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003d79 	.word	0x08003d79
 8003c10:	08003c7d 	.word	0x08003c7d
 8003c14:	08003cfb 	.word	0x08003cfb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003c18:	7c3b      	ldrb	r3, [r7, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	f040 80b8 	bne.w	8003d90 <HAL_HCD_HC_SubmitRequest+0x214>
 8003c20:	78bb      	ldrb	r3, [r7, #2]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80b4 	bne.w	8003d90 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003c28:	8b3b      	ldrh	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d108      	bne.n	8003c40 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	212c      	movs	r1, #44	; 0x2c
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	4413      	add	r3, r2
 8003c3a:	3355      	adds	r3, #85	; 0x55
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	212c      	movs	r1, #44	; 0x2c
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3355      	adds	r3, #85	; 0x55
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	212c      	movs	r1, #44	; 0x2c
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	3342      	adds	r3, #66	; 0x42
 8003c62:	2200      	movs	r2, #0
 8003c64:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c66:	e093      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3342      	adds	r3, #66	; 0x42
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
      break;
 8003c7a:	e089      	b.n	8003d90 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003c7c:	78bb      	ldrb	r3, [r7, #2]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d11d      	bne.n	8003cbe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	212c      	movs	r1, #44	; 0x2c
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3355      	adds	r3, #85	; 0x55
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3342      	adds	r3, #66	; 0x42
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003ca8:	e073      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	212c      	movs	r1, #44	; 0x2c
 8003cb0:	fb01 f303 	mul.w	r3, r1, r3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3342      	adds	r3, #66	; 0x42
 8003cb8:	2202      	movs	r2, #2
 8003cba:	701a      	strb	r2, [r3, #0]
      break;
 8003cbc:	e069      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	212c      	movs	r1, #44	; 0x2c
 8003cc4:	fb01 f303 	mul.w	r3, r1, r3
 8003cc8:	4413      	add	r3, r2
 8003cca:	3354      	adds	r3, #84	; 0x54
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	212c      	movs	r1, #44	; 0x2c
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	4413      	add	r3, r2
 8003cde:	3342      	adds	r3, #66	; 0x42
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]
      break;
 8003ce4:	e055      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3342      	adds	r3, #66	; 0x42
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	701a      	strb	r2, [r3, #0]
      break;
 8003cf8:	e04b      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003cfa:	78bb      	ldrb	r3, [r7, #2]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11d      	bne.n	8003d3c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	212c      	movs	r1, #44	; 0x2c
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3355      	adds	r3, #85	; 0x55
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	212c      	movs	r1, #44	; 0x2c
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	3342      	adds	r3, #66	; 0x42
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003d26:	e034      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3342      	adds	r3, #66	; 0x42
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      break;
 8003d3a:	e02a      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3354      	adds	r3, #84	; 0x54
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3342      	adds	r3, #66	; 0x42
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
      break;
 8003d62:	e016      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3342      	adds	r3, #66	; 0x42
 8003d72:	2202      	movs	r2, #2
 8003d74:	701a      	strb	r2, [r3, #0]
      break;
 8003d76:	e00c      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	212c      	movs	r1, #44	; 0x2c
 8003d7e:	fb01 f303 	mul.w	r3, r1, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	3342      	adds	r3, #66	; 0x42
 8003d86:	2200      	movs	r2, #0
 8003d88:	701a      	strb	r2, [r3, #0]
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003d90:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	212c      	movs	r1, #44	; 0x2c
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3344      	adds	r3, #68	; 0x44
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	8b3a      	ldrh	r2, [r7, #24]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	202c      	movs	r0, #44	; 0x2c
 8003dac:	fb00 f303 	mul.w	r3, r0, r3
 8003db0:	440b      	add	r3, r1
 8003db2:	334c      	adds	r3, #76	; 0x4c
 8003db4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	212c      	movs	r1, #44	; 0x2c
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	3360      	adds	r3, #96	; 0x60
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3350      	adds	r3, #80	; 0x50
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3339      	adds	r3, #57	; 0x39
 8003de8:	78fa      	ldrb	r2, [r7, #3]
 8003dea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	212c      	movs	r1, #44	; 0x2c
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	3361      	adds	r3, #97	; 0x61
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	222c      	movs	r2, #44	; 0x2c
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	3338      	adds	r3, #56	; 0x38
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	18d1      	adds	r1, r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	f004 f906 	bl	8008028 <USB_HC_StartXfer>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop

08003e28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 fe07 	bl	8007a52 <USB_GetMode>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	f040 80f6 	bne.w	8004038 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f003 fdeb 	bl	8007a2c <USB_ReadInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 80ec 	beq.w	8004036 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f003 fde2 	bl	8007a2c <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e72:	d104      	bne.n	8003e7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f003 fdd2 	bl	8007a2c <USB_ReadInterrupts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e92:	d104      	bne.n	8003e9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f003 fdc2 	bl	8007a2c <USB_ReadInterrupts>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb2:	d104      	bne.n	8003ebe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ebc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f003 fdb2 	bl	8007a2c <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d103      	bne.n	8003eda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f003 fda4 	bl	8007a2c <USB_ReadInterrupts>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eee:	d11c      	bne.n	8003f2a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ef8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f0a:	2110      	movs	r1, #16
 8003f0c:	6938      	ldr	r0, [r7, #16]
 8003f0e:	f003 fc93 	bl	8007838 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f12:	6938      	ldr	r0, [r7, #16]
 8003f14:	f003 fcc4 	bl	80078a0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f003 fe9a 	bl	8007c58 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f006 fdbd 	bl	800aaa4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f003 fd7c 	bl	8007a2c <USB_ReadInterrupts>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f3e:	d102      	bne.n	8003f46 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 f89e 	bl	8005082 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fd6e 	bl	8007a2c <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d106      	bne.n	8003f68 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f006 fd86 	bl	800aa6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 fd5d 	bl	8007a2c <USB_ReadInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d101      	bne.n	8003f80 <HAL_HCD_IRQHandler+0x158>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_HCD_IRQHandler+0x15a>
 8003f80:	2300      	movs	r3, #0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d012      	beq.n	8003fac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699a      	ldr	r2, [r3, #24]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0210 	bic.w	r2, r2, #16
 8003f94:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 ffa1 	bl	8004ede <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0210 	orr.w	r2, r2, #16
 8003faa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fd3b 	bl	8007a2c <USB_ReadInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc0:	d13a      	bne.n	8004038 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 f970 	bl	80082ac <USB_HC_ReadInterrupt>
 8003fcc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e025      	b.n	8004020 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d018      	beq.n	800401a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffe:	d106      	bne.n	800400e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8ab 	bl	8004162 <HCD_HC_IN_IRQHandler>
 800400c:	e005      	b.n	800401a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fbf9 	bl	800480c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	429a      	cmp	r2, r3
 8004028:	d3d4      	bcc.n	8003fd4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004032:	615a      	str	r2, [r3, #20]
 8004034:	e000      	b.n	8004038 <HAL_HCD_IRQHandler+0x210>
      return;
 8004036:	bf00      	nop
    }
  }
}
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_HCD_Start+0x16>
 8004050:	2302      	movs	r3, #2
 8004052:	e013      	b.n	800407c <HAL_HCD_Start+0x3e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f003 fe5c 	bl	8007d20 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f003 fb74 	bl	800775a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_HCD_Stop+0x16>
 8004096:	2302      	movs	r3, #2
 8004098:	e00d      	b.n	80040b6 <HAL_HCD_Stop+0x32>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f004 fa4a 	bl	8008540 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fdfe 	bl	8007ccc <USB_ResetPort>
 80040d0:	4603      	mov	r3, r0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	460b      	mov	r3, r1
 80040e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	3360      	adds	r3, #96	; 0x60
 80040f4:	781b      	ldrb	r3, [r3, #0]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3350      	adds	r3, #80	; 0x50
 800411c:	681b      	ldr	r3, [r3, #0]
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fe42 	bl	8007dc0 <USB_GetCurrentFrame>
 800413c:	4603      	mov	r3, r0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f003 fe1d 	bl	8007d92 <USB_GetHostSpeed>
 8004158:	4603      	mov	r3, r0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d11a      	bne.n	80041c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	461a      	mov	r2, r3
 80041a0:	2304      	movs	r3, #4
 80041a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3361      	adds	r3, #97	; 0x61
 80041b2:	2206      	movs	r2, #6
 80041b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f004 f884 	bl	80082ce <USB_HC_Halt>
 80041c6:	e0af      	b.n	8004328 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041de:	d11b      	bne.n	8004218 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	461a      	mov	r2, r3
 80041ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	212c      	movs	r1, #44	; 0x2c
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	4413      	add	r3, r2
 8004200:	3361      	adds	r3, #97	; 0x61
 8004202:	2207      	movs	r2, #7
 8004204:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f004 f85c 	bl	80082ce <USB_HC_Halt>
 8004216:	e087      	b.n	8004328 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d109      	bne.n	8004242 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	461a      	mov	r2, r3
 800423c:	2320      	movs	r3, #32
 800423e:	6093      	str	r3, [r2, #8]
 8004240:	e072      	b.n	8004328 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	4413      	add	r3, r2
 800424a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d11a      	bne.n	800428e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	4413      	add	r3, r2
 8004260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004264:	461a      	mov	r2, r3
 8004266:	2308      	movs	r3, #8
 8004268:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3361      	adds	r3, #97	; 0x61
 8004278:	2205      	movs	r2, #5
 800427a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f004 f821 	bl	80082ce <USB_HC_Halt>
 800428c:	e04c      	b.n	8004328 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	d11b      	bne.n	80042de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b2:	461a      	mov	r2, r3
 80042b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	3361      	adds	r3, #97	; 0x61
 80042c8:	2208      	movs	r2, #8
 80042ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f003 fff9 	bl	80082ce <USB_HC_Halt>
 80042dc:	e024      	b.n	8004328 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d119      	bne.n	8004328 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004300:	461a      	mov	r2, r3
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3361      	adds	r3, #97	; 0x61
 8004314:	2206      	movs	r2, #6
 8004316:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f003 ffd3 	bl	80082ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433e:	d112      	bne.n	8004366 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f003 ffbf 	bl	80082ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004362:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004364:	e24e      	b.n	8004804 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b01      	cmp	r3, #1
 800437a:	f040 80df 	bne.w	800453c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	3348      	adds	r3, #72	; 0x48
 8004394:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	0159      	lsls	r1, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	440b      	add	r3, r1
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80043a8:	1ad2      	subs	r2, r2, r3
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	202c      	movs	r0, #44	; 0x2c
 80043b0:	fb00 f303 	mul.w	r3, r0, r3
 80043b4:	440b      	add	r3, r1
 80043b6:	3350      	adds	r3, #80	; 0x50
 80043b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3361      	adds	r3, #97	; 0x61
 80043c8:	2201      	movs	r2, #1
 80043ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	335c      	adds	r3, #92	; 0x5c
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ea:	461a      	mov	r2, r3
 80043ec:	2301      	movs	r3, #1
 80043ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	333f      	adds	r3, #63	; 0x3f
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	333f      	adds	r3, #63	; 0x3f
 8004412:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004414:	2b02      	cmp	r3, #2
 8004416:	d111      	bne.n	800443c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f003 ff53 	bl	80082ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	461a      	mov	r2, r3
 8004436:	2310      	movs	r3, #16
 8004438:	6093      	str	r3, [r2, #8]
 800443a:	e03a      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	212c      	movs	r1, #44	; 0x2c
 8004442:	fb01 f303 	mul.w	r3, r1, r3
 8004446:	4413      	add	r3, r2
 8004448:	333f      	adds	r3, #63	; 0x3f
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b03      	cmp	r3, #3
 800444e:	d009      	beq.n	8004464 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	212c      	movs	r1, #44	; 0x2c
 8004456:	fb01 f303 	mul.w	r3, r1, r3
 800445a:	4413      	add	r3, r2
 800445c:	333f      	adds	r3, #63	; 0x3f
 800445e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004460:	2b01      	cmp	r3, #1
 8004462:	d126      	bne.n	80044b2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	0151      	lsls	r1, r2, #5
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	440a      	add	r2, r1
 800447a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800447e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004482:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3360      	adds	r3, #96	; 0x60
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	b2d9      	uxtb	r1, r3
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	202c      	movs	r0, #44	; 0x2c
 80044a0:	fb00 f303 	mul.w	r3, r0, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	3360      	adds	r3, #96	; 0x60
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f006 fb07 	bl	800aac0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d12b      	bne.n	8004512 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	212c      	movs	r1, #44	; 0x2c
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	3348      	adds	r3, #72	; 0x48
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	202c      	movs	r0, #44	; 0x2c
 80044d0:	fb00 f202 	mul.w	r2, r0, r2
 80044d4:	440a      	add	r2, r1
 80044d6:	3240      	adds	r2, #64	; 0x40
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	fbb3 f3f2 	udiv	r3, r3, r2
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 818e 	beq.w	8004804 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3354      	adds	r3, #84	; 0x54
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2d8      	uxtb	r0, r3
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	212c      	movs	r1, #44	; 0x2c
 8004504:	fb01 f303 	mul.w	r3, r1, r3
 8004508:	4413      	add	r3, r2
 800450a:	3354      	adds	r3, #84	; 0x54
 800450c:	4602      	mov	r2, r0
 800450e:	701a      	strb	r2, [r3, #0]
}
 8004510:	e178      	b.n	8004804 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	212c      	movs	r1, #44	; 0x2c
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	3354      	adds	r3, #84	; 0x54
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2d8      	uxtb	r0, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	212c      	movs	r1, #44	; 0x2c
 800452e:	fb01 f303 	mul.w	r3, r1, r3
 8004532:	4413      	add	r3, r2
 8004534:	3354      	adds	r3, #84	; 0x54
 8004536:	4602      	mov	r2, r0
 8004538:	701a      	strb	r2, [r3, #0]
}
 800453a:	e163      	b.n	8004804 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	f040 80f6 	bne.w	8004740 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3361      	adds	r3, #97	; 0x61
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d109      	bne.n	800457c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3360      	adds	r3, #96	; 0x60
 8004576:	2201      	movs	r2, #1
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	e0c9      	b.n	8004710 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3361      	adds	r3, #97	; 0x61
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d109      	bne.n	80045a4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3360      	adds	r3, #96	; 0x60
 800459e:	2205      	movs	r2, #5
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e0b5      	b.n	8004710 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	212c      	movs	r1, #44	; 0x2c
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	3361      	adds	r3, #97	; 0x61
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b06      	cmp	r3, #6
 80045b6:	d009      	beq.n	80045cc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	212c      	movs	r1, #44	; 0x2c
 80045be:	fb01 f303 	mul.w	r3, r1, r3
 80045c2:	4413      	add	r3, r2
 80045c4:	3361      	adds	r3, #97	; 0x61
 80045c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d150      	bne.n	800466e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	212c      	movs	r1, #44	; 0x2c
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	4413      	add	r3, r2
 80045d8:	335c      	adds	r3, #92	; 0x5c
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	202c      	movs	r0, #44	; 0x2c
 80045e4:	fb00 f303 	mul.w	r3, r0, r3
 80045e8:	440b      	add	r3, r1
 80045ea:	335c      	adds	r3, #92	; 0x5c
 80045ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	335c      	adds	r3, #92	; 0x5c
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d912      	bls.n	8004628 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	212c      	movs	r1, #44	; 0x2c
 8004608:	fb01 f303 	mul.w	r3, r1, r3
 800460c:	4413      	add	r3, r2
 800460e:	335c      	adds	r3, #92	; 0x5c
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3360      	adds	r3, #96	; 0x60
 8004622:	2204      	movs	r2, #4
 8004624:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004626:	e073      	b.n	8004710 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	3360      	adds	r3, #96	; 0x60
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004650:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004658:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4413      	add	r3, r2
 8004662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004666:	461a      	mov	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800466c:	e050      	b.n	8004710 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	212c      	movs	r1, #44	; 0x2c
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	3361      	adds	r3, #97	; 0x61
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d122      	bne.n	80046c8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	212c      	movs	r1, #44	; 0x2c
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	4413      	add	r3, r2
 800468e:	3360      	adds	r3, #96	; 0x60
 8004690:	2202      	movs	r2, #2
 8004692:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	4413      	add	r3, r2
 800469c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	461a      	mov	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e023      	b.n	8004710 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3361      	adds	r3, #97	; 0x61
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b07      	cmp	r3, #7
 80046da:	d119      	bne.n	8004710 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	335c      	adds	r3, #92	; 0x5c
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	202c      	movs	r0, #44	; 0x2c
 80046f4:	fb00 f303 	mul.w	r3, r0, r3
 80046f8:	440b      	add	r3, r1
 80046fa:	335c      	adds	r3, #92	; 0x5c
 80046fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3360      	adds	r3, #96	; 0x60
 800470c:	2204      	movs	r2, #4
 800470e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2302      	movs	r3, #2
 8004720:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	b2d9      	uxtb	r1, r3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	202c      	movs	r0, #44	; 0x2c
 800472c:	fb00 f303 	mul.w	r3, r0, r3
 8004730:	4413      	add	r3, r2
 8004732:	3360      	adds	r3, #96	; 0x60
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f006 f9c1 	bl	800aac0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800473e:	e061      	b.n	8004804 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b10      	cmp	r3, #16
 8004754:	d156      	bne.n	8004804 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	333f      	adds	r3, #63	; 0x3f
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d111      	bne.n	800478e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	212c      	movs	r1, #44	; 0x2c
 8004770:	fb01 f303 	mul.w	r3, r1, r3
 8004774:	4413      	add	r3, r2
 8004776:	335c      	adds	r3, #92	; 0x5c
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	4611      	mov	r1, r2
 8004786:	4618      	mov	r0, r3
 8004788:	f003 fda1 	bl	80082ce <USB_HC_Halt>
 800478c:	e031      	b.n	80047f2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	333f      	adds	r3, #63	; 0x3f
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	212c      	movs	r1, #44	; 0x2c
 80047a8:	fb01 f303 	mul.w	r3, r1, r3
 80047ac:	4413      	add	r3, r2
 80047ae:	333f      	adds	r3, #63	; 0x3f
 80047b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d11d      	bne.n	80047f2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	335c      	adds	r3, #92	; 0x5c
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d110      	bne.n	80047f2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	212c      	movs	r1, #44	; 0x2c
 80047d6:	fb01 f303 	mul.w	r3, r1, r3
 80047da:	4413      	add	r3, r2
 80047dc:	3361      	adds	r3, #97	; 0x61
 80047de:	2203      	movs	r2, #3
 80047e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f003 fd6e 	bl	80082ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fe:	461a      	mov	r2, r3
 8004800:	2310      	movs	r3, #16
 8004802:	6093      	str	r3, [r2, #8]
}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	4413      	add	r3, r2
 800482e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d11a      	bne.n	8004872 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	461a      	mov	r2, r3
 800484a:	2304      	movs	r3, #4
 800484c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3361      	adds	r3, #97	; 0x61
 800485c:	2206      	movs	r2, #6
 800485e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f003 fd2f 	bl	80082ce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004870:	e331      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b20      	cmp	r3, #32
 8004886:	d12e      	bne.n	80048e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004894:	461a      	mov	r2, r3
 8004896:	2320      	movs	r3, #32
 8004898:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	333d      	adds	r3, #61	; 0x3d
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	f040 8313 	bne.w	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	212c      	movs	r1, #44	; 0x2c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	333d      	adds	r3, #61	; 0x3d
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3360      	adds	r3, #96	; 0x60
 80048d0:	2202      	movs	r2, #2
 80048d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f003 fcf5 	bl	80082ce <USB_HC_Halt>
}
 80048e4:	e2f7      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048fc:	d112      	bne.n	8004924 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4413      	add	r3, r2
 8004906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490a:	461a      	mov	r2, r3
 800490c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004910:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	4611      	mov	r1, r2
 800491c:	4618      	mov	r0, r3
 800491e:	f003 fcd6 	bl	80082ce <USB_HC_Halt>
}
 8004922:	e2d8      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d140      	bne.n	80049bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	212c      	movs	r1, #44	; 0x2c
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	4413      	add	r3, r2
 8004946:	335c      	adds	r3, #92	; 0x5c
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d111      	bne.n	8004986 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	333d      	adds	r3, #61	; 0x3d
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	4413      	add	r3, r2
 800497c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004980:	461a      	mov	r2, r3
 8004982:	2340      	movs	r3, #64	; 0x40
 8004984:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	4413      	add	r3, r2
 800498e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004992:	461a      	mov	r2, r3
 8004994:	2301      	movs	r3, #1
 8004996:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	212c      	movs	r1, #44	; 0x2c
 800499e:	fb01 f303 	mul.w	r3, r1, r3
 80049a2:	4413      	add	r3, r2
 80049a4:	3361      	adds	r3, #97	; 0x61
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f003 fc8a 	bl	80082ce <USB_HC_Halt>
}
 80049ba:	e28c      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d12c      	bne.n	8004a2c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	212c      	movs	r1, #44	; 0x2c
 80049d8:	fb01 f303 	mul.w	r3, r1, r3
 80049dc:	4413      	add	r3, r2
 80049de:	3361      	adds	r3, #97	; 0x61
 80049e0:	2204      	movs	r2, #4
 80049e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	333d      	adds	r3, #61	; 0x3d
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	212c      	movs	r1, #44	; 0x2c
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	4413      	add	r3, r2
 8004a02:	335c      	adds	r3, #92	; 0x5c
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fc5b 	bl	80082ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	461a      	mov	r2, r3
 8004a26:	2340      	movs	r3, #64	; 0x40
 8004a28:	6093      	str	r3, [r2, #8]
}
 8004a2a:	e254      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	015a      	lsls	r2, r3, #5
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	4413      	add	r3, r2
 8004a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d11a      	bne.n	8004a78 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2308      	movs	r3, #8
 8004a52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	212c      	movs	r1, #44	; 0x2c
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	3361      	adds	r3, #97	; 0x61
 8004a62:	2205      	movs	r2, #5
 8004a64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f003 fc2c 	bl	80082ce <USB_HC_Halt>
}
 8004a76:	e22e      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d140      	bne.n	8004b10 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	212c      	movs	r1, #44	; 0x2c
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	4413      	add	r3, r2
 8004a9a:	335c      	adds	r3, #92	; 0x5c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	212c      	movs	r1, #44	; 0x2c
 8004aa6:	fb01 f303 	mul.w	r3, r1, r3
 8004aaa:	4413      	add	r3, r2
 8004aac:	3361      	adds	r3, #97	; 0x61
 8004aae:	2203      	movs	r2, #3
 8004ab0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	333d      	adds	r3, #61	; 0x3d
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d112      	bne.n	8004aec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	212c      	movs	r1, #44	; 0x2c
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	333c      	adds	r3, #60	; 0x3c
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	212c      	movs	r1, #44	; 0x2c
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	333d      	adds	r3, #61	; 0x3d
 8004ae8:	2201      	movs	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 fbe9 	bl	80082ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	6093      	str	r3, [r2, #8]
}
 8004b0e:	e1e2      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d164      	bne.n	8004bf0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d111      	bne.n	8004b52 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	3361      	adds	r3, #97	; 0x61
 8004b3c:	2206      	movs	r2, #6
 8004b3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 fbbf 	bl	80082ce <USB_HC_Halt>
 8004b50:	e044      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	335c      	adds	r3, #92	; 0x5c
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	202c      	movs	r0, #44	; 0x2c
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	440b      	add	r3, r1
 8004b70:	335c      	adds	r3, #92	; 0x5c
 8004b72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	212c      	movs	r1, #44	; 0x2c
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	335c      	adds	r3, #92	; 0x5c
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d920      	bls.n	8004bca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	212c      	movs	r1, #44	; 0x2c
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	335c      	adds	r3, #92	; 0x5c
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	212c      	movs	r1, #44	; 0x2c
 8004ba0:	fb01 f303 	mul.w	r3, r1, r3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3360      	adds	r3, #96	; 0x60
 8004ba8:	2204      	movs	r2, #4
 8004baa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	b2d9      	uxtb	r1, r3
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	202c      	movs	r0, #44	; 0x2c
 8004bb6:	fb00 f303 	mul.w	r3, r0, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	3360      	adds	r3, #96	; 0x60
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f005 ff7c 	bl	800aac0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bc8:	e008      	b.n	8004bdc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	212c      	movs	r1, #44	; 0x2c
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3360      	adds	r3, #96	; 0x60
 8004bd8:	2202      	movs	r2, #2
 8004bda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be8:	461a      	mov	r2, r3
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	6093      	str	r3, [r2, #8]
}
 8004bee:	e172      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	d11b      	bne.n	8004c40 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	212c      	movs	r1, #44	; 0x2c
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	3361      	adds	r3, #97	; 0x61
 8004c16:	2208      	movs	r2, #8
 8004c18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 fb52 	bl	80082ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c36:	461a      	mov	r2, r3
 8004c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c3c:	6093      	str	r3, [r2, #8]
}
 8004c3e:	e14a      	b.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	f040 813f 	bne.w	8004ed6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3361      	adds	r3, #97	; 0x61
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d17d      	bne.n	8004d68 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	212c      	movs	r1, #44	; 0x2c
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	3360      	adds	r3, #96	; 0x60
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	212c      	movs	r1, #44	; 0x2c
 8004c84:	fb01 f303 	mul.w	r3, r1, r3
 8004c88:	4413      	add	r3, r2
 8004c8a:	333f      	adds	r3, #63	; 0x3f
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d00a      	beq.n	8004ca8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	212c      	movs	r1, #44	; 0x2c
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	333f      	adds	r3, #63	; 0x3f
 8004ca0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	f040 8100 	bne.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d113      	bne.n	8004cd8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	212c      	movs	r1, #44	; 0x2c
 8004cb6:	fb01 f303 	mul.w	r3, r1, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	3355      	adds	r3, #85	; 0x55
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2d8      	uxtb	r0, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3355      	adds	r3, #85	; 0x55
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 80e3 	bne.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	212c      	movs	r1, #44	; 0x2c
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	4413      	add	r3, r2
 8004cee:	334c      	adds	r3, #76	; 0x4c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80d8 	beq.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	212c      	movs	r1, #44	; 0x2c
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	4413      	add	r3, r2
 8004d04:	334c      	adds	r3, #76	; 0x4c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	202c      	movs	r0, #44	; 0x2c
 8004d0e:	fb00 f202 	mul.w	r2, r0, r2
 8004d12:	440a      	add	r2, r1
 8004d14:	3240      	adds	r2, #64	; 0x40
 8004d16:	8812      	ldrh	r2, [r2, #0]
 8004d18:	4413      	add	r3, r2
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	202c      	movs	r0, #44	; 0x2c
 8004d22:	fb00 f202 	mul.w	r2, r0, r2
 8004d26:	440a      	add	r2, r1
 8004d28:	3240      	adds	r2, #64	; 0x40
 8004d2a:	8812      	ldrh	r2, [r2, #0]
 8004d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80b5 	beq.w	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3355      	adds	r3, #85	; 0x55
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f083 0301 	eor.w	r3, r3, #1
 8004d52:	b2d8      	uxtb	r0, r3
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	212c      	movs	r1, #44	; 0x2c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	3355      	adds	r3, #85	; 0x55
 8004d62:	4602      	mov	r2, r0
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e09f      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3361      	adds	r3, #97	; 0x61
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d109      	bne.n	8004d90 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	3360      	adds	r3, #96	; 0x60
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e08b      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	212c      	movs	r1, #44	; 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3361      	adds	r3, #97	; 0x61
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d109      	bne.n	8004db8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	212c      	movs	r1, #44	; 0x2c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	3360      	adds	r3, #96	; 0x60
 8004db2:	2202      	movs	r2, #2
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	e077      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	212c      	movs	r1, #44	; 0x2c
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3361      	adds	r3, #97	; 0x61
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d109      	bne.n	8004de0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3360      	adds	r3, #96	; 0x60
 8004dda:	2205      	movs	r2, #5
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	e063      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3361      	adds	r3, #97	; 0x61
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b06      	cmp	r3, #6
 8004df2:	d009      	beq.n	8004e08 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	212c      	movs	r1, #44	; 0x2c
 8004dfa:	fb01 f303 	mul.w	r3, r1, r3
 8004dfe:	4413      	add	r3, r2
 8004e00:	3361      	adds	r3, #97	; 0x61
 8004e02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d14f      	bne.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	212c      	movs	r1, #44	; 0x2c
 8004e0e:	fb01 f303 	mul.w	r3, r1, r3
 8004e12:	4413      	add	r3, r2
 8004e14:	335c      	adds	r3, #92	; 0x5c
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	202c      	movs	r0, #44	; 0x2c
 8004e20:	fb00 f303 	mul.w	r3, r0, r3
 8004e24:	440b      	add	r3, r1
 8004e26:	335c      	adds	r3, #92	; 0x5c
 8004e28:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	212c      	movs	r1, #44	; 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	335c      	adds	r3, #92	; 0x5c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d912      	bls.n	8004e64 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	212c      	movs	r1, #44	; 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	335c      	adds	r3, #92	; 0x5c
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3360      	adds	r3, #96	; 0x60
 8004e5e:	2204      	movs	r2, #4
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	e021      	b.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	212c      	movs	r1, #44	; 0x2c
 8004e6a:	fb01 f303 	mul.w	r3, r1, r3
 8004e6e:	4413      	add	r3, r2
 8004e70:	3360      	adds	r3, #96	; 0x60
 8004e72:	2202      	movs	r2, #2
 8004e74:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e8c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e94:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	b2d9      	uxtb	r1, r3
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	202c      	movs	r0, #44	; 0x2c
 8004ec4:	fb00 f303 	mul.w	r3, r0, r3
 8004ec8:	4413      	add	r3, r2
 8004eca:	3360      	adds	r3, #96	; 0x60
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f005 fdf5 	bl	800aac0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ed6:	bf00      	nop
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08a      	sub	sp, #40	; 0x28
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	0c5b      	lsrs	r3, r3, #17
 8004f04:	f003 030f 	and.w	r3, r3, #15
 8004f08:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f12:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d004      	beq.n	8004f24 <HCD_RXQLVL_IRQHandler+0x46>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	f000 80a9 	beq.w	8005074 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004f22:	e0aa      	b.n	800507a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80a6 	beq.w	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3344      	adds	r3, #68	; 0x44
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 809b 	beq.w	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	212c      	movs	r1, #44	; 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3350      	adds	r3, #80	; 0x50
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	441a      	add	r2, r3
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	202c      	movs	r0, #44	; 0x2c
 8004f5c:	fb00 f303 	mul.w	r3, r0, r3
 8004f60:	440b      	add	r3, r1
 8004f62:	334c      	adds	r3, #76	; 0x4c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d87a      	bhi.n	8005060 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	212c      	movs	r1, #44	; 0x2c
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	4413      	add	r3, r2
 8004f7a:	3344      	adds	r3, #68	; 0x44
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	b292      	uxth	r2, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f002 fcfa 	bl	800797c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3344      	adds	r3, #68	; 0x44
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	441a      	add	r2, r3
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	202c      	movs	r0, #44	; 0x2c
 8004fa2:	fb00 f303 	mul.w	r3, r0, r3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3344      	adds	r3, #68	; 0x44
 8004faa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	212c      	movs	r1, #44	; 0x2c
 8004fb2:	fb01 f303 	mul.w	r3, r1, r3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3350      	adds	r3, #80	; 0x50
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	441a      	add	r2, r3
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	202c      	movs	r0, #44	; 0x2c
 8004fc6:	fb00 f303 	mul.w	r3, r0, r3
 8004fca:	440b      	add	r3, r1
 8004fcc:	3350      	adds	r3, #80	; 0x50
 8004fce:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	0cdb      	lsrs	r3, r3, #19
 8004fe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3340      	adds	r3, #64	; 0x40
 8004ff4:	881b      	ldrh	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d13c      	bne.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d039      	beq.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	4413      	add	r3, r2
 800500c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800501a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005022:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	461a      	mov	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	212c      	movs	r1, #44	; 0x2c
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	4413      	add	r3, r2
 8005042:	3354      	adds	r3, #84	; 0x54
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f083 0301 	eor.w	r3, r3, #1
 800504a:	b2d8      	uxtb	r0, r3
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3354      	adds	r3, #84	; 0x54
 800505a:	4602      	mov	r2, r0
 800505c:	701a      	strb	r2, [r3, #0]
      break;
 800505e:	e00b      	b.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	212c      	movs	r1, #44	; 0x2c
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	3360      	adds	r3, #96	; 0x60
 800506e:	2204      	movs	r2, #4
 8005070:	701a      	strb	r2, [r3, #0]
      break;
 8005072:	e001      	b.n	8005078 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005078:	bf00      	nop
  }
}
 800507a:	bf00      	nop
 800507c:	3728      	adds	r7, #40	; 0x28
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050ae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d10b      	bne.n	80050d2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d102      	bne.n	80050ca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f005 fcdf 	bl	800aa88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f043 0302 	orr.w	r3, r3, #2
 80050d0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d132      	bne.n	8005142 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f043 0308 	orr.w	r3, r3, #8
 80050e2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d126      	bne.n	800513c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d113      	bne.n	800511e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80050fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005100:	d106      	bne.n	8005110 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f002 fda5 	bl	8007c58 <USB_InitFSLSPClkSel>
 800510e:	e011      	b.n	8005134 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f002 fd9e 	bl	8007c58 <USB_InitFSLSPClkSel>
 800511c:	e00a      	b.n	8005134 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d106      	bne.n	8005134 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512c:	461a      	mov	r2, r3
 800512e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005132:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f005 fcd1 	bl	800aadc <HAL_HCD_PortEnabled_Callback>
 800513a:	e002      	b.n	8005142 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f005 fcdb 	bl	800aaf8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b20      	cmp	r3, #32
 800514a:	d103      	bne.n	8005154 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800515a:	461a      	mov	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e12b      	b.n	80053d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc fb24 	bl	80017dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	; 0x24
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051cc:	f001 fe2a 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 80051d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4a81      	ldr	r2, [pc, #516]	; (80053dc <HAL_I2C_Init+0x274>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d807      	bhi.n	80051ec <HAL_I2C_Init+0x84>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a80      	ldr	r2, [pc, #512]	; (80053e0 <HAL_I2C_Init+0x278>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	bf94      	ite	ls
 80051e4:	2301      	movls	r3, #1
 80051e6:	2300      	movhi	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e006      	b.n	80051fa <HAL_I2C_Init+0x92>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a7d      	ldr	r2, [pc, #500]	; (80053e4 <HAL_I2C_Init+0x27c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	bf94      	ite	ls
 80051f4:	2301      	movls	r3, #1
 80051f6:	2300      	movhi	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0e7      	b.n	80053d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a78      	ldr	r2, [pc, #480]	; (80053e8 <HAL_I2C_Init+0x280>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	0c9b      	lsrs	r3, r3, #18
 800520c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a6a      	ldr	r2, [pc, #424]	; (80053dc <HAL_I2C_Init+0x274>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d802      	bhi.n	800523c <HAL_I2C_Init+0xd4>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3301      	adds	r3, #1
 800523a:	e009      	b.n	8005250 <HAL_I2C_Init+0xe8>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	4a69      	ldr	r2, [pc, #420]	; (80053ec <HAL_I2C_Init+0x284>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	3301      	adds	r3, #1
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	430b      	orrs	r3, r1
 8005256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	495c      	ldr	r1, [pc, #368]	; (80053dc <HAL_I2C_Init+0x274>)
 800526c:	428b      	cmp	r3, r1
 800526e:	d819      	bhi.n	80052a4 <HAL_I2C_Init+0x13c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e59      	subs	r1, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fbb1 f3f3 	udiv	r3, r1, r3
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005284:	400b      	ands	r3, r1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_I2C_Init+0x138>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1e59      	subs	r1, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fbb1 f3f3 	udiv	r3, r1, r3
 8005298:	3301      	adds	r3, #1
 800529a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529e:	e051      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 80052a0:	2304      	movs	r3, #4
 80052a2:	e04f      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d111      	bne.n	80052d0 <HAL_I2C_Init+0x168>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1e58      	subs	r0, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	440b      	add	r3, r1
 80052ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80052be:	3301      	adds	r3, #1
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e012      	b.n	80052f6 <HAL_I2C_Init+0x18e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1e58      	subs	r0, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	0099      	lsls	r1, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e6:	3301      	adds	r3, #1
 80052e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Init+0x196>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e022      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10e      	bne.n	8005324 <HAL_I2C_Init+0x1bc>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1e58      	subs	r0, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	440b      	add	r3, r1
 8005314:	fbb0 f3f3 	udiv	r3, r0, r3
 8005318:	3301      	adds	r3, #1
 800531a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005322:	e00f      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1e58      	subs	r0, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	0099      	lsls	r1, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	fbb0 f3f3 	udiv	r3, r0, r3
 800533a:	3301      	adds	r3, #1
 800533c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	6809      	ldr	r1, [r1, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6911      	ldr	r1, [r2, #16]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68d2      	ldr	r2, [r2, #12]
 800537e:	4311      	orrs	r1, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	430b      	orrs	r3, r1
 8005386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	000186a0 	.word	0x000186a0
 80053e0:	001e847f 	.word	0x001e847f
 80053e4:	003d08ff 	.word	0x003d08ff
 80053e8:	431bde83 	.word	0x431bde83
 80053ec:	10624dd3 	.word	0x10624dd3

080053f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	817b      	strh	r3, [r7, #10]
 8005402:	460b      	mov	r3, r1
 8005404:	813b      	strh	r3, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800540a:	f7fd fc53 	bl	8002cb4 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b20      	cmp	r3, #32
 800541a:	f040 80d9 	bne.w	80055d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2319      	movs	r3, #25
 8005424:	2201      	movs	r2, #1
 8005426:	496d      	ldr	r1, [pc, #436]	; (80055dc <HAL_I2C_Mem_Write+0x1ec>)
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f971 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	e0cc      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2C_Mem_Write+0x56>
 8005442:	2302      	movs	r3, #2
 8005444:	e0c5      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d007      	beq.n	800546c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2221      	movs	r2, #33	; 0x21
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2240      	movs	r2, #64	; 0x40
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800549c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a4d      	ldr	r2, [pc, #308]	; (80055e0 <HAL_I2C_Mem_Write+0x1f0>)
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054ae:	88f8      	ldrh	r0, [r7, #6]
 80054b0:	893a      	ldrh	r2, [r7, #8]
 80054b2:	8979      	ldrh	r1, [r7, #10]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	4603      	mov	r3, r0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 f890 	bl	80055e4 <I2C_RequestMemoryWrite>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d052      	beq.n	8005570 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e081      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f9f2 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e06b      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	781a      	ldrb	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d11b      	bne.n	8005570 <HAL_I2C_Mem_Write+0x180>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d017      	beq.n	8005570 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1aa      	bne.n	80054ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f9de 	bl	800593e <I2C_WaitOnBTFFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	2b04      	cmp	r3, #4
 800558e:	d107      	bne.n	80055a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e016      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	00100002 	.word	0x00100002
 80055e0:	ffff0000 	.word	0xffff0000

080055e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	2200      	movs	r2, #0
 8005616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f000 f878 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00d      	beq.n	8005642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005634:	d103      	bne.n	800563e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e05f      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005642:	897b      	ldrh	r3, [r7, #10]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	6a3a      	ldr	r2, [r7, #32]
 8005656:	492d      	ldr	r1, [pc, #180]	; (800570c <I2C_RequestMemoryWrite+0x128>)
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f8b0 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e04c      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005680:	6a39      	ldr	r1, [r7, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f91a 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b04      	cmp	r3, #4
 8005694:	d107      	bne.n	80056a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e02b      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d105      	bne.n	80056bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b0:	893b      	ldrh	r3, [r7, #8]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	611a      	str	r2, [r3, #16]
 80056ba:	e021      	b.n	8005700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056bc:	893b      	ldrh	r3, [r7, #8]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f8f4 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d107      	bne.n	80056f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e005      	b.n	8005702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f6:	893b      	ldrh	r3, [r7, #8]
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	00010002 	.word	0x00010002

08005710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005720:	e025      	b.n	800576e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005728:	d021      	beq.n	800576e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fd fac3 	bl	8002cb4 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d116      	bne.n	800576e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f043 0220 	orr.w	r2, r3, #32
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e023      	b.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10d      	bne.n	8005794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	43da      	mvns	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	e00c      	b.n	80057ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	43da      	mvns	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d0b6      	beq.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057cc:	e051      	b.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057dc:	d123      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e046      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582c:	d021      	beq.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582e:	f7fd fa41 	bl	8002cb4 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d116      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e020      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10c      	bne.n	8005896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	43da      	mvns	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e00b      	b.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	43da      	mvns	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d18d      	bne.n	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	e02d      	b.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f878 	bl	80059c0 <I2C_IsAcknowledgeFailed>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e02d      	b.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e0:	d021      	beq.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fd f9e7 	bl	8002cb4 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d116      	bne.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e007      	b.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d1ca      	bne.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800594a:	e02d      	b.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f837 	bl	80059c0 <I2C_IsAcknowledgeFailed>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e02d      	b.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005962:	d021      	beq.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005964:	f7fd f9a6 	bl	8002cb4 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d116      	bne.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e007      	b.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d1ca      	bne.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d6:	d11b      	bne.n	8005a10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e128      	b.n	8005c84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d109      	bne.n	8005a52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a90      	ldr	r2, [pc, #576]	; (8005c8c <HAL_I2S_Init+0x26c>)
 8005a4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fb ff3b 	bl	80018c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a68:	f023 030f 	bic.w	r3, r3, #15
 8005a6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2202      	movs	r2, #2
 8005a74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d060      	beq.n	8005b40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a86:	2310      	movs	r3, #16
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	e001      	b.n	8005a90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d802      	bhi.n	8005a9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f001 fad8 	bl	8007054 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aa4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aae:	d125      	bne.n	8005afc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	3305      	adds	r3, #5
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e01f      	b.n	8005b1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	461a      	mov	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	3305      	adds	r3, #5
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	e00e      	b.n	8005b1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	3305      	adds	r3, #5
 8005b18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4a5c      	ldr	r2, [pc, #368]	; (8005c90 <HAL_I2S_Init+0x270>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	08db      	lsrs	r3, r3, #3
 8005b24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	e003      	b.n	8005b48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b40:	2302      	movs	r3, #2
 8005b42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d902      	bls.n	8005b54 <HAL_I2S_Init+0x134>
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	2bff      	cmp	r3, #255	; 0xff
 8005b52:	d907      	bls.n	8005b64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b58:	f043 0210 	orr.w	r2, r3, #16
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e08f      	b.n	8005c84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	ea42 0103 	orr.w	r1, r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005b82:	f023 030f 	bic.w	r3, r3, #15
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6851      	ldr	r1, [r2, #4]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6892      	ldr	r2, [r2, #8]
 8005b8e:	4311      	orrs	r1, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68d2      	ldr	r2, [r2, #12]
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6992      	ldr	r2, [r2, #24]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d161      	bne.n	8005c74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a38      	ldr	r2, [pc, #224]	; (8005c94 <HAL_I2S_Init+0x274>)
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a37      	ldr	r2, [pc, #220]	; (8005c98 <HAL_I2S_Init+0x278>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_I2S_Init+0x1a4>
 8005bc0:	4b36      	ldr	r3, [pc, #216]	; (8005c9c <HAL_I2S_Init+0x27c>)
 8005bc2:	e001      	b.n	8005bc8 <HAL_I2S_Init+0x1a8>
 8005bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	4932      	ldr	r1, [pc, #200]	; (8005c98 <HAL_I2S_Init+0x278>)
 8005bd0:	428a      	cmp	r2, r1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_I2S_Init+0x1b8>
 8005bd4:	4a31      	ldr	r2, [pc, #196]	; (8005c9c <HAL_I2S_Init+0x27c>)
 8005bd6:	e001      	b.n	8005bdc <HAL_I2S_Init+0x1bc>
 8005bd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005bdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005be0:	f023 030f 	bic.w	r3, r3, #15
 8005be4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2b      	ldr	r2, [pc, #172]	; (8005c98 <HAL_I2S_Init+0x278>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d101      	bne.n	8005bf4 <HAL_I2S_Init+0x1d4>
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <HAL_I2S_Init+0x27c>)
 8005bf2:	e001      	b.n	8005bf8 <HAL_I2S_Init+0x1d8>
 8005bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a25      	ldr	r2, [pc, #148]	; (8005c98 <HAL_I2S_Init+0x278>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d101      	bne.n	8005c0a <HAL_I2S_Init+0x1ea>
 8005c06:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <HAL_I2S_Init+0x27c>)
 8005c08:	e001      	b.n	8005c0e <HAL_I2S_Init+0x1ee>
 8005c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c1a:	d003      	beq.n	8005c24 <HAL_I2S_Init+0x204>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e001      	b.n	8005c30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	897b      	ldrh	r3, [r7, #10]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a0d      	ldr	r2, [pc, #52]	; (8005c98 <HAL_I2S_Init+0x278>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d101      	bne.n	8005c6c <HAL_I2S_Init+0x24c>
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <HAL_I2S_Init+0x27c>)
 8005c6a:	e001      	b.n	8005c70 <HAL_I2S_Init+0x250>
 8005c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c70:	897a      	ldrh	r2, [r7, #10]
 8005c72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3720      	adds	r7, #32
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	08005f7d 	.word	0x08005f7d
 8005c90:	cccccccd 	.word	0xcccccccd
 8005c94:	08006091 	.word	0x08006091
 8005c98:	40003800 	.word	0x40003800
 8005c9c:	40003400 	.word	0x40003400

08005ca0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_I2S_Transmit_DMA+0x1a>
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e08e      	b.n	8005ddc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_I2S_Transmit_DMA+0x2e>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e086      	b.n	8005ddc <HAL_I2S_Transmit_DMA+0x13c>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d005      	beq.n	8005cee <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
 8005cec:	e076      	b.n	8005ddc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d002      	beq.n	8005d1a <HAL_I2S_Transmit_DMA+0x7a>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b05      	cmp	r3, #5
 8005d18:	d10a      	bne.n	8005d30 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d2e:	e005      	b.n	8005d3c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	88fa      	ldrh	r2, [r7, #6]
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <HAL_I2S_Transmit_DMA+0x144>)
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	4a27      	ldr	r2, [pc, #156]	; (8005de8 <HAL_I2S_Transmit_DMA+0x148>)
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	4a26      	ldr	r2, [pc, #152]	; (8005dec <HAL_I2S_Transmit_DMA+0x14c>)
 8005d52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d5c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d64:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005d6c:	f7fd f992 	bl	8003094 <HAL_DMA_Start_IT>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00f      	beq.n	8005d96 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f043 0208 	orr.w	r2, r3, #8
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e022      	b.n	8005ddc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69da      	ldr	r2, [r3, #28]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005db2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d107      	bne.n	8005dd2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0202 	orr.w	r2, r2, #2
 8005dd0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	08005e5b 	.word	0x08005e5b
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e77 	.word	0x08005e77

08005df0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10e      	bne.n	8005e4c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0202 	bic.w	r2, r2, #2
 8005e3c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7fc fa07 	bl	8002260 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7fc f9df 	bl	800222c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0203 	bic.w	r2, r2, #3
 8005e92:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eac:	f043 0208 	orr.w	r2, r3, #8
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff ffa5 	bl	8005e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	881a      	ldrh	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	1c9a      	adds	r2, r3, #2
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10e      	bne.n	8005f16 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fc f9a5 	bl	8002260 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	b292      	uxth	r2, r2
 8005f32:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	1c9a      	adds	r2, r3, #2
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3b01      	subs	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10e      	bne.n	8005f74 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f64:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ff3e 	bl	8005df0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d13a      	bne.n	800600e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d109      	bne.n	8005fb6 <I2S_IRQHandler+0x3a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d102      	bne.n	8005fb6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f7ff ffb4 	bl	8005f1e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b40      	cmp	r3, #64	; 0x40
 8005fbe:	d126      	bne.n	800600e <I2S_IRQHandler+0x92>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d11f      	bne.n	800600e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fdc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006000:	f043 0202 	orr.w	r2, r3, #2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fefb 	bl	8005e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b03      	cmp	r3, #3
 8006018:	d136      	bne.n	8006088 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b02      	cmp	r3, #2
 8006022:	d109      	bne.n	8006038 <I2S_IRQHandler+0xbc>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d102      	bne.n	8006038 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ff45 	bl	8005ec2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d122      	bne.n	8006088 <I2S_IRQHandler+0x10c>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b20      	cmp	r3, #32
 800604e:	d11b      	bne.n	8006088 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800605e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f043 0204 	orr.w	r2, r3, #4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff febe 	bl	8005e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006088:	bf00      	nop
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a92      	ldr	r2, [pc, #584]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80060aa:	4b92      	ldr	r3, [pc, #584]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ac:	e001      	b.n	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80060ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a8b      	ldr	r2, [pc, #556]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d101      	bne.n	80060cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80060c8:	4b8a      	ldr	r3, [pc, #552]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ca:	e001      	b.n	80060d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80060cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060dc:	d004      	beq.n	80060e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 8099 	bne.w	800621a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d107      	bne.n	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f925 	bl	800634c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f9c8 	bl	80064ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d13a      	bne.n	800619c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d035      	beq.n	800619c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6e      	ldr	r2, [pc, #440]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d101      	bne.n	800613e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800613a:	4b6e      	ldr	r3, [pc, #440]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800613c:	e001      	b.n	8006142 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800613e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4969      	ldr	r1, [pc, #420]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800614a:	428b      	cmp	r3, r1
 800614c:	d101      	bne.n	8006152 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800614e:	4b69      	ldr	r3, [pc, #420]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006150:	e001      	b.n	8006156 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800615a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800616a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	f043 0202 	orr.w	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fe34 	bl	8005e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f003 0308 	and.w	r3, r3, #8
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	f040 80c3 	bne.w	800632e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80bd 	beq.w	800632e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a49      	ldr	r2, [pc, #292]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d101      	bne.n	80061d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80061ce:	4b49      	ldr	r3, [pc, #292]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061d0:	e001      	b.n	80061d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80061d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4944      	ldr	r1, [pc, #272]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061de:	428b      	cmp	r3, r1
 80061e0:	d101      	bne.n	80061e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80061e2:	4b44      	ldr	r3, [pc, #272]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061e4:	e001      	b.n	80061ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80061e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80061f0:	2300      	movs	r3, #0
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	f043 0204 	orr.w	r2, r3, #4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fdf6 	bl	8005e04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006218:	e089      	b.n	800632e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d107      	bne.n	8006234 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8be 	bl	80063b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b01      	cmp	r3, #1
 800623c:	d107      	bne.n	800624e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f8fd 	bl	8006448 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d12f      	bne.n	80062b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d02a      	beq.n	80062b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006270:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d101      	bne.n	8006280 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800627e:	e001      	b.n	8006284 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4919      	ldr	r1, [pc, #100]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800628c:	428b      	cmp	r3, r1
 800628e:	d101      	bne.n	8006294 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006290:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006292:	e001      	b.n	8006298 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006294:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006298:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800629c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	f043 0202 	orr.w	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fda6 	bl	8005e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d136      	bne.n	8006330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d031      	beq.n	8006330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80062d6:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062d8:	e001      	b.n	80062de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80062da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4902      	ldr	r1, [pc, #8]	; (80062f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80062e6:	428b      	cmp	r3, r1
 80062e8:	d106      	bne.n	80062f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80062ea:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062ec:	e006      	b.n	80062fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80062ee:	bf00      	nop
 80062f0:	40003800 	.word	0x40003800
 80062f4:	40003400 	.word	0x40003400
 80062f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006300:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006310:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fd6c 	bl	8005e04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800632c:	e000      	b.n	8006330 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800632e:	bf00      	nop
}
 8006330:	bf00      	nop
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	1c99      	adds	r1, r3, #2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6251      	str	r1, [r2, #36]	; 0x24
 800635e:	881a      	ldrh	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d113      	bne.n	80063a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800638c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d106      	bne.n	80063a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ffc9 	bl	8006338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	1c99      	adds	r1, r3, #2
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6251      	str	r1, [r2, #36]	; 0x24
 80063c2:	8819      	ldrh	r1, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <I2SEx_TxISR_I2SExt+0x90>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <I2SEx_TxISR_I2SExt+0x22>
 80063ce:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <I2SEx_TxISR_I2SExt+0x94>)
 80063d0:	e001      	b.n	80063d6 <I2SEx_TxISR_I2SExt+0x26>
 80063d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063d6:	460a      	mov	r2, r1
 80063d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d121      	bne.n	8006436 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a12      	ldr	r2, [pc, #72]	; (8006440 <I2SEx_TxISR_I2SExt+0x90>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <I2SEx_TxISR_I2SExt+0x50>
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <I2SEx_TxISR_I2SExt+0x94>)
 80063fe:	e001      	b.n	8006404 <I2SEx_TxISR_I2SExt+0x54>
 8006400:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	490d      	ldr	r1, [pc, #52]	; (8006440 <I2SEx_TxISR_I2SExt+0x90>)
 800640c:	428b      	cmp	r3, r1
 800640e:	d101      	bne.n	8006414 <I2SEx_TxISR_I2SExt+0x64>
 8006410:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <I2SEx_TxISR_I2SExt+0x94>)
 8006412:	e001      	b.n	8006418 <I2SEx_TxISR_I2SExt+0x68>
 8006414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006418:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800641c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff81 	bl	8006338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40003800 	.word	0x40003800
 8006444:	40003400 	.word	0x40003400

08006448 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	68d8      	ldr	r0, [r3, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	1c99      	adds	r1, r3, #2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006460:	b282      	uxth	r2, r0
 8006462:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d113      	bne.n	80064a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800648a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff ff4a 	bl	8006338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a20      	ldr	r2, [pc, #128]	; (800653c <I2SEx_RxISR_I2SExt+0x90>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d101      	bne.n	80064c2 <I2SEx_RxISR_I2SExt+0x16>
 80064be:	4b20      	ldr	r3, [pc, #128]	; (8006540 <I2SEx_RxISR_I2SExt+0x94>)
 80064c0:	e001      	b.n	80064c6 <I2SEx_RxISR_I2SExt+0x1a>
 80064c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c6:	68d8      	ldr	r0, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	1c99      	adds	r1, r3, #2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80064d2:	b282      	uxth	r2, r0
 80064d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d121      	bne.n	8006532 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a12      	ldr	r2, [pc, #72]	; (800653c <I2SEx_RxISR_I2SExt+0x90>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d101      	bne.n	80064fc <I2SEx_RxISR_I2SExt+0x50>
 80064f8:	4b11      	ldr	r3, [pc, #68]	; (8006540 <I2SEx_RxISR_I2SExt+0x94>)
 80064fa:	e001      	b.n	8006500 <I2SEx_RxISR_I2SExt+0x54>
 80064fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	490d      	ldr	r1, [pc, #52]	; (800653c <I2SEx_RxISR_I2SExt+0x90>)
 8006508:	428b      	cmp	r3, r1
 800650a:	d101      	bne.n	8006510 <I2SEx_RxISR_I2SExt+0x64>
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <I2SEx_RxISR_I2SExt+0x94>)
 800650e:	e001      	b.n	8006514 <I2SEx_RxISR_I2SExt+0x68>
 8006510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006514:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006518:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff03 	bl	8006338 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40003800 	.word	0x40003800
 8006540:	40003400 	.word	0x40003400

08006544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e267      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d075      	beq.n	800664e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006562:	4b88      	ldr	r3, [pc, #544]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b04      	cmp	r3, #4
 800656c:	d00c      	beq.n	8006588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800656e:	4b85      	ldr	r3, [pc, #532]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006576:	2b08      	cmp	r3, #8
 8006578:	d112      	bne.n	80065a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657a:	4b82      	ldr	r3, [pc, #520]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006586:	d10b      	bne.n	80065a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	4b7e      	ldr	r3, [pc, #504]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d05b      	beq.n	800664c <HAL_RCC_OscConfig+0x108>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d157      	bne.n	800664c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e242      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d106      	bne.n	80065b8 <HAL_RCC_OscConfig+0x74>
 80065aa:	4b76      	ldr	r3, [pc, #472]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a75      	ldr	r2, [pc, #468]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e01d      	b.n	80065f4 <HAL_RCC_OscConfig+0xb0>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCC_OscConfig+0x98>
 80065c2:	4b70      	ldr	r3, [pc, #448]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a6f      	ldr	r2, [pc, #444]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	4b6d      	ldr	r3, [pc, #436]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6c      	ldr	r2, [pc, #432]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e00b      	b.n	80065f4 <HAL_RCC_OscConfig+0xb0>
 80065dc:	4b69      	ldr	r3, [pc, #420]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a68      	ldr	r2, [pc, #416]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	4b66      	ldr	r3, [pc, #408]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a65      	ldr	r2, [pc, #404]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d013      	beq.n	8006624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fc:	f7fc fb5a 	bl	8002cb4 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006604:	f7fc fb56 	bl	8002cb4 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b64      	cmp	r3, #100	; 0x64
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e207      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006616:	4b5b      	ldr	r3, [pc, #364]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0xc0>
 8006622:	e014      	b.n	800664e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fc fb46 	bl	8002cb4 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800662c:	f7fc fb42 	bl	8002cb4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	; 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e1f3      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800663e:	4b51      	ldr	r3, [pc, #324]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0xe8>
 800664a:	e000      	b.n	800664e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800664c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d063      	beq.n	8006722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800665a:	4b4a      	ldr	r3, [pc, #296]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006666:	4b47      	ldr	r3, [pc, #284]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800666e:	2b08      	cmp	r3, #8
 8006670:	d11c      	bne.n	80066ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006672:	4b44      	ldr	r3, [pc, #272]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d116      	bne.n	80066ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800667e:	4b41      	ldr	r3, [pc, #260]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <HAL_RCC_OscConfig+0x152>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d001      	beq.n	8006696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e1c7      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4937      	ldr	r1, [pc, #220]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066aa:	e03a      	b.n	8006722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b4:	4b34      	ldr	r3, [pc, #208]	; (8006788 <HAL_RCC_OscConfig+0x244>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fc fafb 	bl	8002cb4 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c2:	f7fc faf7 	bl	8002cb4 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e1a8      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d4:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f0      	beq.n	80066c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	4925      	ldr	r1, [pc, #148]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	600b      	str	r3, [r1, #0]
 80066f4:	e015      	b.n	8006722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <HAL_RCC_OscConfig+0x244>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fc:	f7fc fada 	bl	8002cb4 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006704:	f7fc fad6 	bl	8002cb4 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e187      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006716:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f0      	bne.n	8006704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d036      	beq.n	800679c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006736:	4b15      	ldr	r3, [pc, #84]	; (800678c <HAL_RCC_OscConfig+0x248>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673c:	f7fc faba 	bl	8002cb4 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006744:	f7fc fab6 	bl	8002cb4 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e167      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0f0      	beq.n	8006744 <HAL_RCC_OscConfig+0x200>
 8006762:	e01b      	b.n	800679c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006764:	4b09      	ldr	r3, [pc, #36]	; (800678c <HAL_RCC_OscConfig+0x248>)
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676a:	f7fc faa3 	bl	8002cb4 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006770:	e00e      	b.n	8006790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006772:	f7fc fa9f 	bl	8002cb4 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d907      	bls.n	8006790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e150      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
 8006784:	40023800 	.word	0x40023800
 8006788:	42470000 	.word	0x42470000
 800678c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006790:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1ea      	bne.n	8006772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8097 	beq.w	80068d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ae:	4b81      	ldr	r3, [pc, #516]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	4b7d      	ldr	r3, [pc, #500]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	4a7c      	ldr	r2, [pc, #496]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6413      	str	r3, [r2, #64]	; 0x40
 80067ca:	4b7a      	ldr	r3, [pc, #488]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d2:	60bb      	str	r3, [r7, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067da:	4b77      	ldr	r3, [pc, #476]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d118      	bne.n	8006818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067e6:	4b74      	ldr	r3, [pc, #464]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a73      	ldr	r2, [pc, #460]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 80067ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f2:	f7fc fa5f 	bl	8002cb4 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fa:	f7fc fa5b 	bl	8002cb4 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e10c      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800680c:	4b6a      	ldr	r3, [pc, #424]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <HAL_RCC_OscConfig+0x2ea>
 8006820:	4b64      	ldr	r3, [pc, #400]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006824:	4a63      	ldr	r2, [pc, #396]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	6713      	str	r3, [r2, #112]	; 0x70
 800682c:	e01c      	b.n	8006868 <HAL_RCC_OscConfig+0x324>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b05      	cmp	r3, #5
 8006834:	d10c      	bne.n	8006850 <HAL_RCC_OscConfig+0x30c>
 8006836:	4b5f      	ldr	r3, [pc, #380]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4a5e      	ldr	r2, [pc, #376]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800683c:	f043 0304 	orr.w	r3, r3, #4
 8006840:	6713      	str	r3, [r2, #112]	; 0x70
 8006842:	4b5c      	ldr	r3, [pc, #368]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	4a5b      	ldr	r2, [pc, #364]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6713      	str	r3, [r2, #112]	; 0x70
 800684e:	e00b      	b.n	8006868 <HAL_RCC_OscConfig+0x324>
 8006850:	4b58      	ldr	r3, [pc, #352]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a57      	ldr	r2, [pc, #348]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	4b55      	ldr	r3, [pc, #340]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4a54      	ldr	r2, [pc, #336]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006862:	f023 0304 	bic.w	r3, r3, #4
 8006866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006870:	f7fc fa20 	bl	8002cb4 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006876:	e00a      	b.n	800688e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006878:	f7fc fa1c 	bl	8002cb4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e0cb      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688e:	4b49      	ldr	r3, [pc, #292]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0ee      	beq.n	8006878 <HAL_RCC_OscConfig+0x334>
 800689a:	e014      	b.n	80068c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689c:	f7fc fa0a 	bl	8002cb4 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a2:	e00a      	b.n	80068ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a4:	f7fc fa06 	bl	8002cb4 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e0b5      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ba:	4b3e      	ldr	r3, [pc, #248]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1ee      	bne.n	80068a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d105      	bne.n	80068d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068cc:	4b39      	ldr	r3, [pc, #228]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	4a38      	ldr	r2, [pc, #224]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80a1 	beq.w	8006a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068e2:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 030c 	and.w	r3, r3, #12
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d05c      	beq.n	80069a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d141      	bne.n	800697a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f6:	4b31      	ldr	r3, [pc, #196]	; (80069bc <HAL_RCC_OscConfig+0x478>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fc f9da 	bl	8002cb4 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006904:	f7fc f9d6 	bl	8002cb4 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e087      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006916:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69da      	ldr	r2, [r3, #28]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	3b01      	subs	r3, #1
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	061b      	lsls	r3, r3, #24
 8006946:	491b      	ldr	r1, [pc, #108]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006948:	4313      	orrs	r3, r2
 800694a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800694c:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <HAL_RCC_OscConfig+0x478>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006952:	f7fc f9af 	bl	8002cb4 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800695a:	f7fc f9ab 	bl	8002cb4 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e05c      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x416>
 8006978:	e054      	b.n	8006a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <HAL_RCC_OscConfig+0x478>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006980:	f7fc f998 	bl	8002cb4 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006988:	f7fc f994 	bl	8002cb4 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e045      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x444>
 80069a6:	e03d      	b.n	8006a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d107      	bne.n	80069c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e038      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40007000 	.word	0x40007000
 80069bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069c0:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <HAL_RCC_OscConfig+0x4ec>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d028      	beq.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d121      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d11a      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d111      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d001      	beq.n	8006a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800

08006a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0cc      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a48:	4b68      	ldr	r3, [pc, #416]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d90c      	bls.n	8006a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b65      	ldr	r3, [pc, #404]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	4b63      	ldr	r3, [pc, #396]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0b8      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d020      	beq.n	8006abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a88:	4b59      	ldr	r3, [pc, #356]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	4a58      	ldr	r2, [pc, #352]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa0:	4b53      	ldr	r3, [pc, #332]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	4a52      	ldr	r2, [pc, #328]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aac:	4b50      	ldr	r3, [pc, #320]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	494d      	ldr	r1, [pc, #308]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d044      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad2:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d119      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e07f      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d107      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af2:	4b3f      	ldr	r3, [pc, #252]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e06f      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b02:	4b3b      	ldr	r3, [pc, #236]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e067      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b12:	4b37      	ldr	r3, [pc, #220]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f023 0203 	bic.w	r2, r3, #3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4934      	ldr	r1, [pc, #208]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b24:	f7fc f8c6 	bl	8002cb4 <HAL_GetTick>
 8006b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b2c:	f7fc f8c2 	bl	8002cb4 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e04f      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b42:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 020c 	and.w	r2, r3, #12
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d1eb      	bne.n	8006b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d20c      	bcs.n	8006b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d001      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e032      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4916      	ldr	r1, [pc, #88]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	490e      	ldr	r1, [pc, #56]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bba:	f000 f821 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	490a      	ldr	r1, [pc, #40]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8006bcc:	5ccb      	ldrb	r3, [r1, r3]
 8006bce:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_RCC_ClockConfig+0x1c8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fc f826 	bl	8002c2c <HAL_InitTick>

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40023c00 	.word	0x40023c00
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	0800e250 	.word	0x0800e250
 8006bf8:	20000008 	.word	0x20000008
 8006bfc:	20000010 	.word	0x20000010

08006c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c04:	b094      	sub	sp, #80	; 0x50
 8006c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c10:	2300      	movs	r3, #0
 8006c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c18:	4b79      	ldr	r3, [pc, #484]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 030c 	and.w	r3, r3, #12
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d00d      	beq.n	8006c40 <HAL_RCC_GetSysClockFreq+0x40>
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	f200 80e1 	bhi.w	8006dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_RCC_GetSysClockFreq+0x34>
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d003      	beq.n	8006c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c32:	e0db      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c34:	4b73      	ldr	r3, [pc, #460]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c38:	e0db      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c3a:	4b73      	ldr	r3, [pc, #460]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c3e:	e0d8      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c40:	4b6f      	ldr	r3, [pc, #444]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c4a:	4b6d      	ldr	r3, [pc, #436]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d063      	beq.n	8006d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c56:	4b6a      	ldr	r3, [pc, #424]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	099b      	lsrs	r3, r3, #6
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	f04f 0000 	mov.w	r0, #0
 8006c7a:	f04f 0100 	mov.w	r1, #0
 8006c7e:	0159      	lsls	r1, r3, #5
 8006c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c84:	0150      	lsls	r0, r2, #5
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	1a51      	subs	r1, r2, r1
 8006c8e:	6139      	str	r1, [r7, #16]
 8006c90:	4629      	mov	r1, r5
 8006c92:	eb63 0301 	sbc.w	r3, r3, r1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca4:	4659      	mov	r1, fp
 8006ca6:	018b      	lsls	r3, r1, #6
 8006ca8:	4651      	mov	r1, sl
 8006caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cae:	4651      	mov	r1, sl
 8006cb0:	018a      	lsls	r2, r1, #6
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8006cb8:	4659      	mov	r1, fp
 8006cba:	eb63 0901 	sbc.w	r9, r3, r1
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd2:	4690      	mov	r8, r2
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	eb18 0303 	adds.w	r3, r8, r3
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	462b      	mov	r3, r5
 8006ce0:	eb49 0303 	adc.w	r3, r9, r3
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	024b      	lsls	r3, r1, #9
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	024a      	lsls	r2, r1, #9
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d06:	2200      	movs	r2, #0
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d10:	f7f9 ff9a 	bl	8000c48 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4613      	mov	r3, r2
 8006d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d1c:	e058      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d1e:	4b38      	ldr	r3, [pc, #224]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	099b      	lsrs	r3, r3, #6
 8006d24:	2200      	movs	r2, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	4611      	mov	r1, r2
 8006d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	2300      	movs	r3, #0
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
 8006d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f04f 0000 	mov.w	r0, #0
 8006d40:	f04f 0100 	mov.w	r1, #0
 8006d44:	0159      	lsls	r1, r3, #5
 8006d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d4a:	0150      	lsls	r0, r2, #5
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4641      	mov	r1, r8
 8006d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d56:	4649      	mov	r1, r9
 8006d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d70:	ebb2 040a 	subs.w	r4, r2, sl
 8006d74:	eb63 050b 	sbc.w	r5, r3, fp
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	00eb      	lsls	r3, r5, #3
 8006d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d86:	00e2      	lsls	r2, r4, #3
 8006d88:	4614      	mov	r4, r2
 8006d8a:	461d      	mov	r5, r3
 8006d8c:	4643      	mov	r3, r8
 8006d8e:	18e3      	adds	r3, r4, r3
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	464b      	mov	r3, r9
 8006d94:	eb45 0303 	adc.w	r3, r5, r3
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006da6:	4629      	mov	r1, r5
 8006da8:	028b      	lsls	r3, r1, #10
 8006daa:	4621      	mov	r1, r4
 8006dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006db0:	4621      	mov	r1, r4
 8006db2:	028a      	lsls	r2, r1, #10
 8006db4:	4610      	mov	r0, r2
 8006db6:	4619      	mov	r1, r3
 8006db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dba:	2200      	movs	r2, #0
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc4:	f7f9 ff40 	bl	8000c48 <__aeabi_uldivmod>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4613      	mov	r3, r2
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	3301      	adds	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3750      	adds	r7, #80	; 0x50
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800
 8006e04:	00f42400 	.word	0x00f42400
 8006e08:	007a1200 	.word	0x007a1200

08006e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e10:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e12:	681b      	ldr	r3, [r3, #0]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000008 	.word	0x20000008

08006e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e28:	f7ff fff0 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	0a9b      	lsrs	r3, r3, #10
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4903      	ldr	r1, [pc, #12]	; (8006e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40023800 	.word	0x40023800
 8006e48:	0800e260 	.word	0x0800e260

08006e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e50:	f7ff ffdc 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	0b5b      	lsrs	r3, r3, #13
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	4903      	ldr	r1, [pc, #12]	; (8006e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	0800e260 	.word	0x0800e260

08006e74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d038      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e9c:	4b68      	ldr	r3, [pc, #416]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ea2:	f7fb ff07 	bl	8002cb4 <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006eaa:	f7fb ff03 	bl	8002cb4 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e0bd      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ebc:	4b61      	ldr	r3, [pc, #388]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	071b      	lsls	r3, r3, #28
 8006eda:	495a      	ldr	r1, [pc, #360]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ee2:	4b57      	ldr	r3, [pc, #348]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ee8:	f7fb fee4 	bl	8002cb4 <HAL_GetTick>
 8006eec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eee:	e008      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ef0:	f7fb fee0 	bl	8002cb4 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e09a      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f02:	4b50      	ldr	r3, [pc, #320]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0f0      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 8083 	beq.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	4b48      	ldr	r3, [pc, #288]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	4a47      	ldr	r2, [pc, #284]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f2c:	4b45      	ldr	r3, [pc, #276]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f38:	4b43      	ldr	r3, [pc, #268]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a42      	ldr	r2, [pc, #264]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f42:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f44:	f7fb feb6 	bl	8002cb4 <HAL_GetTick>
 8006f48:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f4c:	f7fb feb2 	bl	8002cb4 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e06c      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f5e:	4b3a      	ldr	r3, [pc, #232]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f6a:	4b36      	ldr	r3, [pc, #216]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02f      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d028      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f88:	4b2e      	ldr	r3, [pc, #184]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f90:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f92:	4b2e      	ldr	r3, [pc, #184]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f98:	4b2c      	ldr	r3, [pc, #176]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f9e:	4a29      	ldr	r2, [pc, #164]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d114      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fb fe80 	bl	8002cb4 <HAL_GetTick>
 8006fb4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb6:	e00a      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fb8:	f7fb fe7c 	bl	8002cb4 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d901      	bls.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e034      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fce:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0ee      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe6:	d10d      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006fe8:	4b16      	ldr	r3, [pc, #88]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffc:	4911      	ldr	r1, [pc, #68]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	608b      	str	r3, [r1, #8]
 8007002:	e005      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007004:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a0e      	ldr	r2, [pc, #56]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800700e:	6093      	str	r3, [r2, #8]
 8007010:	4b0c      	ldr	r3, [pc, #48]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800701c:	4909      	ldr	r1, [pc, #36]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800701e:	4313      	orrs	r3, r2
 8007020:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d003      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7d1a      	ldrb	r2, [r3, #20]
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007034:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	42470068 	.word	0x42470068
 8007044:	40023800 	.word	0x40023800
 8007048:	40007000 	.word	0x40007000
 800704c:	42470e40 	.word	0x42470e40
 8007050:	424711e0 	.word	0x424711e0

08007054 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d140      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d131      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007088:	4b1f      	ldr	r3, [pc, #124]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800708a:	617b      	str	r3, [r7, #20]
          break;
 800708c:	e031      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800708e:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800709a:	d109      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800709e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a6:	4a19      	ldr	r2, [pc, #100]	; (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	e008      	b.n	80070c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070b0:	4b14      	ldr	r3, [pc, #80]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ba:	4a15      	ldr	r2, [pc, #84]	; (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c8:	099b      	lsrs	r3, r3, #6
 80070ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	fb02 f303 	mul.w	r3, r2, r3
 80070d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80070d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070dc:	0f1b      	lsrs	r3, r3, #28
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]
          break;
 80070ea:	e002      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
          break;
 80070f0:	bf00      	nop
        }
      }
      break;
 80070f2:	bf00      	nop
    }
  }
  return frequency;
 80070f4:	697b      	ldr	r3, [r7, #20]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40023800 	.word	0x40023800
 8007108:	00bb8000 	.word	0x00bb8000
 800710c:	007a1200 	.word	0x007a1200
 8007110:	00f42400 	.word	0x00f42400

08007114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e03f      	b.n	80071a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fb fafa 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2224      	movs	r2, #36	; 0x24
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f829 	bl	80071b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800716c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800717c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800718c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b0c0      	sub	sp, #256	; 0x100
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	68d9      	ldr	r1, [r3, #12]
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	ea40 0301 	orr.w	r3, r0, r1
 80071d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	431a      	orrs	r2, r3
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007208:	f021 010c 	bic.w	r1, r1, #12
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007216:	430b      	orrs	r3, r1
 8007218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	6999      	ldr	r1, [r3, #24]
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	ea40 0301 	orr.w	r3, r0, r1
 8007236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b8f      	ldr	r3, [pc, #572]	; (800747c <UART_SetConfig+0x2cc>)
 8007240:	429a      	cmp	r2, r3
 8007242:	d005      	beq.n	8007250 <UART_SetConfig+0xa0>
 8007244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b8d      	ldr	r3, [pc, #564]	; (8007480 <UART_SetConfig+0x2d0>)
 800724c:	429a      	cmp	r2, r3
 800724e:	d104      	bne.n	800725a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007250:	f7ff fdfc 	bl	8006e4c <HAL_RCC_GetPCLK2Freq>
 8007254:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007258:	e003      	b.n	8007262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800725a:	f7ff fde3 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800725e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726c:	f040 810c 	bne.w	8007488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007274:	2200      	movs	r2, #0
 8007276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800727a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800727e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007282:	4622      	mov	r2, r4
 8007284:	462b      	mov	r3, r5
 8007286:	1891      	adds	r1, r2, r2
 8007288:	65b9      	str	r1, [r7, #88]	; 0x58
 800728a:	415b      	adcs	r3, r3
 800728c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800728e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007292:	4621      	mov	r1, r4
 8007294:	eb12 0801 	adds.w	r8, r2, r1
 8007298:	4629      	mov	r1, r5
 800729a:	eb43 0901 	adc.w	r9, r3, r1
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072b2:	4690      	mov	r8, r2
 80072b4:	4699      	mov	r9, r3
 80072b6:	4623      	mov	r3, r4
 80072b8:	eb18 0303 	adds.w	r3, r8, r3
 80072bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072c0:	462b      	mov	r3, r5
 80072c2:	eb49 0303 	adc.w	r3, r9, r3
 80072c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072de:	460b      	mov	r3, r1
 80072e0:	18db      	adds	r3, r3, r3
 80072e2:	653b      	str	r3, [r7, #80]	; 0x50
 80072e4:	4613      	mov	r3, r2
 80072e6:	eb42 0303 	adc.w	r3, r2, r3
 80072ea:	657b      	str	r3, [r7, #84]	; 0x54
 80072ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072f4:	f7f9 fca8 	bl	8000c48 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4b61      	ldr	r3, [pc, #388]	; (8007484 <UART_SetConfig+0x2d4>)
 80072fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007302:	095b      	lsrs	r3, r3, #5
 8007304:	011c      	lsls	r4, r3, #4
 8007306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730a:	2200      	movs	r2, #0
 800730c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007310:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	1891      	adds	r1, r2, r2
 800731e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007320:	415b      	adcs	r3, r3
 8007322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007328:	4641      	mov	r1, r8
 800732a:	eb12 0a01 	adds.w	sl, r2, r1
 800732e:	4649      	mov	r1, r9
 8007330:	eb43 0b01 	adc.w	fp, r3, r1
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007348:	4692      	mov	sl, r2
 800734a:	469b      	mov	fp, r3
 800734c:	4643      	mov	r3, r8
 800734e:	eb1a 0303 	adds.w	r3, sl, r3
 8007352:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007356:	464b      	mov	r3, r9
 8007358:	eb4b 0303 	adc.w	r3, fp, r3
 800735c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800736c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007374:	460b      	mov	r3, r1
 8007376:	18db      	adds	r3, r3, r3
 8007378:	643b      	str	r3, [r7, #64]	; 0x40
 800737a:	4613      	mov	r3, r2
 800737c:	eb42 0303 	adc.w	r3, r2, r3
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
 8007382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800738a:	f7f9 fc5d 	bl	8000c48 <__aeabi_uldivmod>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4611      	mov	r1, r2
 8007394:	4b3b      	ldr	r3, [pc, #236]	; (8007484 <UART_SetConfig+0x2d4>)
 8007396:	fba3 2301 	umull	r2, r3, r3, r1
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	2264      	movs	r2, #100	; 0x64
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	1acb      	subs	r3, r1, r3
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073aa:	4b36      	ldr	r3, [pc, #216]	; (8007484 <UART_SetConfig+0x2d4>)
 80073ac:	fba3 2302 	umull	r2, r3, r3, r2
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073b8:	441c      	add	r4, r3
 80073ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073be:	2200      	movs	r2, #0
 80073c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073cc:	4642      	mov	r2, r8
 80073ce:	464b      	mov	r3, r9
 80073d0:	1891      	adds	r1, r2, r2
 80073d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073d4:	415b      	adcs	r3, r3
 80073d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073dc:	4641      	mov	r1, r8
 80073de:	1851      	adds	r1, r2, r1
 80073e0:	6339      	str	r1, [r7, #48]	; 0x30
 80073e2:	4649      	mov	r1, r9
 80073e4:	414b      	adcs	r3, r1
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	f04f 0300 	mov.w	r3, #0
 80073f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073f4:	4659      	mov	r1, fp
 80073f6:	00cb      	lsls	r3, r1, #3
 80073f8:	4651      	mov	r1, sl
 80073fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073fe:	4651      	mov	r1, sl
 8007400:	00ca      	lsls	r2, r1, #3
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	4603      	mov	r3, r0
 8007408:	4642      	mov	r2, r8
 800740a:	189b      	adds	r3, r3, r2
 800740c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007410:	464b      	mov	r3, r9
 8007412:	460a      	mov	r2, r1
 8007414:	eb42 0303 	adc.w	r3, r2, r3
 8007418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007428:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800742c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007430:	460b      	mov	r3, r1
 8007432:	18db      	adds	r3, r3, r3
 8007434:	62bb      	str	r3, [r7, #40]	; 0x28
 8007436:	4613      	mov	r3, r2
 8007438:	eb42 0303 	adc.w	r3, r2, r3
 800743c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800743e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007446:	f7f9 fbff 	bl	8000c48 <__aeabi_uldivmod>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <UART_SetConfig+0x2d4>)
 8007450:	fba3 1302 	umull	r1, r3, r3, r2
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	2164      	movs	r1, #100	; 0x64
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	3332      	adds	r3, #50	; 0x32
 8007462:	4a08      	ldr	r2, [pc, #32]	; (8007484 <UART_SetConfig+0x2d4>)
 8007464:	fba2 2303 	umull	r2, r3, r2, r3
 8007468:	095b      	lsrs	r3, r3, #5
 800746a:	f003 0207 	and.w	r2, r3, #7
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4422      	add	r2, r4
 8007476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007478:	e105      	b.n	8007686 <UART_SetConfig+0x4d6>
 800747a:	bf00      	nop
 800747c:	40011000 	.word	0x40011000
 8007480:	40011400 	.word	0x40011400
 8007484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800748c:	2200      	movs	r2, #0
 800748e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007492:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800749a:	4642      	mov	r2, r8
 800749c:	464b      	mov	r3, r9
 800749e:	1891      	adds	r1, r2, r2
 80074a0:	6239      	str	r1, [r7, #32]
 80074a2:	415b      	adcs	r3, r3
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
 80074a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074aa:	4641      	mov	r1, r8
 80074ac:	1854      	adds	r4, r2, r1
 80074ae:	4649      	mov	r1, r9
 80074b0:	eb43 0501 	adc.w	r5, r3, r1
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	00eb      	lsls	r3, r5, #3
 80074be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074c2:	00e2      	lsls	r2, r4, #3
 80074c4:	4614      	mov	r4, r2
 80074c6:	461d      	mov	r5, r3
 80074c8:	4643      	mov	r3, r8
 80074ca:	18e3      	adds	r3, r4, r3
 80074cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074d0:	464b      	mov	r3, r9
 80074d2:	eb45 0303 	adc.w	r3, r5, r3
 80074d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ea:	f04f 0200 	mov.w	r2, #0
 80074ee:	f04f 0300 	mov.w	r3, #0
 80074f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074f6:	4629      	mov	r1, r5
 80074f8:	008b      	lsls	r3, r1, #2
 80074fa:	4621      	mov	r1, r4
 80074fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007500:	4621      	mov	r1, r4
 8007502:	008a      	lsls	r2, r1, #2
 8007504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007508:	f7f9 fb9e 	bl	8000c48 <__aeabi_uldivmod>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4b60      	ldr	r3, [pc, #384]	; (8007694 <UART_SetConfig+0x4e4>)
 8007512:	fba3 2302 	umull	r2, r3, r3, r2
 8007516:	095b      	lsrs	r3, r3, #5
 8007518:	011c      	lsls	r4, r3, #4
 800751a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751e:	2200      	movs	r2, #0
 8007520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007524:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800752c:	4642      	mov	r2, r8
 800752e:	464b      	mov	r3, r9
 8007530:	1891      	adds	r1, r2, r2
 8007532:	61b9      	str	r1, [r7, #24]
 8007534:	415b      	adcs	r3, r3
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800753c:	4641      	mov	r1, r8
 800753e:	1851      	adds	r1, r2, r1
 8007540:	6139      	str	r1, [r7, #16]
 8007542:	4649      	mov	r1, r9
 8007544:	414b      	adcs	r3, r1
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007554:	4659      	mov	r1, fp
 8007556:	00cb      	lsls	r3, r1, #3
 8007558:	4651      	mov	r1, sl
 800755a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755e:	4651      	mov	r1, sl
 8007560:	00ca      	lsls	r2, r1, #3
 8007562:	4610      	mov	r0, r2
 8007564:	4619      	mov	r1, r3
 8007566:	4603      	mov	r3, r0
 8007568:	4642      	mov	r2, r8
 800756a:	189b      	adds	r3, r3, r2
 800756c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007570:	464b      	mov	r3, r9
 8007572:	460a      	mov	r2, r1
 8007574:	eb42 0303 	adc.w	r3, r2, r3
 8007578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	67bb      	str	r3, [r7, #120]	; 0x78
 8007586:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007594:	4649      	mov	r1, r9
 8007596:	008b      	lsls	r3, r1, #2
 8007598:	4641      	mov	r1, r8
 800759a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759e:	4641      	mov	r1, r8
 80075a0:	008a      	lsls	r2, r1, #2
 80075a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075a6:	f7f9 fb4f 	bl	8000c48 <__aeabi_uldivmod>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4b39      	ldr	r3, [pc, #228]	; (8007694 <UART_SetConfig+0x4e4>)
 80075b0:	fba3 1302 	umull	r1, r3, r3, r2
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	2164      	movs	r1, #100	; 0x64
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	011b      	lsls	r3, r3, #4
 80075c0:	3332      	adds	r3, #50	; 0x32
 80075c2:	4a34      	ldr	r2, [pc, #208]	; (8007694 <UART_SetConfig+0x4e4>)
 80075c4:	fba2 2303 	umull	r2, r3, r2, r3
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ce:	441c      	add	r4, r3
 80075d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075d4:	2200      	movs	r2, #0
 80075d6:	673b      	str	r3, [r7, #112]	; 0x70
 80075d8:	677a      	str	r2, [r7, #116]	; 0x74
 80075da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075de:	4642      	mov	r2, r8
 80075e0:	464b      	mov	r3, r9
 80075e2:	1891      	adds	r1, r2, r2
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	415b      	adcs	r3, r3
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ee:	4641      	mov	r1, r8
 80075f0:	1851      	adds	r1, r2, r1
 80075f2:	6039      	str	r1, [r7, #0]
 80075f4:	4649      	mov	r1, r9
 80075f6:	414b      	adcs	r3, r1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	f04f 0300 	mov.w	r3, #0
 8007602:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007606:	4659      	mov	r1, fp
 8007608:	00cb      	lsls	r3, r1, #3
 800760a:	4651      	mov	r1, sl
 800760c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007610:	4651      	mov	r1, sl
 8007612:	00ca      	lsls	r2, r1, #3
 8007614:	4610      	mov	r0, r2
 8007616:	4619      	mov	r1, r3
 8007618:	4603      	mov	r3, r0
 800761a:	4642      	mov	r2, r8
 800761c:	189b      	adds	r3, r3, r2
 800761e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007620:	464b      	mov	r3, r9
 8007622:	460a      	mov	r2, r1
 8007624:	eb42 0303 	adc.w	r3, r2, r3
 8007628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	663b      	str	r3, [r7, #96]	; 0x60
 8007634:	667a      	str	r2, [r7, #100]	; 0x64
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	f04f 0300 	mov.w	r3, #0
 800763e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007642:	4649      	mov	r1, r9
 8007644:	008b      	lsls	r3, r1, #2
 8007646:	4641      	mov	r1, r8
 8007648:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800764c:	4641      	mov	r1, r8
 800764e:	008a      	lsls	r2, r1, #2
 8007650:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007654:	f7f9 faf8 	bl	8000c48 <__aeabi_uldivmod>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <UART_SetConfig+0x4e4>)
 800765e:	fba3 1302 	umull	r1, r3, r3, r2
 8007662:	095b      	lsrs	r3, r3, #5
 8007664:	2164      	movs	r1, #100	; 0x64
 8007666:	fb01 f303 	mul.w	r3, r1, r3
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	3332      	adds	r3, #50	; 0x32
 8007670:	4a08      	ldr	r2, [pc, #32]	; (8007694 <UART_SetConfig+0x4e4>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	095b      	lsrs	r3, r3, #5
 8007678:	f003 020f 	and.w	r2, r3, #15
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4422      	add	r2, r4
 8007684:	609a      	str	r2, [r3, #8]
}
 8007686:	bf00      	nop
 8007688:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007692:	bf00      	nop
 8007694:	51eb851f 	.word	0x51eb851f

08007698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007698:	b084      	sub	sp, #16
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	f107 001c 	add.w	r0, r7, #28
 80076a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d122      	bne.n	80076f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80076c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80076d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d105      	bne.n	80076ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f9c0 	bl	8007a70 <USB_CoreReset>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e01a      	b.n	800772c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9b4 	bl	8007a70 <USB_CoreReset>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800770c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
 800771e:	e005      	b.n	800772c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10b      	bne.n	800774a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f043 0206 	orr.w	r2, r3, #6
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007756:	b004      	add	sp, #16
 8007758:	4770      	bx	lr

0800775a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f043 0201 	orr.w	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f023 0201 	bic.w	r2, r3, #1
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d115      	bne.n	80077ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077cc:	2001      	movs	r0, #1
 80077ce:	f7fb fa7d 	bl	8002ccc <HAL_Delay>
      ms++;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3301      	adds	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f93a 	bl	8007a52 <USB_GetMode>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d01e      	beq.n	8007822 <USB_SetCurrentMode+0x84>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b31      	cmp	r3, #49	; 0x31
 80077e8:	d9f0      	bls.n	80077cc <USB_SetCurrentMode+0x2e>
 80077ea:	e01a      	b.n	8007822 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d115      	bne.n	800781e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077fe:	2001      	movs	r0, #1
 8007800:	f7fb fa64 	bl	8002ccc <HAL_Delay>
      ms++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f921 	bl	8007a52 <USB_GetMode>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <USB_SetCurrentMode+0x84>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b31      	cmp	r3, #49	; 0x31
 800781a:	d9f0      	bls.n	80077fe <USB_SetCurrentMode+0x60>
 800781c:	e001      	b.n	8007822 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e005      	b.n	800782e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b32      	cmp	r3, #50	; 0x32
 8007826:	d101      	bne.n	800782c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3301      	adds	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4a13      	ldr	r2, [pc, #76]	; (800789c <USB_FlushTxFifo+0x64>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d901      	bls.n	8007858 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e01b      	b.n	8007890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	daf2      	bge.n	8007846 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	019b      	lsls	r3, r3, #6
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4a08      	ldr	r2, [pc, #32]	; (800789c <USB_FlushTxFifo+0x64>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d901      	bls.n	8007882 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e006      	b.n	8007890 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b20      	cmp	r3, #32
 800788c:	d0f0      	beq.n	8007870 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	00030d40 	.word	0x00030d40

080078a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4a11      	ldr	r2, [pc, #68]	; (80078fc <USB_FlushRxFifo+0x5c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d901      	bls.n	80078be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e018      	b.n	80078f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	daf2      	bge.n	80078ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2210      	movs	r2, #16
 80078ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3301      	adds	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4a08      	ldr	r2, [pc, #32]	; (80078fc <USB_FlushRxFifo+0x5c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e006      	b.n	80078f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d0f0      	beq.n	80078d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	00030d40 	.word	0x00030d40

08007900 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007900:	b480      	push	{r7}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4611      	mov	r1, r2
 800790c:	461a      	mov	r2, r3
 800790e:	460b      	mov	r3, r1
 8007910:	71fb      	strb	r3, [r7, #7]
 8007912:	4613      	mov	r3, r2
 8007914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800791e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007922:	2b00      	cmp	r3, #0
 8007924:	d123      	bne.n	800796e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007926:	88bb      	ldrh	r3, [r7, #4]
 8007928:	3303      	adds	r3, #3
 800792a:	089b      	lsrs	r3, r3, #2
 800792c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	e018      	b.n	8007966 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007934:	79fb      	ldrb	r3, [r7, #7]
 8007936:	031a      	lsls	r2, r3, #12
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007940:	461a      	mov	r2, r3
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	3301      	adds	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	3301      	adds	r3, #1
 800795e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	3301      	adds	r3, #1
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	429a      	cmp	r2, r3
 800796c:	d3e2      	bcc.n	8007934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3724      	adds	r7, #36	; 0x24
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800797c:	b480      	push	{r7}
 800797e:	b08b      	sub	sp, #44	; 0x2c
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	089b      	lsrs	r3, r3, #2
 8007996:	b29b      	uxth	r3, r3
 8007998:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	e014      	b.n	80079d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	3301      	adds	r3, #1
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	3301      	adds	r3, #1
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	3301      	adds	r3, #1
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	3301      	adds	r3, #1
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	3301      	adds	r3, #1
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	6a3a      	ldr	r2, [r7, #32]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3e6      	bcc.n	80079a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079da:	8bfb      	ldrh	r3, [r7, #30]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ea:	461a      	mov	r2, r3
 80079ec:	f107 0310 	add.w	r3, r7, #16
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a04:	701a      	strb	r2, [r3, #0]
      i++;
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	3301      	adds	r3, #1
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a12:	8bfb      	ldrh	r3, [r7, #30]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a18:	8bfb      	ldrh	r3, [r7, #30]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1ea      	bne.n	80079f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	372c      	adds	r7, #44	; 0x2c
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	695b      	ldr	r3, [r3, #20]
 8007a38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	4013      	ands	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a44:	68fb      	ldr	r3, [r7, #12]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	f003 0301 	and.w	r3, r3, #1
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <USB_CoreReset+0x64>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e01b      	b.n	8007ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	daf2      	bge.n	8007a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f043 0201 	orr.w	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <USB_CoreReset+0x64>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d901      	bls.n	8007ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e006      	b.n	8007ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d0f0      	beq.n	8007aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	00030d40 	.word	0x00030d40

08007ad8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ad8:	b084      	sub	sp, #16
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d018      	beq.n	8007b60 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d10a      	bne.n	8007b4a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b42:	f043 0304 	orr.w	r3, r3, #4
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	e014      	b.n	8007b74 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b58:	f023 0304 	bic.w	r3, r3, #4
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	e009      	b.n	8007b74 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b6e:	f023 0304 	bic.w	r3, r3, #4
 8007b72:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b74:	2110      	movs	r1, #16
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff fe5e 	bl	8007838 <USB_FlushTxFifo>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7ff fe8a 	bl	80078a0 <USB_FlushRxFifo>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	e015      	b.n	8007bc8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d3e5      	bcc.n	8007b9c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bdc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00b      	beq.n	8007c02 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bf0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a13      	ldr	r2, [pc, #76]	; (8007c44 <USB_HostInit+0x16c>)
 8007bf6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a13      	ldr	r2, [pc, #76]	; (8007c48 <USB_HostInit+0x170>)
 8007bfc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007c00:	e009      	b.n	8007c16 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2280      	movs	r2, #128	; 0x80
 8007c06:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a10      	ldr	r2, [pc, #64]	; (8007c4c <USB_HostInit+0x174>)
 8007c0c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a0f      	ldr	r2, [pc, #60]	; (8007c50 <USB_HostInit+0x178>)
 8007c12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	f043 0210 	orr.w	r2, r3, #16
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	4b09      	ldr	r3, [pc, #36]	; (8007c54 <USB_HostInit+0x17c>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c40:	b004      	add	sp, #16
 8007c42:	4770      	bx	lr
 8007c44:	01000200 	.word	0x01000200
 8007c48:	00e00300 	.word	0x00e00300
 8007c4c:	00600080 	.word	0x00600080
 8007c50:	004000e0 	.word	0x004000e0
 8007c54:	a3200008 	.word	0xa3200008

08007c58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	68f9      	ldr	r1, [r7, #12]
 8007c8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c90:	4313      	orrs	r3, r2
 8007c92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d107      	bne.n	8007caa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ca6:	6053      	str	r3, [r2, #4]
 8007ca8:	e009      	b.n	8007cbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d106      	bne.n	8007cbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8007cbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007cec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007cfc:	2064      	movs	r0, #100	; 0x64
 8007cfe:	f7fa ffe5 	bl	8002ccc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007d10:	200a      	movs	r0, #10
 8007d12:	f7fa ffdb 	bl	8002ccc <HAL_Delay>

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d109      	bne.n	8007d64 <USB_DriveVbus+0x44>
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d106      	bne.n	8007d64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d6e:	d109      	bne.n	8007d84 <USB_DriveVbus+0x64>
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b085      	sub	sp, #20
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	0c5b      	lsrs	r3, r3, #17
 8007db0:	f003 0303 	and.w	r3, r3, #3
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	b29b      	uxth	r3, r3
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b088      	sub	sp, #32
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	461a      	mov	r2, r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	70fb      	strb	r3, [r7, #3]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70bb      	strb	r3, [r7, #2]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007e06:	78fb      	ldrb	r3, [r7, #3]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e12:	461a      	mov	r2, r3
 8007e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007e1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d87e      	bhi.n	8007f20 <USB_HC_Init+0x13c>
 8007e22:	a201      	add	r2, pc, #4	; (adr r2, 8007e28 <USB_HC_Init+0x44>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007ee3 	.word	0x08007ee3
 8007e30:	08007e39 	.word	0x08007e39
 8007e34:	08007ea5 	.word	0x08007ea5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e44:	461a      	mov	r2, r3
 8007e46:	f240 439d 	movw	r3, #1181	; 0x49d
 8007e4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da10      	bge.n	8007e76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e72:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007e74:	e057      	b.n	8007f26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d051      	beq.n	8007f26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ea0:	60d3      	str	r3, [r2, #12]
      break;
 8007ea2:	e040      	b.n	8007f26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f240 639d 	movw	r3, #1693	; 0x69d
 8007eb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007eb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	da34      	bge.n	8007f2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	0151      	lsls	r1, r2, #5
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	440a      	add	r2, r1
 8007ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ede:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ee0:	e023      	b.n	8007f2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	015a      	lsls	r2, r3, #5
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f240 2325 	movw	r3, #549	; 0x225
 8007ef4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007ef6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	da17      	bge.n	8007f2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	0151      	lsls	r1, r2, #5
 8007f10:	693a      	ldr	r2, [r7, #16]
 8007f12:	440a      	add	r2, r1
 8007f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007f1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007f1e:	e006      	b.n	8007f2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	77fb      	strb	r3, [r7, #31]
      break;
 8007f24:	e004      	b.n	8007f30 <USB_HC_Init+0x14c>
      break;
 8007f26:	bf00      	nop
 8007f28:	e002      	b.n	8007f30 <USB_HC_Init+0x14c>
      break;
 8007f2a:	bf00      	nop
 8007f2c:	e000      	b.n	8007f30 <USB_HC_Init+0x14c>
      break;
 8007f2e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	0151      	lsls	r1, r2, #5
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	440a      	add	r2, r1
 8007f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f4a:	f043 0302 	orr.w	r3, r3, #2
 8007f4e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	2101      	movs	r1, #1
 8007f60:	fa01 f303 	lsl.w	r3, r1, r3
 8007f64:	6939      	ldr	r1, [r7, #16]
 8007f66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007f7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da03      	bge.n	8007f8a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e001      	b.n	8007f8e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7ff feff 	bl	8007d92 <USB_GetHostSpeed>
 8007f94:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d106      	bne.n	8007fac <USB_HC_Init+0x1c8>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d003      	beq.n	8007fac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	e001      	b.n	8007fb0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fb0:	787b      	ldrb	r3, [r7, #1]
 8007fb2:	059b      	lsls	r3, r3, #22
 8007fb4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fb8:	78bb      	ldrb	r3, [r7, #2]
 8007fba:	02db      	lsls	r3, r3, #11
 8007fbc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fc0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fc6:	049b      	lsls	r3, r3, #18
 8007fc8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fcc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007fd4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	0159      	lsls	r1, r3, #5
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	440b      	add	r3, r1
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007fee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d003      	beq.n	8007ffe <USB_HC_Init+0x21a>
 8007ff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d10f      	bne.n	800801e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	440a      	add	r2, r1
 8008014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800801c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800801e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08c      	sub	sp, #48	; 0x30
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008044:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	2b00      	cmp	r3, #0
 8008050:	d02d      	beq.n	80080ae <USB_HC_StartXfer+0x86>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	791b      	ldrb	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d129      	bne.n	80080ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d117      	bne.n	8008090 <USB_HC_StartXfer+0x68>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	79db      	ldrb	r3, [r3, #7]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d003      	beq.n	8008070 <USB_HC_StartXfer+0x48>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	79db      	ldrb	r3, [r3, #7]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d10f      	bne.n	8008090 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	440a      	add	r2, r1
 8008086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10b      	bne.n	80080ae <USB_HC_StartXfer+0x86>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d107      	bne.n	80080ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	785b      	ldrb	r3, [r3, #1]
 80080a2:	4619      	mov	r1, r3
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fa0f 	bl	80084c8 <USB_DoPing>
      return HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	e0f8      	b.n	80082a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d018      	beq.n	80080e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	8912      	ldrh	r2, [r2, #8]
 80080be:	4413      	add	r3, r2
 80080c0:	3b01      	subs	r3, #1
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	8912      	ldrh	r2, [r2, #8]
 80080c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80080ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80080cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080ce:	8b7b      	ldrh	r3, [r7, #26]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d90b      	bls.n	80080ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80080d4:	8b7b      	ldrh	r3, [r7, #26]
 80080d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	8912      	ldrh	r2, [r2, #8]
 80080de:	fb03 f202 	mul.w	r2, r3, r2
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	611a      	str	r2, [r3, #16]
 80080e6:	e001      	b.n	80080ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80080e8:	2301      	movs	r3, #1
 80080ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	78db      	ldrb	r3, [r3, #3]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	8912      	ldrh	r2, [r2, #8]
 80080fa:	fb03 f202 	mul.w	r2, r3, r2
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	611a      	str	r2, [r3, #16]
 8008102:	e003      	b.n	800810c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	695a      	ldr	r2, [r3, #20]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008116:	04d9      	lsls	r1, r3, #19
 8008118:	4b63      	ldr	r3, [pc, #396]	; (80082a8 <USB_HC_StartXfer+0x280>)
 800811a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800811c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	7a9b      	ldrb	r3, [r3, #10]
 8008122:	075b      	lsls	r3, r3, #29
 8008124:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	0148      	lsls	r0, r1, #5
 800812c:	6a39      	ldr	r1, [r7, #32]
 800812e:	4401      	add	r1, r0
 8008130:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008134:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008136:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008138:	79fb      	ldrb	r3, [r7, #7]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	68d9      	ldr	r1, [r3, #12]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814e:	460a      	mov	r2, r1
 8008150:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	0151      	lsls	r1, r2, #5
 800817c:	6a3a      	ldr	r2, [r7, #32]
 800817e:	440a      	add	r2, r1
 8008180:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008184:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008188:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	7e7b      	ldrb	r3, [r7, #25]
 800819a:	075b      	lsls	r3, r3, #29
 800819c:	69f9      	ldr	r1, [r7, #28]
 800819e:	0148      	lsls	r0, r1, #5
 80081a0:	6a39      	ldr	r1, [r7, #32]
 80081a2:	4401      	add	r1, r0
 80081a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	78db      	ldrb	r3, [r3, #3]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	e003      	b.n	80081de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f2:	461a      	mov	r2, r3
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e04e      	b.n	80082a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	78db      	ldrb	r3, [r3, #3]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d149      	bne.n	800829e <USB_HC_StartXfer+0x276>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d045      	beq.n	800829e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	79db      	ldrb	r3, [r3, #7]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d830      	bhi.n	800827c <USB_HC_StartXfer+0x254>
 800821a:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <USB_HC_StartXfer+0x1f8>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	08008231 	.word	0x08008231
 8008224:	08008255 	.word	0x08008255
 8008228:	08008231 	.word	0x08008231
 800822c:	08008255 	.word	0x08008255
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	3303      	adds	r3, #3
 8008236:	089b      	lsrs	r3, r3, #2
 8008238:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800823a:	8afa      	ldrh	r2, [r7, #22]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	b29b      	uxth	r3, r3
 8008242:	429a      	cmp	r2, r3
 8008244:	d91c      	bls.n	8008280 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	f043 0220 	orr.w	r2, r3, #32
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	619a      	str	r2, [r3, #24]
        }
        break;
 8008252:	e015      	b.n	8008280 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	3303      	adds	r3, #3
 800825a:	089b      	lsrs	r3, r3, #2
 800825c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800825e:	8afa      	ldrh	r2, [r7, #22]
 8008260:	6a3b      	ldr	r3, [r7, #32]
 8008262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	b29b      	uxth	r3, r3
 800826a:	429a      	cmp	r2, r3
 800826c:	d90a      	bls.n	8008284 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	619a      	str	r2, [r3, #24]
        }
        break;
 800827a:	e003      	b.n	8008284 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800827c:	bf00      	nop
 800827e:	e002      	b.n	8008286 <USB_HC_StartXfer+0x25e>
        break;
 8008280:	bf00      	nop
 8008282:	e000      	b.n	8008286 <USB_HC_StartXfer+0x25e>
        break;
 8008284:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	68d9      	ldr	r1, [r3, #12]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	785a      	ldrb	r2, [r3, #1]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	b29b      	uxth	r3, r3
 8008294:	2000      	movs	r0, #0
 8008296:	9000      	str	r0, [sp, #0]
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff fb31 	bl	8007900 <USB_WritePacket>
  }

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3728      	adds	r7, #40	; 0x28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	1ff80000 	.word	0x1ff80000

080082ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	b29b      	uxth	r3, r3
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b089      	sub	sp, #36	; 0x24
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	0c9b      	lsrs	r3, r3, #18
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	4413      	add	r3, r2
 8008304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	0fdb      	lsrs	r3, r3, #31
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b20      	cmp	r3, #32
 800831c:	d104      	bne.n	8008328 <USB_HC_Halt+0x5a>
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	e0c8      	b.n	80084ba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <USB_HC_Halt+0x66>
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d163      	bne.n	80083fc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800834e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008352:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 80ab 	bne.w	80084b8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d133      	bne.n	80083d6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	440a      	add	r2, r1
 8008384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800838c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	0151      	lsls	r1, r2, #5
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	440a      	add	r2, r1
 80083a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083ac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ba:	d81d      	bhi.n	80083f8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	015a      	lsls	r2, r3, #5
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	4413      	add	r3, r2
 80083c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083d2:	d0ec      	beq.n	80083ae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083d4:	e070      	b.n	80084b8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	0151      	lsls	r1, r2, #5
 80083e8:	69fa      	ldr	r2, [r7, #28]
 80083ea:	440a      	add	r2, r1
 80083ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083f6:	e05f      	b.n	80084b8 <USB_HC_Halt+0x1ea>
            break;
 80083f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083fa:	e05d      	b.n	80084b8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	4413      	add	r3, r2
 8008404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	69fa      	ldr	r2, [r7, #28]
 8008410:	440a      	add	r2, r1
 8008412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800841a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d133      	bne.n	8008494 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	4413      	add	r3, r2
 8008434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	69fa      	ldr	r2, [r7, #28]
 8008440:	440a      	add	r2, r1
 8008442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800844a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	440a      	add	r2, r1
 8008462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800846a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3301      	adds	r3, #1
 8008470:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008478:	d81d      	bhi.n	80084b6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800848c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008490:	d0ec      	beq.n	800846c <USB_HC_Halt+0x19e>
 8008492:	e011      	b.n	80084b8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	4413      	add	r3, r2
 800849c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	e000      	b.n	80084b8 <USB_HC_Halt+0x1ea>
          break;
 80084b6:	bf00      	nop
    }
  }

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3724      	adds	r7, #36	; 0x24
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
	...

080084c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084dc:	2301      	movs	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	04da      	lsls	r2, r3, #19
 80084e4:	4b15      	ldr	r3, [pc, #84]	; (800853c <USB_DoPing+0x74>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80084f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008510:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008518:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008526:	461a      	mov	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	371c      	adds	r7, #28
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	1ff80000 	.word	0x1ff80000

08008540 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff f911 	bl	800777c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800855a:	2110      	movs	r1, #16
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7ff f96b 	bl	8007838 <USB_FlushTxFifo>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff f997 	bl	80078a0 <USB_FlushRxFifo>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800857c:	2300      	movs	r3, #0
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	e01f      	b.n	80085c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008598:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b6:	461a      	mov	r2, r3
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	3301      	adds	r3, #1
 80085c0:	61bb      	str	r3, [r7, #24]
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	2b0f      	cmp	r3, #15
 80085c6:	d9dc      	bls.n	8008582 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085c8:	2300      	movs	r3, #0
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	e034      	b.n	8008638 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008602:	461a      	mov	r2, r3
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008614:	d80c      	bhi.n	8008630 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862c:	d0ec      	beq.n	8008608 <USB_StopHost+0xc8>
 800862e:	e000      	b.n	8008632 <USB_StopHost+0xf2>
        break;
 8008630:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	3301      	adds	r3, #1
 8008636:	61bb      	str	r3, [r7, #24]
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	2b0f      	cmp	r3, #15
 800863c:	d9c7      	bls.n	80085ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008644:	461a      	mov	r2, r3
 8008646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800864a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008652:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff f880 	bl	800775a <USB_EnableGlobalInt>

  return ret;
 800865a:	7ffb      	ldrb	r3, [r7, #31]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b089      	sub	sp, #36	; 0x24
 8008668:	af04      	add	r7, sp, #16
 800866a:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_FAIL ;
 800866c:	2302      	movs	r3, #2
 800866e:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8008674:	23ff      	movs	r3, #255	; 0xff
 8008676:	2203      	movs	r2, #3
 8008678:	2101      	movs	r1, #1
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fc4e 	bl	8008f1c <USBH_FindInterface>
 8008680:	4603      	mov	r3, r0
 8008682:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2bff      	cmp	r3, #255	; 0xff
 8008688:	d118      	bne.n	80086bc <USBH_MIDI_InterfaceInit+0x58>
	{
	  USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.");
 800868a:	4892      	ldr	r0, [pc, #584]	; (80088d4 <USBH_MIDI_InterfaceInit+0x270>)
 800868c:	f002 fd58 	bl	800b140 <iprintf>
 8008690:	4891      	ldr	r0, [pc, #580]	; (80088d8 <USBH_MIDI_InterfaceInit+0x274>)
 8008692:	f002 fd55 	bl	800b140 <iprintf>
 8008696:	200a      	movs	r0, #10
 8008698:	f002 fd6a 	bl	800b170 <putchar>
	  USBH_DbgLog (phost->pActiveClass->Name);
 800869c:	488d      	ldr	r0, [pc, #564]	; (80088d4 <USBH_MIDI_InterfaceInit+0x270>)
 800869e:	f002 fd4f 	bl	800b140 <iprintf>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f002 fd48 	bl	800b140 <iprintf>
 80086b0:	200a      	movs	r0, #10
 80086b2:	f002 fd5d 	bl	800b170 <putchar>
	  status = USBH_FAIL;
 80086b6:	2302      	movs	r3, #2
 80086b8:	73fb      	strb	r3, [r7, #15]
 80086ba:	e105      	b.n	80088c8 <USBH_MIDI_InterfaceInit+0x264>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	4619      	mov	r1, r3
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbc3 	bl	8008e4c <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80086cc:	201c      	movs	r0, #28
 80086ce:	f002 fc3f 	bl	800af50 <malloc>
 80086d2:	4603      	mov	r3, r0
 80086d4:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <USBH_MIDI_InterfaceInit+0x98>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
 80086e6:	487b      	ldr	r0, [pc, #492]	; (80088d4 <USBH_MIDI_InterfaceInit+0x270>)
 80086e8:	f002 fd2a 	bl	800b140 <iprintf>
 80086ec:	487b      	ldr	r0, [pc, #492]	; (80088dc <USBH_MIDI_InterfaceInit+0x278>)
 80086ee:	f002 fd27 	bl	800b140 <iprintf>
 80086f2:	200a      	movs	r0, #10
 80086f4:	f002 fd3c 	bl	800b170 <putchar>
			return USBH_FAIL;
 80086f8:	2302      	movs	r3, #2
 80086fa:	e0e6      	b.n	80088ca <USBH_MIDI_InterfaceInit+0x266>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 80086fc:	221c      	movs	r2, #28
 80086fe:	2100      	movs	r1, #0
 8008700:	68b8      	ldr	r0, [r7, #8]
 8008702:	f002 fc35 	bl	800af70 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800870c:	4619      	mov	r1, r3
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	231a      	movs	r3, #26
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	4413      	add	r3, r2
 8008718:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	b25b      	sxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	da1c      	bge.n	800875e <USBH_MIDI_InterfaceInit+0xfa>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800872a:	4619      	mov	r1, r3
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	231a      	movs	r3, #26
 8008730:	fb01 f303 	mul.w	r3, r1, r3
 8008734:	4413      	add	r3, r2
 8008736:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800873a:	781a      	ldrb	r2, [r3, #0]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008746:	4619      	mov	r1, r3
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	231a      	movs	r3, #26
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	4413      	add	r3, r2
 8008752:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008756:	881a      	ldrh	r2, [r3, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	811a      	strh	r2, [r3, #8]
 800875c:	e01b      	b.n	8008796 <USBH_MIDI_InterfaceInit+0x132>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008764:	4619      	mov	r1, r3
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	231a      	movs	r3, #26
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	4413      	add	r3, r2
 8008770:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008780:	4619      	mov	r1, r3
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	231a      	movs	r3, #26
 8008786:	fb01 f303 	mul.w	r3, r1, r3
 800878a:	4413      	add	r3, r2
 800878c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008790:	881a      	ldrh	r2, [r3, #0]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800879c:	4619      	mov	r1, r3
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	231a      	movs	r3, #26
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	4413      	add	r3, r2
 80087a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b25b      	sxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da1c      	bge.n	80087ee <USBH_MIDI_InterfaceInit+0x18a>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80087ba:	4619      	mov	r1, r3
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	231a      	movs	r3, #26
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	4413      	add	r3, r2
 80087c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80087d6:	4619      	mov	r1, r3
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	231a      	movs	r3, #26
 80087dc:	fb01 f303 	mul.w	r3, r1, r3
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80087e6:	881a      	ldrh	r2, [r3, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	811a      	strh	r2, [r3, #8]
 80087ec:	e01b      	b.n	8008826 <USBH_MIDI_InterfaceInit+0x1c2>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80087f4:	4619      	mov	r1, r3
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	231a      	movs	r3, #26
 80087fa:	fb01 f303 	mul.w	r3, r1, r3
 80087fe:	4413      	add	r3, r2
 8008800:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8008810:	4619      	mov	r1, r3
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	231a      	movs	r3, #26
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008820:	881a      	ldrh	r2, [r3, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	78db      	ldrb	r3, [r3, #3]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 fff6 	bl	800a81e <USBH_AllocPipe>
 8008832:	4603      	mov	r3, r0
 8008834:	461a      	mov	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 ffec 	bl	800a81e <USBH_AllocPipe>
 8008846:	4603      	mov	r3, r0
 8008848:	461a      	mov	r2, r3
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	7899      	ldrb	r1, [r3, #2]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	78d8      	ldrb	r0, [r3, #3]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	88d2      	ldrh	r2, [r2, #6]
 8008866:	9202      	str	r2, [sp, #8]
 8008868:	2202      	movs	r2, #2
 800886a:	9201      	str	r2, [sp, #4]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	4623      	mov	r3, r4
 8008870:	4602      	mov	r2, r0
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f001 ffa4 	bl	800a7c0 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	7859      	ldrb	r1, [r3, #1]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	7918      	ldrb	r0, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	8912      	ldrh	r2, [r2, #8]
 8008890:	9202      	str	r2, [sp, #8]
 8008892:	2202      	movs	r2, #2
 8008894:	9201      	str	r2, [sp, #4]
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	4623      	mov	r3, r4
 800889a:	4602      	mov	r2, r0
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 ff8f 	bl	800a7c0 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2200      	movs	r2, #0
 80088a6:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2200      	movs	r2, #0
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f002 fa9f 	bl	800adf4 <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	789b      	ldrb	r3, [r3, #2]
 80088ba:	2200      	movs	r2, #0
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 fa98 	bl	800adf4 <USBH_LL_SetToggle>
		status = USBH_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd90      	pop	{r4, r7, pc}
 80088d2:	bf00      	nop
 80088d4:	0800dd58 	.word	0x0800dd58
 80088d8:	0800dd64 	.word	0x0800dd64
 80088dc:	0800dd98 	.word	0x0800dd98

080088e0 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	789b      	ldrb	r3, [r3, #2]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00e      	beq.n	8008918 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	789b      	ldrb	r3, [r3, #2]
 80088fe:	4619      	mov	r1, r3
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 ff7c 	bl	800a7fe <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	789b      	ldrb	r3, [r3, #2]
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 ffa8 	bl	800a862 <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 ff69 	bl	800a7fe <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 ff95 	bl	800a862 <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	4618      	mov	r0, r3
 8008954:	f002 fb04 	bl	800af60 <free>
		phost->pActiveClass->pData = 0;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800895e:	2200      	movs	r2, #0
 8008960:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800897a:	2102      	movs	r1, #2
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3

	return USBH_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBH_MIDI_Stop>:
  *         Stop current MIDI Transmission
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_MIDI_Stop(USBH_HandleTypeDef *phost)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b084      	sub	sp, #16
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	60fb      	str	r3, [r7, #12]

  if(phost->gState == HOST_CLASS)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b0b      	cmp	r3, #11
 80089a4:	d10e      	bne.n	80089c4 <USBH_MIDI_Stop+0x3a>
  {
    MIDI_Handle->state = MIDI_IDLE_STATE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	701a      	strb	r2, [r3, #0]

    USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	785b      	ldrb	r3, [r3, #1]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 ff23 	bl	800a7fe <USBH_ClosePipe>
    USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	789b      	ldrb	r3, [r3, #2]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 ff1d 	bl	800a7fe <USBH_ClosePipe>
  }
  return USBH_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 80089d6:	2301      	movs	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d010      	beq.n	8008a12 <USBH_MIDI_Process+0x44>
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	dc1b      	bgt.n	8008a2c <USBH_MIDI_Process+0x5e>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <USBH_MIDI_Process+0x30>
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d003      	beq.n	8008a04 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 80089fc:	e016      	b.n	8008a2c <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
		break;
 8008a02:	e016      	b.n	8008a32 <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f86b 	bl	8008ae0 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f8d9 	bl	8008bc2 <MIDI_ProcessReception>
		break;
 8008a10:	e00f      	b.n	8008a32 <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f001 f9a2 	bl	8009d5e <USBH_ClrFeature>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
		break;
 8008a2a:	e001      	b.n	8008a30 <USBH_MIDI_Process+0x62>
		break;
 8008a2c:	bf00      	nop
 8008a2e:	e000      	b.n	8008a32 <USBH_MIDI_Process+0x64>
		break;
 8008a30:	bf00      	nop

	}

	return status;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USBH_MIDI_GetLastReceivedDataSize>:
 * @brief  This function return last recieved data size
 * @param  None
 * @retval None
 */
uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	60fb      	str	r3, [r7, #12]

	if(phost->gState == HOST_CLASS)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b0b      	cmp	r3, #11
 8008a6c:	d108      	bne.n	8008a80 <USBH_MIDI_GetLastReceivedDataSize+0x2e>
	{
		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	785b      	ldrb	r3, [r3, #1]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f002 f901 	bl	800ac7c <USBH_LL_GetLastXferSize>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	e000      	b.n	8008a82 <USBH_MIDI_GetLastReceivedDataSize+0x30>
	}
	else
	{
		return 0;
 8008a80:	2300      	movs	r3, #0
	}
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b087      	sub	sp, #28
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	4613      	mov	r3, r2
 8008a96:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <USBH_MIDI_Receive+0x2c>
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d10d      	bne.n	8008ad2 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	88fa      	ldrh	r2, [r7, #6]
 8008ac0:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2203      	movs	r2, #3
 8008acc:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	7e1b      	ldrb	r3, [r3, #24]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d002      	beq.n	8008b04 <MIDI_ProcessTransmission+0x24>
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d021      	beq.n	8008b46 <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 8008b02:	e05a      	b.n	8008bba <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8a9a      	ldrh	r2, [r3, #20]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	88db      	ldrh	r3, [r3, #6]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d90b      	bls.n	8008b28 <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68d9      	ldr	r1, [r3, #12]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	88da      	ldrh	r2, [r3, #6]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	789b      	ldrb	r3, [r3, #2]
 8008b1c:	2001      	movs	r0, #1
 8008b1e:	9000      	str	r0, [sp, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fe0a 	bl	800a73a <USBH_BulkSendData>
 8008b26:	e00a      	b.n	8008b3e <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68d9      	ldr	r1, [r3, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8a9a      	ldrh	r2, [r3, #20]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	789b      	ldrb	r3, [r3, #2]
 8008b34:	2001      	movs	r0, #1
 8008b36:	9000      	str	r0, [sp, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fdfe 	bl	800a73a <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2202      	movs	r2, #2
 8008b42:	761a      	strb	r2, [r3, #24]
		break;
 8008b44:	e039      	b.n	8008bba <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	789b      	ldrb	r3, [r3, #2]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f002 f927 	bl	800ada0 <USBH_LL_GetURBState>
 8008b52:	4603      	mov	r3, r0
 8008b54:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d127      	bne.n	8008bac <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	8a9a      	ldrh	r2, [r3, #20]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	88db      	ldrh	r3, [r3, #6]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d90f      	bls.n	8008b88 <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8a9a      	ldrh	r2, [r3, #20]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88db      	ldrh	r3, [r3, #6]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	88d2      	ldrh	r2, [r2, #6]
 8008b80:	441a      	add	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	60da      	str	r2, [r3, #12]
 8008b86:	e002      	b.n	8008b8e <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	8a9b      	ldrh	r3, [r3, #20]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	761a      	strb	r2, [r3, #24]
		break;
 8008b9c:	e00c      	b.n	8008bb8 <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f866 	bl	8008c76 <USBH_MIDI_TransmitCallback>
		break;
 8008baa:	e005      	b.n	8008bb8 <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8008bac:	7afb      	ldrb	r3, [r7, #11]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d102      	bne.n	8008bb8 <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	761a      	strb	r2, [r3, #24]
		break;
 8008bb8:	bf00      	nop
	}
}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	7e5b      	ldrb	r3, [r3, #25]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d002      	beq.n	8008be6 <MIDI_ProcessReception+0x24>
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d00d      	beq.n	8008c00 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 8008be4:	e043      	b.n	8008c6e <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6919      	ldr	r1, [r3, #16]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	891a      	ldrh	r2, [r3, #8]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 fdc6 	bl	800a784 <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	765a      	strb	r2, [r3, #25]
		break;
 8008bfe:	e036      	b.n	8008c6e <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	785b      	ldrb	r3, [r3, #1]
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f002 f8ca 	bl	800ada0 <USBH_LL_GetURBState>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 8008c10:	7afb      	ldrb	r3, [r7, #11]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d12a      	bne.n	8008c6c <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	785b      	ldrb	r3, [r3, #1]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f002 f82d 	bl	800ac7c <USBH_LL_GetLastXferSize>
 8008c22:	4603      	mov	r3, r0
 8008c24:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8adb      	ldrh	r3, [r3, #22]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	893b      	ldrh	r3, [r7, #8]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dd15      	ble.n	8008c60 <MIDI_ProcessReception+0x9e>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	891b      	ldrh	r3, [r3, #8]
 8008c38:	893a      	ldrh	r2, [r7, #8]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d910      	bls.n	8008c60 <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8ada      	ldrh	r2, [r3, #22]
 8008c42:	893b      	ldrh	r3, [r7, #8]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	691a      	ldr	r2, [r3, #16]
 8008c50:	893b      	ldrh	r3, [r7, #8]
 8008c52:	441a      	add	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	765a      	strb	r2, [r3, #25]
		break;
 8008c5e:	e005      	b.n	8008c6c <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7f8 ffe6 	bl	8001c38 <USBH_MIDI_ReceiveCallback>
		break;
 8008c6c:	bf00      	nop
	}
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]

}
 8008c7e:	bf00      	nop
 8008c80:	370c      	adds	r7, #12
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
	...

08008c8c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4613      	mov	r3, r2
 8008c98:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8008ca0:	481c      	ldr	r0, [pc, #112]	; (8008d14 <USBH_Init+0x88>)
 8008ca2:	f002 fa4d 	bl	800b140 <iprintf>
 8008ca6:	481c      	ldr	r0, [pc, #112]	; (8008d18 <USBH_Init+0x8c>)
 8008ca8:	f002 fa4a 	bl	800b140 <iprintf>
 8008cac:	200a      	movs	r0, #10
 8008cae:	f002 fa5f 	bl	800b170 <putchar>
    return USBH_FAIL;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e029      	b.n	8008d0a <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	79fa      	ldrb	r2, [r7, #7]
 8008cba:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f000 f824 	bl	8008d1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 ff06 	bl	800ab14 <USBH_LL_Init>

  return USBH_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	0800ddc0 	.word	0x0800ddc0
 8008d18:	0800ddc8 	.word	0x0800ddc8

08008d1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	e00a      	b.n	8008d44 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d9f1      	bls.n	8008d2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e009      	b.n	8008d64 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d6a:	d3f1      	bcc.n	8008d50 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2240      	movs	r2, #64	; 0x40
 8008d90:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d020      	beq.n	8008e1e <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10f      	bne.n	8008e06 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8008dec:	1c59      	adds	r1, r3, #1
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	f503 7389 	add.w	r3, r3, #274	; 0x112
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
 8008e04:	e016      	b.n	8008e34 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8008e06:	480e      	ldr	r0, [pc, #56]	; (8008e40 <USBH_RegisterClass+0x78>)
 8008e08:	f002 f99a 	bl	800b140 <iprintf>
 8008e0c:	480d      	ldr	r0, [pc, #52]	; (8008e44 <USBH_RegisterClass+0x7c>)
 8008e0e:	f002 f997 	bl	800b140 <iprintf>
 8008e12:	200a      	movs	r0, #10
 8008e14:	f002 f9ac 	bl	800b170 <putchar>
      status = USBH_FAIL;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	73fb      	strb	r3, [r7, #15]
 8008e1c:	e00a      	b.n	8008e34 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8008e1e:	4808      	ldr	r0, [pc, #32]	; (8008e40 <USBH_RegisterClass+0x78>)
 8008e20:	f002 f98e 	bl	800b140 <iprintf>
 8008e24:	4808      	ldr	r0, [pc, #32]	; (8008e48 <USBH_RegisterClass+0x80>)
 8008e26:	f002 f98b 	bl	800b140 <iprintf>
 8008e2a:	200a      	movs	r0, #10
 8008e2c:	f002 f9a0 	bl	800b170 <putchar>
    status = USBH_FAIL;
 8008e30:	2302      	movs	r3, #2
 8008e32:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	0800ddc0 	.word	0x0800ddc0
 8008e44:	0800dddc 	.word	0x0800dddc
 8008e48:	0800ddf8 	.word	0x0800ddf8

08008e4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d23c      	bcs.n	8008ee2 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	4619      	mov	r1, r3
 8008e74:	4823      	ldr	r0, [pc, #140]	; (8008f04 <USBH_SelectInterface+0xb8>)
 8008e76:	f002 f963 	bl	800b140 <iprintf>
 8008e7a:	200a      	movs	r0, #10
 8008e7c:	f002 f978 	bl	800b170 <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8008e80:	78fb      	ldrb	r3, [r7, #3]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	211a      	movs	r1, #26
 8008e86:	fb01 f303 	mul.w	r3, r1, r3
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f203 3347 	addw	r3, r3, #839	; 0x347
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4619      	mov	r1, r3
 8008e94:	481c      	ldr	r0, [pc, #112]	; (8008f08 <USBH_SelectInterface+0xbc>)
 8008e96:	f002 f953 	bl	800b140 <iprintf>
 8008e9a:	200a      	movs	r0, #10
 8008e9c:	f002 f968 	bl	800b170 <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	211a      	movs	r1, #26
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	4815      	ldr	r0, [pc, #84]	; (8008f0c <USBH_SelectInterface+0xc0>)
 8008eb6:	f002 f943 	bl	800b140 <iprintf>
 8008eba:	200a      	movs	r0, #10
 8008ebc:	f002 f958 	bl	800b170 <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	211a      	movs	r1, #26
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	4413      	add	r3, r2
 8008ecc:	f203 3349 	addw	r3, r3, #841	; 0x349
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	480e      	ldr	r0, [pc, #56]	; (8008f10 <USBH_SelectInterface+0xc4>)
 8008ed6:	f002 f933 	bl	800b140 <iprintf>
 8008eda:	200a      	movs	r0, #10
 8008edc:	f002 f948 	bl	800b170 <putchar>
 8008ee0:	e00a      	b.n	8008ef8 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8008ee2:	480c      	ldr	r0, [pc, #48]	; (8008f14 <USBH_SelectInterface+0xc8>)
 8008ee4:	f002 f92c 	bl	800b140 <iprintf>
 8008ee8:	480b      	ldr	r0, [pc, #44]	; (8008f18 <USBH_SelectInterface+0xcc>)
 8008eea:	f002 f929 	bl	800b140 <iprintf>
 8008eee:	200a      	movs	r0, #10
 8008ef0:	f002 f93e 	bl	800b170 <putchar>
    status = USBH_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	0800de10 	.word	0x0800de10
 8008f08:	0800de30 	.word	0x0800de30
 8008f0c:	0800de40 	.word	0x0800de40
 8008f10:	0800de50 	.word	0x0800de50
 8008f14:	0800ddc0 	.word	0x0800ddc0
 8008f18:	0800de60 	.word	0x0800de60

08008f1c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	4608      	mov	r0, r1
 8008f26:	4611      	mov	r1, r2
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	70fb      	strb	r3, [r7, #3]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70bb      	strb	r3, [r7, #2]
 8008f32:	4613      	mov	r3, r2
 8008f34:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f44:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f46:	e025      	b.n	8008f94 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	221a      	movs	r2, #26
 8008f4c:	fb02 f303 	mul.w	r3, r2, r3
 8008f50:	3308      	adds	r3, #8
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	3302      	adds	r3, #2
 8008f58:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	795b      	ldrb	r3, [r3, #5]
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d002      	beq.n	8008f6a <USBH_FindInterface+0x4e>
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	2bff      	cmp	r3, #255	; 0xff
 8008f68:	d111      	bne.n	8008f8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008f6e:	78ba      	ldrb	r2, [r7, #2]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d002      	beq.n	8008f7a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f74:	78bb      	ldrb	r3, [r7, #2]
 8008f76:	2bff      	cmp	r3, #255	; 0xff
 8008f78:	d109      	bne.n	8008f8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008f7e:	787a      	ldrb	r2, [r7, #1]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d002      	beq.n	8008f8a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008f84:	787b      	ldrb	r3, [r7, #1]
 8008f86:	2bff      	cmp	r3, #255	; 0xff
 8008f88:	d101      	bne.n	8008f8e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	e006      	b.n	8008f9c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	3301      	adds	r3, #1
 8008f92:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	2b09      	cmp	r3, #9
 8008f98:	d9d6      	bls.n	8008f48 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008f9a:	23ff      	movs	r3, #255	; 0xff
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	371c      	adds	r7, #28
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 fdeb 	bl	800ab8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 ff04 	bl	800adc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b088      	sub	sp, #32
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d102      	bne.n	8008fea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b0b      	cmp	r3, #11
 8008ff2:	f200 823d 	bhi.w	8009470 <USBH_Process+0x4a8>
 8008ff6:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <USBH_Process+0x34>)
 8008ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffc:	0800902d 	.word	0x0800902d
 8009000:	0800906b 	.word	0x0800906b
 8009004:	080090eb 	.word	0x080090eb
 8009008:	080093ff 	.word	0x080093ff
 800900c:	08009471 	.word	0x08009471
 8009010:	0800918f 	.word	0x0800918f
 8009014:	08009381 	.word	0x08009381
 8009018:	080091dd 	.word	0x080091dd
 800901c:	080091fd 	.word	0x080091fd
 8009020:	08009229 	.word	0x08009229
 8009024:	08009285 	.word	0x08009285
 8009028:	080093e7 	.word	0x080093e7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 821d 	beq.w	8009474 <USBH_Process+0x4ac>
      {
        USBH_UsrLog("USB Device Connected");
 800903a:	48a7      	ldr	r0, [pc, #668]	; (80092d8 <USBH_Process+0x310>)
 800903c:	f002 f880 	bl	800b140 <iprintf>
 8009040:	200a      	movs	r0, #10
 8009042:	f002 f895 	bl	800b170 <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800904c:	20c8      	movs	r0, #200	; 0xc8
 800904e:	f001 ff01 	bl	800ae54 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fdf7 	bl	800ac46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009068:	e204      	b.n	8009474 <USBH_Process+0x4ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009070:	2b01      	cmp	r3, #1
 8009072:	d10d      	bne.n	8009090 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8009074:	4899      	ldr	r0, [pc, #612]	; (80092dc <USBH_Process+0x314>)
 8009076:	f002 f863 	bl	800b140 <iprintf>
 800907a:	200a      	movs	r0, #10
 800907c:	f002 f878 	bl	800b170 <putchar>
        phost->device.RstCnt = 0U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800908e:	e1fe      	b.n	800948e <USBH_Process+0x4c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800909a:	d91a      	bls.n	80090d2 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80090a2:	3301      	adds	r3, #1
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d909      	bls.n	80090ca <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 80090b6:	488a      	ldr	r0, [pc, #552]	; (80092e0 <USBH_Process+0x318>)
 80090b8:	f002 f842 	bl	800b140 <iprintf>
 80090bc:	200a      	movs	r0, #10
 80090be:	f002 f857 	bl	800b170 <putchar>
            phost->gState = HOST_ABORT_STATE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	220d      	movs	r2, #13
 80090c6:	701a      	strb	r2, [r3, #0]
      break;
 80090c8:	e1e1      	b.n	800948e <USBH_Process+0x4c6>
            phost->gState = HOST_IDLE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
      break;
 80090d0:	e1dd      	b.n	800948e <USBH_Process+0x4c6>
          phost->Timeout += 10U;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80090d8:	f103 020a 	add.w	r2, r3, #10
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 80090e2:	200a      	movs	r0, #10
 80090e4:	f001 feb6 	bl	800ae54 <USBH_Delay>
      break;
 80090e8:	e1d1      	b.n	800948e <USBH_Process+0x4c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80090fa:	2104      	movs	r1, #4
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009100:	2064      	movs	r0, #100	; 0x64
 8009102:	f001 fea7 	bl	800ae54 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 fd76 	bl	800abf8 <USBH_LL_GetSpeed>
 800910c:	4603      	mov	r3, r0
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2205      	movs	r2, #5
 800911a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fb7d 	bl	800a81e <USBH_AllocPipe>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800912c:	2180      	movs	r1, #128	; 0x80
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fb75 	bl	800a81e <USBH_AllocPipe>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	7919      	ldrb	r1, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009150:	b292      	uxth	r2, r2
 8009152:	9202      	str	r2, [sp, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	9201      	str	r2, [sp, #4]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	4603      	mov	r3, r0
 800915c:	2280      	movs	r2, #128	; 0x80
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fb2e 	bl	800a7c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	7959      	ldrb	r1, [r3, #5]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009178:	b292      	uxth	r2, r2
 800917a:	9202      	str	r2, [sp, #8]
 800917c:	2200      	movs	r2, #0
 800917e:	9201      	str	r2, [sp, #4]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4603      	mov	r3, r0
 8009184:	2200      	movs	r2, #0
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f001 fb1a 	bl	800a7c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800918c:	e17f      	b.n	800948e <USBH_Process+0x4c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f990 	bl	80094b4 <USBH_HandleEnum>
 8009194:	4603      	mov	r3, r0
 8009196:	73bb      	strb	r3, [r7, #14]

      if (status == USBH_OK)
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 816b 	bne.w	8009478 <USBH_Process+0x4b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 80091a2:	4850      	ldr	r0, [pc, #320]	; (80092e4 <USBH_Process+0x31c>)
 80091a4:	f001 ffcc 	bl	800b140 <iprintf>
 80091a8:	200a      	movs	r0, #10
 80091aa:	f001 ffe1 	bl	800b170 <putchar>

        phost->device.current_interface = 0U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d109      	bne.n	80091d4 <USBH_Process+0x20c>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 80091c0:	4849      	ldr	r0, [pc, #292]	; (80092e8 <USBH_Process+0x320>)
 80091c2:	f001 ffbd 	bl	800b140 <iprintf>
 80091c6:	200a      	movs	r0, #10
 80091c8:	f001 ffd2 	bl	800b170 <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2208      	movs	r2, #8
 80091d0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091d2:	e151      	b.n	8009478 <USBH_Process+0x4b0>
          phost->gState = HOST_INPUT;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2207      	movs	r2, #7
 80091d8:	701a      	strb	r2, [r3, #0]
      break;
 80091da:	e14d      	b.n	8009478 <USBH_Process+0x4b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 814a 	beq.w	800947c <USBH_Process+0x4b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80091ee:	2101      	movs	r1, #1
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2208      	movs	r2, #8
 80091f8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80091fa:	e13f      	b.n	800947c <USBH_Process+0x4b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009202:	b29b      	uxth	r3, r3
 8009204:	4619      	mov	r1, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fd62 	bl	8009cd0 <USBH_SetCfg>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 8136 	bne.w	8009480 <USBH_Process+0x4b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2209      	movs	r2, #9
 8009218:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 800921a:	4834      	ldr	r0, [pc, #208]	; (80092ec <USBH_Process+0x324>)
 800921c:	f001 ff90 	bl	800b140 <iprintf>
 8009220:	200a      	movs	r0, #10
 8009222:	f001 ffa5 	bl	800b170 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009226:	e12b      	b.n	8009480 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d022      	beq.n	800927c <USBH_Process+0x2b4>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009236:	2101      	movs	r1, #1
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fd6c 	bl	8009d16 <USBH_SetFeature>
 800923e:	4603      	mov	r3, r0
 8009240:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009242:	7bbb      	ldrb	r3, [r7, #14]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <USBH_Process+0x296>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 800924a:	4829      	ldr	r0, [pc, #164]	; (80092f0 <USBH_Process+0x328>)
 800924c:	f001 ff78 	bl	800b140 <iprintf>
 8009250:	200a      	movs	r0, #10
 8009252:	f001 ff8d 	bl	800b170 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	220a      	movs	r2, #10
 800925a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800925c:	e112      	b.n	8009484 <USBH_Process+0x4bc>
        else if (status == USBH_NOT_SUPPORTED)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b03      	cmp	r3, #3
 8009264:	f040 810e 	bne.w	8009484 <USBH_Process+0x4bc>
          USBH_UsrLog("Remote wakeup not supported by the device");
 8009268:	4822      	ldr	r0, [pc, #136]	; (80092f4 <USBH_Process+0x32c>)
 800926a:	f001 ff69 	bl	800b140 <iprintf>
 800926e:	200a      	movs	r0, #10
 8009270:	f001 ff7e 	bl	800b170 <putchar>
          phost->gState = HOST_CHECK_CLASS;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	220a      	movs	r2, #10
 8009278:	701a      	strb	r2, [r3, #0]
      break;
 800927a:	e103      	b.n	8009484 <USBH_Process+0x4bc>
        phost->gState = HOST_CHECK_CLASS;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	220a      	movs	r2, #10
 8009280:	701a      	strb	r2, [r3, #0]
      break;
 8009282:	e0ff      	b.n	8009484 <USBH_Process+0x4bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800928a:	2b00      	cmp	r3, #0
 800928c:	d106      	bne.n	800929c <USBH_Process+0x2d4>
      {
        USBH_UsrLog("No Class has been registered.");
 800928e:	481a      	ldr	r0, [pc, #104]	; (80092f8 <USBH_Process+0x330>)
 8009290:	f001 ff56 	bl	800b140 <iprintf>
 8009294:	200a      	movs	r0, #10
 8009296:	f001 ff6b 	bl	800b170 <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800929a:	e0f8      	b.n	800948e <USBH_Process+0x4c6>
        phost->pActiveClass = NULL;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
 80092a8:	e02b      	b.n	8009302 <USBH_Process+0x33a>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80092aa:	7bfa      	ldrb	r2, [r7, #15]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80092b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b6:	791a      	ldrb	r2, [r3, #4]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80092be:	429a      	cmp	r2, r3
 80092c0:	d11c      	bne.n	80092fc <USBH_Process+0x334>
            phost->pActiveClass = phost->pClass[idx];
 80092c2:	7bfa      	ldrb	r2, [r7, #15]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80092ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 80092d4:	e018      	b.n	8009308 <USBH_Process+0x340>
 80092d6:	bf00      	nop
 80092d8:	0800de80 	.word	0x0800de80
 80092dc:	0800de98 	.word	0x0800de98
 80092e0:	0800deb4 	.word	0x0800deb4
 80092e4:	0800dee0 	.word	0x0800dee0
 80092e8:	0800def4 	.word	0x0800def4
 80092ec:	0800df1c 	.word	0x0800df1c
 80092f0:	0800df38 	.word	0x0800df38
 80092f4:	0800df58 	.word	0x0800df58
 80092f8:	0800df84 	.word	0x0800df84
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	3301      	adds	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0d0      	beq.n	80092aa <USBH_Process+0x2e2>
        if (phost->pActiveClass != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800930e:	2b00      	cmp	r3, #0
 8009310:	d02c      	beq.n	800936c <USBH_Process+0x3a4>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	4798      	blx	r3
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d114      	bne.n	800934e <USBH_Process+0x386>
            phost->gState = HOST_CLASS_REQUEST;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2206      	movs	r2, #6
 8009328:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4619      	mov	r1, r3
 8009334:	4858      	ldr	r0, [pc, #352]	; (8009498 <USBH_Process+0x4d0>)
 8009336:	f001 ff03 	bl	800b140 <iprintf>
 800933a:	200a      	movs	r0, #10
 800933c:	f001 ff18 	bl	800b170 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009346:	2103      	movs	r1, #3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
      break;
 800934c:	e09f      	b.n	800948e <USBH_Process+0x4c6>
            phost->gState = HOST_ABORT_STATE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	220d      	movs	r2, #13
 8009352:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4619      	mov	r1, r3
 800935e:	484f      	ldr	r0, [pc, #316]	; (800949c <USBH_Process+0x4d4>)
 8009360:	f001 feee 	bl	800b140 <iprintf>
 8009364:	200a      	movs	r0, #10
 8009366:	f001 ff03 	bl	800b170 <putchar>
      break;
 800936a:	e090      	b.n	800948e <USBH_Process+0x4c6>
          phost->gState = HOST_ABORT_STATE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	220d      	movs	r2, #13
 8009370:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 8009372:	484b      	ldr	r0, [pc, #300]	; (80094a0 <USBH_Process+0x4d8>)
 8009374:	f001 fee4 	bl	800b140 <iprintf>
 8009378:	200a      	movs	r0, #10
 800937a:	f001 fef9 	bl	800b170 <putchar>
      break;
 800937e:	e086      	b.n	800948e <USBH_Process+0x4c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d020      	beq.n	80093cc <USBH_Process+0x404>
      {
        status = phost->pActiveClass->Requests(phost);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	4798      	blx	r3
 8009396:	4603      	mov	r3, r0
 8009398:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <USBH_Process+0x3e2>
        {
          phost->gState = HOST_CLASS;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	220b      	movs	r2, #11
 80093a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093a8:	e06e      	b.n	8009488 <USBH_Process+0x4c0>
        else if (status == USBH_FAIL)
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d16a      	bne.n	8009488 <USBH_Process+0x4c0>
          phost->gState = HOST_ABORT_STATE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	220d      	movs	r2, #13
 80093b6:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80093b8:	483a      	ldr	r0, [pc, #232]	; (80094a4 <USBH_Process+0x4dc>)
 80093ba:	f001 fec1 	bl	800b140 <iprintf>
 80093be:	483a      	ldr	r0, [pc, #232]	; (80094a8 <USBH_Process+0x4e0>)
 80093c0:	f001 febe 	bl	800b140 <iprintf>
 80093c4:	200a      	movs	r0, #10
 80093c6:	f001 fed3 	bl	800b170 <putchar>
      break;
 80093ca:	e05d      	b.n	8009488 <USBH_Process+0x4c0>
        phost->gState = HOST_ABORT_STATE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	220d      	movs	r2, #13
 80093d0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 80093d2:	4834      	ldr	r0, [pc, #208]	; (80094a4 <USBH_Process+0x4dc>)
 80093d4:	f001 feb4 	bl	800b140 <iprintf>
 80093d8:	4834      	ldr	r0, [pc, #208]	; (80094ac <USBH_Process+0x4e4>)
 80093da:	f001 feb1 	bl	800b140 <iprintf>
 80093de:	200a      	movs	r0, #10
 80093e0:	f001 fec6 	bl	800b170 <putchar>
      break;
 80093e4:	e050      	b.n	8009488 <USBH_Process+0x4c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d04d      	beq.n	800948c <USBH_Process+0x4c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
      }
      break;
 80093fc:	e046      	b.n	800948c <USBH_Process+0x4c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f7ff fc88 	bl	8008d1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d009      	beq.n	800942a <USBH_Process+0x462>
      {
        phost->pActiveClass->DeInit(phost);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d005      	beq.n	8009440 <USBH_Process+0x478>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800943a:	2105      	movs	r1, #5
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 8009440:	481b      	ldr	r0, [pc, #108]	; (80094b0 <USBH_Process+0x4e8>)
 8009442:	f001 fe7d 	bl	800b140 <iprintf>
 8009446:	200a      	movs	r0, #10
 8009448:	f001 fe92 	bl	800b170 <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009452:	b2db      	uxtb	r3, r3
 8009454:	2b01      	cmp	r3, #1
 8009456:	d107      	bne.n	8009468 <USBH_Process+0x4a0>
      {
        phost->device.is_ReEnumerated = 0U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff fda1 	bl	8008fa8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009466:	e012      	b.n	800948e <USBH_Process+0x4c6>
        (void)USBH_LL_Start(phost);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f001 fb8f 	bl	800ab8c <USBH_LL_Start>
      break;
 800946e:	e00e      	b.n	800948e <USBH_Process+0x4c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009470:	bf00      	nop
 8009472:	e00c      	b.n	800948e <USBH_Process+0x4c6>
      break;
 8009474:	bf00      	nop
 8009476:	e00a      	b.n	800948e <USBH_Process+0x4c6>
      break;
 8009478:	bf00      	nop
 800947a:	e008      	b.n	800948e <USBH_Process+0x4c6>
    break;
 800947c:	bf00      	nop
 800947e:	e006      	b.n	800948e <USBH_Process+0x4c6>
      break;
 8009480:	bf00      	nop
 8009482:	e004      	b.n	800948e <USBH_Process+0x4c6>
      break;
 8009484:	bf00      	nop
 8009486:	e002      	b.n	800948e <USBH_Process+0x4c6>
      break;
 8009488:	bf00      	nop
 800948a:	e000      	b.n	800948e <USBH_Process+0x4c6>
      break;
 800948c:	bf00      	nop
  }
  return USBH_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	0800dfa4 	.word	0x0800dfa4
 800949c:	0800dfb8 	.word	0x0800dfb8
 80094a0:	0800dfd8 	.word	0x0800dfd8
 80094a4:	0800ddc0 	.word	0x0800ddc0
 80094a8:	0800e000 	.word	0x0800e000
 80094ac:	0800e028 	.word	0x0800e028
 80094b0:	0800e040 	.word	0x0800e040

080094b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af04      	add	r7, sp, #16
 80094ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80094bc:	2301      	movs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73bb      	strb	r3, [r7, #14]
  switch (phost->EnumState)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	2b07      	cmp	r3, #7
 80094ca:	f200 827f 	bhi.w	80099cc <USBH_HandleEnum+0x518>
 80094ce:	a201      	add	r2, pc, #4	; (adr r2, 80094d4 <USBH_HandleEnum+0x20>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	080094f5 	.word	0x080094f5
 80094d8:	080095d1 	.word	0x080095d1
 80094dc:	08009681 	.word	0x08009681
 80094e0:	08009741 	.word	0x08009741
 80094e4:	080097c9 	.word	0x080097c9
 80094e8:	0800987b 	.word	0x0800987b
 80094ec:	080098ef 	.word	0x080098ef
 80094f0:	08009961 	.word	0x08009961
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80094f4:	2108      	movs	r1, #8
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fb1a 	bl	8009b30 <USBH_Get_DevDesc>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d130      	bne.n	8009568 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	7919      	ldrb	r1, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800952a:	b292      	uxth	r2, r2
 800952c:	9202      	str	r2, [sp, #8]
 800952e:	2200      	movs	r2, #0
 8009530:	9201      	str	r2, [sp, #4]
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	4603      	mov	r3, r0
 8009536:	2280      	movs	r2, #128	; 0x80
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f941 	bl	800a7c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7959      	ldrb	r1, [r3, #5]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009552:	b292      	uxth	r2, r2
 8009554:	9202      	str	r2, [sp, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	9201      	str	r2, [sp, #4]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	4603      	mov	r3, r0
 800955e:	2200      	movs	r2, #0
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f001 f92d 	bl	800a7c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009566:	e233      	b.n	80099d0 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	2b03      	cmp	r3, #3
 800956c:	f040 8230 	bne.w	80099d0 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8009570:	48af      	ldr	r0, [pc, #700]	; (8009830 <USBH_HandleEnum+0x37c>)
 8009572:	f001 fde5 	bl	800b140 <iprintf>
 8009576:	48af      	ldr	r0, [pc, #700]	; (8009834 <USBH_HandleEnum+0x380>)
 8009578:	f001 fde2 	bl	800b140 <iprintf>
 800957c:	200a      	movs	r0, #10
 800957e:	f001 fdf7 	bl	800b170 <putchar>
        phost->device.EnumCnt++;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009588:	3301      	adds	r3, #1
 800958a:	b2da      	uxtb	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009598:	2b03      	cmp	r3, #3
 800959a:	d909      	bls.n	80095b0 <USBH_HandleEnum+0xfc>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800959c:	48a6      	ldr	r0, [pc, #664]	; (8009838 <USBH_HandleEnum+0x384>)
 800959e:	f001 fdcf 	bl	800b140 <iprintf>
 80095a2:	200a      	movs	r0, #10
 80095a4:	f001 fde4 	bl	800b170 <putchar>
          phost->gState = HOST_ABORT_STATE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	220d      	movs	r2, #13
 80095ac:	701a      	strb	r2, [r3, #0]
      break;
 80095ae:	e20f      	b.n	80099d0 <USBH_HandleEnum+0x51c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	795b      	ldrb	r3, [r3, #5]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f001 f953 	bl	800a862 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	791b      	ldrb	r3, [r3, #4]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f94d 	bl	800a862 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	701a      	strb	r2, [r3, #0]
      break;
 80095ce:	e1ff      	b.n	80099d0 <USBH_HandleEnum+0x51c>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80095d0:	2112      	movs	r1, #18
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 faac 	bl	8009b30 <USBH_Get_DevDesc>
 80095d8:	4603      	mov	r3, r0
 80095da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d117      	bne.n	8009612 <USBH_HandleEnum+0x15e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8b3 3330 	ldrh.w	r3, [r3, #816]	; 0x330
 80095e8:	4619      	mov	r1, r3
 80095ea:	4894      	ldr	r0, [pc, #592]	; (800983c <USBH_HandleEnum+0x388>)
 80095ec:	f001 fda8 	bl	800b140 <iprintf>
 80095f0:	200a      	movs	r0, #10
 80095f2:	f001 fdbd 	bl	800b170 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 332e 	ldrh.w	r3, [r3, #814]	; 0x32e
 80095fc:	4619      	mov	r1, r3
 80095fe:	4890      	ldr	r0, [pc, #576]	; (8009840 <USBH_HandleEnum+0x38c>)
 8009600:	f001 fd9e 	bl	800b140 <iprintf>
 8009604:	200a      	movs	r0, #10
 8009606:	f001 fdb3 	bl	800b170 <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2202      	movs	r2, #2
 800960e:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009610:	e1e0      	b.n	80099d4 <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b03      	cmp	r3, #3
 8009616:	f040 81dd 	bne.w	80099d4 <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800961a:	4885      	ldr	r0, [pc, #532]	; (8009830 <USBH_HandleEnum+0x37c>)
 800961c:	f001 fd90 	bl	800b140 <iprintf>
 8009620:	4888      	ldr	r0, [pc, #544]	; (8009844 <USBH_HandleEnum+0x390>)
 8009622:	f001 fd8d 	bl	800b140 <iprintf>
 8009626:	200a      	movs	r0, #10
 8009628:	f001 fda2 	bl	800b170 <putchar>
        phost->device.EnumCnt++;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009632:	3301      	adds	r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009642:	2b03      	cmp	r3, #3
 8009644:	d909      	bls.n	800965a <USBH_HandleEnum+0x1a6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009646:	487c      	ldr	r0, [pc, #496]	; (8009838 <USBH_HandleEnum+0x384>)
 8009648:	f001 fd7a 	bl	800b140 <iprintf>
 800964c:	200a      	movs	r0, #10
 800964e:	f001 fd8f 	bl	800b170 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	220d      	movs	r2, #13
 8009656:	701a      	strb	r2, [r3, #0]
      break;
 8009658:	e1bc      	b.n	80099d4 <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	795b      	ldrb	r3, [r3, #5]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f8fe 	bl	800a862 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	791b      	ldrb	r3, [r3, #4]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 f8f8 	bl	800a862 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
      break;
 800967e:	e1a9      	b.n	80099d4 <USBH_HandleEnum+0x520>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009680:	2101      	movs	r1, #1
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fb00 	bl	8009c88 <USBH_SetAddress>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d13c      	bne.n	800970c <USBH_HandleEnum+0x258>
      {
        USBH_Delay(2U);
 8009692:	2002      	movs	r0, #2
 8009694:	f001 fbde 	bl	800ae54 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 331c 	ldrb.w	r3, [r3, #796]	; 0x31c
 80096a6:	4619      	mov	r1, r3
 80096a8:	4867      	ldr	r0, [pc, #412]	; (8009848 <USBH_HandleEnum+0x394>)
 80096aa:	f001 fd49 	bl	800b140 <iprintf>
 80096ae:	200a      	movs	r0, #10
 80096b0:	f001 fd5e 	bl	800b170 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2203      	movs	r2, #3
 80096b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7919      	ldrb	r1, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096ce:	b292      	uxth	r2, r2
 80096d0:	9202      	str	r2, [sp, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	9201      	str	r2, [sp, #4]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	4603      	mov	r3, r0
 80096da:	2280      	movs	r2, #128	; 0x80
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 f86f 	bl	800a7c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	7959      	ldrb	r1, [r3, #5]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096f6:	b292      	uxth	r2, r2
 80096f8:	9202      	str	r2, [sp, #8]
 80096fa:	2200      	movs	r2, #0
 80096fc:	9201      	str	r2, [sp, #4]
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	4603      	mov	r3, r0
 8009702:	2200      	movs	r2, #0
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 f85b 	bl	800a7c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800970a:	e165      	b.n	80099d8 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	2b03      	cmp	r3, #3
 8009710:	f040 8162 	bne.w	80099d8 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8009714:	4846      	ldr	r0, [pc, #280]	; (8009830 <USBH_HandleEnum+0x37c>)
 8009716:	f001 fd13 	bl	800b140 <iprintf>
 800971a:	484c      	ldr	r0, [pc, #304]	; (800984c <USBH_HandleEnum+0x398>)
 800971c:	f001 fd10 	bl	800b140 <iprintf>
 8009720:	200a      	movs	r0, #10
 8009722:	f001 fd25 	bl	800b170 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8009726:	4844      	ldr	r0, [pc, #272]	; (8009838 <USBH_HandleEnum+0x384>)
 8009728:	f001 fd0a 	bl	800b140 <iprintf>
 800972c:	200a      	movs	r0, #10
 800972e:	f001 fd1f 	bl	800b170 <putchar>
        phost->gState = HOST_ABORT_STATE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	220d      	movs	r2, #13
 8009736:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	705a      	strb	r2, [r3, #1]
      break;
 800973e:	e14b      	b.n	80099d8 <USBH_HandleEnum+0x524>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009740:	2109      	movs	r1, #9
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa1c 	bl	8009b80 <USBH_Get_CfgDesc>
 8009748:	4603      	mov	r3, r0
 800974a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d103      	bne.n	800975a <USBH_HandleEnum+0x2a6>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2204      	movs	r2, #4
 8009756:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009758:	e140      	b.n	80099dc <USBH_HandleEnum+0x528>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800975a:	7bbb      	ldrb	r3, [r7, #14]
 800975c:	2b03      	cmp	r3, #3
 800975e:	f040 813d 	bne.w	80099dc <USBH_HandleEnum+0x528>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8009762:	4833      	ldr	r0, [pc, #204]	; (8009830 <USBH_HandleEnum+0x37c>)
 8009764:	f001 fcec 	bl	800b140 <iprintf>
 8009768:	4839      	ldr	r0, [pc, #228]	; (8009850 <USBH_HandleEnum+0x39c>)
 800976a:	f001 fce9 	bl	800b140 <iprintf>
 800976e:	200a      	movs	r0, #10
 8009770:	f001 fcfe 	bl	800b170 <putchar>
        phost->device.EnumCnt++;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800977a:	3301      	adds	r3, #1
 800977c:	b2da      	uxtb	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800978a:	2b03      	cmp	r3, #3
 800978c:	d909      	bls.n	80097a2 <USBH_HandleEnum+0x2ee>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800978e:	482a      	ldr	r0, [pc, #168]	; (8009838 <USBH_HandleEnum+0x384>)
 8009790:	f001 fcd6 	bl	800b140 <iprintf>
 8009794:	200a      	movs	r0, #10
 8009796:	f001 fceb 	bl	800b170 <putchar>
          phost->gState = HOST_ABORT_STATE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	220d      	movs	r2, #13
 800979e:	701a      	strb	r2, [r3, #0]
      break;
 80097a0:	e11c      	b.n	80099dc <USBH_HandleEnum+0x528>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	795b      	ldrb	r3, [r3, #5]
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 f85a 	bl	800a862 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	791b      	ldrb	r3, [r3, #4]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 f854 	bl	800a862 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	701a      	strb	r2, [r3, #0]
      break;
 80097c6:	e109      	b.n	80099dc <USBH_HandleEnum+0x528>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f9d5 	bl	8009b80 <USBH_Get_CfgDesc>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <USBH_HandleEnum+0x334>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2205      	movs	r2, #5
 80097e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097e6:	e0fb      	b.n	80099e0 <USBH_HandleEnum+0x52c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	f040 80f8 	bne.w	80099e0 <USBH_HandleEnum+0x52c>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 80097f0:	480f      	ldr	r0, [pc, #60]	; (8009830 <USBH_HandleEnum+0x37c>)
 80097f2:	f001 fca5 	bl	800b140 <iprintf>
 80097f6:	4816      	ldr	r0, [pc, #88]	; (8009850 <USBH_HandleEnum+0x39c>)
 80097f8:	f001 fca2 	bl	800b140 <iprintf>
 80097fc:	200a      	movs	r0, #10
 80097fe:	f001 fcb7 	bl	800b170 <putchar>
        phost->device.EnumCnt++;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009808:	3301      	adds	r3, #1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009818:	2b03      	cmp	r3, #3
 800981a:	d91b      	bls.n	8009854 <USBH_HandleEnum+0x3a0>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800981c:	4806      	ldr	r0, [pc, #24]	; (8009838 <USBH_HandleEnum+0x384>)
 800981e:	f001 fc8f 	bl	800b140 <iprintf>
 8009822:	200a      	movs	r0, #10
 8009824:	f001 fca4 	bl	800b170 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	220d      	movs	r2, #13
 800982c:	701a      	strb	r2, [r3, #0]
      break;
 800982e:	e0d7      	b.n	80099e0 <USBH_HandleEnum+0x52c>
 8009830:	0800ddc0 	.word	0x0800ddc0
 8009834:	0800e058 	.word	0x0800e058
 8009838:	0800e08c 	.word	0x0800e08c
 800983c:	0800e0cc 	.word	0x0800e0cc
 8009840:	0800e0d8 	.word	0x0800e0d8
 8009844:	0800e0e4 	.word	0x0800e0e4
 8009848:	0800e120 	.word	0x0800e120
 800984c:	0800e138 	.word	0x0800e138
 8009850:	0800e16c 	.word	0x0800e16c
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	795b      	ldrb	r3, [r3, #5]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f001 f801 	bl	800a862 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	791b      	ldrb	r3, [r3, #4]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fffb 	bl	800a862 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
      break;
 8009878:	e0b2      	b.n	80099e0 <USBH_HandleEnum+0x52c>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009880:	2b00      	cmp	r3, #0
 8009882:	d02a      	beq.n	80098da <USBH_HandleEnum+0x426>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009890:	23ff      	movs	r3, #255	; 0xff
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f998 	bl	8009bc8 <USBH_Get_StringDesc>
 8009898:	4603      	mov	r3, r0
 800989a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10d      	bne.n	80098be <USBH_HandleEnum+0x40a>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80098a8:	4619      	mov	r1, r3
 80098aa:	4853      	ldr	r0, [pc, #332]	; (80099f8 <USBH_HandleEnum+0x544>)
 80098ac:	f001 fc48 	bl	800b140 <iprintf>
 80098b0:	200a      	movs	r0, #10
 80098b2:	f001 fc5d 	bl	800b170 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2206      	movs	r2, #6
 80098ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098bc:	e092      	b.n	80099e4 <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	f040 808f 	bne.w	80099e4 <USBH_HandleEnum+0x530>
          USBH_UsrLog("Manufacturer : N/A");
 80098c6:	484d      	ldr	r0, [pc, #308]	; (80099fc <USBH_HandleEnum+0x548>)
 80098c8:	f001 fc3a 	bl	800b140 <iprintf>
 80098cc:	200a      	movs	r0, #10
 80098ce:	f001 fc4f 	bl	800b170 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2206      	movs	r2, #6
 80098d6:	705a      	strb	r2, [r3, #1]
      break;
 80098d8:	e084      	b.n	80099e4 <USBH_HandleEnum+0x530>
        USBH_UsrLog("Manufacturer : N/A");
 80098da:	4848      	ldr	r0, [pc, #288]	; (80099fc <USBH_HandleEnum+0x548>)
 80098dc:	f001 fc30 	bl	800b140 <iprintf>
 80098e0:	200a      	movs	r0, #10
 80098e2:	f001 fc45 	bl	800b170 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2206      	movs	r2, #6
 80098ea:	705a      	strb	r2, [r3, #1]
      break;
 80098ec:	e07a      	b.n	80099e4 <USBH_HandleEnum+0x530>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d029      	beq.n	800994c <USBH_HandleEnum+0x498>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009904:	23ff      	movs	r3, #255	; 0xff
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f95e 	bl	8009bc8 <USBH_Get_StringDesc>
 800990c:	4603      	mov	r3, r0
 800990e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009910:	7bbb      	ldrb	r3, [r7, #14]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10d      	bne.n	8009932 <USBH_HandleEnum+0x47e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800991c:	4619      	mov	r1, r3
 800991e:	4838      	ldr	r0, [pc, #224]	; (8009a00 <USBH_HandleEnum+0x54c>)
 8009920:	f001 fc0e 	bl	800b140 <iprintf>
 8009924:	200a      	movs	r0, #10
 8009926:	f001 fc23 	bl	800b170 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2207      	movs	r2, #7
 800992e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009930:	e05a      	b.n	80099e8 <USBH_HandleEnum+0x534>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b03      	cmp	r3, #3
 8009936:	d157      	bne.n	80099e8 <USBH_HandleEnum+0x534>
          USBH_UsrLog("Product : N/A");
 8009938:	4832      	ldr	r0, [pc, #200]	; (8009a04 <USBH_HandleEnum+0x550>)
 800993a:	f001 fc01 	bl	800b140 <iprintf>
 800993e:	200a      	movs	r0, #10
 8009940:	f001 fc16 	bl	800b170 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2207      	movs	r2, #7
 8009948:	705a      	strb	r2, [r3, #1]
      break;
 800994a:	e04d      	b.n	80099e8 <USBH_HandleEnum+0x534>
        USBH_UsrLog("Product : N/A");
 800994c:	482d      	ldr	r0, [pc, #180]	; (8009a04 <USBH_HandleEnum+0x550>)
 800994e:	f001 fbf7 	bl	800b140 <iprintf>
 8009952:	200a      	movs	r0, #10
 8009954:	f001 fc0c 	bl	800b170 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2207      	movs	r2, #7
 800995c:	705a      	strb	r2, [r3, #1]
      break;
 800995e:	e043      	b.n	80099e8 <USBH_HandleEnum+0x534>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009966:	2b00      	cmp	r3, #0
 8009968:	d027      	beq.n	80099ba <USBH_HandleEnum+0x506>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009976:	23ff      	movs	r3, #255	; 0xff
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f925 	bl	8009bc8 <USBH_Get_StringDesc>
 800997e:	4603      	mov	r3, r0
 8009980:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10c      	bne.n	80099a2 <USBH_HandleEnum+0x4ee>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800998e:	4619      	mov	r1, r3
 8009990:	481d      	ldr	r0, [pc, #116]	; (8009a08 <USBH_HandleEnum+0x554>)
 8009992:	f001 fbd5 	bl	800b140 <iprintf>
 8009996:	200a      	movs	r0, #10
 8009998:	f001 fbea 	bl	800b170 <putchar>
          Status = USBH_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80099a0:	e024      	b.n	80099ec <USBH_HandleEnum+0x538>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d121      	bne.n	80099ec <USBH_HandleEnum+0x538>
          USBH_UsrLog("Serial Number : N/A");
 80099a8:	4818      	ldr	r0, [pc, #96]	; (8009a0c <USBH_HandleEnum+0x558>)
 80099aa:	f001 fbc9 	bl	800b140 <iprintf>
 80099ae:	200a      	movs	r0, #10
 80099b0:	f001 fbde 	bl	800b170 <putchar>
          Status = USBH_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
      break;
 80099b8:	e018      	b.n	80099ec <USBH_HandleEnum+0x538>
        USBH_UsrLog("Serial Number : N/A");
 80099ba:	4814      	ldr	r0, [pc, #80]	; (8009a0c <USBH_HandleEnum+0x558>)
 80099bc:	f001 fbc0 	bl	800b140 <iprintf>
 80099c0:	200a      	movs	r0, #10
 80099c2:	f001 fbd5 	bl	800b170 <putchar>
        Status = USBH_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
      break;
 80099ca:	e00f      	b.n	80099ec <USBH_HandleEnum+0x538>

    default:
      break;
 80099cc:	bf00      	nop
 80099ce:	e00e      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099d0:	bf00      	nop
 80099d2:	e00c      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099d4:	bf00      	nop
 80099d6:	e00a      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099d8:	bf00      	nop
 80099da:	e008      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099dc:	bf00      	nop
 80099de:	e006      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099e0:	bf00      	nop
 80099e2:	e004      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099e4:	bf00      	nop
 80099e6:	e002      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099e8:	bf00      	nop
 80099ea:	e000      	b.n	80099ee <USBH_HandleEnum+0x53a>
      break;
 80099ec:	bf00      	nop
  }
  return Status;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	0800e1b0 	.word	0x0800e1b0
 80099fc:	0800e1c4 	.word	0x0800e1c4
 8009a00:	0800e1d8 	.word	0x0800e1d8
 8009a04:	0800e1e8 	.word	0x0800e1e8
 8009a08:	0800e1f8 	.word	0x0800e1f8
 8009a0c:	0800e20c 	.word	0x0800e20c

08009a10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f804 	bl	8009a52 <USBH_HandleSof>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b0b      	cmp	r3, #11
 8009a62:	d10a      	bne.n	8009a7a <USBH_HandleSof+0x28>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d005      	beq.n	8009a7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
  }
}
 8009a7a:	bf00      	nop
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009a92:	bf00      	nop
}
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009aae:	bf00      	nop
}
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f85a 	bl	800abc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	791b      	ldrb	r3, [r3, #4]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 fea4 	bl	800a862 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	795b      	ldrb	r3, [r3, #5]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 fe9e 	bl	800a862 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b4e:	2100      	movs	r1, #0
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f864 	bl	8009c1e <USBH_GetDescriptor>
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b6c:	78fa      	ldrb	r2, [r7, #3]
 8009b6e:	b292      	uxth	r2, r2
 8009b70:	4619      	mov	r1, r3
 8009b72:	f000 f918 	bl	8009da6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	331c      	adds	r3, #28
 8009b90:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009b92:	887b      	ldrh	r3, [r7, #2]
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f83d 	bl	8009c1e <USBH_GetDescriptor>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d107      	bne.n	8009bbe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009bae:	887b      	ldrh	r3, [r7, #2]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f987 	bl	8009ec8 <USBH_ParseCfgDesc>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af02      	add	r7, sp, #8
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	72fb      	strb	r3, [r7, #11]
 8009bd8:	4613      	mov	r3, r2
 8009bda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009bdc:	7afb      	ldrb	r3, [r7, #11]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009be4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009bec:	893b      	ldrh	r3, [r7, #8]
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f812 	bl	8009c1e <USBH_GetDescriptor>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d107      	bne.n	8009c14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009c0a:	893a      	ldrh	r2, [r7, #8]
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 fb28 	bl	800a264 <USBH_ParseStringDesc>
  }

  return status;
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3718      	adds	r7, #24
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	607b      	str	r3, [r7, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	72fb      	strb	r3, [r7, #11]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	789b      	ldrb	r3, [r3, #2]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d11c      	bne.n	8009c72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009c38:	7afb      	ldrb	r3, [r7, #11]
 8009c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2206      	movs	r2, #6
 8009c48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	893a      	ldrh	r2, [r7, #8]
 8009c4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009c50:	893b      	ldrh	r3, [r7, #8]
 8009c52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c5a:	d104      	bne.n	8009c66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f240 4209 	movw	r2, #1033	; 0x409
 8009c62:	829a      	strh	r2, [r3, #20]
 8009c64:	e002      	b.n	8009c6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8b3a      	ldrh	r2, [r7, #24]
 8009c70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009c72:	8b3b      	ldrh	r3, [r7, #24]
 8009c74:	461a      	mov	r2, r3
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fb41 	bl	800a300 <USBH_CtlReq>
 8009c7e:	4603      	mov	r3, r0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	789b      	ldrb	r3, [r3, #2]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d10f      	bne.n	8009cbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2205      	movs	r2, #5
 8009ca6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009ca8:	78fb      	ldrb	r3, [r7, #3]
 8009caa:	b29a      	uxth	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fb1d 	bl	800a300 <USBH_CtlReq>
 8009cc6:	4603      	mov	r3, r0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	789b      	ldrb	r3, [r3, #2]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d10e      	bne.n	8009d02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2209      	movs	r2, #9
 8009cee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	887a      	ldrh	r2, [r7, #2]
 8009cf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d02:	2200      	movs	r2, #0
 8009d04:	2100      	movs	r1, #0
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fafa 	bl	800a300 <USBH_CtlReq>
 8009d0c:	4603      	mov	r3, r0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	460b      	mov	r3, r1
 8009d20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	789b      	ldrb	r3, [r3, #2]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d10f      	bne.n	8009d4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2203      	movs	r2, #3
 8009d34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009d36:	78fb      	ldrb	r3, [r7, #3]
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 fad6 	bl	800a300 <USBH_CtlReq>
 8009d54:	4603      	mov	r3, r0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	789b      	ldrb	r3, [r3, #2]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d10f      	bne.n	8009d92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2202      	movs	r2, #2
 8009d76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009d92:	2200      	movs	r2, #0
 8009d94:	2100      	movs	r1, #0
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fab2 	bl	800a300 <USBH_CtlReq>
 8009d9c:	4603      	mov	r3, r0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b085      	sub	sp, #20
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	4613      	mov	r3, r2
 8009db2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	781a      	ldrb	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	785a      	ldrb	r2, [r3, #1]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	3302      	adds	r3, #2
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	3303      	adds	r3, #3
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	021b      	lsls	r3, r3, #8
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	791a      	ldrb	r2, [r3, #4]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	795a      	ldrb	r2, [r3, #5]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	799a      	ldrb	r2, [r3, #6]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	79da      	ldrb	r2, [r3, #7]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	79db      	ldrb	r3, [r3, #7]
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	dc11      	bgt.n	8009e2c <USBH_ParseDevDesc+0x86>
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	db16      	blt.n	8009e3a <USBH_ParseDevDesc+0x94>
 8009e0c:	3b08      	subs	r3, #8
 8009e0e:	2201      	movs	r2, #1
 8009e10:	fa02 f303 	lsl.w	r3, r2, r3
 8009e14:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bf14      	ite	ne
 8009e20:	2301      	movne	r3, #1
 8009e22:	2300      	moveq	r3, #0
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <USBH_ParseDevDesc+0x8a>
 8009e2a:	e006      	b.n	8009e3a <USBH_ParseDevDesc+0x94>
 8009e2c:	2b40      	cmp	r3, #64	; 0x40
 8009e2e:	d104      	bne.n	8009e3a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	79da      	ldrb	r2, [r3, #7]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	71da      	strb	r2, [r3, #7]
      break;
 8009e38:	e003      	b.n	8009e42 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2240      	movs	r2, #64	; 0x40
 8009e3e:	71da      	strb	r2, [r3, #7]
      break;
 8009e40:	bf00      	nop
  }

  if (length > 8U)
 8009e42:	88fb      	ldrh	r3, [r7, #6]
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d939      	bls.n	8009ebc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	3309      	adds	r3, #9
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	330a      	adds	r3, #10
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	330b      	adds	r3, #11
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	021b      	lsls	r3, r3, #8
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	330c      	adds	r3, #12
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	330d      	adds	r3, #13
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	021b      	lsls	r3, r3, #8
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	7b9a      	ldrb	r2, [r3, #14]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	7bda      	ldrb	r2, [r3, #15]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	7c1a      	ldrb	r2, [r3, #16]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	7c5a      	ldrb	r2, [r3, #17]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	745a      	strb	r2, [r3, #17]
  }
}
 8009ebc:	bf00      	nop
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr

08009ec8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08c      	sub	sp, #48	; 0x30
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]

  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009edc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	781a      	ldrb	r2, [r3, #0]
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	785a      	ldrb	r2, [r3, #1]
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	3302      	adds	r3, #2
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	3303      	adds	r3, #3
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	021b      	lsls	r3, r3, #8
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f24:	bf28      	it	cs
 8009f26:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	791a      	ldrb	r2, [r3, #4]
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	795a      	ldrb	r2, [r3, #5]
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	799a      	ldrb	r2, [r3, #6]
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	79da      	ldrb	r2, [r3, #7]
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	7a1a      	ldrb	r2, [r3, #8]
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b09      	cmp	r3, #9
 8009f5e:	d002      	beq.n	8009f66 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	2209      	movs	r2, #9
 8009f64:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	2b09      	cmp	r3, #9
 8009f6a:	f240 80a1 	bls.w	800a0b0 <USBH_ParseCfgDesc+0x1e8>
  {
    ptr = USB_LEN_CFG_DESC;
 8009f6e:	2309      	movs	r3, #9
 8009f70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f76:	e085      	b.n	800a084 <USBH_ParseCfgDesc+0x1bc>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009f78:	f107 0316 	add.w	r3, r7, #22
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f80:	f000 f9a3 	bl	800a2ca <USBH_GetNextDesc>
 8009f84:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	785b      	ldrb	r3, [r3, #1]
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d17a      	bne.n	800a084 <USBH_ParseCfgDesc+0x1bc>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b09      	cmp	r3, #9
 8009f94:	d002      	beq.n	8009f9c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f98:	2209      	movs	r2, #9
 8009f9a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fa0:	221a      	movs	r2, #26
 8009fa2:	fb02 f303 	mul.w	r3, r2, r3
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	6a3a      	ldr	r2, [r7, #32]
 8009faa:	4413      	add	r3, r2
 8009fac:	3302      	adds	r3, #2
 8009fae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fb2:	69f8      	ldr	r0, [r7, #28]
 8009fb4:	f000 f882 	bl	800a0bc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009fc2:	e047      	b.n	800a054 <USBH_ParseCfgDesc+0x18c>
        {

          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009fc4:	f107 0316 	add.w	r3, r7, #22
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fcc:	f000 f97d 	bl	800a2ca <USBH_GetNextDesc>
 8009fd0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	785b      	ldrb	r3, [r3, #1]
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	d13c      	bne.n	800a054 <USBH_ParseCfgDesc+0x18c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	795b      	ldrb	r3, [r3, #5]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d113      	bne.n	800a00a <USBH_ParseCfgDesc+0x142>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d003      	beq.n	8009ff2 <USBH_ParseCfgDesc+0x12a>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	799b      	ldrb	r3, [r3, #6]
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d10b      	bne.n	800a00a <USBH_ParseCfgDesc+0x142>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	79db      	ldrb	r3, [r3, #7]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10f      	bne.n	800a01a <USBH_ParseCfgDesc+0x152>
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d00b      	beq.n	800a01a <USBH_ParseCfgDesc+0x152>
              {
                pdesc->bLength = 0x09U;
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	2209      	movs	r2, #9
 800a006:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a008:	e007      	b.n	800a01a <USBH_ParseCfgDesc+0x152>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b07      	cmp	r3, #7
 800a010:	d004      	beq.n	800a01c <USBH_ParseCfgDesc+0x154>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	2207      	movs	r2, #7
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	e000      	b.n	800a01c <USBH_ParseCfgDesc+0x154>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a01a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a020:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a024:	3201      	adds	r2, #1
 800a026:	00d2      	lsls	r2, r2, #3
 800a028:	211a      	movs	r1, #26
 800a02a:	fb01 f303 	mul.w	r3, r1, r3
 800a02e:	4413      	add	r3, r2
 800a030:	3308      	adds	r3, #8
 800a032:	6a3a      	ldr	r2, [r7, #32]
 800a034:	4413      	add	r3, r2
 800a036:	3304      	adds	r3, #4
 800a038:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a03a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a03c:	69b9      	ldr	r1, [r7, #24]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 f86b 	bl	800a11a <USBH_ParseEPDesc>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a04a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a04e:	3301      	adds	r3, #1
 800a050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	791b      	ldrb	r3, [r3, #4]
 800a058:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d204      	bcs.n	800a06a <USBH_ParseCfgDesc+0x1a2>
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	885a      	ldrh	r2, [r3, #2]
 800a064:	8afb      	ldrh	r3, [r7, #22]
 800a066:	429a      	cmp	r2, r3
 800a068:	d8ac      	bhi.n	8009fc4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	791b      	ldrb	r3, [r3, #4]
 800a06e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a072:	429a      	cmp	r2, r3
 800a074:	d201      	bcs.n	800a07a <USBH_ParseCfgDesc+0x1b2>
        {
          return USBH_NOT_SUPPORTED;
 800a076:	2303      	movs	r3, #3
 800a078:	e01c      	b.n	800a0b4 <USBH_ParseCfgDesc+0x1ec>
        }

        if_ix++;
 800a07a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a07e:	3301      	adds	r3, #1
 800a080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a088:	2b09      	cmp	r3, #9
 800a08a:	d805      	bhi.n	800a098 <USBH_ParseCfgDesc+0x1d0>
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	885a      	ldrh	r2, [r3, #2]
 800a090:	8afb      	ldrh	r3, [r7, #22]
 800a092:	429a      	cmp	r2, r3
 800a094:	f63f af70 	bhi.w	8009f78 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	791b      	ldrb	r3, [r3, #4]
 800a09c:	2b0a      	cmp	r3, #10
 800a09e:	bf28      	it	cs
 800a0a0:	230a      	movcs	r3, #10
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d201      	bcs.n	800a0b0 <USBH_ParseCfgDesc+0x1e8>
    {
      return USBH_NOT_SUPPORTED;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e001      	b.n	800a0b4 <USBH_ParseCfgDesc+0x1ec>
    }
  }

  return status;
 800a0b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3730      	adds	r7, #48	; 0x30
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781a      	ldrb	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	785a      	ldrb	r2, [r3, #1]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	789a      	ldrb	r2, [r3, #2]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	78da      	ldrb	r2, [r3, #3]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	791a      	ldrb	r2, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	795a      	ldrb	r2, [r3, #5]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	799a      	ldrb	r2, [r3, #6]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	79da      	ldrb	r2, [r3, #7]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	7a1a      	ldrb	r2, [r3, #8]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	721a      	strb	r2, [r3, #8]
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b087      	sub	sp, #28
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	60b9      	str	r1, [r7, #8]
 800a124:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	781a      	ldrb	r2, [r3, #0]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	785a      	ldrb	r2, [r3, #1]
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	789a      	ldrb	r2, [r3, #2]
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	78da      	ldrb	r2, [r3, #3]
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3304      	adds	r3, #4
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b29a      	uxth	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	3305      	adds	r3, #5
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	4313      	orrs	r3, r2
 800a160:	b29a      	uxth	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	799a      	ldrb	r2, [r3, #6]
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	889b      	ldrh	r3, [r3, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d102      	bne.n	800a17c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a176:	2303      	movs	r3, #3
 800a178:	75fb      	strb	r3, [r7, #23]
 800a17a:	e033      	b.n	800a1e4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	889b      	ldrh	r3, [r3, #4]
 800a180:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	b29a      	uxth	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	889b      	ldrh	r3, [r3, #4]
 800a192:	b21a      	sxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b299      	uxth	r1, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3305      	adds	r3, #5
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d110      	bne.n	800a1d6 <USBH_ParseEPDesc+0xbc>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	b299      	uxth	r1, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3305      	adds	r3, #5
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1d2:	b21b      	sxth	r3, r3
 800a1d4:	e001      	b.n	800a1da <USBH_ParseEPDesc+0xc0>
 800a1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	b21b      	sxth	r3, r3
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d116      	bne.n	800a21c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	78db      	ldrb	r3, [r3, #3]
 800a1f2:	f003 0303 	and.w	r3, r3, #3
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d005      	beq.n	800a206 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	78db      	ldrb	r3, [r3, #3]
 800a1fe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a202:	2b03      	cmp	r3, #3
 800a204:	d127      	bne.n	800a256 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	799b      	ldrb	r3, [r3, #6]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <USBH_ParseEPDesc+0xfc>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	799b      	ldrb	r3, [r3, #6]
 800a212:	2b10      	cmp	r3, #16
 800a214:	d91f      	bls.n	800a256 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a216:	2303      	movs	r3, #3
 800a218:	75fb      	strb	r3, [r7, #23]
 800a21a:	e01c      	b.n	800a256 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	78db      	ldrb	r3, [r3, #3]
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d10a      	bne.n	800a23e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	799b      	ldrb	r3, [r3, #6]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <USBH_ParseEPDesc+0x11e>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	799b      	ldrb	r3, [r3, #6]
 800a234:	2b10      	cmp	r3, #16
 800a236:	d90e      	bls.n	800a256 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a238:	2303      	movs	r3, #3
 800a23a:	75fb      	strb	r3, [r7, #23]
 800a23c:	e00b      	b.n	800a256 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	78db      	ldrb	r3, [r3, #3]
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	2b03      	cmp	r3, #3
 800a248:	d105      	bne.n	800a256 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	799b      	ldrb	r3, [r3, #6]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a252:	2303      	movs	r3, #3
 800a254:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	371c      	adds	r7, #28
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	4613      	mov	r3, r2
 800a270:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3301      	adds	r3, #1
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d120      	bne.n	800a2be <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	1e9a      	subs	r2, r3, #2
 800a282:	88fb      	ldrh	r3, [r7, #6]
 800a284:	4293      	cmp	r3, r2
 800a286:	bf28      	it	cs
 800a288:	4613      	movcs	r3, r2
 800a28a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3302      	adds	r3, #2
 800a290:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a292:	2300      	movs	r3, #0
 800a294:	82fb      	strh	r3, [r7, #22]
 800a296:	e00b      	b.n	800a2b0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a298:	8afb      	ldrh	r3, [r7, #22]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	4413      	add	r3, r2
 800a29e:	781a      	ldrb	r2, [r3, #0]
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a2aa:	8afb      	ldrh	r3, [r7, #22]
 800a2ac:	3302      	adds	r3, #2
 800a2ae:	82fb      	strh	r3, [r7, #22]
 800a2b0:	8afa      	ldrh	r2, [r7, #22]
 800a2b2:	8abb      	ldrh	r3, [r7, #20]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d3ef      	bcc.n	800a298 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	701a      	strb	r2, [r3, #0]
  }
}
 800a2be:	bf00      	nop
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b085      	sub	sp, #20
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	881a      	ldrh	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]


  return (pnext);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4613      	mov	r3, r2
 800a30c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a30e:	2301      	movs	r3, #1
 800a310:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	789b      	ldrb	r3, [r3, #2]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d002      	beq.n	800a320 <USBH_CtlReq+0x20>
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d00f      	beq.n	800a33e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a31e:	e027      	b.n	800a370 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	88fa      	ldrh	r2, [r7, #6]
 800a32a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2201      	movs	r2, #1
 800a330:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2202      	movs	r2, #2
 800a336:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a338:	2301      	movs	r3, #1
 800a33a:	75fb      	strb	r3, [r7, #23]
      break;
 800a33c:	e018      	b.n	800a370 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f81c 	bl	800a37c <USBH_HandleControl>
 800a344:	4603      	mov	r3, r0
 800a346:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <USBH_CtlReq+0x54>
 800a34e:	7dfb      	ldrb	r3, [r7, #23]
 800a350:	2b03      	cmp	r3, #3
 800a352:	d106      	bne.n	800a362 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	761a      	strb	r2, [r3, #24]
      break;
 800a360:	e005      	b.n	800a36e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d102      	bne.n	800a36e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2201      	movs	r2, #1
 800a36c:	709a      	strb	r2, [r3, #2]
      break;
 800a36e:	bf00      	nop
  }
  return status;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3718      	adds	r7, #24
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af02      	add	r7, sp, #8
 800a382:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a384:	2301      	movs	r3, #1
 800a386:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a388:	2300      	movs	r3, #0
 800a38a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	7e1b      	ldrb	r3, [r3, #24]
 800a390:	3b01      	subs	r3, #1
 800a392:	2b0a      	cmp	r3, #10
 800a394:	f200 815f 	bhi.w	800a656 <USBH_HandleControl+0x2da>
 800a398:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <USBH_HandleControl+0x24>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a3cd 	.word	0x0800a3cd
 800a3a4:	0800a3e7 	.word	0x0800a3e7
 800a3a8:	0800a451 	.word	0x0800a451
 800a3ac:	0800a477 	.word	0x0800a477
 800a3b0:	0800a4af 	.word	0x0800a4af
 800a3b4:	0800a4d9 	.word	0x0800a4d9
 800a3b8:	0800a52b 	.word	0x0800a52b
 800a3bc:	0800a54d 	.word	0x0800a54d
 800a3c0:	0800a589 	.word	0x0800a589
 800a3c4:	0800a5af 	.word	0x0800a5af
 800a3c8:	0800a5ed 	.word	0x0800a5ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f103 0110 	add.w	r1, r3, #16
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	795b      	ldrb	r3, [r3, #5]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f951 	bl	800a680 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	761a      	strb	r2, [r3, #24]
      break;
 800a3e4:	e142      	b.n	800a66c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	795b      	ldrb	r3, [r3, #5]
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fcd7 	bl	800ada0 <USBH_LL_GetURBState>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d11e      	bne.n	800a43a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	7c1b      	ldrb	r3, [r3, #16]
 800a400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a404:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	8adb      	ldrh	r3, [r3, #22]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a40e:	7b7b      	ldrb	r3, [r7, #13]
 800a410:	2b80      	cmp	r3, #128	; 0x80
 800a412:	d103      	bne.n	800a41c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2203      	movs	r2, #3
 800a418:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a41a:	e11e      	b.n	800a65a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2205      	movs	r2, #5
 800a420:	761a      	strb	r2, [r3, #24]
      break;
 800a422:	e11a      	b.n	800a65a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 800a424:	7b7b      	ldrb	r3, [r7, #13]
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d103      	bne.n	800a432 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2209      	movs	r2, #9
 800a42e:	761a      	strb	r2, [r3, #24]
      break;
 800a430:	e113      	b.n	800a65a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2207      	movs	r2, #7
 800a436:	761a      	strb	r2, [r3, #24]
      break;
 800a438:	e10f      	b.n	800a65a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d003      	beq.n	800a448 <USBH_HandleControl+0xcc>
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b02      	cmp	r3, #2
 800a444:	f040 8109 	bne.w	800a65a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	220b      	movs	r2, #11
 800a44c:	761a      	strb	r2, [r3, #24]
      break;
 800a44e:	e104      	b.n	800a65a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a456:	b29a      	uxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6899      	ldr	r1, [r3, #8]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	899a      	ldrh	r2, [r3, #12]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	791b      	ldrb	r3, [r3, #4]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f948 	bl	800a6fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2204      	movs	r2, #4
 800a472:	761a      	strb	r2, [r3, #24]
      break;
 800a474:	e0fa      	b.n	800a66c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	791b      	ldrb	r3, [r3, #4]
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fc8f 	bl	800ada0 <USBH_LL_GetURBState>
 800a482:	4603      	mov	r3, r0
 800a484:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d102      	bne.n	800a492 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2209      	movs	r2, #9
 800a490:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b05      	cmp	r3, #5
 800a496:	d102      	bne.n	800a49e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a498:	2303      	movs	r3, #3
 800a49a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a49c:	e0df      	b.n	800a65e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 800a49e:	7bbb      	ldrb	r3, [r7, #14]
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	f040 80dc 	bne.w	800a65e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	220b      	movs	r2, #11
 800a4aa:	761a      	strb	r2, [r3, #24]
      break;
 800a4ac:	e0d7      	b.n	800a65e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6899      	ldr	r1, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	899a      	ldrh	r2, [r3, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	795b      	ldrb	r3, [r3, #5]
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	9000      	str	r0, [sp, #0]
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f8f8 	bl	800a6b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2206      	movs	r2, #6
 800a4d4:	761a      	strb	r2, [r3, #24]
      break;
 800a4d6:	e0c9      	b.n	800a66c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	795b      	ldrb	r3, [r3, #5]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fc5e 	bl	800ada0 <USBH_LL_GetURBState>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4e8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d103      	bne.n	800a4f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2207      	movs	r2, #7
 800a4f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4f4:	e0b5      	b.n	800a662 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 800a4f6:	7bbb      	ldrb	r3, [r7, #14]
 800a4f8:	2b05      	cmp	r3, #5
 800a4fa:	d105      	bne.n	800a508 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	220c      	movs	r2, #12
 800a500:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a502:	2303      	movs	r3, #3
 800a504:	73fb      	strb	r3, [r7, #15]
      break;
 800a506:	e0ac      	b.n	800a662 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d103      	bne.n	800a516 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2205      	movs	r2, #5
 800a512:	761a      	strb	r2, [r3, #24]
      break;
 800a514:	e0a5      	b.n	800a662 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 800a516:	7bbb      	ldrb	r3, [r7, #14]
 800a518:	2b04      	cmp	r3, #4
 800a51a:	f040 80a2 	bne.w	800a662 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	220b      	movs	r2, #11
 800a522:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a524:	2302      	movs	r3, #2
 800a526:	73fb      	strb	r3, [r7, #15]
      break;
 800a528:	e09b      	b.n	800a662 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	791b      	ldrb	r3, [r3, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8e3 	bl	800a6fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a53e:	b29a      	uxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2208      	movs	r2, #8
 800a548:	761a      	strb	r2, [r3, #24]

      break;
 800a54a:	e08f      	b.n	800a66c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	791b      	ldrb	r3, [r3, #4]
 800a550:	4619      	mov	r1, r3
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fc24 	bl	800ada0 <USBH_LL_GetURBState>
 800a558:	4603      	mov	r3, r0
 800a55a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d105      	bne.n	800a56e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	220d      	movs	r2, #13
 800a566:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a56c:	e07b      	b.n	800a666 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	2b04      	cmp	r3, #4
 800a572:	d103      	bne.n	800a57c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	220b      	movs	r2, #11
 800a578:	761a      	strb	r2, [r3, #24]
      break;
 800a57a:	e074      	b.n	800a666 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b05      	cmp	r3, #5
 800a580:	d171      	bne.n	800a666 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 800a582:	2303      	movs	r3, #3
 800a584:	73fb      	strb	r3, [r7, #15]
      break;
 800a586:	e06e      	b.n	800a666 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	795b      	ldrb	r3, [r3, #5]
 800a58c:	2201      	movs	r2, #1
 800a58e:	9200      	str	r2, [sp, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	2100      	movs	r1, #0
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f88d 	bl	800a6b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	761a      	strb	r2, [r3, #24]
      break;
 800a5ac:	e05e      	b.n	800a66c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	795b      	ldrb	r3, [r3, #5]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fbf3 	bl	800ada0 <USBH_LL_GetURBState>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a5be:	7bbb      	ldrb	r3, [r7, #14]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d105      	bne.n	800a5d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	220d      	movs	r2, #13
 800a5cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5ce:	e04c      	b.n	800a66a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5d0:	7bbb      	ldrb	r3, [r7, #14]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d103      	bne.n	800a5de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2209      	movs	r2, #9
 800a5da:	761a      	strb	r2, [r3, #24]
      break;
 800a5dc:	e045      	b.n	800a66a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 800a5de:	7bbb      	ldrb	r3, [r7, #14]
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d142      	bne.n	800a66a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	220b      	movs	r2, #11
 800a5e8:	761a      	strb	r2, [r3, #24]
      break;
 800a5ea:	e03e      	b.n	800a66a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	7e5b      	ldrb	r3, [r3, #25]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	765a      	strb	r2, [r3, #25]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7e5b      	ldrb	r3, [r3, #25]
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d806      	bhi.n	800a60e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2201      	movs	r2, #1
 800a60a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a60c:	e02e      	b.n	800a66c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a614:	2106      	movs	r1, #6
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 800a620:	4815      	ldr	r0, [pc, #84]	; (800a678 <USBH_HandleControl+0x2fc>)
 800a622:	f000 fd8d 	bl	800b140 <iprintf>
 800a626:	4815      	ldr	r0, [pc, #84]	; (800a67c <USBH_HandleControl+0x300>)
 800a628:	f000 fd8a 	bl	800b140 <iprintf>
 800a62c:	200a      	movs	r0, #10
 800a62e:	f000 fd9f 	bl	800b170 <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	795b      	ldrb	r3, [r3, #5]
 800a636:	4619      	mov	r1, r3
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f912 	bl	800a862 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	791b      	ldrb	r3, [r3, #4]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f90c 	bl	800a862 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a650:	2302      	movs	r3, #2
 800a652:	73fb      	strb	r3, [r7, #15]
      break;
 800a654:	e00a      	b.n	800a66c <USBH_HandleControl+0x2f0>

    default:
      break;
 800a656:	bf00      	nop
 800a658:	e008      	b.n	800a66c <USBH_HandleControl+0x2f0>
      break;
 800a65a:	bf00      	nop
 800a65c:	e006      	b.n	800a66c <USBH_HandleControl+0x2f0>
      break;
 800a65e:	bf00      	nop
 800a660:	e004      	b.n	800a66c <USBH_HandleControl+0x2f0>
      break;
 800a662:	bf00      	nop
 800a664:	e002      	b.n	800a66c <USBH_HandleControl+0x2f0>
      break;
 800a666:	bf00      	nop
 800a668:	e000      	b.n	800a66c <USBH_HandleControl+0x2f0>
      break;
 800a66a:	bf00      	nop
  }

  return status;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	0800e220 	.word	0x0800e220
 800a67c:	0800e228 	.word	0x0800e228

0800a680 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af04      	add	r7, sp, #16
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a68e:	79f9      	ldrb	r1, [r7, #7]
 800a690:	2300      	movs	r3, #0
 800a692:	9303      	str	r3, [sp, #12]
 800a694:	2308      	movs	r3, #8
 800a696:	9302      	str	r3, [sp, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	2300      	movs	r3, #0
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fb4a 	bl	800ad3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3710      	adds	r7, #16
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b088      	sub	sp, #32
 800a6b8:	af04      	add	r7, sp, #16
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	80fb      	strh	r3, [r7, #6]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6d8:	7979      	ldrb	r1, [r7, #5]
 800a6da:	7e3b      	ldrb	r3, [r7, #24]
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	88fb      	ldrh	r3, [r7, #6]
 800a6e0:	9302      	str	r3, [sp, #8]
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	9300      	str	r3, [sp, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 fb25 	bl	800ad3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af04      	add	r7, sp, #16
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	4611      	mov	r1, r2
 800a70a:	461a      	mov	r2, r3
 800a70c:	460b      	mov	r3, r1
 800a70e:	80fb      	strh	r3, [r7, #6]
 800a710:	4613      	mov	r3, r2
 800a712:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a714:	7979      	ldrb	r1, [r7, #5]
 800a716:	2300      	movs	r3, #0
 800a718:	9303      	str	r3, [sp, #12]
 800a71a:	88fb      	ldrh	r3, [r7, #6]
 800a71c:	9302      	str	r3, [sp, #8]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2301      	movs	r3, #1
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2300      	movs	r3, #0
 800a728:	2201      	movs	r2, #1
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 fb07 	bl	800ad3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a730:	2300      	movs	r3, #0

}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af04      	add	r7, sp, #16
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	4611      	mov	r1, r2
 800a746:	461a      	mov	r2, r3
 800a748:	460b      	mov	r3, r1
 800a74a:	80fb      	strh	r3, [r7, #6]
 800a74c:	4613      	mov	r3, r2
 800a74e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a75a:	2300      	movs	r3, #0
 800a75c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a75e:	7979      	ldrb	r1, [r7, #5]
 800a760:	7e3b      	ldrb	r3, [r7, #24]
 800a762:	9303      	str	r3, [sp, #12]
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	9302      	str	r3, [sp, #8]
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	9301      	str	r3, [sp, #4]
 800a76c:	2301      	movs	r3, #1
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2302      	movs	r3, #2
 800a772:	2200      	movs	r2, #0
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 fae2 	bl	800ad3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af04      	add	r7, sp, #16
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	4611      	mov	r1, r2
 800a790:	461a      	mov	r2, r3
 800a792:	460b      	mov	r3, r1
 800a794:	80fb      	strh	r3, [r7, #6]
 800a796:	4613      	mov	r3, r2
 800a798:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a79a:	7979      	ldrb	r1, [r7, #5]
 800a79c:	2300      	movs	r3, #0
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	9302      	str	r3, [sp, #8]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 fac4 	bl	800ad3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af04      	add	r7, sp, #16
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	70fb      	strb	r3, [r7, #3]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	70bb      	strb	r3, [r7, #2]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a7da:	7878      	ldrb	r0, [r7, #1]
 800a7dc:	78ba      	ldrb	r2, [r7, #2]
 800a7de:	78f9      	ldrb	r1, [r7, #3]
 800a7e0:	8b3b      	ldrh	r3, [r7, #24]
 800a7e2:	9302      	str	r3, [sp, #8]
 800a7e4:	7d3b      	ldrb	r3, [r7, #20]
 800a7e6:	9301      	str	r3, [sp, #4]
 800a7e8:	7c3b      	ldrb	r3, [r7, #16]
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fa57 	bl	800aca2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	460b      	mov	r3, r1
 800a808:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 fa76 	bl	800ad00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a81e:	b580      	push	{r7, lr}
 800a820:	b084      	sub	sp, #16
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
 800a826:	460b      	mov	r3, r1
 800a828:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f839 	bl	800a8a2 <USBH_GetFreePipe>
 800a830:	4603      	mov	r3, r0
 800a832:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a834:	89fb      	ldrh	r3, [r7, #14]
 800a836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d00b      	beq.n	800a856 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a83e:	78fa      	ldrb	r2, [r7, #3]
 800a840:	89fb      	ldrh	r3, [r7, #14]
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a856:	89fb      	ldrh	r3, [r7, #14]
 800a858:	b2db      	uxtb	r3, r3
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a86e:	78fb      	ldrb	r3, [r7, #3]
 800a870:	2b0f      	cmp	r3, #15
 800a872:	d80f      	bhi.n	800a894 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	440b      	add	r3, r1
 800a892:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b085      	sub	sp, #20
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	73fb      	strb	r3, [r7, #15]
 800a8b2:	e010      	b.n	800a8d6 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d102      	bne.n	800a8d0 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	e007      	b.n	800a8e0 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	73fb      	strb	r3, [r7, #15]
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b0f      	cmp	r3, #15
 800a8da:	d9eb      	bls.n	800a8b4 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a8dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	490e      	ldr	r1, [pc, #56]	; (800a92c <MX_USB_HOST_Init+0x40>)
 800a8f4:	480e      	ldr	r0, [pc, #56]	; (800a930 <MX_USB_HOST_Init+0x44>)
 800a8f6:	f7fe f9c9 	bl	8008c8c <USBH_Init>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a900:	f7f7 f970 	bl	8001be4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 800a904:	490b      	ldr	r1, [pc, #44]	; (800a934 <MX_USB_HOST_Init+0x48>)
 800a906:	480a      	ldr	r0, [pc, #40]	; (800a930 <MX_USB_HOST_Init+0x44>)
 800a908:	f7fe fa5e 	bl	8008dc8 <USBH_RegisterClass>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a912:	f7f7 f967 	bl	8001be4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a916:	4806      	ldr	r0, [pc, #24]	; (800a930 <MX_USB_HOST_Init+0x44>)
 800a918:	f7fe fb46 	bl	8008fa8 <USBH_Start>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a922:	f7f7 f95f 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a926:	bf00      	nop
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	0800a94d 	.word	0x0800a94d
 800a930:	20008380 	.word	0x20008380
 800a934:	20000018 	.word	0x20000018

0800a938 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a93c:	4802      	ldr	r0, [pc, #8]	; (800a948 <MX_USB_HOST_Process+0x10>)
 800a93e:	f7fe fb43 	bl	8008fc8 <USBH_Process>
}
 800a942:	bf00      	nop
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	20008380 	.word	0x20008380

0800a94c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d819      	bhi.n	800a994 <USBH_UserProcess+0x48>
 800a960:	a201      	add	r2, pc, #4	; (adr r2, 800a968 <USBH_UserProcess+0x1c>)
 800a962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a966:	bf00      	nop
 800a968:	0800a995 	.word	0x0800a995
 800a96c:	0800a985 	.word	0x0800a985
 800a970:	0800a995 	.word	0x0800a995
 800a974:	0800a98d 	.word	0x0800a98d
 800a978:	0800a97d 	.word	0x0800a97d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a97c:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <USBH_UserProcess+0x58>)
 800a97e:	2203      	movs	r2, #3
 800a980:	701a      	strb	r2, [r3, #0]
  break;
 800a982:	e008      	b.n	800a996 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a984:	4b07      	ldr	r3, [pc, #28]	; (800a9a4 <USBH_UserProcess+0x58>)
 800a986:	2202      	movs	r2, #2
 800a988:	701a      	strb	r2, [r3, #0]
  break;
 800a98a:	e004      	b.n	800a996 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a98c:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <USBH_UserProcess+0x58>)
 800a98e:	2201      	movs	r2, #1
 800a990:	701a      	strb	r2, [r3, #0]
  break;
 800a992:	e000      	b.n	800a996 <USBH_UserProcess+0x4a>

  default:
  break;
 800a994:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20008828 	.word	0x20008828

0800a9a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	; 0x28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9b0:	f107 0314 	add.w	r3, r7, #20
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	605a      	str	r2, [r3, #4]
 800a9ba:	609a      	str	r2, [r3, #8]
 800a9bc:	60da      	str	r2, [r3, #12]
 800a9be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9c8:	d147      	bne.n	800aa5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	613b      	str	r3, [r7, #16]
 800a9ce:	4b25      	ldr	r3, [pc, #148]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	4a24      	ldr	r2, [pc, #144]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800a9d4:	f043 0301 	orr.w	r3, r3, #1
 800a9d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a9da:	4b22      	ldr	r3, [pc, #136]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800a9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	613b      	str	r3, [r7, #16]
 800a9e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a9e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9f4:	f107 0314 	add.w	r3, r7, #20
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	481b      	ldr	r0, [pc, #108]	; (800aa68 <HAL_HCD_MspInit+0xc0>)
 800a9fc:	f7f8 fe0c 	bl	8003618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa06:	2302      	movs	r3, #2
 800aa08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa12:	230a      	movs	r3, #10
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa16:	f107 0314 	add.w	r3, r7, #20
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	4812      	ldr	r0, [pc, #72]	; (800aa68 <HAL_HCD_MspInit+0xc0>)
 800aa1e:	f7f8 fdfb 	bl	8003618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa22:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800aa24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa26:	4a0f      	ldr	r2, [pc, #60]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800aa28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa2c:	6353      	str	r3, [r2, #52]	; 0x34
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	4b0c      	ldr	r3, [pc, #48]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800aa34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa36:	4a0b      	ldr	r2, [pc, #44]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800aa38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa3c:	6453      	str	r3, [r2, #68]	; 0x44
 800aa3e:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <HAL_HCD_MspInit+0xbc>)
 800aa40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	2043      	movs	r0, #67	; 0x43
 800aa50:	f7f8 fa3b 	bl	8002eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa54:	2043      	movs	r0, #67	; 0x43
 800aa56:	f7f8 fa54 	bl	8002f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3728      	adds	r7, #40	; 0x28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	40023800 	.word	0x40023800
 800aa68:	40020000 	.word	0x40020000

0800aa6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe ffd7 	bl	8009a2e <USBH_LL_IncTimer>
}
 800aa80:	bf00      	nop
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff f80f 	bl	8009aba <USBH_LL_Connect>
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff f818 	bl	8009ae8 <USBH_LL_Disconnect>
}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
 800aacc:	4613      	mov	r3, r2
 800aace:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe ffc9 	bl	8009a82 <USBH_LL_PortEnabled>
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe ffc9 	bl	8009a9e <USBH_LL_PortDisabled>
}
 800ab0c:	bf00      	nop
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d12a      	bne.n	800ab7c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ab26:	4a18      	ldr	r2, [pc, #96]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a15      	ldr	r2, [pc, #84]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab32:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab36:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ab3e:	4b12      	ldr	r3, [pc, #72]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab40:	2208      	movs	r2, #8
 800ab42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ab44:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab4a:	4b0f      	ldr	r3, [pc, #60]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ab50:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab52:	2202      	movs	r2, #2
 800ab54:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ab5c:	480a      	ldr	r0, [pc, #40]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab5e:	f7f8 fef8 	bl	8003952 <HAL_HCD_Init>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ab68:	f7f7 f83c 	bl	8001be4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab6c:	4806      	ldr	r0, [pc, #24]	; (800ab88 <USBH_LL_Init+0x74>)
 800ab6e:	f7f9 fadc 	bl	800412a <HAL_HCD_GetCurrentFrame>
 800ab72:	4603      	mov	r3, r0
 800ab74:	4619      	mov	r1, r3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f7fe ff4a 	bl	8009a10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	2000882c 	.word	0x2000882c

0800ab8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7f9 fa4b 	bl	800403e <HAL_HCD_Start>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f95c 	bl	800ae6c <USBH_Get_USB_Status>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800abd8:	4618      	mov	r0, r3
 800abda:	f7f9 fa53 	bl	8004084 <HAL_HCD_Stop>
 800abde:	4603      	mov	r3, r0
 800abe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 f941 	bl	800ae6c <USBH_Get_USB_Status>
 800abea:	4603      	mov	r3, r0
 800abec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abee:	7bbb      	ldrb	r3, [r7, #14]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3710      	adds	r7, #16
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ac00:	2301      	movs	r3, #1
 800ac02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7f9 fa9b 	bl	8004146 <HAL_HCD_GetCurrentSpeed>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d00c      	beq.n	800ac30 <USBH_LL_GetSpeed+0x38>
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d80d      	bhi.n	800ac36 <USBH_LL_GetSpeed+0x3e>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <USBH_LL_GetSpeed+0x2c>
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d003      	beq.n	800ac2a <USBH_LL_GetSpeed+0x32>
 800ac22:	e008      	b.n	800ac36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]
    break;
 800ac28:	e008      	b.n	800ac3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2e:	e005      	b.n	800ac3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ac30:	2302      	movs	r3, #2
 800ac32:	73fb      	strb	r3, [r7, #15]
    break;
 800ac34:	e002      	b.n	800ac3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ac36:	2301      	movs	r3, #1
 800ac38:	73fb      	strb	r3, [r7, #15]
    break;
 800ac3a:	bf00      	nop
  }
  return  speed;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b084      	sub	sp, #16
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac52:	2300      	movs	r3, #0
 800ac54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7f9 fa2e 	bl	80040be <HAL_HCD_ResetPort>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 f8ff 	bl	800ae6c <USBH_Get_USB_Status>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f9 fa35 	bl	8004102 <HAL_HCD_HC_GetXferCount>
 800ac98:	4603      	mov	r3, r0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aca2:	b590      	push	{r4, r7, lr}
 800aca4:	b089      	sub	sp, #36	; 0x24
 800aca6:	af04      	add	r7, sp, #16
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	4608      	mov	r0, r1
 800acac:	4611      	mov	r1, r2
 800acae:	461a      	mov	r2, r3
 800acb0:	4603      	mov	r3, r0
 800acb2:	70fb      	strb	r3, [r7, #3]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70bb      	strb	r3, [r7, #2]
 800acb8:	4613      	mov	r3, r2
 800acba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800acca:	787c      	ldrb	r4, [r7, #1]
 800accc:	78ba      	ldrb	r2, [r7, #2]
 800acce:	78f9      	ldrb	r1, [r7, #3]
 800acd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acd2:	9302      	str	r3, [sp, #8]
 800acd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	4623      	mov	r3, r4
 800ace2:	f7f8 fe98 	bl	8003a16 <HAL_HCD_HC_Init>
 800ace6:	4603      	mov	r3, r0
 800ace8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800acea:	7bfb      	ldrb	r3, [r7, #15]
 800acec:	4618      	mov	r0, r3
 800acee:	f000 f8bd 	bl	800ae6c <USBH_Get_USB_Status>
 800acf2:	4603      	mov	r3, r0
 800acf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3714      	adds	r7, #20
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd90      	pop	{r4, r7, pc}

0800ad00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7f8 ff08 	bl	8003b34 <HAL_HCD_HC_Halt>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f89e 	bl	800ae6c <USBH_Get_USB_Status>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ad3e:	b590      	push	{r4, r7, lr}
 800ad40:	b089      	sub	sp, #36	; 0x24
 800ad42:	af04      	add	r7, sp, #16
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	4608      	mov	r0, r1
 800ad48:	4611      	mov	r1, r2
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	70fb      	strb	r3, [r7, #3]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70bb      	strb	r3, [r7, #2]
 800ad54:	4613      	mov	r3, r2
 800ad56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800ad66:	787c      	ldrb	r4, [r7, #1]
 800ad68:	78ba      	ldrb	r2, [r7, #2]
 800ad6a:	78f9      	ldrb	r1, [r7, #3]
 800ad6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad70:	9303      	str	r3, [sp, #12]
 800ad72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad74:	9302      	str	r3, [sp, #8]
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	4623      	mov	r3, r4
 800ad82:	f7f8 fefb 	bl	8003b7c <HAL_HCD_HC_SubmitRequest>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ad8a:	7bfb      	ldrb	r3, [r7, #15]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f000 f86d 	bl	800ae6c <USBH_Get_USB_Status>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3714      	adds	r7, #20
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd90      	pop	{r4, r7, pc}

0800ada0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800adb2:	78fa      	ldrb	r2, [r7, #3]
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7f9 f98f 	bl	80040da <HAL_HCD_HC_GetURBState>
 800adbc:	4603      	mov	r3, r0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800add8:	2b01      	cmp	r3, #1
 800adda:	d103      	bne.n	800ade4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 f870 	bl	800aec4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ade4:	20c8      	movs	r0, #200	; 0xc8
 800ade6:	f7f7 ff71 	bl	8002ccc <HAL_Delay>
  return USBH_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
 800ae00:	4613      	mov	r3, r2
 800ae02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ae0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ae0c:	78fb      	ldrb	r3, [r7, #3]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	212c      	movs	r1, #44	; 0x2c
 800ae12:	fb01 f303 	mul.w	r3, r1, r3
 800ae16:	4413      	add	r3, r2
 800ae18:	333b      	adds	r3, #59	; 0x3b
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d009      	beq.n	800ae34 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	212c      	movs	r1, #44	; 0x2c
 800ae26:	fb01 f303 	mul.w	r3, r1, r3
 800ae2a:	4413      	add	r3, r2
 800ae2c:	3354      	adds	r3, #84	; 0x54
 800ae2e:	78ba      	ldrb	r2, [r7, #2]
 800ae30:	701a      	strb	r2, [r3, #0]
 800ae32:	e008      	b.n	800ae46 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	212c      	movs	r1, #44	; 0x2c
 800ae3a:	fb01 f303 	mul.w	r3, r1, r3
 800ae3e:	4413      	add	r3, r2
 800ae40:	3355      	adds	r3, #85	; 0x55
 800ae42:	78ba      	ldrb	r2, [r7, #2]
 800ae44:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7f7 ff35 	bl	8002ccc <HAL_Delay>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae76:	2300      	movs	r3, #0
 800ae78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d817      	bhi.n	800aeb0 <USBH_Get_USB_Status+0x44>
 800ae80:	a201      	add	r2, pc, #4	; (adr r2, 800ae88 <USBH_Get_USB_Status+0x1c>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800ae99 	.word	0x0800ae99
 800ae8c:	0800ae9f 	.word	0x0800ae9f
 800ae90:	0800aea5 	.word	0x0800aea5
 800ae94:	0800aeab 	.word	0x0800aeab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9c:	e00b      	b.n	800aeb6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	73fb      	strb	r3, [r7, #15]
    break;
 800aea2:	e008      	b.n	800aeb6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
    break;
 800aea8:	e005      	b.n	800aeb6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	73fb      	strb	r3, [r7, #15]
    break;
 800aeae:	e002      	b.n	800aeb6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb4:	bf00      	nop
  }
  return usb_status;
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aed8:	2300      	movs	r3, #0
 800aeda:	73fb      	strb	r3, [r7, #15]
 800aedc:	e001      	b.n	800aee2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aede:	2301      	movs	r3, #1
 800aee0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
 800aee4:	461a      	mov	r2, r3
 800aee6:	2101      	movs	r1, #1
 800aee8:	4803      	ldr	r0, [pc, #12]	; (800aef8 <MX_DriverVbusFS+0x34>)
 800aeea:	f7f8 fd19 	bl	8003920 <HAL_GPIO_WritePin>
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40020800 	.word	0x40020800

0800aefc <__errno>:
 800aefc:	4b01      	ldr	r3, [pc, #4]	; (800af04 <__errno+0x8>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20000038 	.word	0x20000038

0800af08 <__libc_init_array>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4d0d      	ldr	r5, [pc, #52]	; (800af40 <__libc_init_array+0x38>)
 800af0c:	4c0d      	ldr	r4, [pc, #52]	; (800af44 <__libc_init_array+0x3c>)
 800af0e:	1b64      	subs	r4, r4, r5
 800af10:	10a4      	asrs	r4, r4, #2
 800af12:	2600      	movs	r6, #0
 800af14:	42a6      	cmp	r6, r4
 800af16:	d109      	bne.n	800af2c <__libc_init_array+0x24>
 800af18:	4d0b      	ldr	r5, [pc, #44]	; (800af48 <__libc_init_array+0x40>)
 800af1a:	4c0c      	ldr	r4, [pc, #48]	; (800af4c <__libc_init_array+0x44>)
 800af1c:	f002 fef6 	bl	800dd0c <_init>
 800af20:	1b64      	subs	r4, r4, r5
 800af22:	10a4      	asrs	r4, r4, #2
 800af24:	2600      	movs	r6, #0
 800af26:	42a6      	cmp	r6, r4
 800af28:	d105      	bne.n	800af36 <__libc_init_array+0x2e>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af30:	4798      	blx	r3
 800af32:	3601      	adds	r6, #1
 800af34:	e7ee      	b.n	800af14 <__libc_init_array+0xc>
 800af36:	f855 3b04 	ldr.w	r3, [r5], #4
 800af3a:	4798      	blx	r3
 800af3c:	3601      	adds	r6, #1
 800af3e:	e7f2      	b.n	800af26 <__libc_init_array+0x1e>
 800af40:	0800e518 	.word	0x0800e518
 800af44:	0800e518 	.word	0x0800e518
 800af48:	0800e518 	.word	0x0800e518
 800af4c:	0800e51c 	.word	0x0800e51c

0800af50 <malloc>:
 800af50:	4b02      	ldr	r3, [pc, #8]	; (800af5c <malloc+0xc>)
 800af52:	4601      	mov	r1, r0
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f000 b87f 	b.w	800b058 <_malloc_r>
 800af5a:	bf00      	nop
 800af5c:	20000038 	.word	0x20000038

0800af60 <free>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <free+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f000 b80b 	b.w	800af80 <_free_r>
 800af6a:	bf00      	nop
 800af6c:	20000038 	.word	0x20000038

0800af70 <memset>:
 800af70:	4402      	add	r2, r0
 800af72:	4603      	mov	r3, r0
 800af74:	4293      	cmp	r3, r2
 800af76:	d100      	bne.n	800af7a <memset+0xa>
 800af78:	4770      	bx	lr
 800af7a:	f803 1b01 	strb.w	r1, [r3], #1
 800af7e:	e7f9      	b.n	800af74 <memset+0x4>

0800af80 <_free_r>:
 800af80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af82:	2900      	cmp	r1, #0
 800af84:	d044      	beq.n	800b010 <_free_r+0x90>
 800af86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8a:	9001      	str	r0, [sp, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f1a1 0404 	sub.w	r4, r1, #4
 800af92:	bfb8      	it	lt
 800af94:	18e4      	addlt	r4, r4, r3
 800af96:	f000 fa09 	bl	800b3ac <__malloc_lock>
 800af9a:	4a1e      	ldr	r2, [pc, #120]	; (800b014 <_free_r+0x94>)
 800af9c:	9801      	ldr	r0, [sp, #4]
 800af9e:	6813      	ldr	r3, [r2, #0]
 800afa0:	b933      	cbnz	r3, 800afb0 <_free_r+0x30>
 800afa2:	6063      	str	r3, [r4, #4]
 800afa4:	6014      	str	r4, [r2, #0]
 800afa6:	b003      	add	sp, #12
 800afa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800afac:	f000 ba04 	b.w	800b3b8 <__malloc_unlock>
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	d908      	bls.n	800afc6 <_free_r+0x46>
 800afb4:	6825      	ldr	r5, [r4, #0]
 800afb6:	1961      	adds	r1, r4, r5
 800afb8:	428b      	cmp	r3, r1
 800afba:	bf01      	itttt	eq
 800afbc:	6819      	ldreq	r1, [r3, #0]
 800afbe:	685b      	ldreq	r3, [r3, #4]
 800afc0:	1949      	addeq	r1, r1, r5
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	e7ed      	b.n	800afa2 <_free_r+0x22>
 800afc6:	461a      	mov	r2, r3
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	b10b      	cbz	r3, 800afd0 <_free_r+0x50>
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d9fa      	bls.n	800afc6 <_free_r+0x46>
 800afd0:	6811      	ldr	r1, [r2, #0]
 800afd2:	1855      	adds	r5, r2, r1
 800afd4:	42a5      	cmp	r5, r4
 800afd6:	d10b      	bne.n	800aff0 <_free_r+0x70>
 800afd8:	6824      	ldr	r4, [r4, #0]
 800afda:	4421      	add	r1, r4
 800afdc:	1854      	adds	r4, r2, r1
 800afde:	42a3      	cmp	r3, r4
 800afe0:	6011      	str	r1, [r2, #0]
 800afe2:	d1e0      	bne.n	800afa6 <_free_r+0x26>
 800afe4:	681c      	ldr	r4, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	6053      	str	r3, [r2, #4]
 800afea:	4421      	add	r1, r4
 800afec:	6011      	str	r1, [r2, #0]
 800afee:	e7da      	b.n	800afa6 <_free_r+0x26>
 800aff0:	d902      	bls.n	800aff8 <_free_r+0x78>
 800aff2:	230c      	movs	r3, #12
 800aff4:	6003      	str	r3, [r0, #0]
 800aff6:	e7d6      	b.n	800afa6 <_free_r+0x26>
 800aff8:	6825      	ldr	r5, [r4, #0]
 800affa:	1961      	adds	r1, r4, r5
 800affc:	428b      	cmp	r3, r1
 800affe:	bf04      	itt	eq
 800b000:	6819      	ldreq	r1, [r3, #0]
 800b002:	685b      	ldreq	r3, [r3, #4]
 800b004:	6063      	str	r3, [r4, #4]
 800b006:	bf04      	itt	eq
 800b008:	1949      	addeq	r1, r1, r5
 800b00a:	6021      	streq	r1, [r4, #0]
 800b00c:	6054      	str	r4, [r2, #4]
 800b00e:	e7ca      	b.n	800afa6 <_free_r+0x26>
 800b010:	b003      	add	sp, #12
 800b012:	bd30      	pop	{r4, r5, pc}
 800b014:	20008b30 	.word	0x20008b30

0800b018 <sbrk_aligned>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	4e0e      	ldr	r6, [pc, #56]	; (800b054 <sbrk_aligned+0x3c>)
 800b01c:	460c      	mov	r4, r1
 800b01e:	6831      	ldr	r1, [r6, #0]
 800b020:	4605      	mov	r5, r0
 800b022:	b911      	cbnz	r1, 800b02a <sbrk_aligned+0x12>
 800b024:	f000 f8ba 	bl	800b19c <_sbrk_r>
 800b028:	6030      	str	r0, [r6, #0]
 800b02a:	4621      	mov	r1, r4
 800b02c:	4628      	mov	r0, r5
 800b02e:	f000 f8b5 	bl	800b19c <_sbrk_r>
 800b032:	1c43      	adds	r3, r0, #1
 800b034:	d00a      	beq.n	800b04c <sbrk_aligned+0x34>
 800b036:	1cc4      	adds	r4, r0, #3
 800b038:	f024 0403 	bic.w	r4, r4, #3
 800b03c:	42a0      	cmp	r0, r4
 800b03e:	d007      	beq.n	800b050 <sbrk_aligned+0x38>
 800b040:	1a21      	subs	r1, r4, r0
 800b042:	4628      	mov	r0, r5
 800b044:	f000 f8aa 	bl	800b19c <_sbrk_r>
 800b048:	3001      	adds	r0, #1
 800b04a:	d101      	bne.n	800b050 <sbrk_aligned+0x38>
 800b04c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b050:	4620      	mov	r0, r4
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	20008b34 	.word	0x20008b34

0800b058 <_malloc_r>:
 800b058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b05c:	1ccd      	adds	r5, r1, #3
 800b05e:	f025 0503 	bic.w	r5, r5, #3
 800b062:	3508      	adds	r5, #8
 800b064:	2d0c      	cmp	r5, #12
 800b066:	bf38      	it	cc
 800b068:	250c      	movcc	r5, #12
 800b06a:	2d00      	cmp	r5, #0
 800b06c:	4607      	mov	r7, r0
 800b06e:	db01      	blt.n	800b074 <_malloc_r+0x1c>
 800b070:	42a9      	cmp	r1, r5
 800b072:	d905      	bls.n	800b080 <_malloc_r+0x28>
 800b074:	230c      	movs	r3, #12
 800b076:	603b      	str	r3, [r7, #0]
 800b078:	2600      	movs	r6, #0
 800b07a:	4630      	mov	r0, r6
 800b07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b080:	4e2e      	ldr	r6, [pc, #184]	; (800b13c <_malloc_r+0xe4>)
 800b082:	f000 f993 	bl	800b3ac <__malloc_lock>
 800b086:	6833      	ldr	r3, [r6, #0]
 800b088:	461c      	mov	r4, r3
 800b08a:	bb34      	cbnz	r4, 800b0da <_malloc_r+0x82>
 800b08c:	4629      	mov	r1, r5
 800b08e:	4638      	mov	r0, r7
 800b090:	f7ff ffc2 	bl	800b018 <sbrk_aligned>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	4604      	mov	r4, r0
 800b098:	d14d      	bne.n	800b136 <_malloc_r+0xde>
 800b09a:	6834      	ldr	r4, [r6, #0]
 800b09c:	4626      	mov	r6, r4
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	d140      	bne.n	800b124 <_malloc_r+0xcc>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	eb04 0803 	add.w	r8, r4, r3
 800b0ac:	f000 f876 	bl	800b19c <_sbrk_r>
 800b0b0:	4580      	cmp	r8, r0
 800b0b2:	d13a      	bne.n	800b12a <_malloc_r+0xd2>
 800b0b4:	6821      	ldr	r1, [r4, #0]
 800b0b6:	3503      	adds	r5, #3
 800b0b8:	1a6d      	subs	r5, r5, r1
 800b0ba:	f025 0503 	bic.w	r5, r5, #3
 800b0be:	3508      	adds	r5, #8
 800b0c0:	2d0c      	cmp	r5, #12
 800b0c2:	bf38      	it	cc
 800b0c4:	250c      	movcc	r5, #12
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f7ff ffa5 	bl	800b018 <sbrk_aligned>
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d02b      	beq.n	800b12a <_malloc_r+0xd2>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	442b      	add	r3, r5
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	e00e      	b.n	800b0f8 <_malloc_r+0xa0>
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	1b52      	subs	r2, r2, r5
 800b0de:	d41e      	bmi.n	800b11e <_malloc_r+0xc6>
 800b0e0:	2a0b      	cmp	r2, #11
 800b0e2:	d916      	bls.n	800b112 <_malloc_r+0xba>
 800b0e4:	1961      	adds	r1, r4, r5
 800b0e6:	42a3      	cmp	r3, r4
 800b0e8:	6025      	str	r5, [r4, #0]
 800b0ea:	bf18      	it	ne
 800b0ec:	6059      	strne	r1, [r3, #4]
 800b0ee:	6863      	ldr	r3, [r4, #4]
 800b0f0:	bf08      	it	eq
 800b0f2:	6031      	streq	r1, [r6, #0]
 800b0f4:	5162      	str	r2, [r4, r5]
 800b0f6:	604b      	str	r3, [r1, #4]
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	f104 060b 	add.w	r6, r4, #11
 800b0fe:	f000 f95b 	bl	800b3b8 <__malloc_unlock>
 800b102:	f026 0607 	bic.w	r6, r6, #7
 800b106:	1d23      	adds	r3, r4, #4
 800b108:	1af2      	subs	r2, r6, r3
 800b10a:	d0b6      	beq.n	800b07a <_malloc_r+0x22>
 800b10c:	1b9b      	subs	r3, r3, r6
 800b10e:	50a3      	str	r3, [r4, r2]
 800b110:	e7b3      	b.n	800b07a <_malloc_r+0x22>
 800b112:	6862      	ldr	r2, [r4, #4]
 800b114:	42a3      	cmp	r3, r4
 800b116:	bf0c      	ite	eq
 800b118:	6032      	streq	r2, [r6, #0]
 800b11a:	605a      	strne	r2, [r3, #4]
 800b11c:	e7ec      	b.n	800b0f8 <_malloc_r+0xa0>
 800b11e:	4623      	mov	r3, r4
 800b120:	6864      	ldr	r4, [r4, #4]
 800b122:	e7b2      	b.n	800b08a <_malloc_r+0x32>
 800b124:	4634      	mov	r4, r6
 800b126:	6876      	ldr	r6, [r6, #4]
 800b128:	e7b9      	b.n	800b09e <_malloc_r+0x46>
 800b12a:	230c      	movs	r3, #12
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	4638      	mov	r0, r7
 800b130:	f000 f942 	bl	800b3b8 <__malloc_unlock>
 800b134:	e7a1      	b.n	800b07a <_malloc_r+0x22>
 800b136:	6025      	str	r5, [r4, #0]
 800b138:	e7de      	b.n	800b0f8 <_malloc_r+0xa0>
 800b13a:	bf00      	nop
 800b13c:	20008b30 	.word	0x20008b30

0800b140 <iprintf>:
 800b140:	b40f      	push	{r0, r1, r2, r3}
 800b142:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <iprintf+0x2c>)
 800b144:	b513      	push	{r0, r1, r4, lr}
 800b146:	681c      	ldr	r4, [r3, #0]
 800b148:	b124      	cbz	r4, 800b154 <iprintf+0x14>
 800b14a:	69a3      	ldr	r3, [r4, #24]
 800b14c:	b913      	cbnz	r3, 800b154 <iprintf+0x14>
 800b14e:	4620      	mov	r0, r4
 800b150:	f000 f88c 	bl	800b26c <__sinit>
 800b154:	ab05      	add	r3, sp, #20
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	68a1      	ldr	r1, [r4, #8]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	4620      	mov	r0, r4
 800b15e:	f000 f95b 	bl	800b418 <_vfiprintf_r>
 800b162:	b002      	add	sp, #8
 800b164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b168:	b004      	add	sp, #16
 800b16a:	4770      	bx	lr
 800b16c:	20000038 	.word	0x20000038

0800b170 <putchar>:
 800b170:	4b09      	ldr	r3, [pc, #36]	; (800b198 <putchar+0x28>)
 800b172:	b513      	push	{r0, r1, r4, lr}
 800b174:	681c      	ldr	r4, [r3, #0]
 800b176:	4601      	mov	r1, r0
 800b178:	b134      	cbz	r4, 800b188 <putchar+0x18>
 800b17a:	69a3      	ldr	r3, [r4, #24]
 800b17c:	b923      	cbnz	r3, 800b188 <putchar+0x18>
 800b17e:	9001      	str	r0, [sp, #4]
 800b180:	4620      	mov	r0, r4
 800b182:	f000 f873 	bl	800b26c <__sinit>
 800b186:	9901      	ldr	r1, [sp, #4]
 800b188:	68a2      	ldr	r2, [r4, #8]
 800b18a:	4620      	mov	r0, r4
 800b18c:	b002      	add	sp, #8
 800b18e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b192:	f000 bc05 	b.w	800b9a0 <_putc_r>
 800b196:	bf00      	nop
 800b198:	20000038 	.word	0x20000038

0800b19c <_sbrk_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d06      	ldr	r5, [pc, #24]	; (800b1b8 <_sbrk_r+0x1c>)
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	4608      	mov	r0, r1
 800b1a6:	602b      	str	r3, [r5, #0]
 800b1a8:	f7f7 f8e2 	bl	8002370 <_sbrk>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	d102      	bne.n	800b1b6 <_sbrk_r+0x1a>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	b103      	cbz	r3, 800b1b6 <_sbrk_r+0x1a>
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	20008b3c 	.word	0x20008b3c

0800b1bc <std>:
 800b1bc:	2300      	movs	r3, #0
 800b1be:	b510      	push	{r4, lr}
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b1c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1ca:	6083      	str	r3, [r0, #8]
 800b1cc:	8181      	strh	r1, [r0, #12]
 800b1ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b1d0:	81c2      	strh	r2, [r0, #14]
 800b1d2:	6183      	str	r3, [r0, #24]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	2208      	movs	r2, #8
 800b1d8:	305c      	adds	r0, #92	; 0x5c
 800b1da:	f7ff fec9 	bl	800af70 <memset>
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <std+0x38>)
 800b1e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b1e2:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <std+0x3c>)
 800b1e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1e6:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <std+0x40>)
 800b1e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1ea:	4b05      	ldr	r3, [pc, #20]	; (800b200 <std+0x44>)
 800b1ec:	6224      	str	r4, [r4, #32]
 800b1ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b1f0:	bd10      	pop	{r4, pc}
 800b1f2:	bf00      	nop
 800b1f4:	0800ba31 	.word	0x0800ba31
 800b1f8:	0800ba53 	.word	0x0800ba53
 800b1fc:	0800ba8b 	.word	0x0800ba8b
 800b200:	0800baaf 	.word	0x0800baaf

0800b204 <_cleanup_r>:
 800b204:	4901      	ldr	r1, [pc, #4]	; (800b20c <_cleanup_r+0x8>)
 800b206:	f000 b8af 	b.w	800b368 <_fwalk_reent>
 800b20a:	bf00      	nop
 800b20c:	0800bd89 	.word	0x0800bd89

0800b210 <__sfmoreglue>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	2268      	movs	r2, #104	; 0x68
 800b214:	1e4d      	subs	r5, r1, #1
 800b216:	4355      	muls	r5, r2
 800b218:	460e      	mov	r6, r1
 800b21a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b21e:	f7ff ff1b 	bl	800b058 <_malloc_r>
 800b222:	4604      	mov	r4, r0
 800b224:	b140      	cbz	r0, 800b238 <__sfmoreglue+0x28>
 800b226:	2100      	movs	r1, #0
 800b228:	e9c0 1600 	strd	r1, r6, [r0]
 800b22c:	300c      	adds	r0, #12
 800b22e:	60a0      	str	r0, [r4, #8]
 800b230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b234:	f7ff fe9c 	bl	800af70 <memset>
 800b238:	4620      	mov	r0, r4
 800b23a:	bd70      	pop	{r4, r5, r6, pc}

0800b23c <__sfp_lock_acquire>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__sfp_lock_acquire+0x8>)
 800b23e:	f000 b8b3 	b.w	800b3a8 <__retarget_lock_acquire_recursive>
 800b242:	bf00      	nop
 800b244:	20008b39 	.word	0x20008b39

0800b248 <__sfp_lock_release>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__sfp_lock_release+0x8>)
 800b24a:	f000 b8ae 	b.w	800b3aa <__retarget_lock_release_recursive>
 800b24e:	bf00      	nop
 800b250:	20008b39 	.word	0x20008b39

0800b254 <__sinit_lock_acquire>:
 800b254:	4801      	ldr	r0, [pc, #4]	; (800b25c <__sinit_lock_acquire+0x8>)
 800b256:	f000 b8a7 	b.w	800b3a8 <__retarget_lock_acquire_recursive>
 800b25a:	bf00      	nop
 800b25c:	20008b3a 	.word	0x20008b3a

0800b260 <__sinit_lock_release>:
 800b260:	4801      	ldr	r0, [pc, #4]	; (800b268 <__sinit_lock_release+0x8>)
 800b262:	f000 b8a2 	b.w	800b3aa <__retarget_lock_release_recursive>
 800b266:	bf00      	nop
 800b268:	20008b3a 	.word	0x20008b3a

0800b26c <__sinit>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	4604      	mov	r4, r0
 800b270:	f7ff fff0 	bl	800b254 <__sinit_lock_acquire>
 800b274:	69a3      	ldr	r3, [r4, #24]
 800b276:	b11b      	cbz	r3, 800b280 <__sinit+0x14>
 800b278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b27c:	f7ff bff0 	b.w	800b260 <__sinit_lock_release>
 800b280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b284:	6523      	str	r3, [r4, #80]	; 0x50
 800b286:	4b13      	ldr	r3, [pc, #76]	; (800b2d4 <__sinit+0x68>)
 800b288:	4a13      	ldr	r2, [pc, #76]	; (800b2d8 <__sinit+0x6c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b28e:	42a3      	cmp	r3, r4
 800b290:	bf04      	itt	eq
 800b292:	2301      	moveq	r3, #1
 800b294:	61a3      	streq	r3, [r4, #24]
 800b296:	4620      	mov	r0, r4
 800b298:	f000 f820 	bl	800b2dc <__sfp>
 800b29c:	6060      	str	r0, [r4, #4]
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 f81c 	bl	800b2dc <__sfp>
 800b2a4:	60a0      	str	r0, [r4, #8]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 f818 	bl	800b2dc <__sfp>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	60e0      	str	r0, [r4, #12]
 800b2b0:	2104      	movs	r1, #4
 800b2b2:	6860      	ldr	r0, [r4, #4]
 800b2b4:	f7ff ff82 	bl	800b1bc <std>
 800b2b8:	68a0      	ldr	r0, [r4, #8]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	2109      	movs	r1, #9
 800b2be:	f7ff ff7d 	bl	800b1bc <std>
 800b2c2:	68e0      	ldr	r0, [r4, #12]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	2112      	movs	r1, #18
 800b2c8:	f7ff ff78 	bl	800b1bc <std>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	61a3      	str	r3, [r4, #24]
 800b2d0:	e7d2      	b.n	800b278 <__sinit+0xc>
 800b2d2:	bf00      	nop
 800b2d4:	0800e270 	.word	0x0800e270
 800b2d8:	0800b205 	.word	0x0800b205

0800b2dc <__sfp>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	4607      	mov	r7, r0
 800b2e0:	f7ff ffac 	bl	800b23c <__sfp_lock_acquire>
 800b2e4:	4b1e      	ldr	r3, [pc, #120]	; (800b360 <__sfp+0x84>)
 800b2e6:	681e      	ldr	r6, [r3, #0]
 800b2e8:	69b3      	ldr	r3, [r6, #24]
 800b2ea:	b913      	cbnz	r3, 800b2f2 <__sfp+0x16>
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f7ff ffbd 	bl	800b26c <__sinit>
 800b2f2:	3648      	adds	r6, #72	; 0x48
 800b2f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	d503      	bpl.n	800b304 <__sfp+0x28>
 800b2fc:	6833      	ldr	r3, [r6, #0]
 800b2fe:	b30b      	cbz	r3, 800b344 <__sfp+0x68>
 800b300:	6836      	ldr	r6, [r6, #0]
 800b302:	e7f7      	b.n	800b2f4 <__sfp+0x18>
 800b304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b308:	b9d5      	cbnz	r5, 800b340 <__sfp+0x64>
 800b30a:	4b16      	ldr	r3, [pc, #88]	; (800b364 <__sfp+0x88>)
 800b30c:	60e3      	str	r3, [r4, #12]
 800b30e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b312:	6665      	str	r5, [r4, #100]	; 0x64
 800b314:	f000 f847 	bl	800b3a6 <__retarget_lock_init_recursive>
 800b318:	f7ff ff96 	bl	800b248 <__sfp_lock_release>
 800b31c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b324:	6025      	str	r5, [r4, #0]
 800b326:	61a5      	str	r5, [r4, #24]
 800b328:	2208      	movs	r2, #8
 800b32a:	4629      	mov	r1, r5
 800b32c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b330:	f7ff fe1e 	bl	800af70 <memset>
 800b334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b33c:	4620      	mov	r0, r4
 800b33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b340:	3468      	adds	r4, #104	; 0x68
 800b342:	e7d9      	b.n	800b2f8 <__sfp+0x1c>
 800b344:	2104      	movs	r1, #4
 800b346:	4638      	mov	r0, r7
 800b348:	f7ff ff62 	bl	800b210 <__sfmoreglue>
 800b34c:	4604      	mov	r4, r0
 800b34e:	6030      	str	r0, [r6, #0]
 800b350:	2800      	cmp	r0, #0
 800b352:	d1d5      	bne.n	800b300 <__sfp+0x24>
 800b354:	f7ff ff78 	bl	800b248 <__sfp_lock_release>
 800b358:	230c      	movs	r3, #12
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	e7ee      	b.n	800b33c <__sfp+0x60>
 800b35e:	bf00      	nop
 800b360:	0800e270 	.word	0x0800e270
 800b364:	ffff0001 	.word	0xffff0001

0800b368 <_fwalk_reent>:
 800b368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b36c:	4606      	mov	r6, r0
 800b36e:	4688      	mov	r8, r1
 800b370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b374:	2700      	movs	r7, #0
 800b376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b37a:	f1b9 0901 	subs.w	r9, r9, #1
 800b37e:	d505      	bpl.n	800b38c <_fwalk_reent+0x24>
 800b380:	6824      	ldr	r4, [r4, #0]
 800b382:	2c00      	cmp	r4, #0
 800b384:	d1f7      	bne.n	800b376 <_fwalk_reent+0xe>
 800b386:	4638      	mov	r0, r7
 800b388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b38c:	89ab      	ldrh	r3, [r5, #12]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d907      	bls.n	800b3a2 <_fwalk_reent+0x3a>
 800b392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b396:	3301      	adds	r3, #1
 800b398:	d003      	beq.n	800b3a2 <_fwalk_reent+0x3a>
 800b39a:	4629      	mov	r1, r5
 800b39c:	4630      	mov	r0, r6
 800b39e:	47c0      	blx	r8
 800b3a0:	4307      	orrs	r7, r0
 800b3a2:	3568      	adds	r5, #104	; 0x68
 800b3a4:	e7e9      	b.n	800b37a <_fwalk_reent+0x12>

0800b3a6 <__retarget_lock_init_recursive>:
 800b3a6:	4770      	bx	lr

0800b3a8 <__retarget_lock_acquire_recursive>:
 800b3a8:	4770      	bx	lr

0800b3aa <__retarget_lock_release_recursive>:
 800b3aa:	4770      	bx	lr

0800b3ac <__malloc_lock>:
 800b3ac:	4801      	ldr	r0, [pc, #4]	; (800b3b4 <__malloc_lock+0x8>)
 800b3ae:	f7ff bffb 	b.w	800b3a8 <__retarget_lock_acquire_recursive>
 800b3b2:	bf00      	nop
 800b3b4:	20008b38 	.word	0x20008b38

0800b3b8 <__malloc_unlock>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	; (800b3c0 <__malloc_unlock+0x8>)
 800b3ba:	f7ff bff6 	b.w	800b3aa <__retarget_lock_release_recursive>
 800b3be:	bf00      	nop
 800b3c0:	20008b38 	.word	0x20008b38

0800b3c4 <__sfputc_r>:
 800b3c4:	6893      	ldr	r3, [r2, #8]
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	b410      	push	{r4}
 800b3cc:	6093      	str	r3, [r2, #8]
 800b3ce:	da08      	bge.n	800b3e2 <__sfputc_r+0x1e>
 800b3d0:	6994      	ldr	r4, [r2, #24]
 800b3d2:	42a3      	cmp	r3, r4
 800b3d4:	db01      	blt.n	800b3da <__sfputc_r+0x16>
 800b3d6:	290a      	cmp	r1, #10
 800b3d8:	d103      	bne.n	800b3e2 <__sfputc_r+0x1e>
 800b3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3de:	f000 bb6b 	b.w	800bab8 <__swbuf_r>
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	1c58      	adds	r0, r3, #1
 800b3e6:	6010      	str	r0, [r2, #0]
 800b3e8:	7019      	strb	r1, [r3, #0]
 800b3ea:	4608      	mov	r0, r1
 800b3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <__sfputs_r>:
 800b3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	460f      	mov	r7, r1
 800b3f8:	4614      	mov	r4, r2
 800b3fa:	18d5      	adds	r5, r2, r3
 800b3fc:	42ac      	cmp	r4, r5
 800b3fe:	d101      	bne.n	800b404 <__sfputs_r+0x12>
 800b400:	2000      	movs	r0, #0
 800b402:	e007      	b.n	800b414 <__sfputs_r+0x22>
 800b404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b408:	463a      	mov	r2, r7
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7ff ffda 	bl	800b3c4 <__sfputc_r>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d1f3      	bne.n	800b3fc <__sfputs_r+0xa>
 800b414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b418 <_vfiprintf_r>:
 800b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b41c:	460d      	mov	r5, r1
 800b41e:	b09d      	sub	sp, #116	; 0x74
 800b420:	4614      	mov	r4, r2
 800b422:	4698      	mov	r8, r3
 800b424:	4606      	mov	r6, r0
 800b426:	b118      	cbz	r0, 800b430 <_vfiprintf_r+0x18>
 800b428:	6983      	ldr	r3, [r0, #24]
 800b42a:	b90b      	cbnz	r3, 800b430 <_vfiprintf_r+0x18>
 800b42c:	f7ff ff1e 	bl	800b26c <__sinit>
 800b430:	4b89      	ldr	r3, [pc, #548]	; (800b658 <_vfiprintf_r+0x240>)
 800b432:	429d      	cmp	r5, r3
 800b434:	d11b      	bne.n	800b46e <_vfiprintf_r+0x56>
 800b436:	6875      	ldr	r5, [r6, #4]
 800b438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b43a:	07d9      	lsls	r1, r3, #31
 800b43c:	d405      	bmi.n	800b44a <_vfiprintf_r+0x32>
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	059a      	lsls	r2, r3, #22
 800b442:	d402      	bmi.n	800b44a <_vfiprintf_r+0x32>
 800b444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b446:	f7ff ffaf 	bl	800b3a8 <__retarget_lock_acquire_recursive>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	071b      	lsls	r3, r3, #28
 800b44e:	d501      	bpl.n	800b454 <_vfiprintf_r+0x3c>
 800b450:	692b      	ldr	r3, [r5, #16]
 800b452:	b9eb      	cbnz	r3, 800b490 <_vfiprintf_r+0x78>
 800b454:	4629      	mov	r1, r5
 800b456:	4630      	mov	r0, r6
 800b458:	f000 fb92 	bl	800bb80 <__swsetup_r>
 800b45c:	b1c0      	cbz	r0, 800b490 <_vfiprintf_r+0x78>
 800b45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b460:	07dc      	lsls	r4, r3, #31
 800b462:	d50e      	bpl.n	800b482 <_vfiprintf_r+0x6a>
 800b464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b468:	b01d      	add	sp, #116	; 0x74
 800b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46e:	4b7b      	ldr	r3, [pc, #492]	; (800b65c <_vfiprintf_r+0x244>)
 800b470:	429d      	cmp	r5, r3
 800b472:	d101      	bne.n	800b478 <_vfiprintf_r+0x60>
 800b474:	68b5      	ldr	r5, [r6, #8]
 800b476:	e7df      	b.n	800b438 <_vfiprintf_r+0x20>
 800b478:	4b79      	ldr	r3, [pc, #484]	; (800b660 <_vfiprintf_r+0x248>)
 800b47a:	429d      	cmp	r5, r3
 800b47c:	bf08      	it	eq
 800b47e:	68f5      	ldreq	r5, [r6, #12]
 800b480:	e7da      	b.n	800b438 <_vfiprintf_r+0x20>
 800b482:	89ab      	ldrh	r3, [r5, #12]
 800b484:	0598      	lsls	r0, r3, #22
 800b486:	d4ed      	bmi.n	800b464 <_vfiprintf_r+0x4c>
 800b488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b48a:	f7ff ff8e 	bl	800b3aa <__retarget_lock_release_recursive>
 800b48e:	e7e9      	b.n	800b464 <_vfiprintf_r+0x4c>
 800b490:	2300      	movs	r3, #0
 800b492:	9309      	str	r3, [sp, #36]	; 0x24
 800b494:	2320      	movs	r3, #32
 800b496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b49e:	2330      	movs	r3, #48	; 0x30
 800b4a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b664 <_vfiprintf_r+0x24c>
 800b4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4a8:	f04f 0901 	mov.w	r9, #1
 800b4ac:	4623      	mov	r3, r4
 800b4ae:	469a      	mov	sl, r3
 800b4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4b4:	b10a      	cbz	r2, 800b4ba <_vfiprintf_r+0xa2>
 800b4b6:	2a25      	cmp	r2, #37	; 0x25
 800b4b8:	d1f9      	bne.n	800b4ae <_vfiprintf_r+0x96>
 800b4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b4be:	d00b      	beq.n	800b4d8 <_vfiprintf_r+0xc0>
 800b4c0:	465b      	mov	r3, fp
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ff93 	bl	800b3f2 <__sfputs_r>
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	f000 80aa 	beq.w	800b626 <_vfiprintf_r+0x20e>
 800b4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d4:	445a      	add	r2, fp
 800b4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 80a2 	beq.w	800b626 <_vfiprintf_r+0x20e>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ec:	f10a 0a01 	add.w	sl, sl, #1
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	9307      	str	r3, [sp, #28]
 800b4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4f8:	931a      	str	r3, [sp, #104]	; 0x68
 800b4fa:	4654      	mov	r4, sl
 800b4fc:	2205      	movs	r2, #5
 800b4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b502:	4858      	ldr	r0, [pc, #352]	; (800b664 <_vfiprintf_r+0x24c>)
 800b504:	f7f4 fe6c 	bl	80001e0 <memchr>
 800b508:	9a04      	ldr	r2, [sp, #16]
 800b50a:	b9d8      	cbnz	r0, 800b544 <_vfiprintf_r+0x12c>
 800b50c:	06d1      	lsls	r1, r2, #27
 800b50e:	bf44      	itt	mi
 800b510:	2320      	movmi	r3, #32
 800b512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b516:	0713      	lsls	r3, r2, #28
 800b518:	bf44      	itt	mi
 800b51a:	232b      	movmi	r3, #43	; 0x2b
 800b51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b520:	f89a 3000 	ldrb.w	r3, [sl]
 800b524:	2b2a      	cmp	r3, #42	; 0x2a
 800b526:	d015      	beq.n	800b554 <_vfiprintf_r+0x13c>
 800b528:	9a07      	ldr	r2, [sp, #28]
 800b52a:	4654      	mov	r4, sl
 800b52c:	2000      	movs	r0, #0
 800b52e:	f04f 0c0a 	mov.w	ip, #10
 800b532:	4621      	mov	r1, r4
 800b534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b538:	3b30      	subs	r3, #48	; 0x30
 800b53a:	2b09      	cmp	r3, #9
 800b53c:	d94e      	bls.n	800b5dc <_vfiprintf_r+0x1c4>
 800b53e:	b1b0      	cbz	r0, 800b56e <_vfiprintf_r+0x156>
 800b540:	9207      	str	r2, [sp, #28]
 800b542:	e014      	b.n	800b56e <_vfiprintf_r+0x156>
 800b544:	eba0 0308 	sub.w	r3, r0, r8
 800b548:	fa09 f303 	lsl.w	r3, r9, r3
 800b54c:	4313      	orrs	r3, r2
 800b54e:	9304      	str	r3, [sp, #16]
 800b550:	46a2      	mov	sl, r4
 800b552:	e7d2      	b.n	800b4fa <_vfiprintf_r+0xe2>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	1d19      	adds	r1, r3, #4
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	9103      	str	r1, [sp, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfbb      	ittet	lt
 800b560:	425b      	neglt	r3, r3
 800b562:	f042 0202 	orrlt.w	r2, r2, #2
 800b566:	9307      	strge	r3, [sp, #28]
 800b568:	9307      	strlt	r3, [sp, #28]
 800b56a:	bfb8      	it	lt
 800b56c:	9204      	strlt	r2, [sp, #16]
 800b56e:	7823      	ldrb	r3, [r4, #0]
 800b570:	2b2e      	cmp	r3, #46	; 0x2e
 800b572:	d10c      	bne.n	800b58e <_vfiprintf_r+0x176>
 800b574:	7863      	ldrb	r3, [r4, #1]
 800b576:	2b2a      	cmp	r3, #42	; 0x2a
 800b578:	d135      	bne.n	800b5e6 <_vfiprintf_r+0x1ce>
 800b57a:	9b03      	ldr	r3, [sp, #12]
 800b57c:	1d1a      	adds	r2, r3, #4
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	9203      	str	r2, [sp, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	bfb8      	it	lt
 800b586:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b58a:	3402      	adds	r4, #2
 800b58c:	9305      	str	r3, [sp, #20]
 800b58e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b674 <_vfiprintf_r+0x25c>
 800b592:	7821      	ldrb	r1, [r4, #0]
 800b594:	2203      	movs	r2, #3
 800b596:	4650      	mov	r0, sl
 800b598:	f7f4 fe22 	bl	80001e0 <memchr>
 800b59c:	b140      	cbz	r0, 800b5b0 <_vfiprintf_r+0x198>
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	eba0 000a 	sub.w	r0, r0, sl
 800b5a4:	fa03 f000 	lsl.w	r0, r3, r0
 800b5a8:	9b04      	ldr	r3, [sp, #16]
 800b5aa:	4303      	orrs	r3, r0
 800b5ac:	3401      	adds	r4, #1
 800b5ae:	9304      	str	r3, [sp, #16]
 800b5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b4:	482c      	ldr	r0, [pc, #176]	; (800b668 <_vfiprintf_r+0x250>)
 800b5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ba:	2206      	movs	r2, #6
 800b5bc:	f7f4 fe10 	bl	80001e0 <memchr>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d03f      	beq.n	800b644 <_vfiprintf_r+0x22c>
 800b5c4:	4b29      	ldr	r3, [pc, #164]	; (800b66c <_vfiprintf_r+0x254>)
 800b5c6:	bb1b      	cbnz	r3, 800b610 <_vfiprintf_r+0x1f8>
 800b5c8:	9b03      	ldr	r3, [sp, #12]
 800b5ca:	3307      	adds	r3, #7
 800b5cc:	f023 0307 	bic.w	r3, r3, #7
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	9303      	str	r3, [sp, #12]
 800b5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5d6:	443b      	add	r3, r7
 800b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5da:	e767      	b.n	800b4ac <_vfiprintf_r+0x94>
 800b5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	e7a5      	b.n	800b532 <_vfiprintf_r+0x11a>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	3401      	adds	r4, #1
 800b5ea:	9305      	str	r3, [sp, #20]
 800b5ec:	4619      	mov	r1, r3
 800b5ee:	f04f 0c0a 	mov.w	ip, #10
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f8:	3a30      	subs	r2, #48	; 0x30
 800b5fa:	2a09      	cmp	r2, #9
 800b5fc:	d903      	bls.n	800b606 <_vfiprintf_r+0x1ee>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0c5      	beq.n	800b58e <_vfiprintf_r+0x176>
 800b602:	9105      	str	r1, [sp, #20]
 800b604:	e7c3      	b.n	800b58e <_vfiprintf_r+0x176>
 800b606:	fb0c 2101 	mla	r1, ip, r1, r2
 800b60a:	4604      	mov	r4, r0
 800b60c:	2301      	movs	r3, #1
 800b60e:	e7f0      	b.n	800b5f2 <_vfiprintf_r+0x1da>
 800b610:	ab03      	add	r3, sp, #12
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	462a      	mov	r2, r5
 800b616:	4b16      	ldr	r3, [pc, #88]	; (800b670 <_vfiprintf_r+0x258>)
 800b618:	a904      	add	r1, sp, #16
 800b61a:	4630      	mov	r0, r6
 800b61c:	f3af 8000 	nop.w
 800b620:	4607      	mov	r7, r0
 800b622:	1c78      	adds	r0, r7, #1
 800b624:	d1d6      	bne.n	800b5d4 <_vfiprintf_r+0x1bc>
 800b626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b628:	07d9      	lsls	r1, r3, #31
 800b62a:	d405      	bmi.n	800b638 <_vfiprintf_r+0x220>
 800b62c:	89ab      	ldrh	r3, [r5, #12]
 800b62e:	059a      	lsls	r2, r3, #22
 800b630:	d402      	bmi.n	800b638 <_vfiprintf_r+0x220>
 800b632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b634:	f7ff feb9 	bl	800b3aa <__retarget_lock_release_recursive>
 800b638:	89ab      	ldrh	r3, [r5, #12]
 800b63a:	065b      	lsls	r3, r3, #25
 800b63c:	f53f af12 	bmi.w	800b464 <_vfiprintf_r+0x4c>
 800b640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b642:	e711      	b.n	800b468 <_vfiprintf_r+0x50>
 800b644:	ab03      	add	r3, sp, #12
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	462a      	mov	r2, r5
 800b64a:	4b09      	ldr	r3, [pc, #36]	; (800b670 <_vfiprintf_r+0x258>)
 800b64c:	a904      	add	r1, sp, #16
 800b64e:	4630      	mov	r0, r6
 800b650:	f000 f880 	bl	800b754 <_printf_i>
 800b654:	e7e4      	b.n	800b620 <_vfiprintf_r+0x208>
 800b656:	bf00      	nop
 800b658:	0800e294 	.word	0x0800e294
 800b65c:	0800e2b4 	.word	0x0800e2b4
 800b660:	0800e274 	.word	0x0800e274
 800b664:	0800e2d4 	.word	0x0800e2d4
 800b668:	0800e2de 	.word	0x0800e2de
 800b66c:	00000000 	.word	0x00000000
 800b670:	0800b3f3 	.word	0x0800b3f3
 800b674:	0800e2da 	.word	0x0800e2da

0800b678 <_printf_common>:
 800b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	4616      	mov	r6, r2
 800b67e:	4699      	mov	r9, r3
 800b680:	688a      	ldr	r2, [r1, #8]
 800b682:	690b      	ldr	r3, [r1, #16]
 800b684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b688:	4293      	cmp	r3, r2
 800b68a:	bfb8      	it	lt
 800b68c:	4613      	movlt	r3, r2
 800b68e:	6033      	str	r3, [r6, #0]
 800b690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b694:	4607      	mov	r7, r0
 800b696:	460c      	mov	r4, r1
 800b698:	b10a      	cbz	r2, 800b69e <_printf_common+0x26>
 800b69a:	3301      	adds	r3, #1
 800b69c:	6033      	str	r3, [r6, #0]
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	0699      	lsls	r1, r3, #26
 800b6a2:	bf42      	ittt	mi
 800b6a4:	6833      	ldrmi	r3, [r6, #0]
 800b6a6:	3302      	addmi	r3, #2
 800b6a8:	6033      	strmi	r3, [r6, #0]
 800b6aa:	6825      	ldr	r5, [r4, #0]
 800b6ac:	f015 0506 	ands.w	r5, r5, #6
 800b6b0:	d106      	bne.n	800b6c0 <_printf_common+0x48>
 800b6b2:	f104 0a19 	add.w	sl, r4, #25
 800b6b6:	68e3      	ldr	r3, [r4, #12]
 800b6b8:	6832      	ldr	r2, [r6, #0]
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	42ab      	cmp	r3, r5
 800b6be:	dc26      	bgt.n	800b70e <_printf_common+0x96>
 800b6c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6c4:	1e13      	subs	r3, r2, #0
 800b6c6:	6822      	ldr	r2, [r4, #0]
 800b6c8:	bf18      	it	ne
 800b6ca:	2301      	movne	r3, #1
 800b6cc:	0692      	lsls	r2, r2, #26
 800b6ce:	d42b      	bmi.n	800b728 <_printf_common+0xb0>
 800b6d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	47c0      	blx	r8
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d01e      	beq.n	800b71c <_printf_common+0xa4>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	68e5      	ldr	r5, [r4, #12]
 800b6e2:	6832      	ldr	r2, [r6, #0]
 800b6e4:	f003 0306 	and.w	r3, r3, #6
 800b6e8:	2b04      	cmp	r3, #4
 800b6ea:	bf08      	it	eq
 800b6ec:	1aad      	subeq	r5, r5, r2
 800b6ee:	68a3      	ldr	r3, [r4, #8]
 800b6f0:	6922      	ldr	r2, [r4, #16]
 800b6f2:	bf0c      	ite	eq
 800b6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6f8:	2500      	movne	r5, #0
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	bfc4      	itt	gt
 800b6fe:	1a9b      	subgt	r3, r3, r2
 800b700:	18ed      	addgt	r5, r5, r3
 800b702:	2600      	movs	r6, #0
 800b704:	341a      	adds	r4, #26
 800b706:	42b5      	cmp	r5, r6
 800b708:	d11a      	bne.n	800b740 <_printf_common+0xc8>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e008      	b.n	800b720 <_printf_common+0xa8>
 800b70e:	2301      	movs	r3, #1
 800b710:	4652      	mov	r2, sl
 800b712:	4649      	mov	r1, r9
 800b714:	4638      	mov	r0, r7
 800b716:	47c0      	blx	r8
 800b718:	3001      	adds	r0, #1
 800b71a:	d103      	bne.n	800b724 <_printf_common+0xac>
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b724:	3501      	adds	r5, #1
 800b726:	e7c6      	b.n	800b6b6 <_printf_common+0x3e>
 800b728:	18e1      	adds	r1, r4, r3
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	2030      	movs	r0, #48	; 0x30
 800b72e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b732:	4422      	add	r2, r4
 800b734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b73c:	3302      	adds	r3, #2
 800b73e:	e7c7      	b.n	800b6d0 <_printf_common+0x58>
 800b740:	2301      	movs	r3, #1
 800b742:	4622      	mov	r2, r4
 800b744:	4649      	mov	r1, r9
 800b746:	4638      	mov	r0, r7
 800b748:	47c0      	blx	r8
 800b74a:	3001      	adds	r0, #1
 800b74c:	d0e6      	beq.n	800b71c <_printf_common+0xa4>
 800b74e:	3601      	adds	r6, #1
 800b750:	e7d9      	b.n	800b706 <_printf_common+0x8e>
	...

0800b754 <_printf_i>:
 800b754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	7e0f      	ldrb	r7, [r1, #24]
 800b75a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b75c:	2f78      	cmp	r7, #120	; 0x78
 800b75e:	4691      	mov	r9, r2
 800b760:	4680      	mov	r8, r0
 800b762:	460c      	mov	r4, r1
 800b764:	469a      	mov	sl, r3
 800b766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b76a:	d807      	bhi.n	800b77c <_printf_i+0x28>
 800b76c:	2f62      	cmp	r7, #98	; 0x62
 800b76e:	d80a      	bhi.n	800b786 <_printf_i+0x32>
 800b770:	2f00      	cmp	r7, #0
 800b772:	f000 80d8 	beq.w	800b926 <_printf_i+0x1d2>
 800b776:	2f58      	cmp	r7, #88	; 0x58
 800b778:	f000 80a3 	beq.w	800b8c2 <_printf_i+0x16e>
 800b77c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b784:	e03a      	b.n	800b7fc <_printf_i+0xa8>
 800b786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b78a:	2b15      	cmp	r3, #21
 800b78c:	d8f6      	bhi.n	800b77c <_printf_i+0x28>
 800b78e:	a101      	add	r1, pc, #4	; (adr r1, 800b794 <_printf_i+0x40>)
 800b790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b794:	0800b7ed 	.word	0x0800b7ed
 800b798:	0800b801 	.word	0x0800b801
 800b79c:	0800b77d 	.word	0x0800b77d
 800b7a0:	0800b77d 	.word	0x0800b77d
 800b7a4:	0800b77d 	.word	0x0800b77d
 800b7a8:	0800b77d 	.word	0x0800b77d
 800b7ac:	0800b801 	.word	0x0800b801
 800b7b0:	0800b77d 	.word	0x0800b77d
 800b7b4:	0800b77d 	.word	0x0800b77d
 800b7b8:	0800b77d 	.word	0x0800b77d
 800b7bc:	0800b77d 	.word	0x0800b77d
 800b7c0:	0800b90d 	.word	0x0800b90d
 800b7c4:	0800b831 	.word	0x0800b831
 800b7c8:	0800b8ef 	.word	0x0800b8ef
 800b7cc:	0800b77d 	.word	0x0800b77d
 800b7d0:	0800b77d 	.word	0x0800b77d
 800b7d4:	0800b92f 	.word	0x0800b92f
 800b7d8:	0800b77d 	.word	0x0800b77d
 800b7dc:	0800b831 	.word	0x0800b831
 800b7e0:	0800b77d 	.word	0x0800b77d
 800b7e4:	0800b77d 	.word	0x0800b77d
 800b7e8:	0800b8f7 	.word	0x0800b8f7
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	1d1a      	adds	r2, r3, #4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	602a      	str	r2, [r5, #0]
 800b7f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e0a3      	b.n	800b948 <_printf_i+0x1f4>
 800b800:	6820      	ldr	r0, [r4, #0]
 800b802:	6829      	ldr	r1, [r5, #0]
 800b804:	0606      	lsls	r6, r0, #24
 800b806:	f101 0304 	add.w	r3, r1, #4
 800b80a:	d50a      	bpl.n	800b822 <_printf_i+0xce>
 800b80c:	680e      	ldr	r6, [r1, #0]
 800b80e:	602b      	str	r3, [r5, #0]
 800b810:	2e00      	cmp	r6, #0
 800b812:	da03      	bge.n	800b81c <_printf_i+0xc8>
 800b814:	232d      	movs	r3, #45	; 0x2d
 800b816:	4276      	negs	r6, r6
 800b818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b81c:	485e      	ldr	r0, [pc, #376]	; (800b998 <_printf_i+0x244>)
 800b81e:	230a      	movs	r3, #10
 800b820:	e019      	b.n	800b856 <_printf_i+0x102>
 800b822:	680e      	ldr	r6, [r1, #0]
 800b824:	602b      	str	r3, [r5, #0]
 800b826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b82a:	bf18      	it	ne
 800b82c:	b236      	sxthne	r6, r6
 800b82e:	e7ef      	b.n	800b810 <_printf_i+0xbc>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	6820      	ldr	r0, [r4, #0]
 800b834:	1d19      	adds	r1, r3, #4
 800b836:	6029      	str	r1, [r5, #0]
 800b838:	0601      	lsls	r1, r0, #24
 800b83a:	d501      	bpl.n	800b840 <_printf_i+0xec>
 800b83c:	681e      	ldr	r6, [r3, #0]
 800b83e:	e002      	b.n	800b846 <_printf_i+0xf2>
 800b840:	0646      	lsls	r6, r0, #25
 800b842:	d5fb      	bpl.n	800b83c <_printf_i+0xe8>
 800b844:	881e      	ldrh	r6, [r3, #0]
 800b846:	4854      	ldr	r0, [pc, #336]	; (800b998 <_printf_i+0x244>)
 800b848:	2f6f      	cmp	r7, #111	; 0x6f
 800b84a:	bf0c      	ite	eq
 800b84c:	2308      	moveq	r3, #8
 800b84e:	230a      	movne	r3, #10
 800b850:	2100      	movs	r1, #0
 800b852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b856:	6865      	ldr	r5, [r4, #4]
 800b858:	60a5      	str	r5, [r4, #8]
 800b85a:	2d00      	cmp	r5, #0
 800b85c:	bfa2      	ittt	ge
 800b85e:	6821      	ldrge	r1, [r4, #0]
 800b860:	f021 0104 	bicge.w	r1, r1, #4
 800b864:	6021      	strge	r1, [r4, #0]
 800b866:	b90e      	cbnz	r6, 800b86c <_printf_i+0x118>
 800b868:	2d00      	cmp	r5, #0
 800b86a:	d04d      	beq.n	800b908 <_printf_i+0x1b4>
 800b86c:	4615      	mov	r5, r2
 800b86e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b872:	fb03 6711 	mls	r7, r3, r1, r6
 800b876:	5dc7      	ldrb	r7, [r0, r7]
 800b878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b87c:	4637      	mov	r7, r6
 800b87e:	42bb      	cmp	r3, r7
 800b880:	460e      	mov	r6, r1
 800b882:	d9f4      	bls.n	800b86e <_printf_i+0x11a>
 800b884:	2b08      	cmp	r3, #8
 800b886:	d10b      	bne.n	800b8a0 <_printf_i+0x14c>
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	07de      	lsls	r6, r3, #31
 800b88c:	d508      	bpl.n	800b8a0 <_printf_i+0x14c>
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	6861      	ldr	r1, [r4, #4]
 800b892:	4299      	cmp	r1, r3
 800b894:	bfde      	ittt	le
 800b896:	2330      	movle	r3, #48	; 0x30
 800b898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b89c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b8a0:	1b52      	subs	r2, r2, r5
 800b8a2:	6122      	str	r2, [r4, #16]
 800b8a4:	f8cd a000 	str.w	sl, [sp]
 800b8a8:	464b      	mov	r3, r9
 800b8aa:	aa03      	add	r2, sp, #12
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7ff fee2 	bl	800b678 <_printf_common>
 800b8b4:	3001      	adds	r0, #1
 800b8b6:	d14c      	bne.n	800b952 <_printf_i+0x1fe>
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8bc:	b004      	add	sp, #16
 800b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c2:	4835      	ldr	r0, [pc, #212]	; (800b998 <_printf_i+0x244>)
 800b8c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8c8:	6829      	ldr	r1, [r5, #0]
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8d0:	6029      	str	r1, [r5, #0]
 800b8d2:	061d      	lsls	r5, r3, #24
 800b8d4:	d514      	bpl.n	800b900 <_printf_i+0x1ac>
 800b8d6:	07df      	lsls	r7, r3, #31
 800b8d8:	bf44      	itt	mi
 800b8da:	f043 0320 	orrmi.w	r3, r3, #32
 800b8de:	6023      	strmi	r3, [r4, #0]
 800b8e0:	b91e      	cbnz	r6, 800b8ea <_printf_i+0x196>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	f023 0320 	bic.w	r3, r3, #32
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	2310      	movs	r3, #16
 800b8ec:	e7b0      	b.n	800b850 <_printf_i+0xfc>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	f043 0320 	orr.w	r3, r3, #32
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	2378      	movs	r3, #120	; 0x78
 800b8f8:	4828      	ldr	r0, [pc, #160]	; (800b99c <_printf_i+0x248>)
 800b8fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8fe:	e7e3      	b.n	800b8c8 <_printf_i+0x174>
 800b900:	0659      	lsls	r1, r3, #25
 800b902:	bf48      	it	mi
 800b904:	b2b6      	uxthmi	r6, r6
 800b906:	e7e6      	b.n	800b8d6 <_printf_i+0x182>
 800b908:	4615      	mov	r5, r2
 800b90a:	e7bb      	b.n	800b884 <_printf_i+0x130>
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	6826      	ldr	r6, [r4, #0]
 800b910:	6961      	ldr	r1, [r4, #20]
 800b912:	1d18      	adds	r0, r3, #4
 800b914:	6028      	str	r0, [r5, #0]
 800b916:	0635      	lsls	r5, r6, #24
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	d501      	bpl.n	800b920 <_printf_i+0x1cc>
 800b91c:	6019      	str	r1, [r3, #0]
 800b91e:	e002      	b.n	800b926 <_printf_i+0x1d2>
 800b920:	0670      	lsls	r0, r6, #25
 800b922:	d5fb      	bpl.n	800b91c <_printf_i+0x1c8>
 800b924:	8019      	strh	r1, [r3, #0]
 800b926:	2300      	movs	r3, #0
 800b928:	6123      	str	r3, [r4, #16]
 800b92a:	4615      	mov	r5, r2
 800b92c:	e7ba      	b.n	800b8a4 <_printf_i+0x150>
 800b92e:	682b      	ldr	r3, [r5, #0]
 800b930:	1d1a      	adds	r2, r3, #4
 800b932:	602a      	str	r2, [r5, #0]
 800b934:	681d      	ldr	r5, [r3, #0]
 800b936:	6862      	ldr	r2, [r4, #4]
 800b938:	2100      	movs	r1, #0
 800b93a:	4628      	mov	r0, r5
 800b93c:	f7f4 fc50 	bl	80001e0 <memchr>
 800b940:	b108      	cbz	r0, 800b946 <_printf_i+0x1f2>
 800b942:	1b40      	subs	r0, r0, r5
 800b944:	6060      	str	r0, [r4, #4]
 800b946:	6863      	ldr	r3, [r4, #4]
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	2300      	movs	r3, #0
 800b94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b950:	e7a8      	b.n	800b8a4 <_printf_i+0x150>
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	462a      	mov	r2, r5
 800b956:	4649      	mov	r1, r9
 800b958:	4640      	mov	r0, r8
 800b95a:	47d0      	blx	sl
 800b95c:	3001      	adds	r0, #1
 800b95e:	d0ab      	beq.n	800b8b8 <_printf_i+0x164>
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	079b      	lsls	r3, r3, #30
 800b964:	d413      	bmi.n	800b98e <_printf_i+0x23a>
 800b966:	68e0      	ldr	r0, [r4, #12]
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	4298      	cmp	r0, r3
 800b96c:	bfb8      	it	lt
 800b96e:	4618      	movlt	r0, r3
 800b970:	e7a4      	b.n	800b8bc <_printf_i+0x168>
 800b972:	2301      	movs	r3, #1
 800b974:	4632      	mov	r2, r6
 800b976:	4649      	mov	r1, r9
 800b978:	4640      	mov	r0, r8
 800b97a:	47d0      	blx	sl
 800b97c:	3001      	adds	r0, #1
 800b97e:	d09b      	beq.n	800b8b8 <_printf_i+0x164>
 800b980:	3501      	adds	r5, #1
 800b982:	68e3      	ldr	r3, [r4, #12]
 800b984:	9903      	ldr	r1, [sp, #12]
 800b986:	1a5b      	subs	r3, r3, r1
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dcf2      	bgt.n	800b972 <_printf_i+0x21e>
 800b98c:	e7eb      	b.n	800b966 <_printf_i+0x212>
 800b98e:	2500      	movs	r5, #0
 800b990:	f104 0619 	add.w	r6, r4, #25
 800b994:	e7f5      	b.n	800b982 <_printf_i+0x22e>
 800b996:	bf00      	nop
 800b998:	0800e2e5 	.word	0x0800e2e5
 800b99c:	0800e2f6 	.word	0x0800e2f6

0800b9a0 <_putc_r>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	4614      	mov	r4, r2
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	b118      	cbz	r0, 800b9b2 <_putc_r+0x12>
 800b9aa:	6983      	ldr	r3, [r0, #24]
 800b9ac:	b90b      	cbnz	r3, 800b9b2 <_putc_r+0x12>
 800b9ae:	f7ff fc5d 	bl	800b26c <__sinit>
 800b9b2:	4b1c      	ldr	r3, [pc, #112]	; (800ba24 <_putc_r+0x84>)
 800b9b4:	429c      	cmp	r4, r3
 800b9b6:	d124      	bne.n	800ba02 <_putc_r+0x62>
 800b9b8:	6874      	ldr	r4, [r6, #4]
 800b9ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9bc:	07d8      	lsls	r0, r3, #31
 800b9be:	d405      	bmi.n	800b9cc <_putc_r+0x2c>
 800b9c0:	89a3      	ldrh	r3, [r4, #12]
 800b9c2:	0599      	lsls	r1, r3, #22
 800b9c4:	d402      	bmi.n	800b9cc <_putc_r+0x2c>
 800b9c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9c8:	f7ff fcee 	bl	800b3a8 <__retarget_lock_acquire_recursive>
 800b9cc:	68a3      	ldr	r3, [r4, #8]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	60a3      	str	r3, [r4, #8]
 800b9d4:	da05      	bge.n	800b9e2 <_putc_r+0x42>
 800b9d6:	69a2      	ldr	r2, [r4, #24]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	db1c      	blt.n	800ba16 <_putc_r+0x76>
 800b9dc:	b2eb      	uxtb	r3, r5
 800b9de:	2b0a      	cmp	r3, #10
 800b9e0:	d019      	beq.n	800ba16 <_putc_r+0x76>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	6022      	str	r2, [r4, #0]
 800b9e8:	701d      	strb	r5, [r3, #0]
 800b9ea:	b2ed      	uxtb	r5, r5
 800b9ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9ee:	07da      	lsls	r2, r3, #31
 800b9f0:	d405      	bmi.n	800b9fe <_putc_r+0x5e>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	059b      	lsls	r3, r3, #22
 800b9f6:	d402      	bmi.n	800b9fe <_putc_r+0x5e>
 800b9f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9fa:	f7ff fcd6 	bl	800b3aa <__retarget_lock_release_recursive>
 800b9fe:	4628      	mov	r0, r5
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	4b09      	ldr	r3, [pc, #36]	; (800ba28 <_putc_r+0x88>)
 800ba04:	429c      	cmp	r4, r3
 800ba06:	d101      	bne.n	800ba0c <_putc_r+0x6c>
 800ba08:	68b4      	ldr	r4, [r6, #8]
 800ba0a:	e7d6      	b.n	800b9ba <_putc_r+0x1a>
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <_putc_r+0x8c>)
 800ba0e:	429c      	cmp	r4, r3
 800ba10:	bf08      	it	eq
 800ba12:	68f4      	ldreq	r4, [r6, #12]
 800ba14:	e7d1      	b.n	800b9ba <_putc_r+0x1a>
 800ba16:	4629      	mov	r1, r5
 800ba18:	4622      	mov	r2, r4
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f000 f84c 	bl	800bab8 <__swbuf_r>
 800ba20:	4605      	mov	r5, r0
 800ba22:	e7e3      	b.n	800b9ec <_putc_r+0x4c>
 800ba24:	0800e294 	.word	0x0800e294
 800ba28:	0800e2b4 	.word	0x0800e2b4
 800ba2c:	0800e274 	.word	0x0800e274

0800ba30 <__sread>:
 800ba30:	b510      	push	{r4, lr}
 800ba32:	460c      	mov	r4, r1
 800ba34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba38:	f000 fa5a 	bl	800bef0 <_read_r>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	bfab      	itete	ge
 800ba40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba42:	89a3      	ldrhlt	r3, [r4, #12]
 800ba44:	181b      	addge	r3, r3, r0
 800ba46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba4a:	bfac      	ite	ge
 800ba4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba4e:	81a3      	strhlt	r3, [r4, #12]
 800ba50:	bd10      	pop	{r4, pc}

0800ba52 <__swrite>:
 800ba52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba56:	461f      	mov	r7, r3
 800ba58:	898b      	ldrh	r3, [r1, #12]
 800ba5a:	05db      	lsls	r3, r3, #23
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	460c      	mov	r4, r1
 800ba60:	4616      	mov	r6, r2
 800ba62:	d505      	bpl.n	800ba70 <__swrite+0x1e>
 800ba64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba68:	2302      	movs	r3, #2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f000 f9c8 	bl	800be00 <_lseek_r>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	463b      	mov	r3, r7
 800ba80:	4628      	mov	r0, r5
 800ba82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba86:	f000 b869 	b.w	800bb5c <_write_r>

0800ba8a <__sseek>:
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba92:	f000 f9b5 	bl	800be00 <_lseek_r>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	89a3      	ldrh	r3, [r4, #12]
 800ba9a:	bf15      	itete	ne
 800ba9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800baa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baa6:	81a3      	strheq	r3, [r4, #12]
 800baa8:	bf18      	it	ne
 800baaa:	81a3      	strhne	r3, [r4, #12]
 800baac:	bd10      	pop	{r4, pc}

0800baae <__sclose>:
 800baae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab2:	f000 b8d3 	b.w	800bc5c <_close_r>
	...

0800bab8 <__swbuf_r>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	460e      	mov	r6, r1
 800babc:	4614      	mov	r4, r2
 800babe:	4605      	mov	r5, r0
 800bac0:	b118      	cbz	r0, 800baca <__swbuf_r+0x12>
 800bac2:	6983      	ldr	r3, [r0, #24]
 800bac4:	b90b      	cbnz	r3, 800baca <__swbuf_r+0x12>
 800bac6:	f7ff fbd1 	bl	800b26c <__sinit>
 800baca:	4b21      	ldr	r3, [pc, #132]	; (800bb50 <__swbuf_r+0x98>)
 800bacc:	429c      	cmp	r4, r3
 800bace:	d12b      	bne.n	800bb28 <__swbuf_r+0x70>
 800bad0:	686c      	ldr	r4, [r5, #4]
 800bad2:	69a3      	ldr	r3, [r4, #24]
 800bad4:	60a3      	str	r3, [r4, #8]
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	071a      	lsls	r2, r3, #28
 800bada:	d52f      	bpl.n	800bb3c <__swbuf_r+0x84>
 800badc:	6923      	ldr	r3, [r4, #16]
 800bade:	b36b      	cbz	r3, 800bb3c <__swbuf_r+0x84>
 800bae0:	6923      	ldr	r3, [r4, #16]
 800bae2:	6820      	ldr	r0, [r4, #0]
 800bae4:	1ac0      	subs	r0, r0, r3
 800bae6:	6963      	ldr	r3, [r4, #20]
 800bae8:	b2f6      	uxtb	r6, r6
 800baea:	4283      	cmp	r3, r0
 800baec:	4637      	mov	r7, r6
 800baee:	dc04      	bgt.n	800bafa <__swbuf_r+0x42>
 800baf0:	4621      	mov	r1, r4
 800baf2:	4628      	mov	r0, r5
 800baf4:	f000 f948 	bl	800bd88 <_fflush_r>
 800baf8:	bb30      	cbnz	r0, 800bb48 <__swbuf_r+0x90>
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	60a3      	str	r3, [r4, #8]
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	6022      	str	r2, [r4, #0]
 800bb06:	701e      	strb	r6, [r3, #0]
 800bb08:	6963      	ldr	r3, [r4, #20]
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	4283      	cmp	r3, r0
 800bb0e:	d004      	beq.n	800bb1a <__swbuf_r+0x62>
 800bb10:	89a3      	ldrh	r3, [r4, #12]
 800bb12:	07db      	lsls	r3, r3, #31
 800bb14:	d506      	bpl.n	800bb24 <__swbuf_r+0x6c>
 800bb16:	2e0a      	cmp	r6, #10
 800bb18:	d104      	bne.n	800bb24 <__swbuf_r+0x6c>
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f000 f933 	bl	800bd88 <_fflush_r>
 800bb22:	b988      	cbnz	r0, 800bb48 <__swbuf_r+0x90>
 800bb24:	4638      	mov	r0, r7
 800bb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <__swbuf_r+0x9c>)
 800bb2a:	429c      	cmp	r4, r3
 800bb2c:	d101      	bne.n	800bb32 <__swbuf_r+0x7a>
 800bb2e:	68ac      	ldr	r4, [r5, #8]
 800bb30:	e7cf      	b.n	800bad2 <__swbuf_r+0x1a>
 800bb32:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <__swbuf_r+0xa0>)
 800bb34:	429c      	cmp	r4, r3
 800bb36:	bf08      	it	eq
 800bb38:	68ec      	ldreq	r4, [r5, #12]
 800bb3a:	e7ca      	b.n	800bad2 <__swbuf_r+0x1a>
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f81e 	bl	800bb80 <__swsetup_r>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d0cb      	beq.n	800bae0 <__swbuf_r+0x28>
 800bb48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bb4c:	e7ea      	b.n	800bb24 <__swbuf_r+0x6c>
 800bb4e:	bf00      	nop
 800bb50:	0800e294 	.word	0x0800e294
 800bb54:	0800e2b4 	.word	0x0800e2b4
 800bb58:	0800e274 	.word	0x0800e274

0800bb5c <_write_r>:
 800bb5c:	b538      	push	{r3, r4, r5, lr}
 800bb5e:	4d07      	ldr	r5, [pc, #28]	; (800bb7c <_write_r+0x20>)
 800bb60:	4604      	mov	r4, r0
 800bb62:	4608      	mov	r0, r1
 800bb64:	4611      	mov	r1, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	602a      	str	r2, [r5, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f7f6 fbaf 	bl	80022ce <_write>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_write_r+0x1e>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_write_r+0x1e>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20008b3c 	.word	0x20008b3c

0800bb80 <__swsetup_r>:
 800bb80:	4b32      	ldr	r3, [pc, #200]	; (800bc4c <__swsetup_r+0xcc>)
 800bb82:	b570      	push	{r4, r5, r6, lr}
 800bb84:	681d      	ldr	r5, [r3, #0]
 800bb86:	4606      	mov	r6, r0
 800bb88:	460c      	mov	r4, r1
 800bb8a:	b125      	cbz	r5, 800bb96 <__swsetup_r+0x16>
 800bb8c:	69ab      	ldr	r3, [r5, #24]
 800bb8e:	b913      	cbnz	r3, 800bb96 <__swsetup_r+0x16>
 800bb90:	4628      	mov	r0, r5
 800bb92:	f7ff fb6b 	bl	800b26c <__sinit>
 800bb96:	4b2e      	ldr	r3, [pc, #184]	; (800bc50 <__swsetup_r+0xd0>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d10f      	bne.n	800bbbc <__swsetup_r+0x3c>
 800bb9c:	686c      	ldr	r4, [r5, #4]
 800bb9e:	89a3      	ldrh	r3, [r4, #12]
 800bba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bba4:	0719      	lsls	r1, r3, #28
 800bba6:	d42c      	bmi.n	800bc02 <__swsetup_r+0x82>
 800bba8:	06dd      	lsls	r5, r3, #27
 800bbaa:	d411      	bmi.n	800bbd0 <__swsetup_r+0x50>
 800bbac:	2309      	movs	r3, #9
 800bbae:	6033      	str	r3, [r6, #0]
 800bbb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbb4:	81a3      	strh	r3, [r4, #12]
 800bbb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbba:	e03e      	b.n	800bc3a <__swsetup_r+0xba>
 800bbbc:	4b25      	ldr	r3, [pc, #148]	; (800bc54 <__swsetup_r+0xd4>)
 800bbbe:	429c      	cmp	r4, r3
 800bbc0:	d101      	bne.n	800bbc6 <__swsetup_r+0x46>
 800bbc2:	68ac      	ldr	r4, [r5, #8]
 800bbc4:	e7eb      	b.n	800bb9e <__swsetup_r+0x1e>
 800bbc6:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <__swsetup_r+0xd8>)
 800bbc8:	429c      	cmp	r4, r3
 800bbca:	bf08      	it	eq
 800bbcc:	68ec      	ldreq	r4, [r5, #12]
 800bbce:	e7e6      	b.n	800bb9e <__swsetup_r+0x1e>
 800bbd0:	0758      	lsls	r0, r3, #29
 800bbd2:	d512      	bpl.n	800bbfa <__swsetup_r+0x7a>
 800bbd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbd6:	b141      	cbz	r1, 800bbea <__swsetup_r+0x6a>
 800bbd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbdc:	4299      	cmp	r1, r3
 800bbde:	d002      	beq.n	800bbe6 <__swsetup_r+0x66>
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7ff f9cd 	bl	800af80 <_free_r>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	6363      	str	r3, [r4, #52]	; 0x34
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6063      	str	r3, [r4, #4]
 800bbf6:	6923      	ldr	r3, [r4, #16]
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	f043 0308 	orr.w	r3, r3, #8
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	b94b      	cbnz	r3, 800bc1a <__swsetup_r+0x9a>
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc10:	d003      	beq.n	800bc1a <__swsetup_r+0x9a>
 800bc12:	4621      	mov	r1, r4
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 f92b 	bl	800be70 <__smakebuf_r>
 800bc1a:	89a0      	ldrh	r0, [r4, #12]
 800bc1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc20:	f010 0301 	ands.w	r3, r0, #1
 800bc24:	d00a      	beq.n	800bc3c <__swsetup_r+0xbc>
 800bc26:	2300      	movs	r3, #0
 800bc28:	60a3      	str	r3, [r4, #8]
 800bc2a:	6963      	ldr	r3, [r4, #20]
 800bc2c:	425b      	negs	r3, r3
 800bc2e:	61a3      	str	r3, [r4, #24]
 800bc30:	6923      	ldr	r3, [r4, #16]
 800bc32:	b943      	cbnz	r3, 800bc46 <__swsetup_r+0xc6>
 800bc34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc38:	d1ba      	bne.n	800bbb0 <__swsetup_r+0x30>
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
 800bc3c:	0781      	lsls	r1, r0, #30
 800bc3e:	bf58      	it	pl
 800bc40:	6963      	ldrpl	r3, [r4, #20]
 800bc42:	60a3      	str	r3, [r4, #8]
 800bc44:	e7f4      	b.n	800bc30 <__swsetup_r+0xb0>
 800bc46:	2000      	movs	r0, #0
 800bc48:	e7f7      	b.n	800bc3a <__swsetup_r+0xba>
 800bc4a:	bf00      	nop
 800bc4c:	20000038 	.word	0x20000038
 800bc50:	0800e294 	.word	0x0800e294
 800bc54:	0800e2b4 	.word	0x0800e2b4
 800bc58:	0800e274 	.word	0x0800e274

0800bc5c <_close_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4d06      	ldr	r5, [pc, #24]	; (800bc78 <_close_r+0x1c>)
 800bc60:	2300      	movs	r3, #0
 800bc62:	4604      	mov	r4, r0
 800bc64:	4608      	mov	r0, r1
 800bc66:	602b      	str	r3, [r5, #0]
 800bc68:	f7f6 fb4d 	bl	8002306 <_close>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	d102      	bne.n	800bc76 <_close_r+0x1a>
 800bc70:	682b      	ldr	r3, [r5, #0]
 800bc72:	b103      	cbz	r3, 800bc76 <_close_r+0x1a>
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	bd38      	pop	{r3, r4, r5, pc}
 800bc78:	20008b3c 	.word	0x20008b3c

0800bc7c <__sflush_r>:
 800bc7c:	898a      	ldrh	r2, [r1, #12]
 800bc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	4605      	mov	r5, r0
 800bc84:	0710      	lsls	r0, r2, #28
 800bc86:	460c      	mov	r4, r1
 800bc88:	d458      	bmi.n	800bd3c <__sflush_r+0xc0>
 800bc8a:	684b      	ldr	r3, [r1, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dc05      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc02      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d0f9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bca2:	2300      	movs	r3, #0
 800bca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bca8:	682f      	ldr	r7, [r5, #0]
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	d032      	beq.n	800bd14 <__sflush_r+0x98>
 800bcae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	075a      	lsls	r2, r3, #29
 800bcb4:	d505      	bpl.n	800bcc2 <__sflush_r+0x46>
 800bcb6:	6863      	ldr	r3, [r4, #4]
 800bcb8:	1ac0      	subs	r0, r0, r3
 800bcba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcbc:	b10b      	cbz	r3, 800bcc2 <__sflush_r+0x46>
 800bcbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcc0:	1ac0      	subs	r0, r0, r3
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcc8:	6a21      	ldr	r1, [r4, #32]
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b0      	blx	r6
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	d106      	bne.n	800bce2 <__sflush_r+0x66>
 800bcd4:	6829      	ldr	r1, [r5, #0]
 800bcd6:	291d      	cmp	r1, #29
 800bcd8:	d82c      	bhi.n	800bd34 <__sflush_r+0xb8>
 800bcda:	4a2a      	ldr	r2, [pc, #168]	; (800bd84 <__sflush_r+0x108>)
 800bcdc:	40ca      	lsrs	r2, r1
 800bcde:	07d6      	lsls	r6, r2, #31
 800bce0:	d528      	bpl.n	800bd34 <__sflush_r+0xb8>
 800bce2:	2200      	movs	r2, #0
 800bce4:	6062      	str	r2, [r4, #4]
 800bce6:	04d9      	lsls	r1, r3, #19
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	6022      	str	r2, [r4, #0]
 800bcec:	d504      	bpl.n	800bcf8 <__sflush_r+0x7c>
 800bcee:	1c42      	adds	r2, r0, #1
 800bcf0:	d101      	bne.n	800bcf6 <__sflush_r+0x7a>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	b903      	cbnz	r3, 800bcf8 <__sflush_r+0x7c>
 800bcf6:	6560      	str	r0, [r4, #84]	; 0x54
 800bcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfa:	602f      	str	r7, [r5, #0]
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	d0ca      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd04:	4299      	cmp	r1, r3
 800bd06:	d002      	beq.n	800bd0e <__sflush_r+0x92>
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7ff f939 	bl	800af80 <_free_r>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	6360      	str	r0, [r4, #52]	; 0x34
 800bd12:	e7c1      	b.n	800bc98 <__sflush_r+0x1c>
 800bd14:	6a21      	ldr	r1, [r4, #32]
 800bd16:	2301      	movs	r3, #1
 800bd18:	4628      	mov	r0, r5
 800bd1a:	47b0      	blx	r6
 800bd1c:	1c41      	adds	r1, r0, #1
 800bd1e:	d1c7      	bne.n	800bcb0 <__sflush_r+0x34>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0c4      	beq.n	800bcb0 <__sflush_r+0x34>
 800bd26:	2b1d      	cmp	r3, #29
 800bd28:	d001      	beq.n	800bd2e <__sflush_r+0xb2>
 800bd2a:	2b16      	cmp	r3, #22
 800bd2c:	d101      	bne.n	800bd32 <__sflush_r+0xb6>
 800bd2e:	602f      	str	r7, [r5, #0]
 800bd30:	e7b1      	b.n	800bc96 <__sflush_r+0x1a>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7ad      	b.n	800bc98 <__sflush_r+0x1c>
 800bd3c:	690f      	ldr	r7, [r1, #16]
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	d0a9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd42:	0793      	lsls	r3, r2, #30
 800bd44:	680e      	ldr	r6, [r1, #0]
 800bd46:	bf08      	it	eq
 800bd48:	694b      	ldreq	r3, [r1, #20]
 800bd4a:	600f      	str	r7, [r1, #0]
 800bd4c:	bf18      	it	ne
 800bd4e:	2300      	movne	r3, #0
 800bd50:	eba6 0807 	sub.w	r8, r6, r7
 800bd54:	608b      	str	r3, [r1, #8]
 800bd56:	f1b8 0f00 	cmp.w	r8, #0
 800bd5a:	dd9c      	ble.n	800bc96 <__sflush_r+0x1a>
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd60:	4643      	mov	r3, r8
 800bd62:	463a      	mov	r2, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b0      	blx	r6
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	dc06      	bgt.n	800bd7a <__sflush_r+0xfe>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd78:	e78e      	b.n	800bc98 <__sflush_r+0x1c>
 800bd7a:	4407      	add	r7, r0
 800bd7c:	eba8 0800 	sub.w	r8, r8, r0
 800bd80:	e7e9      	b.n	800bd56 <__sflush_r+0xda>
 800bd82:	bf00      	nop
 800bd84:	20400001 	.word	0x20400001

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6983      	ldr	r3, [r0, #24]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f7ff fa65 	bl	800b26c <__sinit>
 800bda2:	4b14      	ldr	r3, [pc, #80]	; (800bdf4 <_fflush_r+0x6c>)
 800bda4:	429c      	cmp	r4, r3
 800bda6:	d11b      	bne.n	800bde0 <_fflush_r+0x58>
 800bda8:	686c      	ldr	r4, [r5, #4]
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0ef      	beq.n	800bd92 <_fflush_r+0xa>
 800bdb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdb4:	07d0      	lsls	r0, r2, #31
 800bdb6:	d404      	bmi.n	800bdc2 <_fflush_r+0x3a>
 800bdb8:	0599      	lsls	r1, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_fflush_r+0x3a>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdbe:	f7ff faf3 	bl	800b3a8 <__retarget_lock_acquire_recursive>
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ff59 	bl	800bc7c <__sflush_r>
 800bdca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdcc:	07da      	lsls	r2, r3, #31
 800bdce:	4605      	mov	r5, r0
 800bdd0:	d4e0      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	059b      	lsls	r3, r3, #22
 800bdd6:	d4dd      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdda:	f7ff fae6 	bl	800b3aa <__retarget_lock_release_recursive>
 800bdde:	e7d9      	b.n	800bd94 <_fflush_r+0xc>
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <_fflush_r+0x70>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d101      	bne.n	800bdea <_fflush_r+0x62>
 800bde6:	68ac      	ldr	r4, [r5, #8]
 800bde8:	e7df      	b.n	800bdaa <_fflush_r+0x22>
 800bdea:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <_fflush_r+0x74>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	bf08      	it	eq
 800bdf0:	68ec      	ldreq	r4, [r5, #12]
 800bdf2:	e7da      	b.n	800bdaa <_fflush_r+0x22>
 800bdf4:	0800e294 	.word	0x0800e294
 800bdf8:	0800e2b4 	.word	0x0800e2b4
 800bdfc:	0800e274 	.word	0x0800e274

0800be00 <_lseek_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4d07      	ldr	r5, [pc, #28]	; (800be20 <_lseek_r+0x20>)
 800be04:	4604      	mov	r4, r0
 800be06:	4608      	mov	r0, r1
 800be08:	4611      	mov	r1, r2
 800be0a:	2200      	movs	r2, #0
 800be0c:	602a      	str	r2, [r5, #0]
 800be0e:	461a      	mov	r2, r3
 800be10:	f7f6 faa0 	bl	8002354 <_lseek>
 800be14:	1c43      	adds	r3, r0, #1
 800be16:	d102      	bne.n	800be1e <_lseek_r+0x1e>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	b103      	cbz	r3, 800be1e <_lseek_r+0x1e>
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	bd38      	pop	{r3, r4, r5, pc}
 800be20:	20008b3c 	.word	0x20008b3c

0800be24 <__swhatbuf_r>:
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	460e      	mov	r6, r1
 800be28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be2c:	2900      	cmp	r1, #0
 800be2e:	b096      	sub	sp, #88	; 0x58
 800be30:	4614      	mov	r4, r2
 800be32:	461d      	mov	r5, r3
 800be34:	da08      	bge.n	800be48 <__swhatbuf_r+0x24>
 800be36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	602a      	str	r2, [r5, #0]
 800be3e:	061a      	lsls	r2, r3, #24
 800be40:	d410      	bmi.n	800be64 <__swhatbuf_r+0x40>
 800be42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be46:	e00e      	b.n	800be66 <__swhatbuf_r+0x42>
 800be48:	466a      	mov	r2, sp
 800be4a:	f000 f863 	bl	800bf14 <_fstat_r>
 800be4e:	2800      	cmp	r0, #0
 800be50:	dbf1      	blt.n	800be36 <__swhatbuf_r+0x12>
 800be52:	9a01      	ldr	r2, [sp, #4]
 800be54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be5c:	425a      	negs	r2, r3
 800be5e:	415a      	adcs	r2, r3
 800be60:	602a      	str	r2, [r5, #0]
 800be62:	e7ee      	b.n	800be42 <__swhatbuf_r+0x1e>
 800be64:	2340      	movs	r3, #64	; 0x40
 800be66:	2000      	movs	r0, #0
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	b016      	add	sp, #88	; 0x58
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be70 <__smakebuf_r>:
 800be70:	898b      	ldrh	r3, [r1, #12]
 800be72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be74:	079d      	lsls	r5, r3, #30
 800be76:	4606      	mov	r6, r0
 800be78:	460c      	mov	r4, r1
 800be7a:	d507      	bpl.n	800be8c <__smakebuf_r+0x1c>
 800be7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	6123      	str	r3, [r4, #16]
 800be84:	2301      	movs	r3, #1
 800be86:	6163      	str	r3, [r4, #20]
 800be88:	b002      	add	sp, #8
 800be8a:	bd70      	pop	{r4, r5, r6, pc}
 800be8c:	ab01      	add	r3, sp, #4
 800be8e:	466a      	mov	r2, sp
 800be90:	f7ff ffc8 	bl	800be24 <__swhatbuf_r>
 800be94:	9900      	ldr	r1, [sp, #0]
 800be96:	4605      	mov	r5, r0
 800be98:	4630      	mov	r0, r6
 800be9a:	f7ff f8dd 	bl	800b058 <_malloc_r>
 800be9e:	b948      	cbnz	r0, 800beb4 <__smakebuf_r+0x44>
 800bea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bea4:	059a      	lsls	r2, r3, #22
 800bea6:	d4ef      	bmi.n	800be88 <__smakebuf_r+0x18>
 800bea8:	f023 0303 	bic.w	r3, r3, #3
 800beac:	f043 0302 	orr.w	r3, r3, #2
 800beb0:	81a3      	strh	r3, [r4, #12]
 800beb2:	e7e3      	b.n	800be7c <__smakebuf_r+0xc>
 800beb4:	4b0d      	ldr	r3, [pc, #52]	; (800beec <__smakebuf_r+0x7c>)
 800beb6:	62b3      	str	r3, [r6, #40]	; 0x28
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	6020      	str	r0, [r4, #0]
 800bebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	9b00      	ldr	r3, [sp, #0]
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	9b01      	ldr	r3, [sp, #4]
 800bec8:	6120      	str	r0, [r4, #16]
 800beca:	b15b      	cbz	r3, 800bee4 <__smakebuf_r+0x74>
 800becc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bed0:	4630      	mov	r0, r6
 800bed2:	f000 f831 	bl	800bf38 <_isatty_r>
 800bed6:	b128      	cbz	r0, 800bee4 <__smakebuf_r+0x74>
 800bed8:	89a3      	ldrh	r3, [r4, #12]
 800beda:	f023 0303 	bic.w	r3, r3, #3
 800bede:	f043 0301 	orr.w	r3, r3, #1
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	89a0      	ldrh	r0, [r4, #12]
 800bee6:	4305      	orrs	r5, r0
 800bee8:	81a5      	strh	r5, [r4, #12]
 800beea:	e7cd      	b.n	800be88 <__smakebuf_r+0x18>
 800beec:	0800b205 	.word	0x0800b205

0800bef0 <_read_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d07      	ldr	r5, [pc, #28]	; (800bf10 <_read_r+0x20>)
 800bef4:	4604      	mov	r4, r0
 800bef6:	4608      	mov	r0, r1
 800bef8:	4611      	mov	r1, r2
 800befa:	2200      	movs	r2, #0
 800befc:	602a      	str	r2, [r5, #0]
 800befe:	461a      	mov	r2, r3
 800bf00:	f7f6 f9c8 	bl	8002294 <_read>
 800bf04:	1c43      	adds	r3, r0, #1
 800bf06:	d102      	bne.n	800bf0e <_read_r+0x1e>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	b103      	cbz	r3, 800bf0e <_read_r+0x1e>
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	bd38      	pop	{r3, r4, r5, pc}
 800bf10:	20008b3c 	.word	0x20008b3c

0800bf14 <_fstat_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d07      	ldr	r5, [pc, #28]	; (800bf34 <_fstat_r+0x20>)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	4611      	mov	r1, r2
 800bf20:	602b      	str	r3, [r5, #0]
 800bf22:	f7f6 f9fc 	bl	800231e <_fstat>
 800bf26:	1c43      	adds	r3, r0, #1
 800bf28:	d102      	bne.n	800bf30 <_fstat_r+0x1c>
 800bf2a:	682b      	ldr	r3, [r5, #0]
 800bf2c:	b103      	cbz	r3, 800bf30 <_fstat_r+0x1c>
 800bf2e:	6023      	str	r3, [r4, #0]
 800bf30:	bd38      	pop	{r3, r4, r5, pc}
 800bf32:	bf00      	nop
 800bf34:	20008b3c 	.word	0x20008b3c

0800bf38 <_isatty_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4d06      	ldr	r5, [pc, #24]	; (800bf54 <_isatty_r+0x1c>)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4608      	mov	r0, r1
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	f7f6 f9fb 	bl	800233e <_isatty>
 800bf48:	1c43      	adds	r3, r0, #1
 800bf4a:	d102      	bne.n	800bf52 <_isatty_r+0x1a>
 800bf4c:	682b      	ldr	r3, [r5, #0]
 800bf4e:	b103      	cbz	r3, 800bf52 <_isatty_r+0x1a>
 800bf50:	6023      	str	r3, [r4, #0]
 800bf52:	bd38      	pop	{r3, r4, r5, pc}
 800bf54:	20008b3c 	.word	0x20008b3c

0800bf58 <sin>:
 800bf58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf5a:	ec53 2b10 	vmov	r2, r3, d0
 800bf5e:	4828      	ldr	r0, [pc, #160]	; (800c000 <sin+0xa8>)
 800bf60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bf64:	4281      	cmp	r1, r0
 800bf66:	dc07      	bgt.n	800bf78 <sin+0x20>
 800bf68:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800bff8 <sin+0xa0>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	b005      	add	sp, #20
 800bf70:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf74:	f001 bcc0 	b.w	800d8f8 <__kernel_sin>
 800bf78:	4822      	ldr	r0, [pc, #136]	; (800c004 <sin+0xac>)
 800bf7a:	4281      	cmp	r1, r0
 800bf7c:	dd09      	ble.n	800bf92 <sin+0x3a>
 800bf7e:	ee10 0a10 	vmov	r0, s0
 800bf82:	4619      	mov	r1, r3
 800bf84:	f7f4 f980 	bl	8000288 <__aeabi_dsub>
 800bf88:	ec41 0b10 	vmov	d0, r0, r1
 800bf8c:	b005      	add	sp, #20
 800bf8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf92:	4668      	mov	r0, sp
 800bf94:	f000 fdd8 	bl	800cb48 <__ieee754_rem_pio2>
 800bf98:	f000 0003 	and.w	r0, r0, #3
 800bf9c:	2801      	cmp	r0, #1
 800bf9e:	d00c      	beq.n	800bfba <sin+0x62>
 800bfa0:	2802      	cmp	r0, #2
 800bfa2:	d011      	beq.n	800bfc8 <sin+0x70>
 800bfa4:	b9f0      	cbnz	r0, 800bfe4 <sin+0x8c>
 800bfa6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfaa:	ed9d 0b00 	vldr	d0, [sp]
 800bfae:	2001      	movs	r0, #1
 800bfb0:	f001 fca2 	bl	800d8f8 <__kernel_sin>
 800bfb4:	ec51 0b10 	vmov	r0, r1, d0
 800bfb8:	e7e6      	b.n	800bf88 <sin+0x30>
 800bfba:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfbe:	ed9d 0b00 	vldr	d0, [sp]
 800bfc2:	f001 f881 	bl	800d0c8 <__kernel_cos>
 800bfc6:	e7f5      	b.n	800bfb4 <sin+0x5c>
 800bfc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfcc:	ed9d 0b00 	vldr	d0, [sp]
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	f001 fc91 	bl	800d8f8 <__kernel_sin>
 800bfd6:	ec53 2b10 	vmov	r2, r3, d0
 800bfda:	ee10 0a10 	vmov	r0, s0
 800bfde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bfe2:	e7d1      	b.n	800bf88 <sin+0x30>
 800bfe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfe8:	ed9d 0b00 	vldr	d0, [sp]
 800bfec:	f001 f86c 	bl	800d0c8 <__kernel_cos>
 800bff0:	e7f1      	b.n	800bfd6 <sin+0x7e>
 800bff2:	bf00      	nop
 800bff4:	f3af 8000 	nop.w
	...
 800c000:	3fe921fb 	.word	0x3fe921fb
 800c004:	7fefffff 	.word	0x7fefffff

0800c008 <pow>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	ed2d 8b02 	vpush	{d8}
 800c00e:	eeb0 8a40 	vmov.f32	s16, s0
 800c012:	eef0 8a60 	vmov.f32	s17, s1
 800c016:	ec55 4b11 	vmov	r4, r5, d1
 800c01a:	f000 f865 	bl	800c0e8 <__ieee754_pow>
 800c01e:	4622      	mov	r2, r4
 800c020:	462b      	mov	r3, r5
 800c022:	4620      	mov	r0, r4
 800c024:	4629      	mov	r1, r5
 800c026:	ec57 6b10 	vmov	r6, r7, d0
 800c02a:	f7f4 fd7f 	bl	8000b2c <__aeabi_dcmpun>
 800c02e:	2800      	cmp	r0, #0
 800c030:	d13b      	bne.n	800c0aa <pow+0xa2>
 800c032:	ec51 0b18 	vmov	r0, r1, d8
 800c036:	2200      	movs	r2, #0
 800c038:	2300      	movs	r3, #0
 800c03a:	f7f4 fd45 	bl	8000ac8 <__aeabi_dcmpeq>
 800c03e:	b1b8      	cbz	r0, 800c070 <pow+0x68>
 800c040:	2200      	movs	r2, #0
 800c042:	2300      	movs	r3, #0
 800c044:	4620      	mov	r0, r4
 800c046:	4629      	mov	r1, r5
 800c048:	f7f4 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d146      	bne.n	800c0de <pow+0xd6>
 800c050:	ec45 4b10 	vmov	d0, r4, r5
 800c054:	f001 fd47 	bl	800dae6 <finite>
 800c058:	b338      	cbz	r0, 800c0aa <pow+0xa2>
 800c05a:	2200      	movs	r2, #0
 800c05c:	2300      	movs	r3, #0
 800c05e:	4620      	mov	r0, r4
 800c060:	4629      	mov	r1, r5
 800c062:	f7f4 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800c066:	b300      	cbz	r0, 800c0aa <pow+0xa2>
 800c068:	f7fe ff48 	bl	800aefc <__errno>
 800c06c:	2322      	movs	r3, #34	; 0x22
 800c06e:	e01b      	b.n	800c0a8 <pow+0xa0>
 800c070:	ec47 6b10 	vmov	d0, r6, r7
 800c074:	f001 fd37 	bl	800dae6 <finite>
 800c078:	b9e0      	cbnz	r0, 800c0b4 <pow+0xac>
 800c07a:	eeb0 0a48 	vmov.f32	s0, s16
 800c07e:	eef0 0a68 	vmov.f32	s1, s17
 800c082:	f001 fd30 	bl	800dae6 <finite>
 800c086:	b1a8      	cbz	r0, 800c0b4 <pow+0xac>
 800c088:	ec45 4b10 	vmov	d0, r4, r5
 800c08c:	f001 fd2b 	bl	800dae6 <finite>
 800c090:	b180      	cbz	r0, 800c0b4 <pow+0xac>
 800c092:	4632      	mov	r2, r6
 800c094:	463b      	mov	r3, r7
 800c096:	4630      	mov	r0, r6
 800c098:	4639      	mov	r1, r7
 800c09a:	f7f4 fd47 	bl	8000b2c <__aeabi_dcmpun>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d0e2      	beq.n	800c068 <pow+0x60>
 800c0a2:	f7fe ff2b 	bl	800aefc <__errno>
 800c0a6:	2321      	movs	r3, #33	; 0x21
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	ecbd 8b02 	vpop	{d8}
 800c0ae:	ec47 6b10 	vmov	d0, r6, r7
 800c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	f7f4 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	d0f2      	beq.n	800c0aa <pow+0xa2>
 800c0c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c0c8:	eef0 0a68 	vmov.f32	s1, s17
 800c0cc:	f001 fd0b 	bl	800dae6 <finite>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d0ea      	beq.n	800c0aa <pow+0xa2>
 800c0d4:	ec45 4b10 	vmov	d0, r4, r5
 800c0d8:	f001 fd05 	bl	800dae6 <finite>
 800c0dc:	e7c3      	b.n	800c066 <pow+0x5e>
 800c0de:	4f01      	ldr	r7, [pc, #4]	; (800c0e4 <pow+0xdc>)
 800c0e0:	2600      	movs	r6, #0
 800c0e2:	e7e2      	b.n	800c0aa <pow+0xa2>
 800c0e4:	3ff00000 	.word	0x3ff00000

0800c0e8 <__ieee754_pow>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	ed2d 8b06 	vpush	{d8-d10}
 800c0f0:	b089      	sub	sp, #36	; 0x24
 800c0f2:	ed8d 1b00 	vstr	d1, [sp]
 800c0f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c0fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c0fe:	ea58 0102 	orrs.w	r1, r8, r2
 800c102:	ec57 6b10 	vmov	r6, r7, d0
 800c106:	d115      	bne.n	800c134 <__ieee754_pow+0x4c>
 800c108:	19b3      	adds	r3, r6, r6
 800c10a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c10e:	4152      	adcs	r2, r2
 800c110:	4299      	cmp	r1, r3
 800c112:	4b89      	ldr	r3, [pc, #548]	; (800c338 <__ieee754_pow+0x250>)
 800c114:	4193      	sbcs	r3, r2
 800c116:	f080 84d2 	bcs.w	800cabe <__ieee754_pow+0x9d6>
 800c11a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c11e:	4630      	mov	r0, r6
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 f8b3 	bl	800028c <__adddf3>
 800c126:	ec41 0b10 	vmov	d0, r0, r1
 800c12a:	b009      	add	sp, #36	; 0x24
 800c12c:	ecbd 8b06 	vpop	{d8-d10}
 800c130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c134:	4b81      	ldr	r3, [pc, #516]	; (800c33c <__ieee754_pow+0x254>)
 800c136:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c13a:	429c      	cmp	r4, r3
 800c13c:	ee10 aa10 	vmov	sl, s0
 800c140:	463d      	mov	r5, r7
 800c142:	dc06      	bgt.n	800c152 <__ieee754_pow+0x6a>
 800c144:	d101      	bne.n	800c14a <__ieee754_pow+0x62>
 800c146:	2e00      	cmp	r6, #0
 800c148:	d1e7      	bne.n	800c11a <__ieee754_pow+0x32>
 800c14a:	4598      	cmp	r8, r3
 800c14c:	dc01      	bgt.n	800c152 <__ieee754_pow+0x6a>
 800c14e:	d10f      	bne.n	800c170 <__ieee754_pow+0x88>
 800c150:	b172      	cbz	r2, 800c170 <__ieee754_pow+0x88>
 800c152:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c156:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c15a:	ea55 050a 	orrs.w	r5, r5, sl
 800c15e:	d1dc      	bne.n	800c11a <__ieee754_pow+0x32>
 800c160:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c164:	18db      	adds	r3, r3, r3
 800c166:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c16a:	4152      	adcs	r2, r2
 800c16c:	429d      	cmp	r5, r3
 800c16e:	e7d0      	b.n	800c112 <__ieee754_pow+0x2a>
 800c170:	2d00      	cmp	r5, #0
 800c172:	da3b      	bge.n	800c1ec <__ieee754_pow+0x104>
 800c174:	4b72      	ldr	r3, [pc, #456]	; (800c340 <__ieee754_pow+0x258>)
 800c176:	4598      	cmp	r8, r3
 800c178:	dc51      	bgt.n	800c21e <__ieee754_pow+0x136>
 800c17a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c17e:	4598      	cmp	r8, r3
 800c180:	f340 84ac 	ble.w	800cadc <__ieee754_pow+0x9f4>
 800c184:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c188:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c18c:	2b14      	cmp	r3, #20
 800c18e:	dd0f      	ble.n	800c1b0 <__ieee754_pow+0xc8>
 800c190:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c194:	fa22 f103 	lsr.w	r1, r2, r3
 800c198:	fa01 f303 	lsl.w	r3, r1, r3
 800c19c:	4293      	cmp	r3, r2
 800c19e:	f040 849d 	bne.w	800cadc <__ieee754_pow+0x9f4>
 800c1a2:	f001 0101 	and.w	r1, r1, #1
 800c1a6:	f1c1 0302 	rsb	r3, r1, #2
 800c1aa:	9304      	str	r3, [sp, #16]
 800c1ac:	b182      	cbz	r2, 800c1d0 <__ieee754_pow+0xe8>
 800c1ae:	e05f      	b.n	800c270 <__ieee754_pow+0x188>
 800c1b0:	2a00      	cmp	r2, #0
 800c1b2:	d15b      	bne.n	800c26c <__ieee754_pow+0x184>
 800c1b4:	f1c3 0314 	rsb	r3, r3, #20
 800c1b8:	fa48 f103 	asr.w	r1, r8, r3
 800c1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c1c0:	4543      	cmp	r3, r8
 800c1c2:	f040 8488 	bne.w	800cad6 <__ieee754_pow+0x9ee>
 800c1c6:	f001 0101 	and.w	r1, r1, #1
 800c1ca:	f1c1 0302 	rsb	r3, r1, #2
 800c1ce:	9304      	str	r3, [sp, #16]
 800c1d0:	4b5c      	ldr	r3, [pc, #368]	; (800c344 <__ieee754_pow+0x25c>)
 800c1d2:	4598      	cmp	r8, r3
 800c1d4:	d132      	bne.n	800c23c <__ieee754_pow+0x154>
 800c1d6:	f1b9 0f00 	cmp.w	r9, #0
 800c1da:	f280 8478 	bge.w	800cace <__ieee754_pow+0x9e6>
 800c1de:	4959      	ldr	r1, [pc, #356]	; (800c344 <__ieee754_pow+0x25c>)
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	463b      	mov	r3, r7
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	f7f4 fb31 	bl	800084c <__aeabi_ddiv>
 800c1ea:	e79c      	b.n	800c126 <__ieee754_pow+0x3e>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9304      	str	r3, [sp, #16]
 800c1f0:	2a00      	cmp	r2, #0
 800c1f2:	d13d      	bne.n	800c270 <__ieee754_pow+0x188>
 800c1f4:	4b51      	ldr	r3, [pc, #324]	; (800c33c <__ieee754_pow+0x254>)
 800c1f6:	4598      	cmp	r8, r3
 800c1f8:	d1ea      	bne.n	800c1d0 <__ieee754_pow+0xe8>
 800c1fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c1fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c202:	ea53 030a 	orrs.w	r3, r3, sl
 800c206:	f000 845a 	beq.w	800cabe <__ieee754_pow+0x9d6>
 800c20a:	4b4f      	ldr	r3, [pc, #316]	; (800c348 <__ieee754_pow+0x260>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	dd08      	ble.n	800c222 <__ieee754_pow+0x13a>
 800c210:	f1b9 0f00 	cmp.w	r9, #0
 800c214:	f2c0 8457 	blt.w	800cac6 <__ieee754_pow+0x9de>
 800c218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c21c:	e783      	b.n	800c126 <__ieee754_pow+0x3e>
 800c21e:	2302      	movs	r3, #2
 800c220:	e7e5      	b.n	800c1ee <__ieee754_pow+0x106>
 800c222:	f1b9 0f00 	cmp.w	r9, #0
 800c226:	f04f 0000 	mov.w	r0, #0
 800c22a:	f04f 0100 	mov.w	r1, #0
 800c22e:	f6bf af7a 	bge.w	800c126 <__ieee754_pow+0x3e>
 800c232:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c236:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c23a:	e774      	b.n	800c126 <__ieee754_pow+0x3e>
 800c23c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c240:	d106      	bne.n	800c250 <__ieee754_pow+0x168>
 800c242:	4632      	mov	r2, r6
 800c244:	463b      	mov	r3, r7
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	f7f4 f9d5 	bl	80005f8 <__aeabi_dmul>
 800c24e:	e76a      	b.n	800c126 <__ieee754_pow+0x3e>
 800c250:	4b3e      	ldr	r3, [pc, #248]	; (800c34c <__ieee754_pow+0x264>)
 800c252:	4599      	cmp	r9, r3
 800c254:	d10c      	bne.n	800c270 <__ieee754_pow+0x188>
 800c256:	2d00      	cmp	r5, #0
 800c258:	db0a      	blt.n	800c270 <__ieee754_pow+0x188>
 800c25a:	ec47 6b10 	vmov	d0, r6, r7
 800c25e:	b009      	add	sp, #36	; 0x24
 800c260:	ecbd 8b06 	vpop	{d8-d10}
 800c264:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c268:	f000 be7a 	b.w	800cf60 <__ieee754_sqrt>
 800c26c:	2300      	movs	r3, #0
 800c26e:	9304      	str	r3, [sp, #16]
 800c270:	ec47 6b10 	vmov	d0, r6, r7
 800c274:	f001 fc2e 	bl	800dad4 <fabs>
 800c278:	ec51 0b10 	vmov	r0, r1, d0
 800c27c:	f1ba 0f00 	cmp.w	sl, #0
 800c280:	d129      	bne.n	800c2d6 <__ieee754_pow+0x1ee>
 800c282:	b124      	cbz	r4, 800c28e <__ieee754_pow+0x1a6>
 800c284:	4b2f      	ldr	r3, [pc, #188]	; (800c344 <__ieee754_pow+0x25c>)
 800c286:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d123      	bne.n	800c2d6 <__ieee754_pow+0x1ee>
 800c28e:	f1b9 0f00 	cmp.w	r9, #0
 800c292:	da05      	bge.n	800c2a0 <__ieee754_pow+0x1b8>
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	2000      	movs	r0, #0
 800c29a:	492a      	ldr	r1, [pc, #168]	; (800c344 <__ieee754_pow+0x25c>)
 800c29c:	f7f4 fad6 	bl	800084c <__aeabi_ddiv>
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	f6bf af40 	bge.w	800c126 <__ieee754_pow+0x3e>
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2b0:	4323      	orrs	r3, r4
 800c2b2:	d108      	bne.n	800c2c6 <__ieee754_pow+0x1de>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	f7f3 ffe4 	bl	8000288 <__aeabi_dsub>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	e78f      	b.n	800c1e6 <__ieee754_pow+0xfe>
 800c2c6:	9b04      	ldr	r3, [sp, #16]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	f47f af2c 	bne.w	800c126 <__ieee754_pow+0x3e>
 800c2ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	e727      	b.n	800c126 <__ieee754_pow+0x3e>
 800c2d6:	0feb      	lsrs	r3, r5, #31
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	9306      	str	r3, [sp, #24]
 800c2dc:	9a06      	ldr	r2, [sp, #24]
 800c2de:	9b04      	ldr	r3, [sp, #16]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	d102      	bne.n	800c2ea <__ieee754_pow+0x202>
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	e7e6      	b.n	800c2b8 <__ieee754_pow+0x1d0>
 800c2ea:	4b19      	ldr	r3, [pc, #100]	; (800c350 <__ieee754_pow+0x268>)
 800c2ec:	4598      	cmp	r8, r3
 800c2ee:	f340 80fb 	ble.w	800c4e8 <__ieee754_pow+0x400>
 800c2f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c2f6:	4598      	cmp	r8, r3
 800c2f8:	4b13      	ldr	r3, [pc, #76]	; (800c348 <__ieee754_pow+0x260>)
 800c2fa:	dd0c      	ble.n	800c316 <__ieee754_pow+0x22e>
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	dc0f      	bgt.n	800c320 <__ieee754_pow+0x238>
 800c300:	f1b9 0f00 	cmp.w	r9, #0
 800c304:	da0f      	bge.n	800c326 <__ieee754_pow+0x23e>
 800c306:	2000      	movs	r0, #0
 800c308:	b009      	add	sp, #36	; 0x24
 800c30a:	ecbd 8b06 	vpop	{d8-d10}
 800c30e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c312:	f001 bbd6 	b.w	800dac2 <__math_oflow>
 800c316:	429c      	cmp	r4, r3
 800c318:	dbf2      	blt.n	800c300 <__ieee754_pow+0x218>
 800c31a:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <__ieee754_pow+0x25c>)
 800c31c:	429c      	cmp	r4, r3
 800c31e:	dd19      	ble.n	800c354 <__ieee754_pow+0x26c>
 800c320:	f1b9 0f00 	cmp.w	r9, #0
 800c324:	dcef      	bgt.n	800c306 <__ieee754_pow+0x21e>
 800c326:	2000      	movs	r0, #0
 800c328:	b009      	add	sp, #36	; 0x24
 800c32a:	ecbd 8b06 	vpop	{d8-d10}
 800c32e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c332:	f001 bbbd 	b.w	800dab0 <__math_uflow>
 800c336:	bf00      	nop
 800c338:	fff00000 	.word	0xfff00000
 800c33c:	7ff00000 	.word	0x7ff00000
 800c340:	433fffff 	.word	0x433fffff
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	3fefffff 	.word	0x3fefffff
 800c34c:	3fe00000 	.word	0x3fe00000
 800c350:	41e00000 	.word	0x41e00000
 800c354:	4b60      	ldr	r3, [pc, #384]	; (800c4d8 <__ieee754_pow+0x3f0>)
 800c356:	2200      	movs	r2, #0
 800c358:	f7f3 ff96 	bl	8000288 <__aeabi_dsub>
 800c35c:	a354      	add	r3, pc, #336	; (adr r3, 800c4b0 <__ieee754_pow+0x3c8>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	f7f4 f947 	bl	80005f8 <__aeabi_dmul>
 800c36a:	a353      	add	r3, pc, #332	; (adr r3, 800c4b8 <__ieee754_pow+0x3d0>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	4606      	mov	r6, r0
 800c372:	460f      	mov	r7, r1
 800c374:	4620      	mov	r0, r4
 800c376:	4629      	mov	r1, r5
 800c378:	f7f4 f93e 	bl	80005f8 <__aeabi_dmul>
 800c37c:	4b57      	ldr	r3, [pc, #348]	; (800c4dc <__ieee754_pow+0x3f4>)
 800c37e:	4682      	mov	sl, r0
 800c380:	468b      	mov	fp, r1
 800c382:	2200      	movs	r2, #0
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f4 f936 	bl	80005f8 <__aeabi_dmul>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	a14b      	add	r1, pc, #300	; (adr r1, 800c4c0 <__ieee754_pow+0x3d8>)
 800c392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	4622      	mov	r2, r4
 800c39c:	462b      	mov	r3, r5
 800c39e:	f7f4 f92b 	bl	80005f8 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	494d      	ldr	r1, [pc, #308]	; (800c4e0 <__ieee754_pow+0x3f8>)
 800c3aa:	f7f3 ff6d 	bl	8000288 <__aeabi_dsub>
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	4680      	mov	r8, r0
 800c3b2:	4689      	mov	r9, r1
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	f7f4 f91d 	bl	80005f8 <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	f7f4 f917 	bl	80005f8 <__aeabi_dmul>
 800c3ca:	a33f      	add	r3, pc, #252	; (adr r3, 800c4c8 <__ieee754_pow+0x3e0>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f4 f912 	bl	80005f8 <__aeabi_dmul>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4650      	mov	r0, sl
 800c3da:	4659      	mov	r1, fp
 800c3dc:	f7f3 ff54 	bl	8000288 <__aeabi_dsub>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4680      	mov	r8, r0
 800c3e6:	4689      	mov	r9, r1
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f3 ff4e 	bl	800028c <__adddf3>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	4632      	mov	r2, r6
 800c3f4:	463b      	mov	r3, r7
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	f7f3 ff45 	bl	8000288 <__aeabi_dsub>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f7f3 ff3f 	bl	8000288 <__aeabi_dsub>
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	9a06      	ldr	r2, [sp, #24]
 800c40e:	3b01      	subs	r3, #1
 800c410:	4313      	orrs	r3, r2
 800c412:	4682      	mov	sl, r0
 800c414:	468b      	mov	fp, r1
 800c416:	f040 81e7 	bne.w	800c7e8 <__ieee754_pow+0x700>
 800c41a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c4d0 <__ieee754_pow+0x3e8>
 800c41e:	eeb0 8a47 	vmov.f32	s16, s14
 800c422:	eef0 8a67 	vmov.f32	s17, s15
 800c426:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c42a:	2600      	movs	r6, #0
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c434:	f7f3 ff28 	bl	8000288 <__aeabi_dsub>
 800c438:	4622      	mov	r2, r4
 800c43a:	462b      	mov	r3, r5
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c444:	4680      	mov	r8, r0
 800c446:	4689      	mov	r9, r1
 800c448:	4650      	mov	r0, sl
 800c44a:	4659      	mov	r1, fp
 800c44c:	f7f4 f8d4 	bl	80005f8 <__aeabi_dmul>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4640      	mov	r0, r8
 800c456:	4649      	mov	r1, r9
 800c458:	f7f3 ff18 	bl	800028c <__adddf3>
 800c45c:	4632      	mov	r2, r6
 800c45e:	463b      	mov	r3, r7
 800c460:	4680      	mov	r8, r0
 800c462:	4689      	mov	r9, r1
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f7f4 f8c6 	bl	80005f8 <__aeabi_dmul>
 800c46c:	460b      	mov	r3, r1
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	4602      	mov	r2, r0
 800c474:	4649      	mov	r1, r9
 800c476:	4640      	mov	r0, r8
 800c478:	f7f3 ff08 	bl	800028c <__adddf3>
 800c47c:	4b19      	ldr	r3, [pc, #100]	; (800c4e4 <__ieee754_pow+0x3fc>)
 800c47e:	4299      	cmp	r1, r3
 800c480:	ec45 4b19 	vmov	d9, r4, r5
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	468b      	mov	fp, r1
 800c48a:	f340 82f1 	ble.w	800ca70 <__ieee754_pow+0x988>
 800c48e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c492:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c496:	4303      	orrs	r3, r0
 800c498:	f000 81e4 	beq.w	800c864 <__ieee754_pow+0x77c>
 800c49c:	ec51 0b18 	vmov	r0, r1, d8
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f7f4 fb1a 	bl	8000adc <__aeabi_dcmplt>
 800c4a8:	3800      	subs	r0, #0
 800c4aa:	bf18      	it	ne
 800c4ac:	2001      	movne	r0, #1
 800c4ae:	e72b      	b.n	800c308 <__ieee754_pow+0x220>
 800c4b0:	60000000 	.word	0x60000000
 800c4b4:	3ff71547 	.word	0x3ff71547
 800c4b8:	f85ddf44 	.word	0xf85ddf44
 800c4bc:	3e54ae0b 	.word	0x3e54ae0b
 800c4c0:	55555555 	.word	0x55555555
 800c4c4:	3fd55555 	.word	0x3fd55555
 800c4c8:	652b82fe 	.word	0x652b82fe
 800c4cc:	3ff71547 	.word	0x3ff71547
 800c4d0:	00000000 	.word	0x00000000
 800c4d4:	bff00000 	.word	0xbff00000
 800c4d8:	3ff00000 	.word	0x3ff00000
 800c4dc:	3fd00000 	.word	0x3fd00000
 800c4e0:	3fe00000 	.word	0x3fe00000
 800c4e4:	408fffff 	.word	0x408fffff
 800c4e8:	4bd5      	ldr	r3, [pc, #852]	; (800c840 <__ieee754_pow+0x758>)
 800c4ea:	402b      	ands	r3, r5
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	b92b      	cbnz	r3, 800c4fc <__ieee754_pow+0x414>
 800c4f0:	4bd4      	ldr	r3, [pc, #848]	; (800c844 <__ieee754_pow+0x75c>)
 800c4f2:	f7f4 f881 	bl	80005f8 <__aeabi_dmul>
 800c4f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	1523      	asrs	r3, r4, #20
 800c4fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c502:	4413      	add	r3, r2
 800c504:	9305      	str	r3, [sp, #20]
 800c506:	4bd0      	ldr	r3, [pc, #832]	; (800c848 <__ieee754_pow+0x760>)
 800c508:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c50c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c510:	429c      	cmp	r4, r3
 800c512:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c516:	dd08      	ble.n	800c52a <__ieee754_pow+0x442>
 800c518:	4bcc      	ldr	r3, [pc, #816]	; (800c84c <__ieee754_pow+0x764>)
 800c51a:	429c      	cmp	r4, r3
 800c51c:	f340 8162 	ble.w	800c7e4 <__ieee754_pow+0x6fc>
 800c520:	9b05      	ldr	r3, [sp, #20]
 800c522:	3301      	adds	r3, #1
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c52a:	2400      	movs	r4, #0
 800c52c:	00e3      	lsls	r3, r4, #3
 800c52e:	9307      	str	r3, [sp, #28]
 800c530:	4bc7      	ldr	r3, [pc, #796]	; (800c850 <__ieee754_pow+0x768>)
 800c532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c536:	ed93 7b00 	vldr	d7, [r3]
 800c53a:	4629      	mov	r1, r5
 800c53c:	ec53 2b17 	vmov	r2, r3, d7
 800c540:	eeb0 9a47 	vmov.f32	s18, s14
 800c544:	eef0 9a67 	vmov.f32	s19, s15
 800c548:	4682      	mov	sl, r0
 800c54a:	f7f3 fe9d 	bl	8000288 <__aeabi_dsub>
 800c54e:	4652      	mov	r2, sl
 800c550:	4606      	mov	r6, r0
 800c552:	460f      	mov	r7, r1
 800c554:	462b      	mov	r3, r5
 800c556:	ec51 0b19 	vmov	r0, r1, d9
 800c55a:	f7f3 fe97 	bl	800028c <__adddf3>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	2000      	movs	r0, #0
 800c564:	49bb      	ldr	r1, [pc, #748]	; (800c854 <__ieee754_pow+0x76c>)
 800c566:	f7f4 f971 	bl	800084c <__aeabi_ddiv>
 800c56a:	ec41 0b1a 	vmov	d10, r0, r1
 800c56e:	4602      	mov	r2, r0
 800c570:	460b      	mov	r3, r1
 800c572:	4630      	mov	r0, r6
 800c574:	4639      	mov	r1, r7
 800c576:	f7f4 f83f 	bl	80005f8 <__aeabi_dmul>
 800c57a:	2300      	movs	r3, #0
 800c57c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c580:	9302      	str	r3, [sp, #8]
 800c582:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c586:	46ab      	mov	fp, r5
 800c588:	106d      	asrs	r5, r5, #1
 800c58a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c58e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c592:	ec41 0b18 	vmov	d8, r0, r1
 800c596:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c59a:	2200      	movs	r2, #0
 800c59c:	4640      	mov	r0, r8
 800c59e:	4649      	mov	r1, r9
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	461d      	mov	r5, r3
 800c5a4:	f7f4 f828 	bl	80005f8 <__aeabi_dmul>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	4639      	mov	r1, r7
 800c5b0:	f7f3 fe6a 	bl	8000288 <__aeabi_dsub>
 800c5b4:	ec53 2b19 	vmov	r2, r3, d9
 800c5b8:	4606      	mov	r6, r0
 800c5ba:	460f      	mov	r7, r1
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f3 fe62 	bl	8000288 <__aeabi_dsub>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4650      	mov	r0, sl
 800c5ca:	4659      	mov	r1, fp
 800c5cc:	f7f3 fe5c 	bl	8000288 <__aeabi_dsub>
 800c5d0:	4642      	mov	r2, r8
 800c5d2:	464b      	mov	r3, r9
 800c5d4:	f7f4 f810 	bl	80005f8 <__aeabi_dmul>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	460b      	mov	r3, r1
 800c5dc:	4630      	mov	r0, r6
 800c5de:	4639      	mov	r1, r7
 800c5e0:	f7f3 fe52 	bl	8000288 <__aeabi_dsub>
 800c5e4:	ec53 2b1a 	vmov	r2, r3, d10
 800c5e8:	f7f4 f806 	bl	80005f8 <__aeabi_dmul>
 800c5ec:	ec53 2b18 	vmov	r2, r3, d8
 800c5f0:	ec41 0b19 	vmov	d9, r0, r1
 800c5f4:	ec51 0b18 	vmov	r0, r1, d8
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	a37c      	add	r3, pc, #496	; (adr r3, 800c7f0 <__ieee754_pow+0x708>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	4604      	mov	r4, r0
 800c604:	460d      	mov	r5, r1
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	a37b      	add	r3, pc, #492	; (adr r3, 800c7f8 <__ieee754_pow+0x710>)
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f7f3 fe3c 	bl	800028c <__adddf3>
 800c614:	4622      	mov	r2, r4
 800c616:	462b      	mov	r3, r5
 800c618:	f7f3 ffee 	bl	80005f8 <__aeabi_dmul>
 800c61c:	a378      	add	r3, pc, #480	; (adr r3, 800c800 <__ieee754_pow+0x718>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	f7f3 fe33 	bl	800028c <__adddf3>
 800c626:	4622      	mov	r2, r4
 800c628:	462b      	mov	r3, r5
 800c62a:	f7f3 ffe5 	bl	80005f8 <__aeabi_dmul>
 800c62e:	a376      	add	r3, pc, #472	; (adr r3, 800c808 <__ieee754_pow+0x720>)
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f7f3 fe2a 	bl	800028c <__adddf3>
 800c638:	4622      	mov	r2, r4
 800c63a:	462b      	mov	r3, r5
 800c63c:	f7f3 ffdc 	bl	80005f8 <__aeabi_dmul>
 800c640:	a373      	add	r3, pc, #460	; (adr r3, 800c810 <__ieee754_pow+0x728>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	f7f3 fe21 	bl	800028c <__adddf3>
 800c64a:	4622      	mov	r2, r4
 800c64c:	462b      	mov	r3, r5
 800c64e:	f7f3 ffd3 	bl	80005f8 <__aeabi_dmul>
 800c652:	a371      	add	r3, pc, #452	; (adr r3, 800c818 <__ieee754_pow+0x730>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 fe18 	bl	800028c <__adddf3>
 800c65c:	4622      	mov	r2, r4
 800c65e:	4606      	mov	r6, r0
 800c660:	460f      	mov	r7, r1
 800c662:	462b      	mov	r3, r5
 800c664:	4620      	mov	r0, r4
 800c666:	4629      	mov	r1, r5
 800c668:	f7f3 ffc6 	bl	80005f8 <__aeabi_dmul>
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4630      	mov	r0, r6
 800c672:	4639      	mov	r1, r7
 800c674:	f7f3 ffc0 	bl	80005f8 <__aeabi_dmul>
 800c678:	4642      	mov	r2, r8
 800c67a:	4604      	mov	r4, r0
 800c67c:	460d      	mov	r5, r1
 800c67e:	464b      	mov	r3, r9
 800c680:	ec51 0b18 	vmov	r0, r1, d8
 800c684:	f7f3 fe02 	bl	800028c <__adddf3>
 800c688:	ec53 2b19 	vmov	r2, r3, d9
 800c68c:	f7f3 ffb4 	bl	80005f8 <__aeabi_dmul>
 800c690:	4622      	mov	r2, r4
 800c692:	462b      	mov	r3, r5
 800c694:	f7f3 fdfa 	bl	800028c <__adddf3>
 800c698:	4642      	mov	r2, r8
 800c69a:	4682      	mov	sl, r0
 800c69c:	468b      	mov	fp, r1
 800c69e:	464b      	mov	r3, r9
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	f7f3 ffa8 	bl	80005f8 <__aeabi_dmul>
 800c6a8:	4b6b      	ldr	r3, [pc, #428]	; (800c858 <__ieee754_pow+0x770>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	f7f3 fdec 	bl	800028c <__adddf3>
 800c6b4:	4652      	mov	r2, sl
 800c6b6:	465b      	mov	r3, fp
 800c6b8:	f7f3 fde8 	bl	800028c <__adddf3>
 800c6bc:	2000      	movs	r0, #0
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	4649      	mov	r1, r9
 800c6ca:	f7f3 ff95 	bl	80005f8 <__aeabi_dmul>
 800c6ce:	4b62      	ldr	r3, [pc, #392]	; (800c858 <__ieee754_pow+0x770>)
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4689      	mov	r9, r1
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f3 fdd5 	bl	8000288 <__aeabi_dsub>
 800c6de:	4632      	mov	r2, r6
 800c6e0:	463b      	mov	r3, r7
 800c6e2:	f7f3 fdd1 	bl	8000288 <__aeabi_dsub>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4650      	mov	r0, sl
 800c6ec:	4659      	mov	r1, fp
 800c6ee:	f7f3 fdcb 	bl	8000288 <__aeabi_dsub>
 800c6f2:	ec53 2b18 	vmov	r2, r3, d8
 800c6f6:	f7f3 ff7f 	bl	80005f8 <__aeabi_dmul>
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4606      	mov	r6, r0
 800c6fe:	460f      	mov	r7, r1
 800c700:	462b      	mov	r3, r5
 800c702:	ec51 0b19 	vmov	r0, r1, d9
 800c706:	f7f3 ff77 	bl	80005f8 <__aeabi_dmul>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4630      	mov	r0, r6
 800c710:	4639      	mov	r1, r7
 800c712:	f7f3 fdbb 	bl	800028c <__adddf3>
 800c716:	4606      	mov	r6, r0
 800c718:	460f      	mov	r7, r1
 800c71a:	4602      	mov	r2, r0
 800c71c:	460b      	mov	r3, r1
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f3 fdb3 	bl	800028c <__adddf3>
 800c726:	a33e      	add	r3, pc, #248	; (adr r3, 800c820 <__ieee754_pow+0x738>)
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	2000      	movs	r0, #0
 800c72e:	4604      	mov	r4, r0
 800c730:	460d      	mov	r5, r1
 800c732:	f7f3 ff61 	bl	80005f8 <__aeabi_dmul>
 800c736:	4642      	mov	r2, r8
 800c738:	ec41 0b18 	vmov	d8, r0, r1
 800c73c:	464b      	mov	r3, r9
 800c73e:	4620      	mov	r0, r4
 800c740:	4629      	mov	r1, r5
 800c742:	f7f3 fda1 	bl	8000288 <__aeabi_dsub>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4630      	mov	r0, r6
 800c74c:	4639      	mov	r1, r7
 800c74e:	f7f3 fd9b 	bl	8000288 <__aeabi_dsub>
 800c752:	a335      	add	r3, pc, #212	; (adr r3, 800c828 <__ieee754_pow+0x740>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	f7f3 ff4e 	bl	80005f8 <__aeabi_dmul>
 800c75c:	a334      	add	r3, pc, #208	; (adr r3, 800c830 <__ieee754_pow+0x748>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	4606      	mov	r6, r0
 800c764:	460f      	mov	r7, r1
 800c766:	4620      	mov	r0, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	f7f3 ff45 	bl	80005f8 <__aeabi_dmul>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4630      	mov	r0, r6
 800c774:	4639      	mov	r1, r7
 800c776:	f7f3 fd89 	bl	800028c <__adddf3>
 800c77a:	9a07      	ldr	r2, [sp, #28]
 800c77c:	4b37      	ldr	r3, [pc, #220]	; (800c85c <__ieee754_pow+0x774>)
 800c77e:	4413      	add	r3, r2
 800c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c784:	f7f3 fd82 	bl	800028c <__adddf3>
 800c788:	4682      	mov	sl, r0
 800c78a:	9805      	ldr	r0, [sp, #20]
 800c78c:	468b      	mov	fp, r1
 800c78e:	f7f3 fec9 	bl	8000524 <__aeabi_i2d>
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	4b32      	ldr	r3, [pc, #200]	; (800c860 <__ieee754_pow+0x778>)
 800c796:	4413      	add	r3, r2
 800c798:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c79c:	4606      	mov	r6, r0
 800c79e:	460f      	mov	r7, r1
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	465b      	mov	r3, fp
 800c7a4:	ec51 0b18 	vmov	r0, r1, d8
 800c7a8:	f7f3 fd70 	bl	800028c <__adddf3>
 800c7ac:	4642      	mov	r2, r8
 800c7ae:	464b      	mov	r3, r9
 800c7b0:	f7f3 fd6c 	bl	800028c <__adddf3>
 800c7b4:	4632      	mov	r2, r6
 800c7b6:	463b      	mov	r3, r7
 800c7b8:	f7f3 fd68 	bl	800028c <__adddf3>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	4632      	mov	r2, r6
 800c7c0:	463b      	mov	r3, r7
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	f7f3 fd5f 	bl	8000288 <__aeabi_dsub>
 800c7ca:	4642      	mov	r2, r8
 800c7cc:	464b      	mov	r3, r9
 800c7ce:	f7f3 fd5b 	bl	8000288 <__aeabi_dsub>
 800c7d2:	ec53 2b18 	vmov	r2, r3, d8
 800c7d6:	f7f3 fd57 	bl	8000288 <__aeabi_dsub>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4650      	mov	r0, sl
 800c7e0:	4659      	mov	r1, fp
 800c7e2:	e610      	b.n	800c406 <__ieee754_pow+0x31e>
 800c7e4:	2401      	movs	r4, #1
 800c7e6:	e6a1      	b.n	800c52c <__ieee754_pow+0x444>
 800c7e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c838 <__ieee754_pow+0x750>
 800c7ec:	e617      	b.n	800c41e <__ieee754_pow+0x336>
 800c7ee:	bf00      	nop
 800c7f0:	4a454eef 	.word	0x4a454eef
 800c7f4:	3fca7e28 	.word	0x3fca7e28
 800c7f8:	93c9db65 	.word	0x93c9db65
 800c7fc:	3fcd864a 	.word	0x3fcd864a
 800c800:	a91d4101 	.word	0xa91d4101
 800c804:	3fd17460 	.word	0x3fd17460
 800c808:	518f264d 	.word	0x518f264d
 800c80c:	3fd55555 	.word	0x3fd55555
 800c810:	db6fabff 	.word	0xdb6fabff
 800c814:	3fdb6db6 	.word	0x3fdb6db6
 800c818:	33333303 	.word	0x33333303
 800c81c:	3fe33333 	.word	0x3fe33333
 800c820:	e0000000 	.word	0xe0000000
 800c824:	3feec709 	.word	0x3feec709
 800c828:	dc3a03fd 	.word	0xdc3a03fd
 800c82c:	3feec709 	.word	0x3feec709
 800c830:	145b01f5 	.word	0x145b01f5
 800c834:	be3e2fe0 	.word	0xbe3e2fe0
 800c838:	00000000 	.word	0x00000000
 800c83c:	3ff00000 	.word	0x3ff00000
 800c840:	7ff00000 	.word	0x7ff00000
 800c844:	43400000 	.word	0x43400000
 800c848:	0003988e 	.word	0x0003988e
 800c84c:	000bb679 	.word	0x000bb679
 800c850:	0800e308 	.word	0x0800e308
 800c854:	3ff00000 	.word	0x3ff00000
 800c858:	40080000 	.word	0x40080000
 800c85c:	0800e328 	.word	0x0800e328
 800c860:	0800e318 	.word	0x0800e318
 800c864:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb3c <__ieee754_pow+0xa54>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	4640      	mov	r0, r8
 800c86c:	4649      	mov	r1, r9
 800c86e:	f7f3 fd0d 	bl	800028c <__adddf3>
 800c872:	4622      	mov	r2, r4
 800c874:	ec41 0b1a 	vmov	d10, r0, r1
 800c878:	462b      	mov	r3, r5
 800c87a:	4630      	mov	r0, r6
 800c87c:	4639      	mov	r1, r7
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	ec51 0b1a 	vmov	r0, r1, d10
 800c88a:	f7f4 f945 	bl	8000b18 <__aeabi_dcmpgt>
 800c88e:	2800      	cmp	r0, #0
 800c890:	f47f ae04 	bne.w	800c49c <__ieee754_pow+0x3b4>
 800c894:	4aa4      	ldr	r2, [pc, #656]	; (800cb28 <__ieee754_pow+0xa40>)
 800c896:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c89a:	4293      	cmp	r3, r2
 800c89c:	f340 8108 	ble.w	800cab0 <__ieee754_pow+0x9c8>
 800c8a0:	151b      	asrs	r3, r3, #20
 800c8a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c8a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8aa:	fa4a f303 	asr.w	r3, sl, r3
 800c8ae:	445b      	add	r3, fp
 800c8b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c8b4:	4e9d      	ldr	r6, [pc, #628]	; (800cb2c <__ieee754_pow+0xa44>)
 800c8b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c8ba:	4116      	asrs	r6, r2
 800c8bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	ea23 0106 	bic.w	r1, r3, r6
 800c8c6:	f1c2 0214 	rsb	r2, r2, #20
 800c8ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c8ce:	fa4a fa02 	asr.w	sl, sl, r2
 800c8d2:	f1bb 0f00 	cmp.w	fp, #0
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4620      	mov	r0, r4
 800c8dc:	4629      	mov	r1, r5
 800c8de:	bfb8      	it	lt
 800c8e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8e4:	f7f3 fcd0 	bl	8000288 <__aeabi_dsub>
 800c8e8:	ec41 0b19 	vmov	d9, r0, r1
 800c8ec:	4642      	mov	r2, r8
 800c8ee:	464b      	mov	r3, r9
 800c8f0:	ec51 0b19 	vmov	r0, r1, d9
 800c8f4:	f7f3 fcca 	bl	800028c <__adddf3>
 800c8f8:	a37b      	add	r3, pc, #492	; (adr r3, 800cae8 <__ieee754_pow+0xa00>)
 800c8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fe:	2000      	movs	r0, #0
 800c900:	4604      	mov	r4, r0
 800c902:	460d      	mov	r5, r1
 800c904:	f7f3 fe78 	bl	80005f8 <__aeabi_dmul>
 800c908:	ec53 2b19 	vmov	r2, r3, d9
 800c90c:	4606      	mov	r6, r0
 800c90e:	460f      	mov	r7, r1
 800c910:	4620      	mov	r0, r4
 800c912:	4629      	mov	r1, r5
 800c914:	f7f3 fcb8 	bl	8000288 <__aeabi_dsub>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4640      	mov	r0, r8
 800c91e:	4649      	mov	r1, r9
 800c920:	f7f3 fcb2 	bl	8000288 <__aeabi_dsub>
 800c924:	a372      	add	r3, pc, #456	; (adr r3, 800caf0 <__ieee754_pow+0xa08>)
 800c926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92a:	f7f3 fe65 	bl	80005f8 <__aeabi_dmul>
 800c92e:	a372      	add	r3, pc, #456	; (adr r3, 800caf8 <__ieee754_pow+0xa10>)
 800c930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c934:	4680      	mov	r8, r0
 800c936:	4689      	mov	r9, r1
 800c938:	4620      	mov	r0, r4
 800c93a:	4629      	mov	r1, r5
 800c93c:	f7f3 fe5c 	bl	80005f8 <__aeabi_dmul>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4640      	mov	r0, r8
 800c946:	4649      	mov	r1, r9
 800c948:	f7f3 fca0 	bl	800028c <__adddf3>
 800c94c:	4604      	mov	r4, r0
 800c94e:	460d      	mov	r5, r1
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4630      	mov	r0, r6
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fc98 	bl	800028c <__adddf3>
 800c95c:	4632      	mov	r2, r6
 800c95e:	463b      	mov	r3, r7
 800c960:	4680      	mov	r8, r0
 800c962:	4689      	mov	r9, r1
 800c964:	f7f3 fc90 	bl	8000288 <__aeabi_dsub>
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fc8a 	bl	8000288 <__aeabi_dsub>
 800c974:	4642      	mov	r2, r8
 800c976:	4606      	mov	r6, r0
 800c978:	460f      	mov	r7, r1
 800c97a:	464b      	mov	r3, r9
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	f7f3 fe3a 	bl	80005f8 <__aeabi_dmul>
 800c984:	a35e      	add	r3, pc, #376	; (adr r3, 800cb00 <__ieee754_pow+0xa18>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	4604      	mov	r4, r0
 800c98c:	460d      	mov	r5, r1
 800c98e:	f7f3 fe33 	bl	80005f8 <__aeabi_dmul>
 800c992:	a35d      	add	r3, pc, #372	; (adr r3, 800cb08 <__ieee754_pow+0xa20>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	f7f3 fc76 	bl	8000288 <__aeabi_dsub>
 800c99c:	4622      	mov	r2, r4
 800c99e:	462b      	mov	r3, r5
 800c9a0:	f7f3 fe2a 	bl	80005f8 <__aeabi_dmul>
 800c9a4:	a35a      	add	r3, pc, #360	; (adr r3, 800cb10 <__ieee754_pow+0xa28>)
 800c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9aa:	f7f3 fc6f 	bl	800028c <__adddf3>
 800c9ae:	4622      	mov	r2, r4
 800c9b0:	462b      	mov	r3, r5
 800c9b2:	f7f3 fe21 	bl	80005f8 <__aeabi_dmul>
 800c9b6:	a358      	add	r3, pc, #352	; (adr r3, 800cb18 <__ieee754_pow+0xa30>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	4622      	mov	r2, r4
 800c9c2:	462b      	mov	r3, r5
 800c9c4:	f7f3 fe18 	bl	80005f8 <__aeabi_dmul>
 800c9c8:	a355      	add	r3, pc, #340	; (adr r3, 800cb20 <__ieee754_pow+0xa38>)
 800c9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ce:	f7f3 fc5d 	bl	800028c <__adddf3>
 800c9d2:	4622      	mov	r2, r4
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	f7f3 fe0f 	bl	80005f8 <__aeabi_dmul>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4640      	mov	r0, r8
 800c9e0:	4649      	mov	r1, r9
 800c9e2:	f7f3 fc51 	bl	8000288 <__aeabi_dsub>
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4640      	mov	r0, r8
 800c9f0:	4649      	mov	r1, r9
 800c9f2:	f7f3 fe01 	bl	80005f8 <__aeabi_dmul>
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	ec41 0b19 	vmov	d9, r0, r1
 800c9fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fc40 	bl	8000288 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	ec51 0b19 	vmov	r0, r1, d9
 800ca10:	f7f3 ff1c 	bl	800084c <__aeabi_ddiv>
 800ca14:	4632      	mov	r2, r6
 800ca16:	4604      	mov	r4, r0
 800ca18:	460d      	mov	r5, r1
 800ca1a:	463b      	mov	r3, r7
 800ca1c:	4640      	mov	r0, r8
 800ca1e:	4649      	mov	r1, r9
 800ca20:	f7f3 fdea 	bl	80005f8 <__aeabi_dmul>
 800ca24:	4632      	mov	r2, r6
 800ca26:	463b      	mov	r3, r7
 800ca28:	f7f3 fc30 	bl	800028c <__adddf3>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4620      	mov	r0, r4
 800ca32:	4629      	mov	r1, r5
 800ca34:	f7f3 fc28 	bl	8000288 <__aeabi_dsub>
 800ca38:	4642      	mov	r2, r8
 800ca3a:	464b      	mov	r3, r9
 800ca3c:	f7f3 fc24 	bl	8000288 <__aeabi_dsub>
 800ca40:	460b      	mov	r3, r1
 800ca42:	4602      	mov	r2, r0
 800ca44:	493a      	ldr	r1, [pc, #232]	; (800cb30 <__ieee754_pow+0xa48>)
 800ca46:	2000      	movs	r0, #0
 800ca48:	f7f3 fc1e 	bl	8000288 <__aeabi_dsub>
 800ca4c:	ec41 0b10 	vmov	d0, r0, r1
 800ca50:	ee10 3a90 	vmov	r3, s1
 800ca54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca5c:	da2b      	bge.n	800cab6 <__ieee754_pow+0x9ce>
 800ca5e:	4650      	mov	r0, sl
 800ca60:	f001 f8ce 	bl	800dc00 <scalbn>
 800ca64:	ec51 0b10 	vmov	r0, r1, d0
 800ca68:	ec53 2b18 	vmov	r2, r3, d8
 800ca6c:	f7ff bbed 	b.w	800c24a <__ieee754_pow+0x162>
 800ca70:	4b30      	ldr	r3, [pc, #192]	; (800cb34 <__ieee754_pow+0xa4c>)
 800ca72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca76:	429e      	cmp	r6, r3
 800ca78:	f77f af0c 	ble.w	800c894 <__ieee754_pow+0x7ac>
 800ca7c:	4b2e      	ldr	r3, [pc, #184]	; (800cb38 <__ieee754_pow+0xa50>)
 800ca7e:	440b      	add	r3, r1
 800ca80:	4303      	orrs	r3, r0
 800ca82:	d009      	beq.n	800ca98 <__ieee754_pow+0x9b0>
 800ca84:	ec51 0b18 	vmov	r0, r1, d8
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f7f4 f826 	bl	8000adc <__aeabi_dcmplt>
 800ca90:	3800      	subs	r0, #0
 800ca92:	bf18      	it	ne
 800ca94:	2001      	movne	r0, #1
 800ca96:	e447      	b.n	800c328 <__ieee754_pow+0x240>
 800ca98:	4622      	mov	r2, r4
 800ca9a:	462b      	mov	r3, r5
 800ca9c:	f7f3 fbf4 	bl	8000288 <__aeabi_dsub>
 800caa0:	4642      	mov	r2, r8
 800caa2:	464b      	mov	r3, r9
 800caa4:	f7f4 f82e 	bl	8000b04 <__aeabi_dcmpge>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	f43f aef3 	beq.w	800c894 <__ieee754_pow+0x7ac>
 800caae:	e7e9      	b.n	800ca84 <__ieee754_pow+0x99c>
 800cab0:	f04f 0a00 	mov.w	sl, #0
 800cab4:	e71a      	b.n	800c8ec <__ieee754_pow+0x804>
 800cab6:	ec51 0b10 	vmov	r0, r1, d0
 800caba:	4619      	mov	r1, r3
 800cabc:	e7d4      	b.n	800ca68 <__ieee754_pow+0x980>
 800cabe:	491c      	ldr	r1, [pc, #112]	; (800cb30 <__ieee754_pow+0xa48>)
 800cac0:	2000      	movs	r0, #0
 800cac2:	f7ff bb30 	b.w	800c126 <__ieee754_pow+0x3e>
 800cac6:	2000      	movs	r0, #0
 800cac8:	2100      	movs	r1, #0
 800caca:	f7ff bb2c 	b.w	800c126 <__ieee754_pow+0x3e>
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7ff bb28 	b.w	800c126 <__ieee754_pow+0x3e>
 800cad6:	9204      	str	r2, [sp, #16]
 800cad8:	f7ff bb7a 	b.w	800c1d0 <__ieee754_pow+0xe8>
 800cadc:	2300      	movs	r3, #0
 800cade:	f7ff bb64 	b.w	800c1aa <__ieee754_pow+0xc2>
 800cae2:	bf00      	nop
 800cae4:	f3af 8000 	nop.w
 800cae8:	00000000 	.word	0x00000000
 800caec:	3fe62e43 	.word	0x3fe62e43
 800caf0:	fefa39ef 	.word	0xfefa39ef
 800caf4:	3fe62e42 	.word	0x3fe62e42
 800caf8:	0ca86c39 	.word	0x0ca86c39
 800cafc:	be205c61 	.word	0xbe205c61
 800cb00:	72bea4d0 	.word	0x72bea4d0
 800cb04:	3e663769 	.word	0x3e663769
 800cb08:	c5d26bf1 	.word	0xc5d26bf1
 800cb0c:	3ebbbd41 	.word	0x3ebbbd41
 800cb10:	af25de2c 	.word	0xaf25de2c
 800cb14:	3f11566a 	.word	0x3f11566a
 800cb18:	16bebd93 	.word	0x16bebd93
 800cb1c:	3f66c16c 	.word	0x3f66c16c
 800cb20:	5555553e 	.word	0x5555553e
 800cb24:	3fc55555 	.word	0x3fc55555
 800cb28:	3fe00000 	.word	0x3fe00000
 800cb2c:	000fffff 	.word	0x000fffff
 800cb30:	3ff00000 	.word	0x3ff00000
 800cb34:	4090cbff 	.word	0x4090cbff
 800cb38:	3f6f3400 	.word	0x3f6f3400
 800cb3c:	652b82fe 	.word	0x652b82fe
 800cb40:	3c971547 	.word	0x3c971547
 800cb44:	00000000 	.word	0x00000000

0800cb48 <__ieee754_rem_pio2>:
 800cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	ed2d 8b02 	vpush	{d8}
 800cb50:	ec55 4b10 	vmov	r4, r5, d0
 800cb54:	4bca      	ldr	r3, [pc, #808]	; (800ce80 <__ieee754_rem_pio2+0x338>)
 800cb56:	b08b      	sub	sp, #44	; 0x2c
 800cb58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cb5c:	4598      	cmp	r8, r3
 800cb5e:	4682      	mov	sl, r0
 800cb60:	9502      	str	r5, [sp, #8]
 800cb62:	dc08      	bgt.n	800cb76 <__ieee754_rem_pio2+0x2e>
 800cb64:	2200      	movs	r2, #0
 800cb66:	2300      	movs	r3, #0
 800cb68:	ed80 0b00 	vstr	d0, [r0]
 800cb6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cb70:	f04f 0b00 	mov.w	fp, #0
 800cb74:	e028      	b.n	800cbc8 <__ieee754_rem_pio2+0x80>
 800cb76:	4bc3      	ldr	r3, [pc, #780]	; (800ce84 <__ieee754_rem_pio2+0x33c>)
 800cb78:	4598      	cmp	r8, r3
 800cb7a:	dc78      	bgt.n	800cc6e <__ieee754_rem_pio2+0x126>
 800cb7c:	9b02      	ldr	r3, [sp, #8]
 800cb7e:	4ec2      	ldr	r6, [pc, #776]	; (800ce88 <__ieee754_rem_pio2+0x340>)
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	ee10 0a10 	vmov	r0, s0
 800cb86:	a3b0      	add	r3, pc, #704	; (adr r3, 800ce48 <__ieee754_rem_pio2+0x300>)
 800cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	dd39      	ble.n	800cc04 <__ieee754_rem_pio2+0xbc>
 800cb90:	f7f3 fb7a 	bl	8000288 <__aeabi_dsub>
 800cb94:	45b0      	cmp	r8, r6
 800cb96:	4604      	mov	r4, r0
 800cb98:	460d      	mov	r5, r1
 800cb9a:	d01b      	beq.n	800cbd4 <__ieee754_rem_pio2+0x8c>
 800cb9c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ce50 <__ieee754_rem_pio2+0x308>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f7f3 fb71 	bl	8000288 <__aeabi_dsub>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	e9ca 2300 	strd	r2, r3, [sl]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4629      	mov	r1, r5
 800cbb2:	f7f3 fb69 	bl	8000288 <__aeabi_dsub>
 800cbb6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ce50 <__ieee754_rem_pio2+0x308>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	f7f3 fb64 	bl	8000288 <__aeabi_dsub>
 800cbc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cbc4:	f04f 0b01 	mov.w	fp, #1
 800cbc8:	4658      	mov	r0, fp
 800cbca:	b00b      	add	sp, #44	; 0x2c
 800cbcc:	ecbd 8b02 	vpop	{d8}
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ce58 <__ieee754_rem_pio2+0x310>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	f7f3 fb55 	bl	8000288 <__aeabi_dsub>
 800cbde:	a3a0      	add	r3, pc, #640	; (adr r3, 800ce60 <__ieee754_rem_pio2+0x318>)
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	460d      	mov	r5, r1
 800cbe8:	f7f3 fb4e 	bl	8000288 <__aeabi_dsub>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	e9ca 2300 	strd	r2, r3, [sl]
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	f7f3 fb46 	bl	8000288 <__aeabi_dsub>
 800cbfc:	a398      	add	r3, pc, #608	; (adr r3, 800ce60 <__ieee754_rem_pio2+0x318>)
 800cbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc02:	e7db      	b.n	800cbbc <__ieee754_rem_pio2+0x74>
 800cc04:	f7f3 fb42 	bl	800028c <__adddf3>
 800cc08:	45b0      	cmp	r8, r6
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	460d      	mov	r5, r1
 800cc0e:	d016      	beq.n	800cc3e <__ieee754_rem_pio2+0xf6>
 800cc10:	a38f      	add	r3, pc, #572	; (adr r3, 800ce50 <__ieee754_rem_pio2+0x308>)
 800cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc16:	f7f3 fb39 	bl	800028c <__adddf3>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	e9ca 2300 	strd	r2, r3, [sl]
 800cc22:	4620      	mov	r0, r4
 800cc24:	4629      	mov	r1, r5
 800cc26:	f7f3 fb2f 	bl	8000288 <__aeabi_dsub>
 800cc2a:	a389      	add	r3, pc, #548	; (adr r3, 800ce50 <__ieee754_rem_pio2+0x308>)
 800cc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc30:	f7f3 fb2c 	bl	800028c <__adddf3>
 800cc34:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800cc38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cc3c:	e7c4      	b.n	800cbc8 <__ieee754_rem_pio2+0x80>
 800cc3e:	a386      	add	r3, pc, #536	; (adr r3, 800ce58 <__ieee754_rem_pio2+0x310>)
 800cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc44:	f7f3 fb22 	bl	800028c <__adddf3>
 800cc48:	a385      	add	r3, pc, #532	; (adr r3, 800ce60 <__ieee754_rem_pio2+0x318>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	4604      	mov	r4, r0
 800cc50:	460d      	mov	r5, r1
 800cc52:	f7f3 fb1b 	bl	800028c <__adddf3>
 800cc56:	4602      	mov	r2, r0
 800cc58:	460b      	mov	r3, r1
 800cc5a:	e9ca 2300 	strd	r2, r3, [sl]
 800cc5e:	4620      	mov	r0, r4
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7f3 fb11 	bl	8000288 <__aeabi_dsub>
 800cc66:	a37e      	add	r3, pc, #504	; (adr r3, 800ce60 <__ieee754_rem_pio2+0x318>)
 800cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6c:	e7e0      	b.n	800cc30 <__ieee754_rem_pio2+0xe8>
 800cc6e:	4b87      	ldr	r3, [pc, #540]	; (800ce8c <__ieee754_rem_pio2+0x344>)
 800cc70:	4598      	cmp	r8, r3
 800cc72:	f300 80d9 	bgt.w	800ce28 <__ieee754_rem_pio2+0x2e0>
 800cc76:	f000 ff2d 	bl	800dad4 <fabs>
 800cc7a:	ec55 4b10 	vmov	r4, r5, d0
 800cc7e:	ee10 0a10 	vmov	r0, s0
 800cc82:	a379      	add	r3, pc, #484	; (adr r3, 800ce68 <__ieee754_rem_pio2+0x320>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	4629      	mov	r1, r5
 800cc8a:	f7f3 fcb5 	bl	80005f8 <__aeabi_dmul>
 800cc8e:	4b80      	ldr	r3, [pc, #512]	; (800ce90 <__ieee754_rem_pio2+0x348>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	f7f3 fafb 	bl	800028c <__adddf3>
 800cc96:	f7f3 ff5f 	bl	8000b58 <__aeabi_d2iz>
 800cc9a:	4683      	mov	fp, r0
 800cc9c:	f7f3 fc42 	bl	8000524 <__aeabi_i2d>
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	ec43 2b18 	vmov	d8, r2, r3
 800cca8:	a367      	add	r3, pc, #412	; (adr r3, 800ce48 <__ieee754_rem_pio2+0x300>)
 800ccaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccae:	f7f3 fca3 	bl	80005f8 <__aeabi_dmul>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	4629      	mov	r1, r5
 800ccba:	f7f3 fae5 	bl	8000288 <__aeabi_dsub>
 800ccbe:	a364      	add	r3, pc, #400	; (adr r3, 800ce50 <__ieee754_rem_pio2+0x308>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	460f      	mov	r7, r1
 800ccc8:	ec51 0b18 	vmov	r0, r1, d8
 800cccc:	f7f3 fc94 	bl	80005f8 <__aeabi_dmul>
 800ccd0:	f1bb 0f1f 	cmp.w	fp, #31
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	460d      	mov	r5, r1
 800ccd8:	dc0d      	bgt.n	800ccf6 <__ieee754_rem_pio2+0x1ae>
 800ccda:	4b6e      	ldr	r3, [pc, #440]	; (800ce94 <__ieee754_rem_pio2+0x34c>)
 800ccdc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800cce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce4:	4543      	cmp	r3, r8
 800cce6:	d006      	beq.n	800ccf6 <__ieee754_rem_pio2+0x1ae>
 800cce8:	4622      	mov	r2, r4
 800ccea:	462b      	mov	r3, r5
 800ccec:	4630      	mov	r0, r6
 800ccee:	4639      	mov	r1, r7
 800ccf0:	f7f3 faca 	bl	8000288 <__aeabi_dsub>
 800ccf4:	e00f      	b.n	800cd16 <__ieee754_rem_pio2+0x1ce>
 800ccf6:	462b      	mov	r3, r5
 800ccf8:	4622      	mov	r2, r4
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 fac3 	bl	8000288 <__aeabi_dsub>
 800cd02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cd06:	9303      	str	r3, [sp, #12]
 800cd08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800cd10:	f1b8 0f10 	cmp.w	r8, #16
 800cd14:	dc02      	bgt.n	800cd1c <__ieee754_rem_pio2+0x1d4>
 800cd16:	e9ca 0100 	strd	r0, r1, [sl]
 800cd1a:	e039      	b.n	800cd90 <__ieee754_rem_pio2+0x248>
 800cd1c:	a34e      	add	r3, pc, #312	; (adr r3, 800ce58 <__ieee754_rem_pio2+0x310>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	ec51 0b18 	vmov	r0, r1, d8
 800cd26:	f7f3 fc67 	bl	80005f8 <__aeabi_dmul>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	460d      	mov	r5, r1
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4630      	mov	r0, r6
 800cd34:	4639      	mov	r1, r7
 800cd36:	f7f3 faa7 	bl	8000288 <__aeabi_dsub>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	4680      	mov	r8, r0
 800cd40:	4689      	mov	r9, r1
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fa9f 	bl	8000288 <__aeabi_dsub>
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	462b      	mov	r3, r5
 800cd4e:	f7f3 fa9b 	bl	8000288 <__aeabi_dsub>
 800cd52:	a343      	add	r3, pc, #268	; (adr r3, 800ce60 <__ieee754_rem_pio2+0x318>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	4604      	mov	r4, r0
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	ec51 0b18 	vmov	r0, r1, d8
 800cd60:	f7f3 fc4a 	bl	80005f8 <__aeabi_dmul>
 800cd64:	4622      	mov	r2, r4
 800cd66:	462b      	mov	r3, r5
 800cd68:	f7f3 fa8e 	bl	8000288 <__aeabi_dsub>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4604      	mov	r4, r0
 800cd72:	460d      	mov	r5, r1
 800cd74:	4640      	mov	r0, r8
 800cd76:	4649      	mov	r1, r9
 800cd78:	f7f3 fa86 	bl	8000288 <__aeabi_dsub>
 800cd7c:	9a03      	ldr	r2, [sp, #12]
 800cd7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	2b31      	cmp	r3, #49	; 0x31
 800cd86:	dc24      	bgt.n	800cdd2 <__ieee754_rem_pio2+0x28a>
 800cd88:	e9ca 0100 	strd	r0, r1, [sl]
 800cd8c:	4646      	mov	r6, r8
 800cd8e:	464f      	mov	r7, r9
 800cd90:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd94:	4630      	mov	r0, r6
 800cd96:	4642      	mov	r2, r8
 800cd98:	464b      	mov	r3, r9
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fa74 	bl	8000288 <__aeabi_dsub>
 800cda0:	462b      	mov	r3, r5
 800cda2:	4622      	mov	r2, r4
 800cda4:	f7f3 fa70 	bl	8000288 <__aeabi_dsub>
 800cda8:	9b02      	ldr	r3, [sp, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cdb0:	f6bf af0a 	bge.w	800cbc8 <__ieee754_rem_pio2+0x80>
 800cdb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cdb8:	f8ca 3004 	str.w	r3, [sl, #4]
 800cdbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdc0:	f8ca 8000 	str.w	r8, [sl]
 800cdc4:	f8ca 0008 	str.w	r0, [sl, #8]
 800cdc8:	f8ca 300c 	str.w	r3, [sl, #12]
 800cdcc:	f1cb 0b00 	rsb	fp, fp, #0
 800cdd0:	e6fa      	b.n	800cbc8 <__ieee754_rem_pio2+0x80>
 800cdd2:	a327      	add	r3, pc, #156	; (adr r3, 800ce70 <__ieee754_rem_pio2+0x328>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	ec51 0b18 	vmov	r0, r1, d8
 800cddc:	f7f3 fc0c 	bl	80005f8 <__aeabi_dmul>
 800cde0:	4604      	mov	r4, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	f7f3 fa4c 	bl	8000288 <__aeabi_dsub>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	4640      	mov	r0, r8
 800cdfa:	4649      	mov	r1, r9
 800cdfc:	f7f3 fa44 	bl	8000288 <__aeabi_dsub>
 800ce00:	4622      	mov	r2, r4
 800ce02:	462b      	mov	r3, r5
 800ce04:	f7f3 fa40 	bl	8000288 <__aeabi_dsub>
 800ce08:	a31b      	add	r3, pc, #108	; (adr r3, 800ce78 <__ieee754_rem_pio2+0x330>)
 800ce0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0e:	4604      	mov	r4, r0
 800ce10:	460d      	mov	r5, r1
 800ce12:	ec51 0b18 	vmov	r0, r1, d8
 800ce16:	f7f3 fbef 	bl	80005f8 <__aeabi_dmul>
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	f7f3 fa33 	bl	8000288 <__aeabi_dsub>
 800ce22:	4604      	mov	r4, r0
 800ce24:	460d      	mov	r5, r1
 800ce26:	e75f      	b.n	800cce8 <__ieee754_rem_pio2+0x1a0>
 800ce28:	4b1b      	ldr	r3, [pc, #108]	; (800ce98 <__ieee754_rem_pio2+0x350>)
 800ce2a:	4598      	cmp	r8, r3
 800ce2c:	dd36      	ble.n	800ce9c <__ieee754_rem_pio2+0x354>
 800ce2e:	ee10 2a10 	vmov	r2, s0
 800ce32:	462b      	mov	r3, r5
 800ce34:	4620      	mov	r0, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	f7f3 fa26 	bl	8000288 <__aeabi_dsub>
 800ce3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ce40:	e9ca 0100 	strd	r0, r1, [sl]
 800ce44:	e694      	b.n	800cb70 <__ieee754_rem_pio2+0x28>
 800ce46:	bf00      	nop
 800ce48:	54400000 	.word	0x54400000
 800ce4c:	3ff921fb 	.word	0x3ff921fb
 800ce50:	1a626331 	.word	0x1a626331
 800ce54:	3dd0b461 	.word	0x3dd0b461
 800ce58:	1a600000 	.word	0x1a600000
 800ce5c:	3dd0b461 	.word	0x3dd0b461
 800ce60:	2e037073 	.word	0x2e037073
 800ce64:	3ba3198a 	.word	0x3ba3198a
 800ce68:	6dc9c883 	.word	0x6dc9c883
 800ce6c:	3fe45f30 	.word	0x3fe45f30
 800ce70:	2e000000 	.word	0x2e000000
 800ce74:	3ba3198a 	.word	0x3ba3198a
 800ce78:	252049c1 	.word	0x252049c1
 800ce7c:	397b839a 	.word	0x397b839a
 800ce80:	3fe921fb 	.word	0x3fe921fb
 800ce84:	4002d97b 	.word	0x4002d97b
 800ce88:	3ff921fb 	.word	0x3ff921fb
 800ce8c:	413921fb 	.word	0x413921fb
 800ce90:	3fe00000 	.word	0x3fe00000
 800ce94:	0800e338 	.word	0x0800e338
 800ce98:	7fefffff 	.word	0x7fefffff
 800ce9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800cea0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800cea4:	ee10 0a10 	vmov	r0, s0
 800cea8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ceac:	ee10 6a10 	vmov	r6, s0
 800ceb0:	460f      	mov	r7, r1
 800ceb2:	f7f3 fe51 	bl	8000b58 <__aeabi_d2iz>
 800ceb6:	f7f3 fb35 	bl	8000524 <__aeabi_i2d>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4630      	mov	r0, r6
 800cec0:	4639      	mov	r1, r7
 800cec2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cec6:	f7f3 f9df 	bl	8000288 <__aeabi_dsub>
 800ceca:	4b23      	ldr	r3, [pc, #140]	; (800cf58 <__ieee754_rem_pio2+0x410>)
 800cecc:	2200      	movs	r2, #0
 800cece:	f7f3 fb93 	bl	80005f8 <__aeabi_dmul>
 800ced2:	460f      	mov	r7, r1
 800ced4:	4606      	mov	r6, r0
 800ced6:	f7f3 fe3f 	bl	8000b58 <__aeabi_d2iz>
 800ceda:	f7f3 fb23 	bl	8000524 <__aeabi_i2d>
 800cede:	4602      	mov	r2, r0
 800cee0:	460b      	mov	r3, r1
 800cee2:	4630      	mov	r0, r6
 800cee4:	4639      	mov	r1, r7
 800cee6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ceea:	f7f3 f9cd 	bl	8000288 <__aeabi_dsub>
 800ceee:	4b1a      	ldr	r3, [pc, #104]	; (800cf58 <__ieee754_rem_pio2+0x410>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	f7f3 fb81 	bl	80005f8 <__aeabi_dmul>
 800cef6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cefa:	ad04      	add	r5, sp, #16
 800cefc:	f04f 0803 	mov.w	r8, #3
 800cf00:	46a9      	mov	r9, r5
 800cf02:	2600      	movs	r6, #0
 800cf04:	2700      	movs	r7, #0
 800cf06:	4632      	mov	r2, r6
 800cf08:	463b      	mov	r3, r7
 800cf0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cf0e:	46c3      	mov	fp, r8
 800cf10:	3d08      	subs	r5, #8
 800cf12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cf16:	f7f3 fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d1f3      	bne.n	800cf06 <__ieee754_rem_pio2+0x3be>
 800cf1e:	4b0f      	ldr	r3, [pc, #60]	; (800cf5c <__ieee754_rem_pio2+0x414>)
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	2302      	movs	r3, #2
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	4622      	mov	r2, r4
 800cf28:	465b      	mov	r3, fp
 800cf2a:	4651      	mov	r1, sl
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	f000 f993 	bl	800d258 <__kernel_rem_pio2>
 800cf32:	9b02      	ldr	r3, [sp, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	4683      	mov	fp, r0
 800cf38:	f6bf ae46 	bge.w	800cbc8 <__ieee754_rem_pio2+0x80>
 800cf3c:	e9da 2100 	ldrd	r2, r1, [sl]
 800cf40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf44:	e9ca 2300 	strd	r2, r3, [sl]
 800cf48:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800cf4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf50:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800cf54:	e73a      	b.n	800cdcc <__ieee754_rem_pio2+0x284>
 800cf56:	bf00      	nop
 800cf58:	41700000 	.word	0x41700000
 800cf5c:	0800e3b8 	.word	0x0800e3b8

0800cf60 <__ieee754_sqrt>:
 800cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf64:	ec55 4b10 	vmov	r4, r5, d0
 800cf68:	4e55      	ldr	r6, [pc, #340]	; (800d0c0 <__ieee754_sqrt+0x160>)
 800cf6a:	43ae      	bics	r6, r5
 800cf6c:	ee10 0a10 	vmov	r0, s0
 800cf70:	ee10 3a10 	vmov	r3, s0
 800cf74:	462a      	mov	r2, r5
 800cf76:	4629      	mov	r1, r5
 800cf78:	d110      	bne.n	800cf9c <__ieee754_sqrt+0x3c>
 800cf7a:	ee10 2a10 	vmov	r2, s0
 800cf7e:	462b      	mov	r3, r5
 800cf80:	f7f3 fb3a 	bl	80005f8 <__aeabi_dmul>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4620      	mov	r0, r4
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f7f3 f97e 	bl	800028c <__adddf3>
 800cf90:	4604      	mov	r4, r0
 800cf92:	460d      	mov	r5, r1
 800cf94:	ec45 4b10 	vmov	d0, r4, r5
 800cf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf9c:	2d00      	cmp	r5, #0
 800cf9e:	dc10      	bgt.n	800cfc2 <__ieee754_sqrt+0x62>
 800cfa0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cfa4:	4330      	orrs	r0, r6
 800cfa6:	d0f5      	beq.n	800cf94 <__ieee754_sqrt+0x34>
 800cfa8:	b15d      	cbz	r5, 800cfc2 <__ieee754_sqrt+0x62>
 800cfaa:	ee10 2a10 	vmov	r2, s0
 800cfae:	462b      	mov	r3, r5
 800cfb0:	ee10 0a10 	vmov	r0, s0
 800cfb4:	f7f3 f968 	bl	8000288 <__aeabi_dsub>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	f7f3 fc46 	bl	800084c <__aeabi_ddiv>
 800cfc0:	e7e6      	b.n	800cf90 <__ieee754_sqrt+0x30>
 800cfc2:	1512      	asrs	r2, r2, #20
 800cfc4:	d074      	beq.n	800d0b0 <__ieee754_sqrt+0x150>
 800cfc6:	07d4      	lsls	r4, r2, #31
 800cfc8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cfcc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800cfd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cfd4:	bf5e      	ittt	pl
 800cfd6:	0fda      	lsrpl	r2, r3, #31
 800cfd8:	005b      	lslpl	r3, r3, #1
 800cfda:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800cfde:	2400      	movs	r4, #0
 800cfe0:	0fda      	lsrs	r2, r3, #31
 800cfe2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800cfe6:	107f      	asrs	r7, r7, #1
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	2516      	movs	r5, #22
 800cfec:	4620      	mov	r0, r4
 800cfee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cff2:	1886      	adds	r6, r0, r2
 800cff4:	428e      	cmp	r6, r1
 800cff6:	bfde      	ittt	le
 800cff8:	1b89      	suble	r1, r1, r6
 800cffa:	18b0      	addle	r0, r6, r2
 800cffc:	18a4      	addle	r4, r4, r2
 800cffe:	0049      	lsls	r1, r1, #1
 800d000:	3d01      	subs	r5, #1
 800d002:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d006:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d00a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d00e:	d1f0      	bne.n	800cff2 <__ieee754_sqrt+0x92>
 800d010:	462a      	mov	r2, r5
 800d012:	f04f 0e20 	mov.w	lr, #32
 800d016:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d01a:	4281      	cmp	r1, r0
 800d01c:	eb06 0c05 	add.w	ip, r6, r5
 800d020:	dc02      	bgt.n	800d028 <__ieee754_sqrt+0xc8>
 800d022:	d113      	bne.n	800d04c <__ieee754_sqrt+0xec>
 800d024:	459c      	cmp	ip, r3
 800d026:	d811      	bhi.n	800d04c <__ieee754_sqrt+0xec>
 800d028:	f1bc 0f00 	cmp.w	ip, #0
 800d02c:	eb0c 0506 	add.w	r5, ip, r6
 800d030:	da43      	bge.n	800d0ba <__ieee754_sqrt+0x15a>
 800d032:	2d00      	cmp	r5, #0
 800d034:	db41      	blt.n	800d0ba <__ieee754_sqrt+0x15a>
 800d036:	f100 0801 	add.w	r8, r0, #1
 800d03a:	1a09      	subs	r1, r1, r0
 800d03c:	459c      	cmp	ip, r3
 800d03e:	bf88      	it	hi
 800d040:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d044:	eba3 030c 	sub.w	r3, r3, ip
 800d048:	4432      	add	r2, r6
 800d04a:	4640      	mov	r0, r8
 800d04c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d050:	f1be 0e01 	subs.w	lr, lr, #1
 800d054:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d058:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d05c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d060:	d1db      	bne.n	800d01a <__ieee754_sqrt+0xba>
 800d062:	430b      	orrs	r3, r1
 800d064:	d006      	beq.n	800d074 <__ieee754_sqrt+0x114>
 800d066:	1c50      	adds	r0, r2, #1
 800d068:	bf13      	iteet	ne
 800d06a:	3201      	addne	r2, #1
 800d06c:	3401      	addeq	r4, #1
 800d06e:	4672      	moveq	r2, lr
 800d070:	f022 0201 	bicne.w	r2, r2, #1
 800d074:	1063      	asrs	r3, r4, #1
 800d076:	0852      	lsrs	r2, r2, #1
 800d078:	07e1      	lsls	r1, r4, #31
 800d07a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d07e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d082:	bf48      	it	mi
 800d084:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d088:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d08c:	4614      	mov	r4, r2
 800d08e:	e781      	b.n	800cf94 <__ieee754_sqrt+0x34>
 800d090:	0ad9      	lsrs	r1, r3, #11
 800d092:	3815      	subs	r0, #21
 800d094:	055b      	lsls	r3, r3, #21
 800d096:	2900      	cmp	r1, #0
 800d098:	d0fa      	beq.n	800d090 <__ieee754_sqrt+0x130>
 800d09a:	02cd      	lsls	r5, r1, #11
 800d09c:	d50a      	bpl.n	800d0b4 <__ieee754_sqrt+0x154>
 800d09e:	f1c2 0420 	rsb	r4, r2, #32
 800d0a2:	fa23 f404 	lsr.w	r4, r3, r4
 800d0a6:	1e55      	subs	r5, r2, #1
 800d0a8:	4093      	lsls	r3, r2
 800d0aa:	4321      	orrs	r1, r4
 800d0ac:	1b42      	subs	r2, r0, r5
 800d0ae:	e78a      	b.n	800cfc6 <__ieee754_sqrt+0x66>
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	e7f0      	b.n	800d096 <__ieee754_sqrt+0x136>
 800d0b4:	0049      	lsls	r1, r1, #1
 800d0b6:	3201      	adds	r2, #1
 800d0b8:	e7ef      	b.n	800d09a <__ieee754_sqrt+0x13a>
 800d0ba:	4680      	mov	r8, r0
 800d0bc:	e7bd      	b.n	800d03a <__ieee754_sqrt+0xda>
 800d0be:	bf00      	nop
 800d0c0:	7ff00000 	.word	0x7ff00000
 800d0c4:	00000000 	.word	0x00000000

0800d0c8 <__kernel_cos>:
 800d0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	ec57 6b10 	vmov	r6, r7, d0
 800d0d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d0d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d0d8:	ed8d 1b00 	vstr	d1, [sp]
 800d0dc:	da07      	bge.n	800d0ee <__kernel_cos+0x26>
 800d0de:	ee10 0a10 	vmov	r0, s0
 800d0e2:	4639      	mov	r1, r7
 800d0e4:	f7f3 fd38 	bl	8000b58 <__aeabi_d2iz>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	f000 8088 	beq.w	800d1fe <__kernel_cos+0x136>
 800d0ee:	4632      	mov	r2, r6
 800d0f0:	463b      	mov	r3, r7
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	4639      	mov	r1, r7
 800d0f6:	f7f3 fa7f 	bl	80005f8 <__aeabi_dmul>
 800d0fa:	4b51      	ldr	r3, [pc, #324]	; (800d240 <__kernel_cos+0x178>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	4604      	mov	r4, r0
 800d100:	460d      	mov	r5, r1
 800d102:	f7f3 fa79 	bl	80005f8 <__aeabi_dmul>
 800d106:	a340      	add	r3, pc, #256	; (adr r3, 800d208 <__kernel_cos+0x140>)
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	4682      	mov	sl, r0
 800d10e:	468b      	mov	fp, r1
 800d110:	4620      	mov	r0, r4
 800d112:	4629      	mov	r1, r5
 800d114:	f7f3 fa70 	bl	80005f8 <__aeabi_dmul>
 800d118:	a33d      	add	r3, pc, #244	; (adr r3, 800d210 <__kernel_cos+0x148>)
 800d11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11e:	f7f3 f8b5 	bl	800028c <__adddf3>
 800d122:	4622      	mov	r2, r4
 800d124:	462b      	mov	r3, r5
 800d126:	f7f3 fa67 	bl	80005f8 <__aeabi_dmul>
 800d12a:	a33b      	add	r3, pc, #236	; (adr r3, 800d218 <__kernel_cos+0x150>)
 800d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d130:	f7f3 f8aa 	bl	8000288 <__aeabi_dsub>
 800d134:	4622      	mov	r2, r4
 800d136:	462b      	mov	r3, r5
 800d138:	f7f3 fa5e 	bl	80005f8 <__aeabi_dmul>
 800d13c:	a338      	add	r3, pc, #224	; (adr r3, 800d220 <__kernel_cos+0x158>)
 800d13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d142:	f7f3 f8a3 	bl	800028c <__adddf3>
 800d146:	4622      	mov	r2, r4
 800d148:	462b      	mov	r3, r5
 800d14a:	f7f3 fa55 	bl	80005f8 <__aeabi_dmul>
 800d14e:	a336      	add	r3, pc, #216	; (adr r3, 800d228 <__kernel_cos+0x160>)
 800d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d154:	f7f3 f898 	bl	8000288 <__aeabi_dsub>
 800d158:	4622      	mov	r2, r4
 800d15a:	462b      	mov	r3, r5
 800d15c:	f7f3 fa4c 	bl	80005f8 <__aeabi_dmul>
 800d160:	a333      	add	r3, pc, #204	; (adr r3, 800d230 <__kernel_cos+0x168>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 f891 	bl	800028c <__adddf3>
 800d16a:	4622      	mov	r2, r4
 800d16c:	462b      	mov	r3, r5
 800d16e:	f7f3 fa43 	bl	80005f8 <__aeabi_dmul>
 800d172:	4622      	mov	r2, r4
 800d174:	462b      	mov	r3, r5
 800d176:	f7f3 fa3f 	bl	80005f8 <__aeabi_dmul>
 800d17a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d17e:	4604      	mov	r4, r0
 800d180:	460d      	mov	r5, r1
 800d182:	4630      	mov	r0, r6
 800d184:	4639      	mov	r1, r7
 800d186:	f7f3 fa37 	bl	80005f8 <__aeabi_dmul>
 800d18a:	460b      	mov	r3, r1
 800d18c:	4602      	mov	r2, r0
 800d18e:	4629      	mov	r1, r5
 800d190:	4620      	mov	r0, r4
 800d192:	f7f3 f879 	bl	8000288 <__aeabi_dsub>
 800d196:	4b2b      	ldr	r3, [pc, #172]	; (800d244 <__kernel_cos+0x17c>)
 800d198:	4598      	cmp	r8, r3
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	dc10      	bgt.n	800d1c2 <__kernel_cos+0xfa>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	4659      	mov	r1, fp
 800d1a8:	f7f3 f86e 	bl	8000288 <__aeabi_dsub>
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	4926      	ldr	r1, [pc, #152]	; (800d248 <__kernel_cos+0x180>)
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	f7f3 f868 	bl	8000288 <__aeabi_dsub>
 800d1b8:	ec41 0b10 	vmov	d0, r0, r1
 800d1bc:	b003      	add	sp, #12
 800d1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c2:	4b22      	ldr	r3, [pc, #136]	; (800d24c <__kernel_cos+0x184>)
 800d1c4:	4920      	ldr	r1, [pc, #128]	; (800d248 <__kernel_cos+0x180>)
 800d1c6:	4598      	cmp	r8, r3
 800d1c8:	bfcc      	ite	gt
 800d1ca:	4d21      	ldrgt	r5, [pc, #132]	; (800d250 <__kernel_cos+0x188>)
 800d1cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d1d0:	2400      	movs	r4, #0
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	462b      	mov	r3, r5
 800d1d6:	2000      	movs	r0, #0
 800d1d8:	f7f3 f856 	bl	8000288 <__aeabi_dsub>
 800d1dc:	4622      	mov	r2, r4
 800d1de:	4680      	mov	r8, r0
 800d1e0:	4689      	mov	r9, r1
 800d1e2:	462b      	mov	r3, r5
 800d1e4:	4650      	mov	r0, sl
 800d1e6:	4659      	mov	r1, fp
 800d1e8:	f7f3 f84e 	bl	8000288 <__aeabi_dsub>
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	f7f3 f84a 	bl	8000288 <__aeabi_dsub>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	e7da      	b.n	800d1b4 <__kernel_cos+0xec>
 800d1fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d238 <__kernel_cos+0x170>
 800d202:	e7db      	b.n	800d1bc <__kernel_cos+0xf4>
 800d204:	f3af 8000 	nop.w
 800d208:	be8838d4 	.word	0xbe8838d4
 800d20c:	bda8fae9 	.word	0xbda8fae9
 800d210:	bdb4b1c4 	.word	0xbdb4b1c4
 800d214:	3e21ee9e 	.word	0x3e21ee9e
 800d218:	809c52ad 	.word	0x809c52ad
 800d21c:	3e927e4f 	.word	0x3e927e4f
 800d220:	19cb1590 	.word	0x19cb1590
 800d224:	3efa01a0 	.word	0x3efa01a0
 800d228:	16c15177 	.word	0x16c15177
 800d22c:	3f56c16c 	.word	0x3f56c16c
 800d230:	5555554c 	.word	0x5555554c
 800d234:	3fa55555 	.word	0x3fa55555
 800d238:	00000000 	.word	0x00000000
 800d23c:	3ff00000 	.word	0x3ff00000
 800d240:	3fe00000 	.word	0x3fe00000
 800d244:	3fd33332 	.word	0x3fd33332
 800d248:	3ff00000 	.word	0x3ff00000
 800d24c:	3fe90000 	.word	0x3fe90000
 800d250:	3fd20000 	.word	0x3fd20000
 800d254:	00000000 	.word	0x00000000

0800d258 <__kernel_rem_pio2>:
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	ed2d 8b02 	vpush	{d8}
 800d260:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d264:	f112 0f14 	cmn.w	r2, #20
 800d268:	9308      	str	r3, [sp, #32]
 800d26a:	9101      	str	r1, [sp, #4]
 800d26c:	4bc4      	ldr	r3, [pc, #784]	; (800d580 <__kernel_rem_pio2+0x328>)
 800d26e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d270:	900b      	str	r0, [sp, #44]	; 0x2c
 800d272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d276:	9302      	str	r3, [sp, #8]
 800d278:	9b08      	ldr	r3, [sp, #32]
 800d27a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d27e:	bfa8      	it	ge
 800d280:	1ed4      	subge	r4, r2, #3
 800d282:	9306      	str	r3, [sp, #24]
 800d284:	bfb2      	itee	lt
 800d286:	2400      	movlt	r4, #0
 800d288:	2318      	movge	r3, #24
 800d28a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d28e:	f06f 0317 	mvn.w	r3, #23
 800d292:	fb04 3303 	mla	r3, r4, r3, r3
 800d296:	eb03 0a02 	add.w	sl, r3, r2
 800d29a:	9b02      	ldr	r3, [sp, #8]
 800d29c:	9a06      	ldr	r2, [sp, #24]
 800d29e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800d570 <__kernel_rem_pio2+0x318>
 800d2a2:	eb03 0802 	add.w	r8, r3, r2
 800d2a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d2a8:	1aa7      	subs	r7, r4, r2
 800d2aa:	ae22      	add	r6, sp, #136	; 0x88
 800d2ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d2b0:	2500      	movs	r5, #0
 800d2b2:	4545      	cmp	r5, r8
 800d2b4:	dd13      	ble.n	800d2de <__kernel_rem_pio2+0x86>
 800d2b6:	9b08      	ldr	r3, [sp, #32]
 800d2b8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800d570 <__kernel_rem_pio2+0x318>
 800d2bc:	aa22      	add	r2, sp, #136	; 0x88
 800d2be:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d2c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d2c6:	f04f 0800 	mov.w	r8, #0
 800d2ca:	9b02      	ldr	r3, [sp, #8]
 800d2cc:	4598      	cmp	r8, r3
 800d2ce:	dc2f      	bgt.n	800d330 <__kernel_rem_pio2+0xd8>
 800d2d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d2d4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d2d8:	462f      	mov	r7, r5
 800d2da:	2600      	movs	r6, #0
 800d2dc:	e01b      	b.n	800d316 <__kernel_rem_pio2+0xbe>
 800d2de:	42ef      	cmn	r7, r5
 800d2e0:	d407      	bmi.n	800d2f2 <__kernel_rem_pio2+0x9a>
 800d2e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d2e6:	f7f3 f91d 	bl	8000524 <__aeabi_i2d>
 800d2ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d2ee:	3501      	adds	r5, #1
 800d2f0:	e7df      	b.n	800d2b2 <__kernel_rem_pio2+0x5a>
 800d2f2:	ec51 0b18 	vmov	r0, r1, d8
 800d2f6:	e7f8      	b.n	800d2ea <__kernel_rem_pio2+0x92>
 800d2f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d300:	f7f3 f97a 	bl	80005f8 <__aeabi_dmul>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d30c:	f7f2 ffbe 	bl	800028c <__adddf3>
 800d310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d314:	3601      	adds	r6, #1
 800d316:	9b06      	ldr	r3, [sp, #24]
 800d318:	429e      	cmp	r6, r3
 800d31a:	f1a7 0708 	sub.w	r7, r7, #8
 800d31e:	ddeb      	ble.n	800d2f8 <__kernel_rem_pio2+0xa0>
 800d320:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d324:	f108 0801 	add.w	r8, r8, #1
 800d328:	ecab 7b02 	vstmia	fp!, {d7}
 800d32c:	3508      	adds	r5, #8
 800d32e:	e7cc      	b.n	800d2ca <__kernel_rem_pio2+0x72>
 800d330:	9b02      	ldr	r3, [sp, #8]
 800d332:	aa0e      	add	r2, sp, #56	; 0x38
 800d334:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d338:	930d      	str	r3, [sp, #52]	; 0x34
 800d33a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d33c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d340:	9c02      	ldr	r4, [sp, #8]
 800d342:	930c      	str	r3, [sp, #48]	; 0x30
 800d344:	00e3      	lsls	r3, r4, #3
 800d346:	930a      	str	r3, [sp, #40]	; 0x28
 800d348:	ab9a      	add	r3, sp, #616	; 0x268
 800d34a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d34e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d352:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d356:	ab72      	add	r3, sp, #456	; 0x1c8
 800d358:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d35c:	46c3      	mov	fp, r8
 800d35e:	46a1      	mov	r9, r4
 800d360:	f1b9 0f00 	cmp.w	r9, #0
 800d364:	f1a5 0508 	sub.w	r5, r5, #8
 800d368:	dc77      	bgt.n	800d45a <__kernel_rem_pio2+0x202>
 800d36a:	ec47 6b10 	vmov	d0, r6, r7
 800d36e:	4650      	mov	r0, sl
 800d370:	f000 fc46 	bl	800dc00 <scalbn>
 800d374:	ec57 6b10 	vmov	r6, r7, d0
 800d378:	2200      	movs	r2, #0
 800d37a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d37e:	ee10 0a10 	vmov	r0, s0
 800d382:	4639      	mov	r1, r7
 800d384:	f7f3 f938 	bl	80005f8 <__aeabi_dmul>
 800d388:	ec41 0b10 	vmov	d0, r0, r1
 800d38c:	f000 fbb8 	bl	800db00 <floor>
 800d390:	4b7c      	ldr	r3, [pc, #496]	; (800d584 <__kernel_rem_pio2+0x32c>)
 800d392:	ec51 0b10 	vmov	r0, r1, d0
 800d396:	2200      	movs	r2, #0
 800d398:	f7f3 f92e 	bl	80005f8 <__aeabi_dmul>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	f7f2 ff70 	bl	8000288 <__aeabi_dsub>
 800d3a8:	460f      	mov	r7, r1
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	f7f3 fbd4 	bl	8000b58 <__aeabi_d2iz>
 800d3b0:	9004      	str	r0, [sp, #16]
 800d3b2:	f7f3 f8b7 	bl	8000524 <__aeabi_i2d>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f2 ff63 	bl	8000288 <__aeabi_dsub>
 800d3c2:	f1ba 0f00 	cmp.w	sl, #0
 800d3c6:	4606      	mov	r6, r0
 800d3c8:	460f      	mov	r7, r1
 800d3ca:	dd6d      	ble.n	800d4a8 <__kernel_rem_pio2+0x250>
 800d3cc:	1e62      	subs	r2, r4, #1
 800d3ce:	ab0e      	add	r3, sp, #56	; 0x38
 800d3d0:	9d04      	ldr	r5, [sp, #16]
 800d3d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d3d6:	f1ca 0118 	rsb	r1, sl, #24
 800d3da:	fa40 f301 	asr.w	r3, r0, r1
 800d3de:	441d      	add	r5, r3
 800d3e0:	408b      	lsls	r3, r1
 800d3e2:	1ac0      	subs	r0, r0, r3
 800d3e4:	ab0e      	add	r3, sp, #56	; 0x38
 800d3e6:	9504      	str	r5, [sp, #16]
 800d3e8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d3ec:	f1ca 0317 	rsb	r3, sl, #23
 800d3f0:	fa40 fb03 	asr.w	fp, r0, r3
 800d3f4:	f1bb 0f00 	cmp.w	fp, #0
 800d3f8:	dd65      	ble.n	800d4c6 <__kernel_rem_pio2+0x26e>
 800d3fa:	9b04      	ldr	r3, [sp, #16]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	3301      	adds	r3, #1
 800d400:	9304      	str	r3, [sp, #16]
 800d402:	4615      	mov	r5, r2
 800d404:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d408:	4294      	cmp	r4, r2
 800d40a:	f300 809c 	bgt.w	800d546 <__kernel_rem_pio2+0x2ee>
 800d40e:	f1ba 0f00 	cmp.w	sl, #0
 800d412:	dd07      	ble.n	800d424 <__kernel_rem_pio2+0x1cc>
 800d414:	f1ba 0f01 	cmp.w	sl, #1
 800d418:	f000 80c0 	beq.w	800d59c <__kernel_rem_pio2+0x344>
 800d41c:	f1ba 0f02 	cmp.w	sl, #2
 800d420:	f000 80c6 	beq.w	800d5b0 <__kernel_rem_pio2+0x358>
 800d424:	f1bb 0f02 	cmp.w	fp, #2
 800d428:	d14d      	bne.n	800d4c6 <__kernel_rem_pio2+0x26e>
 800d42a:	4632      	mov	r2, r6
 800d42c:	463b      	mov	r3, r7
 800d42e:	4956      	ldr	r1, [pc, #344]	; (800d588 <__kernel_rem_pio2+0x330>)
 800d430:	2000      	movs	r0, #0
 800d432:	f7f2 ff29 	bl	8000288 <__aeabi_dsub>
 800d436:	4606      	mov	r6, r0
 800d438:	460f      	mov	r7, r1
 800d43a:	2d00      	cmp	r5, #0
 800d43c:	d043      	beq.n	800d4c6 <__kernel_rem_pio2+0x26e>
 800d43e:	4650      	mov	r0, sl
 800d440:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800d578 <__kernel_rem_pio2+0x320>
 800d444:	f000 fbdc 	bl	800dc00 <scalbn>
 800d448:	4630      	mov	r0, r6
 800d44a:	4639      	mov	r1, r7
 800d44c:	ec53 2b10 	vmov	r2, r3, d0
 800d450:	f7f2 ff1a 	bl	8000288 <__aeabi_dsub>
 800d454:	4606      	mov	r6, r0
 800d456:	460f      	mov	r7, r1
 800d458:	e035      	b.n	800d4c6 <__kernel_rem_pio2+0x26e>
 800d45a:	4b4c      	ldr	r3, [pc, #304]	; (800d58c <__kernel_rem_pio2+0x334>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	4630      	mov	r0, r6
 800d460:	4639      	mov	r1, r7
 800d462:	f7f3 f8c9 	bl	80005f8 <__aeabi_dmul>
 800d466:	f7f3 fb77 	bl	8000b58 <__aeabi_d2iz>
 800d46a:	f7f3 f85b 	bl	8000524 <__aeabi_i2d>
 800d46e:	4602      	mov	r2, r0
 800d470:	460b      	mov	r3, r1
 800d472:	ec43 2b18 	vmov	d8, r2, r3
 800d476:	4b46      	ldr	r3, [pc, #280]	; (800d590 <__kernel_rem_pio2+0x338>)
 800d478:	2200      	movs	r2, #0
 800d47a:	f7f3 f8bd 	bl	80005f8 <__aeabi_dmul>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	4630      	mov	r0, r6
 800d484:	4639      	mov	r1, r7
 800d486:	f7f2 feff 	bl	8000288 <__aeabi_dsub>
 800d48a:	f7f3 fb65 	bl	8000b58 <__aeabi_d2iz>
 800d48e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d492:	f84b 0b04 	str.w	r0, [fp], #4
 800d496:	ec51 0b18 	vmov	r0, r1, d8
 800d49a:	f7f2 fef7 	bl	800028c <__adddf3>
 800d49e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	e75b      	b.n	800d360 <__kernel_rem_pio2+0x108>
 800d4a8:	d106      	bne.n	800d4b8 <__kernel_rem_pio2+0x260>
 800d4aa:	1e63      	subs	r3, r4, #1
 800d4ac:	aa0e      	add	r2, sp, #56	; 0x38
 800d4ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d4b2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800d4b6:	e79d      	b.n	800d3f4 <__kernel_rem_pio2+0x19c>
 800d4b8:	4b36      	ldr	r3, [pc, #216]	; (800d594 <__kernel_rem_pio2+0x33c>)
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f7f3 fb22 	bl	8000b04 <__aeabi_dcmpge>
 800d4c0:	2800      	cmp	r0, #0
 800d4c2:	d13d      	bne.n	800d540 <__kernel_rem_pio2+0x2e8>
 800d4c4:	4683      	mov	fp, r0
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	f7f3 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	f000 80c0 	beq.w	800d658 <__kernel_rem_pio2+0x400>
 800d4d8:	1e65      	subs	r5, r4, #1
 800d4da:	462b      	mov	r3, r5
 800d4dc:	2200      	movs	r2, #0
 800d4de:	9902      	ldr	r1, [sp, #8]
 800d4e0:	428b      	cmp	r3, r1
 800d4e2:	da6c      	bge.n	800d5be <__kernel_rem_pio2+0x366>
 800d4e4:	2a00      	cmp	r2, #0
 800d4e6:	f000 8089 	beq.w	800d5fc <__kernel_rem_pio2+0x3a4>
 800d4ea:	ab0e      	add	r3, sp, #56	; 0x38
 800d4ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800d4f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	f000 80ad 	beq.w	800d654 <__kernel_rem_pio2+0x3fc>
 800d4fa:	4650      	mov	r0, sl
 800d4fc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800d578 <__kernel_rem_pio2+0x320>
 800d500:	f000 fb7e 	bl	800dc00 <scalbn>
 800d504:	ab9a      	add	r3, sp, #616	; 0x268
 800d506:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d50a:	ec57 6b10 	vmov	r6, r7, d0
 800d50e:	00ec      	lsls	r4, r5, #3
 800d510:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800d514:	46aa      	mov	sl, r5
 800d516:	f1ba 0f00 	cmp.w	sl, #0
 800d51a:	f280 80d6 	bge.w	800d6ca <__kernel_rem_pio2+0x472>
 800d51e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800d570 <__kernel_rem_pio2+0x318>
 800d522:	462e      	mov	r6, r5
 800d524:	2e00      	cmp	r6, #0
 800d526:	f2c0 8104 	blt.w	800d732 <__kernel_rem_pio2+0x4da>
 800d52a:	ab72      	add	r3, sp, #456	; 0x1c8
 800d52c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800d530:	f8df a064 	ldr.w	sl, [pc, #100]	; 800d598 <__kernel_rem_pio2+0x340>
 800d534:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d538:	f04f 0800 	mov.w	r8, #0
 800d53c:	1baf      	subs	r7, r5, r6
 800d53e:	e0ea      	b.n	800d716 <__kernel_rem_pio2+0x4be>
 800d540:	f04f 0b02 	mov.w	fp, #2
 800d544:	e759      	b.n	800d3fa <__kernel_rem_pio2+0x1a2>
 800d546:	f8d8 3000 	ldr.w	r3, [r8]
 800d54a:	b955      	cbnz	r5, 800d562 <__kernel_rem_pio2+0x30a>
 800d54c:	b123      	cbz	r3, 800d558 <__kernel_rem_pio2+0x300>
 800d54e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d552:	f8c8 3000 	str.w	r3, [r8]
 800d556:	2301      	movs	r3, #1
 800d558:	3201      	adds	r2, #1
 800d55a:	f108 0804 	add.w	r8, r8, #4
 800d55e:	461d      	mov	r5, r3
 800d560:	e752      	b.n	800d408 <__kernel_rem_pio2+0x1b0>
 800d562:	1acb      	subs	r3, r1, r3
 800d564:	f8c8 3000 	str.w	r3, [r8]
 800d568:	462b      	mov	r3, r5
 800d56a:	e7f5      	b.n	800d558 <__kernel_rem_pio2+0x300>
 800d56c:	f3af 8000 	nop.w
	...
 800d57c:	3ff00000 	.word	0x3ff00000
 800d580:	0800e500 	.word	0x0800e500
 800d584:	40200000 	.word	0x40200000
 800d588:	3ff00000 	.word	0x3ff00000
 800d58c:	3e700000 	.word	0x3e700000
 800d590:	41700000 	.word	0x41700000
 800d594:	3fe00000 	.word	0x3fe00000
 800d598:	0800e4c0 	.word	0x0800e4c0
 800d59c:	1e62      	subs	r2, r4, #1
 800d59e:	ab0e      	add	r3, sp, #56	; 0x38
 800d5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d5a8:	a90e      	add	r1, sp, #56	; 0x38
 800d5aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d5ae:	e739      	b.n	800d424 <__kernel_rem_pio2+0x1cc>
 800d5b0:	1e62      	subs	r2, r4, #1
 800d5b2:	ab0e      	add	r3, sp, #56	; 0x38
 800d5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d5bc:	e7f4      	b.n	800d5a8 <__kernel_rem_pio2+0x350>
 800d5be:	a90e      	add	r1, sp, #56	; 0x38
 800d5c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	430a      	orrs	r2, r1
 800d5c8:	e789      	b.n	800d4de <__kernel_rem_pio2+0x286>
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d5d0:	2900      	cmp	r1, #0
 800d5d2:	d0fa      	beq.n	800d5ca <__kernel_rem_pio2+0x372>
 800d5d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5d6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800d5da:	446a      	add	r2, sp
 800d5dc:	3a98      	subs	r2, #152	; 0x98
 800d5de:	920a      	str	r2, [sp, #40]	; 0x28
 800d5e0:	9a08      	ldr	r2, [sp, #32]
 800d5e2:	18e3      	adds	r3, r4, r3
 800d5e4:	18a5      	adds	r5, r4, r2
 800d5e6:	aa22      	add	r2, sp, #136	; 0x88
 800d5e8:	f104 0801 	add.w	r8, r4, #1
 800d5ec:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d5f0:	9304      	str	r3, [sp, #16]
 800d5f2:	9b04      	ldr	r3, [sp, #16]
 800d5f4:	4543      	cmp	r3, r8
 800d5f6:	da04      	bge.n	800d602 <__kernel_rem_pio2+0x3aa>
 800d5f8:	461c      	mov	r4, r3
 800d5fa:	e6a3      	b.n	800d344 <__kernel_rem_pio2+0xec>
 800d5fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d5fe:	2301      	movs	r3, #1
 800d600:	e7e4      	b.n	800d5cc <__kernel_rem_pio2+0x374>
 800d602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d604:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d608:	f7f2 ff8c 	bl	8000524 <__aeabi_i2d>
 800d60c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800d610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d612:	46ab      	mov	fp, r5
 800d614:	461c      	mov	r4, r3
 800d616:	f04f 0900 	mov.w	r9, #0
 800d61a:	2600      	movs	r6, #0
 800d61c:	2700      	movs	r7, #0
 800d61e:	9b06      	ldr	r3, [sp, #24]
 800d620:	4599      	cmp	r9, r3
 800d622:	dd06      	ble.n	800d632 <__kernel_rem_pio2+0x3da>
 800d624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d626:	e8e3 6702 	strd	r6, r7, [r3], #8
 800d62a:	f108 0801 	add.w	r8, r8, #1
 800d62e:	930a      	str	r3, [sp, #40]	; 0x28
 800d630:	e7df      	b.n	800d5f2 <__kernel_rem_pio2+0x39a>
 800d632:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d636:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d63a:	f7f2 ffdd 	bl	80005f8 <__aeabi_dmul>
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	4630      	mov	r0, r6
 800d644:	4639      	mov	r1, r7
 800d646:	f7f2 fe21 	bl	800028c <__adddf3>
 800d64a:	f109 0901 	add.w	r9, r9, #1
 800d64e:	4606      	mov	r6, r0
 800d650:	460f      	mov	r7, r1
 800d652:	e7e4      	b.n	800d61e <__kernel_rem_pio2+0x3c6>
 800d654:	3d01      	subs	r5, #1
 800d656:	e748      	b.n	800d4ea <__kernel_rem_pio2+0x292>
 800d658:	ec47 6b10 	vmov	d0, r6, r7
 800d65c:	f1ca 0000 	rsb	r0, sl, #0
 800d660:	f000 face 	bl	800dc00 <scalbn>
 800d664:	ec57 6b10 	vmov	r6, r7, d0
 800d668:	4ba0      	ldr	r3, [pc, #640]	; (800d8ec <__kernel_rem_pio2+0x694>)
 800d66a:	ee10 0a10 	vmov	r0, s0
 800d66e:	2200      	movs	r2, #0
 800d670:	4639      	mov	r1, r7
 800d672:	f7f3 fa47 	bl	8000b04 <__aeabi_dcmpge>
 800d676:	b1f8      	cbz	r0, 800d6b8 <__kernel_rem_pio2+0x460>
 800d678:	4b9d      	ldr	r3, [pc, #628]	; (800d8f0 <__kernel_rem_pio2+0x698>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f7f2 ffba 	bl	80005f8 <__aeabi_dmul>
 800d684:	f7f3 fa68 	bl	8000b58 <__aeabi_d2iz>
 800d688:	4680      	mov	r8, r0
 800d68a:	f7f2 ff4b 	bl	8000524 <__aeabi_i2d>
 800d68e:	4b97      	ldr	r3, [pc, #604]	; (800d8ec <__kernel_rem_pio2+0x694>)
 800d690:	2200      	movs	r2, #0
 800d692:	f7f2 ffb1 	bl	80005f8 <__aeabi_dmul>
 800d696:	460b      	mov	r3, r1
 800d698:	4602      	mov	r2, r0
 800d69a:	4639      	mov	r1, r7
 800d69c:	4630      	mov	r0, r6
 800d69e:	f7f2 fdf3 	bl	8000288 <__aeabi_dsub>
 800d6a2:	f7f3 fa59 	bl	8000b58 <__aeabi_d2iz>
 800d6a6:	1c65      	adds	r5, r4, #1
 800d6a8:	ab0e      	add	r3, sp, #56	; 0x38
 800d6aa:	f10a 0a18 	add.w	sl, sl, #24
 800d6ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d6b2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d6b6:	e720      	b.n	800d4fa <__kernel_rem_pio2+0x2a2>
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	4639      	mov	r1, r7
 800d6bc:	f7f3 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800d6c0:	ab0e      	add	r3, sp, #56	; 0x38
 800d6c2:	4625      	mov	r5, r4
 800d6c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d6c8:	e717      	b.n	800d4fa <__kernel_rem_pio2+0x2a2>
 800d6ca:	ab0e      	add	r3, sp, #56	; 0x38
 800d6cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d6d0:	f7f2 ff28 	bl	8000524 <__aeabi_i2d>
 800d6d4:	4632      	mov	r2, r6
 800d6d6:	463b      	mov	r3, r7
 800d6d8:	f7f2 ff8e 	bl	80005f8 <__aeabi_dmul>
 800d6dc:	4b84      	ldr	r3, [pc, #528]	; (800d8f0 <__kernel_rem_pio2+0x698>)
 800d6de:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	f7f2 ff86 	bl	80005f8 <__aeabi_dmul>
 800d6ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d6f0:	4606      	mov	r6, r0
 800d6f2:	460f      	mov	r7, r1
 800d6f4:	e70f      	b.n	800d516 <__kernel_rem_pio2+0x2be>
 800d6f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d6fa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d6fe:	f7f2 ff7b 	bl	80005f8 <__aeabi_dmul>
 800d702:	4602      	mov	r2, r0
 800d704:	460b      	mov	r3, r1
 800d706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d70a:	f7f2 fdbf 	bl	800028c <__adddf3>
 800d70e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d712:	f108 0801 	add.w	r8, r8, #1
 800d716:	9b02      	ldr	r3, [sp, #8]
 800d718:	4598      	cmp	r8, r3
 800d71a:	dc01      	bgt.n	800d720 <__kernel_rem_pio2+0x4c8>
 800d71c:	45b8      	cmp	r8, r7
 800d71e:	ddea      	ble.n	800d6f6 <__kernel_rem_pio2+0x49e>
 800d720:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d724:	ab4a      	add	r3, sp, #296	; 0x128
 800d726:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d72a:	ed87 7b00 	vstr	d7, [r7]
 800d72e:	3e01      	subs	r6, #1
 800d730:	e6f8      	b.n	800d524 <__kernel_rem_pio2+0x2cc>
 800d732:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d734:	2b02      	cmp	r3, #2
 800d736:	dc0b      	bgt.n	800d750 <__kernel_rem_pio2+0x4f8>
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dc35      	bgt.n	800d7a8 <__kernel_rem_pio2+0x550>
 800d73c:	d059      	beq.n	800d7f2 <__kernel_rem_pio2+0x59a>
 800d73e:	9b04      	ldr	r3, [sp, #16]
 800d740:	f003 0007 	and.w	r0, r3, #7
 800d744:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d748:	ecbd 8b02 	vpop	{d8}
 800d74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d750:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d752:	2b03      	cmp	r3, #3
 800d754:	d1f3      	bne.n	800d73e <__kernel_rem_pio2+0x4e6>
 800d756:	ab4a      	add	r3, sp, #296	; 0x128
 800d758:	4423      	add	r3, r4
 800d75a:	9306      	str	r3, [sp, #24]
 800d75c:	461c      	mov	r4, r3
 800d75e:	469a      	mov	sl, r3
 800d760:	9502      	str	r5, [sp, #8]
 800d762:	9b02      	ldr	r3, [sp, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	f1aa 0a08 	sub.w	sl, sl, #8
 800d76a:	dc6b      	bgt.n	800d844 <__kernel_rem_pio2+0x5ec>
 800d76c:	46aa      	mov	sl, r5
 800d76e:	f1ba 0f01 	cmp.w	sl, #1
 800d772:	f1a4 0408 	sub.w	r4, r4, #8
 800d776:	f300 8085 	bgt.w	800d884 <__kernel_rem_pio2+0x62c>
 800d77a:	9c06      	ldr	r4, [sp, #24]
 800d77c:	2000      	movs	r0, #0
 800d77e:	3408      	adds	r4, #8
 800d780:	2100      	movs	r1, #0
 800d782:	2d01      	cmp	r5, #1
 800d784:	f300 809d 	bgt.w	800d8c2 <__kernel_rem_pio2+0x66a>
 800d788:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800d78c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800d790:	f1bb 0f00 	cmp.w	fp, #0
 800d794:	f040 809b 	bne.w	800d8ce <__kernel_rem_pio2+0x676>
 800d798:	9b01      	ldr	r3, [sp, #4]
 800d79a:	e9c3 5600 	strd	r5, r6, [r3]
 800d79e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d7a2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d7a6:	e7ca      	b.n	800d73e <__kernel_rem_pio2+0x4e6>
 800d7a8:	3408      	adds	r4, #8
 800d7aa:	ab4a      	add	r3, sp, #296	; 0x128
 800d7ac:	441c      	add	r4, r3
 800d7ae:	462e      	mov	r6, r5
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	2e00      	cmp	r6, #0
 800d7b6:	da36      	bge.n	800d826 <__kernel_rem_pio2+0x5ce>
 800d7b8:	f1bb 0f00 	cmp.w	fp, #0
 800d7bc:	d039      	beq.n	800d832 <__kernel_rem_pio2+0x5da>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7c4:	9c01      	ldr	r4, [sp, #4]
 800d7c6:	e9c4 2300 	strd	r2, r3, [r4]
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d7d2:	f7f2 fd59 	bl	8000288 <__aeabi_dsub>
 800d7d6:	ae4c      	add	r6, sp, #304	; 0x130
 800d7d8:	2401      	movs	r4, #1
 800d7da:	42a5      	cmp	r5, r4
 800d7dc:	da2c      	bge.n	800d838 <__kernel_rem_pio2+0x5e0>
 800d7de:	f1bb 0f00 	cmp.w	fp, #0
 800d7e2:	d002      	beq.n	800d7ea <__kernel_rem_pio2+0x592>
 800d7e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	9b01      	ldr	r3, [sp, #4]
 800d7ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d7f0:	e7a5      	b.n	800d73e <__kernel_rem_pio2+0x4e6>
 800d7f2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800d7f6:	eb0d 0403 	add.w	r4, sp, r3
 800d7fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d7fe:	2000      	movs	r0, #0
 800d800:	2100      	movs	r1, #0
 800d802:	2d00      	cmp	r5, #0
 800d804:	da09      	bge.n	800d81a <__kernel_rem_pio2+0x5c2>
 800d806:	f1bb 0f00 	cmp.w	fp, #0
 800d80a:	d002      	beq.n	800d812 <__kernel_rem_pio2+0x5ba>
 800d80c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d810:	4619      	mov	r1, r3
 800d812:	9b01      	ldr	r3, [sp, #4]
 800d814:	e9c3 0100 	strd	r0, r1, [r3]
 800d818:	e791      	b.n	800d73e <__kernel_rem_pio2+0x4e6>
 800d81a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d81e:	f7f2 fd35 	bl	800028c <__adddf3>
 800d822:	3d01      	subs	r5, #1
 800d824:	e7ed      	b.n	800d802 <__kernel_rem_pio2+0x5aa>
 800d826:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d82a:	f7f2 fd2f 	bl	800028c <__adddf3>
 800d82e:	3e01      	subs	r6, #1
 800d830:	e7c0      	b.n	800d7b4 <__kernel_rem_pio2+0x55c>
 800d832:	4602      	mov	r2, r0
 800d834:	460b      	mov	r3, r1
 800d836:	e7c5      	b.n	800d7c4 <__kernel_rem_pio2+0x56c>
 800d838:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d83c:	f7f2 fd26 	bl	800028c <__adddf3>
 800d840:	3401      	adds	r4, #1
 800d842:	e7ca      	b.n	800d7da <__kernel_rem_pio2+0x582>
 800d844:	e9da 8900 	ldrd	r8, r9, [sl]
 800d848:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	3b01      	subs	r3, #1
 800d850:	9302      	str	r3, [sp, #8]
 800d852:	4632      	mov	r2, r6
 800d854:	463b      	mov	r3, r7
 800d856:	4640      	mov	r0, r8
 800d858:	4649      	mov	r1, r9
 800d85a:	f7f2 fd17 	bl	800028c <__adddf3>
 800d85e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	4640      	mov	r0, r8
 800d868:	4649      	mov	r1, r9
 800d86a:	f7f2 fd0d 	bl	8000288 <__aeabi_dsub>
 800d86e:	4632      	mov	r2, r6
 800d870:	463b      	mov	r3, r7
 800d872:	f7f2 fd0b 	bl	800028c <__adddf3>
 800d876:	ed9d 7b08 	vldr	d7, [sp, #32]
 800d87a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d87e:	ed8a 7b00 	vstr	d7, [sl]
 800d882:	e76e      	b.n	800d762 <__kernel_rem_pio2+0x50a>
 800d884:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d888:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d88c:	4640      	mov	r0, r8
 800d88e:	4632      	mov	r2, r6
 800d890:	463b      	mov	r3, r7
 800d892:	4649      	mov	r1, r9
 800d894:	f7f2 fcfa 	bl	800028c <__adddf3>
 800d898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	4649      	mov	r1, r9
 800d8a4:	f7f2 fcf0 	bl	8000288 <__aeabi_dsub>
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	463b      	mov	r3, r7
 800d8ac:	f7f2 fcee 	bl	800028c <__adddf3>
 800d8b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d8b8:	ed84 7b00 	vstr	d7, [r4]
 800d8bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d8c0:	e755      	b.n	800d76e <__kernel_rem_pio2+0x516>
 800d8c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d8c6:	f7f2 fce1 	bl	800028c <__adddf3>
 800d8ca:	3d01      	subs	r5, #1
 800d8cc:	e759      	b.n	800d782 <__kernel_rem_pio2+0x52a>
 800d8ce:	9b01      	ldr	r3, [sp, #4]
 800d8d0:	9a01      	ldr	r2, [sp, #4]
 800d8d2:	601d      	str	r5, [r3, #0]
 800d8d4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d8d8:	605c      	str	r4, [r3, #4]
 800d8da:	609f      	str	r7, [r3, #8]
 800d8dc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d8e0:	60d3      	str	r3, [r2, #12]
 800d8e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8e6:	6110      	str	r0, [r2, #16]
 800d8e8:	6153      	str	r3, [r2, #20]
 800d8ea:	e728      	b.n	800d73e <__kernel_rem_pio2+0x4e6>
 800d8ec:	41700000 	.word	0x41700000
 800d8f0:	3e700000 	.word	0x3e700000
 800d8f4:	00000000 	.word	0x00000000

0800d8f8 <__kernel_sin>:
 800d8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fc:	ed2d 8b04 	vpush	{d8-d9}
 800d900:	eeb0 8a41 	vmov.f32	s16, s2
 800d904:	eef0 8a61 	vmov.f32	s17, s3
 800d908:	ec55 4b10 	vmov	r4, r5, d0
 800d90c:	b083      	sub	sp, #12
 800d90e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d912:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d916:	9001      	str	r0, [sp, #4]
 800d918:	da06      	bge.n	800d928 <__kernel_sin+0x30>
 800d91a:	ee10 0a10 	vmov	r0, s0
 800d91e:	4629      	mov	r1, r5
 800d920:	f7f3 f91a 	bl	8000b58 <__aeabi_d2iz>
 800d924:	2800      	cmp	r0, #0
 800d926:	d051      	beq.n	800d9cc <__kernel_sin+0xd4>
 800d928:	4622      	mov	r2, r4
 800d92a:	462b      	mov	r3, r5
 800d92c:	4620      	mov	r0, r4
 800d92e:	4629      	mov	r1, r5
 800d930:	f7f2 fe62 	bl	80005f8 <__aeabi_dmul>
 800d934:	4682      	mov	sl, r0
 800d936:	468b      	mov	fp, r1
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4620      	mov	r0, r4
 800d93e:	4629      	mov	r1, r5
 800d940:	f7f2 fe5a 	bl	80005f8 <__aeabi_dmul>
 800d944:	a341      	add	r3, pc, #260	; (adr r3, 800da4c <__kernel_sin+0x154>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	4680      	mov	r8, r0
 800d94c:	4689      	mov	r9, r1
 800d94e:	4650      	mov	r0, sl
 800d950:	4659      	mov	r1, fp
 800d952:	f7f2 fe51 	bl	80005f8 <__aeabi_dmul>
 800d956:	a33f      	add	r3, pc, #252	; (adr r3, 800da54 <__kernel_sin+0x15c>)
 800d958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95c:	f7f2 fc94 	bl	8000288 <__aeabi_dsub>
 800d960:	4652      	mov	r2, sl
 800d962:	465b      	mov	r3, fp
 800d964:	f7f2 fe48 	bl	80005f8 <__aeabi_dmul>
 800d968:	a33c      	add	r3, pc, #240	; (adr r3, 800da5c <__kernel_sin+0x164>)
 800d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96e:	f7f2 fc8d 	bl	800028c <__adddf3>
 800d972:	4652      	mov	r2, sl
 800d974:	465b      	mov	r3, fp
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	a33a      	add	r3, pc, #232	; (adr r3, 800da64 <__kernel_sin+0x16c>)
 800d97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d980:	f7f2 fc82 	bl	8000288 <__aeabi_dsub>
 800d984:	4652      	mov	r2, sl
 800d986:	465b      	mov	r3, fp
 800d988:	f7f2 fe36 	bl	80005f8 <__aeabi_dmul>
 800d98c:	a337      	add	r3, pc, #220	; (adr r3, 800da6c <__kernel_sin+0x174>)
 800d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d992:	f7f2 fc7b 	bl	800028c <__adddf3>
 800d996:	9b01      	ldr	r3, [sp, #4]
 800d998:	4606      	mov	r6, r0
 800d99a:	460f      	mov	r7, r1
 800d99c:	b9eb      	cbnz	r3, 800d9da <__kernel_sin+0xe2>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	4659      	mov	r1, fp
 800d9a6:	f7f2 fe27 	bl	80005f8 <__aeabi_dmul>
 800d9aa:	a325      	add	r3, pc, #148	; (adr r3, 800da40 <__kernel_sin+0x148>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f2 fc6a 	bl	8000288 <__aeabi_dsub>
 800d9b4:	4642      	mov	r2, r8
 800d9b6:	464b      	mov	r3, r9
 800d9b8:	f7f2 fe1e 	bl	80005f8 <__aeabi_dmul>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	460b      	mov	r3, r1
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	4629      	mov	r1, r5
 800d9c4:	f7f2 fc62 	bl	800028c <__adddf3>
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	460d      	mov	r5, r1
 800d9cc:	ec45 4b10 	vmov	d0, r4, r5
 800d9d0:	b003      	add	sp, #12
 800d9d2:	ecbd 8b04 	vpop	{d8-d9}
 800d9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9da:	4b1b      	ldr	r3, [pc, #108]	; (800da48 <__kernel_sin+0x150>)
 800d9dc:	ec51 0b18 	vmov	r0, r1, d8
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	f7f2 fe09 	bl	80005f8 <__aeabi_dmul>
 800d9e6:	4632      	mov	r2, r6
 800d9e8:	ec41 0b19 	vmov	d9, r0, r1
 800d9ec:	463b      	mov	r3, r7
 800d9ee:	4640      	mov	r0, r8
 800d9f0:	4649      	mov	r1, r9
 800d9f2:	f7f2 fe01 	bl	80005f8 <__aeabi_dmul>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	ec51 0b19 	vmov	r0, r1, d9
 800d9fe:	f7f2 fc43 	bl	8000288 <__aeabi_dsub>
 800da02:	4652      	mov	r2, sl
 800da04:	465b      	mov	r3, fp
 800da06:	f7f2 fdf7 	bl	80005f8 <__aeabi_dmul>
 800da0a:	ec53 2b18 	vmov	r2, r3, d8
 800da0e:	f7f2 fc3b 	bl	8000288 <__aeabi_dsub>
 800da12:	a30b      	add	r3, pc, #44	; (adr r3, 800da40 <__kernel_sin+0x148>)
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	4606      	mov	r6, r0
 800da1a:	460f      	mov	r7, r1
 800da1c:	4640      	mov	r0, r8
 800da1e:	4649      	mov	r1, r9
 800da20:	f7f2 fdea 	bl	80005f8 <__aeabi_dmul>
 800da24:	4602      	mov	r2, r0
 800da26:	460b      	mov	r3, r1
 800da28:	4630      	mov	r0, r6
 800da2a:	4639      	mov	r1, r7
 800da2c:	f7f2 fc2e 	bl	800028c <__adddf3>
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	4620      	mov	r0, r4
 800da36:	4629      	mov	r1, r5
 800da38:	f7f2 fc26 	bl	8000288 <__aeabi_dsub>
 800da3c:	e7c4      	b.n	800d9c8 <__kernel_sin+0xd0>
 800da3e:	bf00      	nop
 800da40:	55555549 	.word	0x55555549
 800da44:	3fc55555 	.word	0x3fc55555
 800da48:	3fe00000 	.word	0x3fe00000
 800da4c:	5acfd57c 	.word	0x5acfd57c
 800da50:	3de5d93a 	.word	0x3de5d93a
 800da54:	8a2b9ceb 	.word	0x8a2b9ceb
 800da58:	3e5ae5e6 	.word	0x3e5ae5e6
 800da5c:	57b1fe7d 	.word	0x57b1fe7d
 800da60:	3ec71de3 	.word	0x3ec71de3
 800da64:	19c161d5 	.word	0x19c161d5
 800da68:	3f2a01a0 	.word	0x3f2a01a0
 800da6c:	1110f8a6 	.word	0x1110f8a6
 800da70:	3f811111 	.word	0x3f811111

0800da74 <with_errno>:
 800da74:	b570      	push	{r4, r5, r6, lr}
 800da76:	4604      	mov	r4, r0
 800da78:	460d      	mov	r5, r1
 800da7a:	4616      	mov	r6, r2
 800da7c:	f7fd fa3e 	bl	800aefc <__errno>
 800da80:	4629      	mov	r1, r5
 800da82:	6006      	str	r6, [r0, #0]
 800da84:	4620      	mov	r0, r4
 800da86:	bd70      	pop	{r4, r5, r6, pc}

0800da88 <xflow>:
 800da88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da8a:	4614      	mov	r4, r2
 800da8c:	461d      	mov	r5, r3
 800da8e:	b108      	cbz	r0, 800da94 <xflow+0xc>
 800da90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da94:	e9cd 2300 	strd	r2, r3, [sp]
 800da98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	f7f2 fdaa 	bl	80005f8 <__aeabi_dmul>
 800daa4:	2222      	movs	r2, #34	; 0x22
 800daa6:	b003      	add	sp, #12
 800daa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800daac:	f7ff bfe2 	b.w	800da74 <with_errno>

0800dab0 <__math_uflow>:
 800dab0:	b508      	push	{r3, lr}
 800dab2:	2200      	movs	r2, #0
 800dab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dab8:	f7ff ffe6 	bl	800da88 <xflow>
 800dabc:	ec41 0b10 	vmov	d0, r0, r1
 800dac0:	bd08      	pop	{r3, pc}

0800dac2 <__math_oflow>:
 800dac2:	b508      	push	{r3, lr}
 800dac4:	2200      	movs	r2, #0
 800dac6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800daca:	f7ff ffdd 	bl	800da88 <xflow>
 800dace:	ec41 0b10 	vmov	d0, r0, r1
 800dad2:	bd08      	pop	{r3, pc}

0800dad4 <fabs>:
 800dad4:	ec51 0b10 	vmov	r0, r1, d0
 800dad8:	ee10 2a10 	vmov	r2, s0
 800dadc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dae0:	ec43 2b10 	vmov	d0, r2, r3
 800dae4:	4770      	bx	lr

0800dae6 <finite>:
 800dae6:	b082      	sub	sp, #8
 800dae8:	ed8d 0b00 	vstr	d0, [sp]
 800daec:	9801      	ldr	r0, [sp, #4]
 800daee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800daf2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800daf6:	0fc0      	lsrs	r0, r0, #31
 800daf8:	b002      	add	sp, #8
 800dafa:	4770      	bx	lr
 800dafc:	0000      	movs	r0, r0
	...

0800db00 <floor>:
 800db00:	ec51 0b10 	vmov	r0, r1, d0
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800db0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800db10:	2e13      	cmp	r6, #19
 800db12:	ee10 5a10 	vmov	r5, s0
 800db16:	ee10 8a10 	vmov	r8, s0
 800db1a:	460c      	mov	r4, r1
 800db1c:	dc32      	bgt.n	800db84 <floor+0x84>
 800db1e:	2e00      	cmp	r6, #0
 800db20:	da14      	bge.n	800db4c <floor+0x4c>
 800db22:	a333      	add	r3, pc, #204	; (adr r3, 800dbf0 <floor+0xf0>)
 800db24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db28:	f7f2 fbb0 	bl	800028c <__adddf3>
 800db2c:	2200      	movs	r2, #0
 800db2e:	2300      	movs	r3, #0
 800db30:	f7f2 fff2 	bl	8000b18 <__aeabi_dcmpgt>
 800db34:	b138      	cbz	r0, 800db46 <floor+0x46>
 800db36:	2c00      	cmp	r4, #0
 800db38:	da57      	bge.n	800dbea <floor+0xea>
 800db3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800db3e:	431d      	orrs	r5, r3
 800db40:	d001      	beq.n	800db46 <floor+0x46>
 800db42:	4c2d      	ldr	r4, [pc, #180]	; (800dbf8 <floor+0xf8>)
 800db44:	2500      	movs	r5, #0
 800db46:	4621      	mov	r1, r4
 800db48:	4628      	mov	r0, r5
 800db4a:	e025      	b.n	800db98 <floor+0x98>
 800db4c:	4f2b      	ldr	r7, [pc, #172]	; (800dbfc <floor+0xfc>)
 800db4e:	4137      	asrs	r7, r6
 800db50:	ea01 0307 	and.w	r3, r1, r7
 800db54:	4303      	orrs	r3, r0
 800db56:	d01f      	beq.n	800db98 <floor+0x98>
 800db58:	a325      	add	r3, pc, #148	; (adr r3, 800dbf0 <floor+0xf0>)
 800db5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5e:	f7f2 fb95 	bl	800028c <__adddf3>
 800db62:	2200      	movs	r2, #0
 800db64:	2300      	movs	r3, #0
 800db66:	f7f2 ffd7 	bl	8000b18 <__aeabi_dcmpgt>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d0eb      	beq.n	800db46 <floor+0x46>
 800db6e:	2c00      	cmp	r4, #0
 800db70:	bfbe      	ittt	lt
 800db72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800db76:	fa43 f606 	asrlt.w	r6, r3, r6
 800db7a:	19a4      	addlt	r4, r4, r6
 800db7c:	ea24 0407 	bic.w	r4, r4, r7
 800db80:	2500      	movs	r5, #0
 800db82:	e7e0      	b.n	800db46 <floor+0x46>
 800db84:	2e33      	cmp	r6, #51	; 0x33
 800db86:	dd0b      	ble.n	800dba0 <floor+0xa0>
 800db88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800db8c:	d104      	bne.n	800db98 <floor+0x98>
 800db8e:	ee10 2a10 	vmov	r2, s0
 800db92:	460b      	mov	r3, r1
 800db94:	f7f2 fb7a 	bl	800028c <__adddf3>
 800db98:	ec41 0b10 	vmov	d0, r0, r1
 800db9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dba8:	fa23 f707 	lsr.w	r7, r3, r7
 800dbac:	4207      	tst	r7, r0
 800dbae:	d0f3      	beq.n	800db98 <floor+0x98>
 800dbb0:	a30f      	add	r3, pc, #60	; (adr r3, 800dbf0 <floor+0xf0>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb69 	bl	800028c <__adddf3>
 800dbba:	2200      	movs	r2, #0
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f7f2 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 800dbc2:	2800      	cmp	r0, #0
 800dbc4:	d0bf      	beq.n	800db46 <floor+0x46>
 800dbc6:	2c00      	cmp	r4, #0
 800dbc8:	da02      	bge.n	800dbd0 <floor+0xd0>
 800dbca:	2e14      	cmp	r6, #20
 800dbcc:	d103      	bne.n	800dbd6 <floor+0xd6>
 800dbce:	3401      	adds	r4, #1
 800dbd0:	ea25 0507 	bic.w	r5, r5, r7
 800dbd4:	e7b7      	b.n	800db46 <floor+0x46>
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dbdc:	fa03 f606 	lsl.w	r6, r3, r6
 800dbe0:	4435      	add	r5, r6
 800dbe2:	4545      	cmp	r5, r8
 800dbe4:	bf38      	it	cc
 800dbe6:	18e4      	addcc	r4, r4, r3
 800dbe8:	e7f2      	b.n	800dbd0 <floor+0xd0>
 800dbea:	2500      	movs	r5, #0
 800dbec:	462c      	mov	r4, r5
 800dbee:	e7aa      	b.n	800db46 <floor+0x46>
 800dbf0:	8800759c 	.word	0x8800759c
 800dbf4:	7e37e43c 	.word	0x7e37e43c
 800dbf8:	bff00000 	.word	0xbff00000
 800dbfc:	000fffff 	.word	0x000fffff

0800dc00 <scalbn>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	ec55 4b10 	vmov	r4, r5, d0
 800dc06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dc0a:	4606      	mov	r6, r0
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	b99a      	cbnz	r2, 800dc38 <scalbn+0x38>
 800dc10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc14:	4323      	orrs	r3, r4
 800dc16:	d036      	beq.n	800dc86 <scalbn+0x86>
 800dc18:	4b39      	ldr	r3, [pc, #228]	; (800dd00 <scalbn+0x100>)
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	ee10 0a10 	vmov	r0, s0
 800dc20:	2200      	movs	r2, #0
 800dc22:	f7f2 fce9 	bl	80005f8 <__aeabi_dmul>
 800dc26:	4b37      	ldr	r3, [pc, #220]	; (800dd04 <scalbn+0x104>)
 800dc28:	429e      	cmp	r6, r3
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	460d      	mov	r5, r1
 800dc2e:	da10      	bge.n	800dc52 <scalbn+0x52>
 800dc30:	a32b      	add	r3, pc, #172	; (adr r3, 800dce0 <scalbn+0xe0>)
 800dc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc36:	e03a      	b.n	800dcae <scalbn+0xae>
 800dc38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dc3c:	428a      	cmp	r2, r1
 800dc3e:	d10c      	bne.n	800dc5a <scalbn+0x5a>
 800dc40:	ee10 2a10 	vmov	r2, s0
 800dc44:	4620      	mov	r0, r4
 800dc46:	4629      	mov	r1, r5
 800dc48:	f7f2 fb20 	bl	800028c <__adddf3>
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	460d      	mov	r5, r1
 800dc50:	e019      	b.n	800dc86 <scalbn+0x86>
 800dc52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dc56:	460b      	mov	r3, r1
 800dc58:	3a36      	subs	r2, #54	; 0x36
 800dc5a:	4432      	add	r2, r6
 800dc5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dc60:	428a      	cmp	r2, r1
 800dc62:	dd08      	ble.n	800dc76 <scalbn+0x76>
 800dc64:	2d00      	cmp	r5, #0
 800dc66:	a120      	add	r1, pc, #128	; (adr r1, 800dce8 <scalbn+0xe8>)
 800dc68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc6c:	da1c      	bge.n	800dca8 <scalbn+0xa8>
 800dc6e:	a120      	add	r1, pc, #128	; (adr r1, 800dcf0 <scalbn+0xf0>)
 800dc70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc74:	e018      	b.n	800dca8 <scalbn+0xa8>
 800dc76:	2a00      	cmp	r2, #0
 800dc78:	dd08      	ble.n	800dc8c <scalbn+0x8c>
 800dc7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dc7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dc82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc86:	ec45 4b10 	vmov	d0, r4, r5
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dc90:	da19      	bge.n	800dcc6 <scalbn+0xc6>
 800dc92:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dc96:	429e      	cmp	r6, r3
 800dc98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800dc9c:	dd0a      	ble.n	800dcb4 <scalbn+0xb4>
 800dc9e:	a112      	add	r1, pc, #72	; (adr r1, 800dce8 <scalbn+0xe8>)
 800dca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e2      	bne.n	800dc6e <scalbn+0x6e>
 800dca8:	a30f      	add	r3, pc, #60	; (adr r3, 800dce8 <scalbn+0xe8>)
 800dcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcae:	f7f2 fca3 	bl	80005f8 <__aeabi_dmul>
 800dcb2:	e7cb      	b.n	800dc4c <scalbn+0x4c>
 800dcb4:	a10a      	add	r1, pc, #40	; (adr r1, 800dce0 <scalbn+0xe0>)
 800dcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d0b8      	beq.n	800dc30 <scalbn+0x30>
 800dcbe:	a10e      	add	r1, pc, #56	; (adr r1, 800dcf8 <scalbn+0xf8>)
 800dcc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcc4:	e7b4      	b.n	800dc30 <scalbn+0x30>
 800dcc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcca:	3236      	adds	r2, #54	; 0x36
 800dccc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	; (800dd08 <scalbn+0x108>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	e7e8      	b.n	800dcae <scalbn+0xae>
 800dcdc:	f3af 8000 	nop.w
 800dce0:	c2f8f359 	.word	0xc2f8f359
 800dce4:	01a56e1f 	.word	0x01a56e1f
 800dce8:	8800759c 	.word	0x8800759c
 800dcec:	7e37e43c 	.word	0x7e37e43c
 800dcf0:	8800759c 	.word	0x8800759c
 800dcf4:	fe37e43c 	.word	0xfe37e43c
 800dcf8:	c2f8f359 	.word	0xc2f8f359
 800dcfc:	81a56e1f 	.word	0x81a56e1f
 800dd00:	43500000 	.word	0x43500000
 800dd04:	ffff3cb0 	.word	0xffff3cb0
 800dd08:	3c900000 	.word	0x3c900000

0800dd0c <_init>:
 800dd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0e:	bf00      	nop
 800dd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd12:	bc08      	pop	{r3}
 800dd14:	469e      	mov	lr, r3
 800dd16:	4770      	bx	lr

0800dd18 <_fini>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr
