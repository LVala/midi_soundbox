
midi_soundbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800a748  0800a748  0001a748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a948  0800a948  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a948  0800a948  0001a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a950  0800a950  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a950  0800a950  0001a950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005474  20000094  0800a9ec  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005508  0800a9ec  00025508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d8d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000435e  00000000  00000000  00036e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0003b1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  0003c2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4a8  00000000  00000000  0003d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5f7  00000000  00000000  00058658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008def0  00000000  00000000  00072c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100b3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004910  00000000  00000000  00100b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000094 	.word	0x20000094
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a72c 	.word	0x0800a72c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000098 	.word	0x20000098
 80001d4:	0800a72c 	.word	0x0800a72c

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2iz>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008bc:	d215      	bcs.n	80008ea <__aeabi_d2iz+0x36>
 80008be:	d511      	bpl.n	80008e4 <__aeabi_d2iz+0x30>
 80008c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c8:	d912      	bls.n	80008f0 <__aeabi_d2iz+0x3c>
 80008ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008da:	fa23 f002 	lsr.w	r0, r3, r2
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	4770      	bx	lr
 80008e4:	f04f 0000 	mov.w	r0, #0
 80008e8:	4770      	bx	lr
 80008ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ee:	d105      	bne.n	80008fc <__aeabi_d2iz+0x48>
 80008f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	bf08      	it	eq
 80008f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_d2f>:
 8000904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800090c:	bf24      	itt	cs
 800090e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000916:	d90d      	bls.n	8000934 <__aeabi_d2f+0x30>
 8000918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800091c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800092c:	bf08      	it	eq
 800092e:	f020 0001 	biceq.w	r0, r0, #1
 8000932:	4770      	bx	lr
 8000934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000938:	d121      	bne.n	800097e <__aeabi_d2f+0x7a>
 800093a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800093e:	bfbc      	itt	lt
 8000940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000944:	4770      	bxlt	lr
 8000946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800094e:	f1c2 0218 	rsb	r2, r2, #24
 8000952:	f1c2 0c20 	rsb	ip, r2, #32
 8000956:	fa10 f30c 	lsls.w	r3, r0, ip
 800095a:	fa20 f002 	lsr.w	r0, r0, r2
 800095e:	bf18      	it	ne
 8000960:	f040 0001 	orrne.w	r0, r0, #1
 8000964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800096c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000970:	ea40 000c 	orr.w	r0, r0, ip
 8000974:	fa23 f302 	lsr.w	r3, r3, r2
 8000978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800097c:	e7cc      	b.n	8000918 <__aeabi_d2f+0x14>
 800097e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000982:	d107      	bne.n	8000994 <__aeabi_d2f+0x90>
 8000984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000988:	bf1e      	ittt	ne
 800098a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bxne	lr
 8000994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800099c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <Codec_Write>:

#define VOLUME_CONVERT(Volume) (((Volume) > 100)? 255:((uint8_t)(((Volume) * 255) / 100)))

static uint8_t is_codec_stopped = 1;

uint8_t Codec_Write(uint8_t reg, uint8_t val) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af04      	add	r7, sp, #16
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&hi2c1, CODEC_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &val, 1, I2C_MAX_TIMEOUT);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000cc4:	9302      	str	r3, [sp, #8]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	9301      	str	r3, [sp, #4]
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2301      	movs	r3, #1
 8000cd0:	2194      	movs	r1, #148	; 0x94
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <Codec_Write+0x48>)
 8000cd4:	f003 fb0c 	bl	80042f0 <HAL_I2C_Mem_Write>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]

  return status != HAL_OK ? 1 : 0;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200000b0 	.word	0x200000b0

08000cf4 <Codec_Init>:

uint32_t Codec_Init() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  // expects I2C already initialized

  uint32_t counter = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]

  // power on the codec (possibely need to turn it off first)
  HAL_GPIO_WritePin(CODEC_RESET_GPIO_Port, CODEC_RESET_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2110      	movs	r1, #16
 8000d02:	4834      	ldr	r0, [pc, #208]	; (8000dd4 <Codec_Init+0xe0>)
 8000d04:	f001 fd72 	bl	80027ec <HAL_GPIO_WritePin>

  // keep codec powered off
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x01);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f7ff ffcc 	bl	8000ca8 <Codec_Write>
 8000d10:	4603      	mov	r3, r0
 8000d12:	461a      	mov	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	607b      	str	r3, [r7, #4]
  // set output device to headphone
  counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xAF);
 8000d1a:	21af      	movs	r1, #175	; 0xaf
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f7ff ffc3 	bl	8000ca8 <Codec_Write>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
  // cloc configuration: auto detection
  counter += Codec_Write(CODEC_REG_CLOCKING_CTL, 0x81);
 8000d2c:	2181      	movs	r1, #129	; 0x81
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f7ff ffba 	bl	8000ca8 <Codec_Write>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	607b      	str	r3, [r7, #4]
  // set slave mode and audio standard
  counter += Codec_Write(CODEC_REG_INTERFACE_CTL1, 0x07);
 8000d3e:	2107      	movs	r1, #7
 8000d40:	2006      	movs	r0, #6
 8000d42:	f7ff ffb1 	bl	8000ca8 <Codec_Write>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
  // set master volume to 0
  counter += Codec_SetVolume(0);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f86b 	bl	8000e2c <Codec_SetVolume>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	607b      	str	r3, [r7, #4]

  // additional configuration, refer to link at the top of the file
  counter += Codec_Write(CODEC_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	200a      	movs	r0, #10
 8000d62:	f7ff ffa1 	bl	8000ca8 <Codec_Write>
 8000d66:	4603      	mov	r3, r0
 8000d68:	461a      	mov	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_MISC_CTL, 0x04);
 8000d70:	2104      	movs	r1, #4
 8000d72:	200e      	movs	r0, #14
 8000d74:	f7ff ff98 	bl	8000ca8 <Codec_Write>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4413      	add	r3, r2
 8000d80:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_LIMIT_CTL1, 0x00);
 8000d82:	2100      	movs	r1, #0
 8000d84:	2027      	movs	r0, #39	; 0x27
 8000d86:	f7ff ff8f 	bl	8000ca8 <Codec_Write>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_TONE_CTL, 0x0F);
 8000d94:	210f      	movs	r1, #15
 8000d96:	201f      	movs	r0, #31
 8000d98:	f7ff ff86 	bl	8000ca8 <Codec_Write>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMA_VOL, 0x0A);
 8000da6:	210a      	movs	r1, #10
 8000da8:	201a      	movs	r0, #26
 8000daa:	f7ff ff7d 	bl	8000ca8 <Codec_Write>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	607b      	str	r3, [r7, #4]
  counter += Codec_Write(CODEC_REG_PCMB_VOL, 0x0A);
 8000db8:	210a      	movs	r1, #10
 8000dba:	201b      	movs	r0, #27
 8000dbc:	f7ff ff74 	bl	8000ca8 <Codec_Write>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	607b      	str	r3, [r7, #4]

  return counter;
 8000dca:	687b      	ldr	r3, [r7, #4]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020c00 	.word	0x40020c00

08000dd8 <Codec_Play>:

uint32_t Codec_Play() {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]

  if (is_codec_stopped) {
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <Codec_Play+0x50>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d018      	beq.n	8000e1c <Codec_Play+0x44>
    // enable the digital soft ramp
	counter += Codec_Write(CODEC_REG_MISC_CTL, 0x06);
 8000dea:	2106      	movs	r1, #6
 8000dec:	200e      	movs	r0, #14
 8000dee:	f7ff ff5b 	bl	8000ca8 <Codec_Write>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	607b      	str	r3, [r7, #4]
	counter += Codec_SetMute(AUDIO_MUTE_OFF);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f869 	bl	8000ed4 <Codec_SetMute>
 8000e02:	4602      	mov	r2, r0
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	607b      	str	r3, [r7, #4]
	// power on the codec
	counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9E);
 8000e0a:	219e      	movs	r1, #158	; 0x9e
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff ff4b 	bl	8000ca8 <Codec_Write>
 8000e12:	4603      	mov	r3, r0
 8000e14:	461a      	mov	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	607b      	str	r3, [r7, #4]
  }

  return counter;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000

08000e2c <Codec_SetVolume>:
  counter += Codec_Write(CODEC_REG_POWER_CTL1, 0x9F);

  return counter;
}

uint32_t Codec_SetVolume(uint8_t volume) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  uint32_t counter = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  uint8_t converted_vol = VOLUME_CONVERT(volume);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d80b      	bhi.n	8000e58 <Codec_SetVolume+0x2c>
 8000e40:	79fa      	ldrb	r2, [r7, #7]
 8000e42:	4613      	mov	r3, r2
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <Codec_SetVolume+0xa4>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1152      	asrs	r2, r2, #5
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	e000      	b.n	8000e5a <Codec_SetVolume+0x2e>
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	72fb      	strb	r3, [r7, #11]

  if (converted_vol > 0xE6) {
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	2be6      	cmp	r3, #230	; 0xe6
 8000e60:	d918      	bls.n	8000e94 <Codec_SetVolume+0x68>
    counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol - 0xE7);
 8000e62:	7afb      	ldrb	r3, [r7, #11]
 8000e64:	3319      	adds	r3, #25
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	2020      	movs	r0, #32
 8000e6c:	f7ff ff1c 	bl	8000ca8 <Codec_Write>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol - 0xE7);
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	3319      	adds	r3, #25
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4619      	mov	r1, r3
 8000e82:	2021      	movs	r0, #33	; 0x21
 8000e84:	f7ff ff10 	bl	8000ca8 <Codec_Write>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e017      	b.n	8000ec4 <Codec_SetVolume+0x98>
  } else {
	counter += Codec_Write(CODEC_REG_MASTER_A_VOL, converted_vol + 0x19);
 8000e94:	7afb      	ldrb	r3, [r7, #11]
 8000e96:	3319      	adds	r3, #25
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f7ff ff03 	bl	8000ca8 <Codec_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
	counter += Codec_Write(CODEC_REG_MASTER_B_VOL, converted_vol + 0x19);
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	3319      	adds	r3, #25
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2021      	movs	r0, #33	; 0x21
 8000eb6:	f7ff fef7 	bl	8000ca8 <Codec_Write>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	51eb851f 	.word	0x51eb851f

08000ed4 <Codec_SetMute>:

uint32_t Codec_SetMute(uint8_t cmd) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  uint8_t counter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  if (cmd == AUDIO_MUTE_ON) {
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d11b      	bne.n	8000f20 <Codec_SetMute+0x4c>
    counter += Codec_Write(CODEC_REG_POWER_CTL2, 0xFF);
 8000ee8:	21ff      	movs	r1, #255	; 0xff
 8000eea:	2004      	movs	r0, #4
 8000eec:	f7ff fedc 	bl	8000ca8 <Codec_Write>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x01);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2022      	movs	r0, #34	; 0x22
 8000efe:	f7ff fed3 	bl	8000ca8 <Codec_Write>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	4413      	add	r3, r2
 8000f0a:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x01);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2023      	movs	r0, #35	; 0x23
 8000f10:	f7ff feca 	bl	8000ca8 <Codec_Write>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e01a      	b.n	8000f56 <Codec_SetMute+0x82>
  } else {
	counter += Codec_Write(CODEC_REG_POWER_CTL2, OUTPUT_DEVICE_HEADPHONE);
 8000f20:	21af      	movs	r1, #175	; 0xaf
 8000f22:	2004      	movs	r0, #4
 8000f24:	f7ff fec0 	bl	8000ca8 <Codec_Write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4413      	add	r3, r2
 8000f30:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_A_VOL, 0x00);
 8000f32:	2100      	movs	r1, #0
 8000f34:	2022      	movs	r0, #34	; 0x22
 8000f36:	f7ff feb7 	bl	8000ca8 <Codec_Write>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4413      	add	r3, r2
 8000f42:	73fb      	strb	r3, [r7, #15]
    counter += Codec_Write(CODEC_REG_HEADPHONE_B_VOL, 0x00);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2023      	movs	r0, #35	; 0x23
 8000f48:	f7ff feae 	bl	8000ca8 <Codec_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	4413      	add	r3, r2
 8000f54:	73fb      	strb	r3, [r7, #15]
  }

  return counter;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_DMA_Init+0x3c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <MX_DMA_Init+0x3c>)
 8000f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_DMA_Init+0x3c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2010      	movs	r0, #16
 8000f88:	f000 ff05 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f8c:	2010      	movs	r0, #16
 8000f8e:	f000 ff1e 	bl	8001dce <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a3d      	ldr	r2, [pc, #244]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <MX_GPIO_Init+0x114>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_GPIO_Init+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_GPIO_Init+0x114>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <MX_GPIO_Init+0x114>)
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_GPIO_Init+0x114>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_GPIO_Init+0x114>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <MX_GPIO_Init+0x114>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_GPIO_Init+0x114>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	481c      	ldr	r0, [pc, #112]	; (80010b8 <MX_GPIO_Init+0x118>)
 8001048:	f001 fbd0 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 800104c:	2200      	movs	r2, #0
 800104e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001052:	481a      	ldr	r0, [pc, #104]	; (80010bc <MX_GPIO_Init+0x11c>)
 8001054:	f001 fbca 	bl	80027ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001058:	2301      	movs	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <MX_GPIO_Init+0x118>)
 8001070:	f001 fa38 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8001074:	2301      	movs	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_GPIO_Init+0x120>)
 8001088:	f001 fa2c 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD4 */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 800108c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001090:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_GPIO_Init+0x11c>)
 80010a6:	f001 fa1d 	bl	80024e4 <HAL_GPIO_Init>

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40020000 	.word	0x40020000

080010c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <MX_I2C1_Init+0x54>)
 80010cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_I2C1_Init+0x58>)
 80010d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_I2C1_Init+0x50>)
 80010e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_I2C1_Init+0x50>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_I2C1_Init+0x50>)
 8001102:	f002 ffb1 	bl	8004068 <HAL_I2C_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 fa5c 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000b0 	.word	0x200000b0
 8001118:	40005400 	.word	0x40005400
 800111c:	000186a0 	.word	0x000186a0

08001120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a19      	ldr	r2, [pc, #100]	; (80011a4 <HAL_I2C_MspInit+0x84>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d12c      	bne.n	800119c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800115e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2304      	movs	r3, #4
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <HAL_I2C_MspInit+0x8c>)
 800117c:	f001 f9b2 	bl	80024e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 800118a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_I2C_MspInit+0x88>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400

080011b0 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_I2S3_Init+0x54>)
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <MX_I2S3_Init+0x58>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011ba:	4b12      	ldr	r3, [pc, #72]	; (8001204 <MX_I2S3_Init+0x54>)
 80011bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_I2S3_Init+0x54>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_I2S3_Init+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <MX_I2S3_Init+0x54>)
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_I2S3_Init+0x54>)
 80011d8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80011dc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_I2S3_Init+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <MX_I2S3_Init+0x54>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_I2S3_Init+0x54>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <MX_I2S3_Init+0x54>)
 80011f2:	f003 fb95 	bl	8004920 <HAL_I2S_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80011fc:	f000 f9e4 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000104 	.word	0x20000104
 8001208:	40003c00 	.word	0x40003c00

0800120c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b090      	sub	sp, #64	; 0x40
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a4f      	ldr	r2, [pc, #316]	; (8001378 <HAL_I2S_MspInit+0x16c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	f040 8096 	bne.w	800136e <HAL_I2S_MspInit+0x162>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001246:	23c8      	movs	r3, #200	; 0xc8
 8001248:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800124a:	2305      	movs	r3, #5
 800124c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800124e:	2302      	movs	r3, #2
 8001250:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fd78 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001262:	f000 f9b1 	bl	80015c8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_I2S_MspInit+0x170>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a43      	ldr	r2, [pc, #268]	; (800137c <HAL_I2S_MspInit+0x170>)
 8001270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_I2S_MspInit+0x170>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <HAL_I2S_MspInit+0x170>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a3c      	ldr	r2, [pc, #240]	; (800137c <HAL_I2S_MspInit+0x170>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <HAL_I2S_MspInit+0x170>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b36      	ldr	r3, [pc, #216]	; (800137c <HAL_I2S_MspInit+0x170>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a35      	ldr	r2, [pc, #212]	; (800137c <HAL_I2S_MspInit+0x170>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b33      	ldr	r3, [pc, #204]	; (800137c <HAL_I2S_MspInit+0x170>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ba:	2310      	movs	r3, #16
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ca:	2306      	movs	r3, #6
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	482a      	ldr	r0, [pc, #168]	; (8001380 <HAL_I2S_MspInit+0x174>)
 80012d6:	f001 f905 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80012da:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012ec:	2306      	movs	r3, #6
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f4:	4619      	mov	r1, r3
 80012f6:	4823      	ldr	r0, [pc, #140]	; (8001384 <HAL_I2S_MspInit+0x178>)
 80012f8:	f001 f8f4 	bl	80024e4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_I2S_MspInit+0x180>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001302:	4b21      	ldr	r3, [pc, #132]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 800131e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001322:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 800132e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001332:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 800133c:	2204      	movs	r2, #4
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001342:	2203      	movs	r2, #3
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001348:	2200      	movs	r2, #0
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 800134e:	2200      	movs	r2, #0
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001354:	f000 fd56 	bl	8001e04 <HAL_DMA_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 800135e:	f000 f933 	bl	80015c8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 8001366:	639a      	str	r2, [r3, #56]	; 0x38
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_I2S_MspInit+0x17c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800136e:	bf00      	nop
 8001370:	3740      	adds	r7, #64	; 0x40
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40003c00 	.word	0x40003c00
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020800 	.word	0x40020800
 8001388:	2000014c 	.word	0x2000014c
 800138c:	40026088 	.word	0x40026088

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  ApplicationTypeDef last_Appli_state = Appli_state;
 8001396:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <main+0x160>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f000 fb8a 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f8aa 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f7ff fdfc 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a8:	f7ff fdda 	bl	8000f60 <MX_DMA_Init>
  MX_I2C1_Init();
 80013ac:	f7ff fe8a 	bl	80010c4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80013b0:	f7ff fefe 	bl	80011b0 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80013b4:	f007 fd26 	bl	8008e04 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  MX_DriverVbusFS(0);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f008 f80f 	bl	80093dc <MX_DriverVbusFS>

  uint8_t counter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	71bb      	strb	r3, [r7, #6]

  counter += Codec_Init();
 80013c2:	f7ff fc97 	bl	8000cf4 <Codec_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	4413      	add	r3, r2
 80013ce:	71bb      	strb	r3, [r7, #6]
  counter += Codec_SetVolume(80);
 80013d0:	2050      	movs	r0, #80	; 0x50
 80013d2:	f7ff fd2b 	bl	8000e2c <Codec_SetVolume>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	4413      	add	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
  counter += Codec_Play();
 80013e0:	f7ff fcfa 	bl	8000dd8 <Codec_Play>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	4413      	add	r3, r2
 80013ec:	71bb      	strb	r3, [r7, #6]
  if (counter) {
 80013ee:	79bb      	ldrb	r3, [r7, #6]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <main+0x68>
    Error_Handler();
 80013f4:	f000 f8e8 	bl	80015c8 <Error_Handler>
  }

  Synth_Init();
 80013f8:	f000 f99e 	bl	8001738 <Synth_Init>
  Synth_Play();
 80013fc:	f000 f9ac 	bl	8001758 <Synth_Play>

  //HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);

  int8_t wasClicked = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	717b      	strb	r3, [r7, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001404:	f007 fd24 	bl	8008e50 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
      if (Appli_state == APPLICATION_DISCONNECT) {
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <main+0x160>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b03      	cmp	r3, #3
 800140e:	d118      	bne.n	8001442 <main+0xb2>
    	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	4837      	ldr	r0, [pc, #220]	; (80014f4 <main+0x164>)
 8001418:	f001 f9e8 	bl	80027ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001422:	4834      	ldr	r0, [pc, #208]	; (80014f4 <main+0x164>)
 8001424:	f001 f9e2 	bl	80027ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142e:	4831      	ldr	r0, [pc, #196]	; (80014f4 <main+0x164>)
 8001430:	f001 f9dc 	bl	80027ec <HAL_GPIO_WritePin>

    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	482e      	ldr	r0, [pc, #184]	; (80014f4 <main+0x164>)
 800143c:	f001 f9d6 	bl	80027ec <HAL_GPIO_WritePin>
 8001440:	e7e0      	b.n	8001404 <main+0x74>
      } else if(Appli_state == APPLICATION_READY) {
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <main+0x160>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d118      	bne.n	800147c <main+0xec>
      	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001450:	4828      	ldr	r0, [pc, #160]	; (80014f4 <main+0x164>)
 8001452:	f001 f9cb 	bl	80027ec <HAL_GPIO_WritePin>
      	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145c:	4825      	ldr	r0, [pc, #148]	; (80014f4 <main+0x164>)
 800145e:	f001 f9c5 	bl	80027ec <HAL_GPIO_WritePin>
      	HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001468:	4822      	ldr	r0, [pc, #136]	; (80014f4 <main+0x164>)
 800146a:	f001 f9bf 	bl	80027ec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001474:	481f      	ldr	r0, [pc, #124]	; (80014f4 <main+0x164>)
 8001476:	f001 f9b9 	bl	80027ec <HAL_GPIO_WritePin>
 800147a:	e7c3      	b.n	8001404 <main+0x74>
	  } else if (Appli_state == APPLICATION_IDLE) {
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <main+0x160>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d118      	bne.n	80014b6 <main+0x126>
	    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148a:	481a      	ldr	r0, [pc, #104]	; (80014f4 <main+0x164>)
 800148c:	f001 f9ae 	bl	80027ec <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	4817      	ldr	r0, [pc, #92]	; (80014f4 <main+0x164>)
 8001498:	f001 f9a8 	bl	80027ec <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <main+0x164>)
 80014a4:	f001 f9a2 	bl	80027ec <HAL_GPIO_WritePin>

	    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <main+0x164>)
 80014b0:	f001 f99c 	bl	80027ec <HAL_GPIO_WritePin>
 80014b4:	e7a6      	b.n	8001404 <main+0x74>
	  } else if (Appli_state == APPLICATION_START) {
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <main+0x160>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d1a2      	bne.n	8001404 <main+0x74>
	    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c4:	480b      	ldr	r0, [pc, #44]	; (80014f4 <main+0x164>)
 80014c6:	f001 f991 	bl	80027ec <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <main+0x164>)
 80014d2:	f001 f98b 	bl	80027ec <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <main+0x164>)
 80014de:	f001 f985 	bl	80027ec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <main+0x164>)
 80014ea:	f001 f97f 	bl	80027ec <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80014ee:	e789      	b.n	8001404 <main+0x74>
 80014f0:	200051f0 	.word	0x200051f0
 80014f4:	40020c00 	.word	0x40020c00

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	; 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2230      	movs	r2, #48	; 0x30
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f007 ffbe 	bl	8009488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <SystemClock_Config+0xc8>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <SystemClock_Config+0xc8>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <SystemClock_Config+0xc8>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <SystemClock_Config+0xcc>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <SystemClock_Config+0xcc>)
 8001542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <SystemClock_Config+0xcc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001568:	2304      	movs	r3, #4
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800156c:	23c0      	movs	r3, #192	; 0xc0
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001570:	2304      	movs	r3, #4
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001574:	2308      	movs	r3, #8
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	4618      	mov	r0, r3
 800157e:	f003 ff61 	bl	8005444 <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001588:	f000 f81e 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158c:	230f      	movs	r3, #15
 800158e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2103      	movs	r1, #3
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f9c3 	bl	8005934 <HAL_RCC_ClockConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015b4:	f000 f808 	bl	80015c8 <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LED_ORANGE_GPIO_Port, LED_ORANGE_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d2:	4803      	ldr	r0, [pc, #12]	; (80015e0 <Error_Handler+0x18>)
 80015d4:	f001 f90a 	bl	80027ec <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x14>
 80015de:	bf00      	nop
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <USBH_MIDI_ReceiveCallback>:
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
}

// ======================================================================
void USBH_MIDI_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  // each USB midi package is 4 bytes long
  uint16_t numberOfPackets = USBH_MIDI_GetLastReceivedDataSize(&hUsbHostFS) / 4;
 80015ec:	481c      	ldr	r0, [pc, #112]	; (8001660 <USBH_MIDI_ReceiveCallback+0x7c>)
 80015ee:	f005 fe92 	bl	8007316 <USBH_MIDI_GetLastReceivedDataSize>
 80015f2:	4603      	mov	r3, r0
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	81bb      	strh	r3, [r7, #12]

  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	81fb      	strh	r3, [r7, #14]
 80015fc:	e023      	b.n	8001646 <USBH_MIDI_ReceiveCallback+0x62>
    uint8_t cin_cable   = MIDI_RX_Buffer[4*i+0];
 80015fe:	89fb      	ldrh	r3, [r7, #14]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <USBH_MIDI_ReceiveCallback+0x80>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	72fb      	strb	r3, [r7, #11]
    uint8_t midi_cmd    = MIDI_RX_Buffer[4*i+1];
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	3301      	adds	r3, #1
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <USBH_MIDI_ReceiveCallback+0x80>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	72bb      	strb	r3, [r7, #10]
    uint8_t midi_param0 = MIDI_RX_Buffer[4*i+2];
 8001614:	89fb      	ldrh	r3, [r7, #14]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <USBH_MIDI_ReceiveCallback+0x80>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	727b      	strb	r3, [r7, #9]
    uint8_t midi_param1 = MIDI_RX_Buffer[4*i+3];
 8001620:	89fb      	ldrh	r3, [r7, #14]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3303      	adds	r3, #3
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <USBH_MIDI_ReceiveCallback+0x80>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	723b      	strb	r3, [r7, #8]
    if(cin_cable == 0) {
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <USBH_MIDI_ReceiveCallback+0x5a>
      continue;
    }
    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8001632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001636:	480c      	ldr	r0, [pc, #48]	; (8001668 <USBH_MIDI_ReceiveCallback+0x84>)
 8001638:	f001 f8f1 	bl	800281e <HAL_GPIO_TogglePin>
 800163c:	e000      	b.n	8001640 <USBH_MIDI_ReceiveCallback+0x5c>
      continue;
 800163e:	bf00      	nop
  for(uint16_t i = 0; i < numberOfPackets; ++i) {
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	3301      	adds	r3, #1
 8001644:	81fb      	strh	r3, [r7, #14]
 8001646:	89fa      	ldrh	r2, [r7, #14]
 8001648:	89bb      	ldrh	r3, [r7, #12]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3d7      	bcc.n	80015fe <USBH_MIDI_ReceiveCallback+0x1a>

  }
  // start a new reception
  USBH_MIDI_Receive(&hUsbHostFS, MIDI_RX_Buffer, RX_BUFF_SIZE);
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	4904      	ldr	r1, [pc, #16]	; (8001664 <USBH_MIDI_ReceiveCallback+0x80>)
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <USBH_MIDI_ReceiveCallback+0x7c>)
 8001654:	f005 fe7b 	bl	800734e <USBH_MIDI_Receive>
}
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20004d48 	.word	0x20004d48
 8001664:	200001ac 	.word	0x200001ac
 8001668:	40020c00 	.word	0x40020c00

0800166c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_MspInit+0x4c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x4c>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016aa:	2007      	movs	r0, #7
 80016ac:	f000 fb68 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 fa26 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Stream5_IRQHandler+0x10>)
 8001716:	f000 fc7b 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000014c 	.word	0x2000014c

08001724 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OTG_FS_IRQHandler+0x10>)
 800172a:	f001 fafd 	bl	8002d28 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200051f4 	.word	0x200051f4

08001738 <Synth_Init>:
float sample_N;

// temporary, single voice
Wavetable_State wavetable;

void Synth_Init() {
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  Wavetable_Init(&wavetable, WAVE_SINE);
 800173c:	2100      	movs	r1, #0
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <Synth_Init+0x1c>)
 8001740:	f000 f90a 	bl	8001958 <Wavetable_Init>
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES);
 8001744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001748:	2000      	movs	r0, #0
 800174a:	f000 f813 	bl	8001774 <UpdateAudioBuffer>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200005ec 	.word	0x200005ec

08001758 <Synth_Play>:

void Synth_Play() {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  HAL_I2S_Transmit_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SAMPLES);
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	4902      	ldr	r1, [pc, #8]	; (800176c <Synth_Play+0x14>)
 8001762:	4803      	ldr	r0, [pc, #12]	; (8001770 <Synth_Play+0x18>)
 8001764:	f003 fa1c 	bl	8004ba0 <HAL_I2S_Transmit_DMA>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200001ec 	.word	0x200001ec
 8001770:	20000104 	.word	0x20000104

08001774 <UpdateAudioBuffer>:

static void UpdateAudioBuffer(uint32_t start_frame, uint32_t end_frame) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  // start_frame is inclusive, end_frame exclusive
  static float buffer[AUDIO_BUFFER_SAMPLES];
  Wavetable_GetSamples(&wavetable, buffer, end_frame - start_frame);
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	461a      	mov	r2, r3
 8001786:	4923      	ldr	r1, [pc, #140]	; (8001814 <UpdateAudioBuffer+0xa0>)
 8001788:	4823      	ldr	r0, [pc, #140]	; (8001818 <UpdateAudioBuffer+0xa4>)
 800178a:	f000 f915 	bl	80019b8 <Wavetable_GetSamples>

  uint32_t i = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	e033      	b.n	8001800 <UpdateAudioBuffer+0x8c>
    audio_buffer[2*frame] = (int16_t)(buffer[2*i] * 32000);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <UpdateAudioBuffer+0xa0>)
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800181c <UpdateAudioBuffer+0xa8>
 80017aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b2:	ee17 3a90 	vmov	r3, s15
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	b291      	uxth	r1, r2
 80017be:	4a18      	ldr	r2, [pc, #96]	; (8001820 <UpdateAudioBuffer+0xac>)
 80017c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	audio_buffer[2*frame+1] = (int16_t)(buffer[2*i+1] * 32000);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <UpdateAudioBuffer+0xa0>)
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800181c <UpdateAudioBuffer+0xa8>
 80017d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	b21a      	sxth	r2, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	3301      	adds	r3, #1
 80017ec:	b291      	uxth	r1, r2
 80017ee:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <UpdateAudioBuffer+0xac>)
 80017f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	i++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
  for (uint32_t frame = start_frame; frame < end_frame; frame++) {
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d3c7      	bcc.n	8001798 <UpdateAudioBuffer+0x24>
//	int16_t sample_int = (int16_t)(sample * 32000);
//	audio_buffer[2*i] = sample_int;
//	audio_buffer[2*i+1] = sample_int;
//	phase += 0.5*d_phase;
//  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200005fc 	.word	0x200005fc
 8001818:	200005ec 	.word	0x200005ec
 800181c:	46fa0000 	.word	0x46fa0000
 8001820:	200001ec 	.word	0x200001ec

08001824 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(0, AUDIO_BUFFER_FRAMES/2);
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff ffa0 	bl	8001774 <UpdateAudioBuffer>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UpdateAudioBuffer(AUDIO_BUFFER_FRAMES/2, AUDIO_BUFFER_FRAMES);
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	2080      	movs	r0, #128	; 0x80
 800184a:	f7ff ff93 	bl	8001774 <UpdateAudioBuffer>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f007 fdc4 	bl	8009414 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20020000 	.word	0x20020000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20000dfc 	.word	0x20000dfc
 80018c0:	20005508 	.word	0x20005508

080018c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <sineWavetableInit>:
#include "wavetable.h"

float sine_wavetable[WAVETABLE_LEN];
static uint8_t wavetables_initialized = 0;

static void sineWavetableInit() {
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
  float d_phase = (2.0f * (float)M_PI) / WAVETABLE_LEN;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <sineWavetableInit+0x68>)
 80018f0:	607b      	str	r3, [r7, #4]
  float phase = 0;
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	817b      	strh	r3, [r7, #10]
 80018fc:	e01f      	b.n	800193e <sineWavetableInit+0x56>
    sine_wavetable[i] = sin(phase);
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f7fe fef8 	bl	80006f4 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b10 	vmov	d0, r2, r3
 800190c:	f007 fec4 	bl	8009698 <sin>
 8001910:	ec53 2b10 	vmov	r2, r3, d0
 8001914:	897c      	ldrh	r4, [r7, #10]
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7fe fff3 	bl	8000904 <__aeabi_d2f>
 800191e:	4602      	mov	r2, r0
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <sineWavetableInit+0x6c>)
 8001922:	00a3      	lsls	r3, r4, #2
 8001924:	440b      	add	r3, r1
 8001926:	601a      	str	r2, [r3, #0]
	phase += d_phase;
 8001928:	ed97 7a03 	vldr	s14, [r7, #12]
 800192c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	edc7 7a03 	vstr	s15, [r7, #12]
  for (uint16_t i = 0; i < WAVETABLE_LEN; i++) {
 8001938:	897b      	ldrh	r3, [r7, #10]
 800193a:	3301      	adds	r3, #1
 800193c:	817b      	strh	r3, [r7, #10]
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	f5b3 6f7d 	cmp.w	r3, #4048	; 0xfd0
 8001944:	d3db      	bcc.n	80018fe <sineWavetableInit+0x16>
  }
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	3acb7232 	.word	0x3acb7232
 8001954:	20000e00 	.word	0x20000e00

08001958 <Wavetable_Init>:

void Wavetable_Init(Wavetable_State *state, uint8_t wave) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  if (!wavetables_initialized) {
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <Wavetable_Init+0x50>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <Wavetable_Init+0x18>
    sineWavetableInit();
 800196c:	f7ff ffbc 	bl	80018e8 <sineWavetableInit>
  }

  state->wave = wave;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	701a      	strb	r2, [r3, #0]
  // state->active = 1;
  state->phase = 0;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	605a      	str	r2, [r3, #4]
  state->pitch_hz = 93.75;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <Wavetable_Init+0x54>)
 8001982:	60da      	str	r2, [r3, #12]
  state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	ed93 7a03 	vldr	s14, [r3, #12]
 800198a:	eddf 6a09 	vldr	s13, [pc, #36]	; 80019b0 <Wavetable_Init+0x58>
 800198e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001992:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80019b4 <Wavetable_Init+0x5c>
 8001996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20004d40 	.word	0x20004d40
 80019ac:	42bb8000 	.word	0x42bb8000
 80019b0:	473b8000 	.word	0x473b8000
 80019b4:	457d0000 	.word	0x457d0000

080019b8 <Wavetable_GetSamples>:
	state->phase = 0;
	state->pitch_hz = 0;
	state->d_phase = (state->pitch_hz/SAMPLE_RATE) * WAVETABLE_LEN;
}

void Wavetable_GetSamples(Wavetable_State *state, float *buffer, int num_frames) {
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  float sample;
  for (uint32_t i = 0; i<num_frames; i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e03a      	b.n	8001a40 <Wavetable_GetSamples+0x88>
    sample = sine_wavetable[(uint32_t)state->phase];
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <Wavetable_GetSamples+0xa0>)
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
	buffer[2*i] = sample;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	601a      	str	r2, [r3, #0]
	buffer[2*i+1] = sample;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	3304      	adds	r3, #4
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	4413      	add	r3, r2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	601a      	str	r2, [r3, #0]
	state->phase += state->d_phase;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	edc3 7a01 	vstr	s15, [r3, #4]
	if (state->phase > WAVETABLE_LEN) {
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a18:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001a5c <Wavetable_GetSamples+0xa4>
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	dd09      	ble.n	8001a3a <Wavetable_GetSamples+0x82>
      state->phase -= WAVETABLE_LEN;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a2c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001a5c <Wavetable_GetSamples+0xa4>
 8001a30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edc3 7a01 	vstr	s15, [r3, #4]
  for (uint32_t i = 0; i<num_frames; i++) {
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3c0      	bcc.n	80019ca <Wavetable_GetSamples+0x12>
	}
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000e00 	.word	0x20000e00
 8001a5c:	457d0000 	.word	0x457d0000

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a7c:	4c0b      	ldr	r4, [pc, #44]	; (8001aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8a:	f7ff ff1b 	bl	80018c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f007 fcc7 	bl	8009420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fc7d 	bl	8001390 <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001aa4:	0800a958 	.word	0x0800a958
  ldr r2, =_sbss
 8001aa8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001aac:	20005508 	.word	0x20005508

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_Init+0x40>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_Init+0x40>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_Init+0x40>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f94f 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fdc0 	bl	800166c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 f967 	bl	8001dea <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b34:	f000 f92f 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	2000000c 	.word	0x2000000c
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000000c 	.word	0x2000000c
 8001b7c:	20004d44 	.word	0x20004d44

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20004d44 	.word	0x20004d44

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000000c 	.word	0x2000000c

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4907      	ldr	r1, [pc, #28]	; (8001c7c <__NVIC_EnableIRQ+0x38>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d60:	f7ff ff8e 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff29 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff3e 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff8e 	bl	8001cd4 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5d 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff31 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff feb6 	bl	8001b80 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e099      	b.n	8001f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	e00f      	b.n	8001e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e42:	f7ff fe9d 	bl	8001b80 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d908      	bls.n	8001e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e078      	b.n	8001f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e8      	bne.n	8001e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_DMA_Init+0x158>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f023 0307 	bic.w	r3, r3, #7
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d117      	bne.n	8001f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fa6f 	bl	80023ec <DMA_CheckFifoParam>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f22:	2301      	movs	r3, #1
 8001f24:	e016      	b.n	8001f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fa26 	bl	8002380 <DMA_CalcBaseAndBitshift>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	223f      	movs	r2, #63	; 0x3f
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	f010803f 	.word	0xf010803f

08001f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Start_IT+0x26>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e040      	b.n	8002008 <HAL_DMA_Start_IT+0xa8>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d12f      	bne.n	8001ffa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9b8 	bl	8002324 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0216 	orr.w	r2, r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e005      	b.n	8002006 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800201c:	4b8e      	ldr	r3, [pc, #568]	; (8002258 <HAL_DMA_IRQHandler+0x248>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a8e      	ldr	r2, [pc, #568]	; (800225c <HAL_DMA_IRQHandler+0x24c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0a9b      	lsrs	r3, r3, #10
 8002028:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2208      	movs	r2, #8
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01a      	beq.n	800207c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2208      	movs	r2, #8
 800206a:	409a      	lsls	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	2201      	movs	r2, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	2204      	movs	r2, #4
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d012      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2204      	movs	r2, #4
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	2210      	movs	r2, #16
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d043      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03c      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2210      	movs	r2, #16
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d018      	beq.n	8002152 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d024      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
 800213e:	e01f      	b.n	8002180 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
 8002150:	e016      	b.n	8002180 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0208 	bic.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2220      	movs	r2, #32
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 808f 	beq.w	80022b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8087 	beq.w	80022b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2220      	movs	r2, #32
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d136      	bne.n	8002228 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0216 	bic.w	r2, r2, #22
 80021c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_DMA_IRQHandler+0x1da>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0208 	bic.w	r2, r2, #8
 80021f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	223f      	movs	r2, #63	; 0x3f
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d07e      	beq.n	800231c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
        }
        return;
 8002226:	e079      	b.n	800231c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01d      	beq.n	8002272 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	2b00      	cmp	r3, #0
 800224a:	d031      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e02c      	b.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
 8002256:	bf00      	nop
 8002258:	20000004 	.word	0x20000004
 800225c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
 8002270:	e01e      	b.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10f      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0210 	bic.w	r2, r2, #16
 800228e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d032      	beq.n	800231e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d022      	beq.n	800230a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2205      	movs	r2, #5
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0201 	bic.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	3301      	adds	r3, #1
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d307      	bcc.n	80022f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f2      	bne.n	80022dc <HAL_DMA_IRQHandler+0x2cc>
 80022f6:	e000      	b.n	80022fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	4798      	blx	r3
 800231a:	e000      	b.n	800231e <HAL_DMA_IRQHandler+0x30e>
        return;
 800231c:	bf00      	nop
    }
  }
}
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002340:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d108      	bne.n	8002364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002362:	e007      	b.n	8002374 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3b10      	subs	r3, #16
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <DMA_CalcBaseAndBitshift+0x68>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d909      	bls.n	80023c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	659a      	str	r2, [r3, #88]	; 0x58
 80023c0:	e007      	b.n	80023d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	aaaaaaab 	.word	0xaaaaaaab
 80023e8:	0800a768 	.word	0x0800a768

080023ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11f      	bne.n	8002446 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d856      	bhi.n	80024ba <DMA_CheckFifoParam+0xce>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <DMA_CheckFifoParam+0x28>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002425 	.word	0x08002425
 8002418:	08002437 	.word	0x08002437
 800241c:	08002425 	.word	0x08002425
 8002420:	080024bb 	.word	0x080024bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d046      	beq.n	80024be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e043      	b.n	80024be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800243e:	d140      	bne.n	80024c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002444:	e03d      	b.n	80024c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	d121      	bne.n	8002494 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d837      	bhi.n	80024c6 <DMA_CheckFifoParam+0xda>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x70>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002473 	.word	0x08002473
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002485 	.word	0x08002485
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e030      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d025      	beq.n	80024ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002482:	e022      	b.n	80024ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800248c:	d11f      	bne.n	80024ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002492:	e01c      	b.n	80024ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d903      	bls.n	80024a2 <DMA_CheckFifoParam+0xb6>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a0:	e018      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      break;
 80024a6:	e015      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e00b      	b.n	80024d2 <DMA_CheckFifoParam+0xe6>
      break;
 80024ba:	bf00      	nop
 80024bc:	e00a      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e008      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e006      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e004      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
    }
  } 
  
  return status; 
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e159      	b.n	80027b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 8148 	bne.w	80027ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	2b02      	cmp	r3, #2
 8002534:	d130      	bne.n	8002598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0201 	and.w	r2, r3, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d017      	beq.n	80025d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d123      	bne.n	8002628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0203 	and.w	r2, r3, #3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a2 	beq.w	80027ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b54      	ldr	r3, [pc, #336]	; (80027cc <HAL_GPIO_Init+0x2e8>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a52      	ldr	r2, [pc, #328]	; (80027d0 <HAL_GPIO_Init+0x2ec>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a49      	ldr	r2, [pc, #292]	; (80027d4 <HAL_GPIO_Init+0x2f0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d019      	beq.n	80026e6 <HAL_GPIO_Init+0x202>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a48      	ldr	r2, [pc, #288]	; (80027d8 <HAL_GPIO_Init+0x2f4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_GPIO_Init+0x1fe>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a47      	ldr	r2, [pc, #284]	; (80027dc <HAL_GPIO_Init+0x2f8>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00d      	beq.n	80026de <HAL_GPIO_Init+0x1fa>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <HAL_GPIO_Init+0x2fc>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <HAL_GPIO_Init+0x1f6>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a45      	ldr	r2, [pc, #276]	; (80027e4 <HAL_GPIO_Init+0x300>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_GPIO_Init+0x1f2>
 80026d2:	2304      	movs	r3, #4
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026d6:	2307      	movs	r3, #7
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x204>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_GPIO_Init+0x2ec>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272a:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x304>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <HAL_GPIO_Init+0x304>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_GPIO_Init+0x304>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <HAL_GPIO_Init+0x304>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f aea2 	bls.w	8002500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	041a      	lsls	r2, r3, #16
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43d9      	mvns	r1, r3
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	400b      	ands	r3, r1
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002852:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002854:	b08f      	sub	sp, #60	; 0x3c
 8002856:	af0a      	add	r7, sp, #40	; 0x28
 8002858:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e054      	b.n	800290e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f006 fb1e 	bl	8008ec0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2203      	movs	r2, #3
 8002888:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 fc14 	bl	80060d0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	687e      	ldr	r6, [r7, #4]
 80028b0:	466d      	mov	r5, sp
 80028b2:	f106 0410 	add.w	r4, r6, #16
 80028b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028c6:	1d33      	adds	r3, r6, #4
 80028c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f003 fb8e 	bl	8005fec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f003 fc0b 	bl	80060f2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	687e      	ldr	r6, [r7, #4]
 80028e4:	466d      	mov	r5, sp
 80028e6:	f106 0410 	add.w	r4, r6, #16
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80028fa:	1d33      	adds	r3, r6, #4
 80028fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fe:	6838      	ldr	r0, [r7, #0]
 8002900:	f003 fd94 	bl	800642c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002916 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002916:	b590      	push	{r4, r7, lr}
 8002918:	b089      	sub	sp, #36	; 0x24
 800291a:	af04      	add	r7, sp, #16
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	4608      	mov	r0, r1
 8002920:	4611      	mov	r1, r2
 8002922:	461a      	mov	r2, r3
 8002924:	4603      	mov	r3, r0
 8002926:	70fb      	strb	r3, [r7, #3]
 8002928:	460b      	mov	r3, r1
 800292a:	70bb      	strb	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_HCD_HC_Init+0x28>
 800293a:	2302      	movs	r3, #2
 800293c:	e076      	b.n	8002a2c <HAL_HCD_HC_Init+0x116>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	333d      	adds	r3, #61	; 0x3d
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	212c      	movs	r1, #44	; 0x2c
 800295e:	fb01 f303 	mul.w	r3, r1, r3
 8002962:	4413      	add	r3, r2
 8002964:	3338      	adds	r3, #56	; 0x38
 8002966:	787a      	ldrb	r2, [r7, #1]
 8002968:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3340      	adds	r3, #64	; 0x40
 8002978:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800297a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3339      	adds	r3, #57	; 0x39
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	333f      	adds	r3, #63	; 0x3f
 800299c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80029a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	78ba      	ldrb	r2, [r7, #2]
 80029a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029aa:	b2d0      	uxtb	r0, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333a      	adds	r3, #58	; 0x3a
 80029b8:	4602      	mov	r2, r0
 80029ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80029bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da09      	bge.n	80029d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	333b      	adds	r3, #59	; 0x3b
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e008      	b.n	80029ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	333b      	adds	r3, #59	; 0x3b
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	787c      	ldrb	r4, [r7, #1]
 8002a04:	78ba      	ldrb	r2, [r7, #2]
 8002a06:	78f9      	ldrb	r1, [r7, #3]
 8002a08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	4623      	mov	r3, r4
 8002a1a:	f003 fe8d 	bl	8006738 <USB_HC_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd90      	pop	{r4, r7, pc}

08002a34 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_HCD_HC_Halt+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e00f      	b.n	8002a72 <HAL_HCD_HC_Halt+0x3e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f8dd 	bl	8006c22 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	70fb      	strb	r3, [r7, #3]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70bb      	strb	r3, [r7, #2]
 8002a92:	4613      	mov	r3, r2
 8002a94:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	333b      	adds	r3, #59	; 0x3b
 8002aa4:	78ba      	ldrb	r2, [r7, #2]
 8002aa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	333f      	adds	r3, #63	; 0x3f
 8002ab6:	787a      	ldrb	r2, [r7, #1]
 8002ab8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002aba:	7c3b      	ldrb	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d112      	bne.n	8002ae6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3342      	adds	r3, #66	; 0x42
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	333d      	adds	r3, #61	; 0x3d
 8002ae0:	7f3a      	ldrb	r2, [r7, #28]
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e008      	b.n	8002af8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3342      	adds	r3, #66	; 0x42
 8002af4:	2202      	movs	r2, #2
 8002af6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	f200 80c6 	bhi.w	8002c8c <HAL_HCD_HC_SubmitRequest+0x210>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002c79 	.word	0x08002c79
 8002b10:	08002b7d 	.word	0x08002b7d
 8002b14:	08002bfb 	.word	0x08002bfb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b18:	7c3b      	ldrb	r3, [r7, #16]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	f040 80b8 	bne.w	8002c90 <HAL_HCD_HC_SubmitRequest+0x214>
 8002b20:	78bb      	ldrb	r3, [r7, #2]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 80b4 	bne.w	8002c90 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b28:	8b3b      	ldrh	r3, [r7, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3355      	adds	r3, #85	; 0x55
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3355      	adds	r3, #85	; 0x55
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3342      	adds	r3, #66	; 0x42
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b66:	e093      	b.n	8002c90 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3342      	adds	r3, #66	; 0x42
 8002b76:	2202      	movs	r2, #2
 8002b78:	701a      	strb	r2, [r3, #0]
      break;
 8002b7a:	e089      	b.n	8002c90 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b7c:	78bb      	ldrb	r3, [r7, #2]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11d      	bne.n	8002bbe <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3355      	adds	r3, #85	; 0x55
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3342      	adds	r3, #66	; 0x42
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ba8:	e073      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3342      	adds	r3, #66	; 0x42
 8002bb8:	2202      	movs	r2, #2
 8002bba:	701a      	strb	r2, [r3, #0]
      break;
 8002bbc:	e069      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3354      	adds	r3, #84	; 0x54
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3342      	adds	r3, #66	; 0x42
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
      break;
 8002be4:	e055      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3342      	adds	r3, #66	; 0x42
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	701a      	strb	r2, [r3, #0]
      break;
 8002bf8:	e04b      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002bfa:	78bb      	ldrb	r3, [r7, #2]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d11d      	bne.n	8002c3c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3355      	adds	r3, #85	; 0x55
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	212c      	movs	r1, #44	; 0x2c
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	3342      	adds	r3, #66	; 0x42
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c26:	e034      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3342      	adds	r3, #66	; 0x42
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
      break;
 8002c3a:	e02a      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	212c      	movs	r1, #44	; 0x2c
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3354      	adds	r3, #84	; 0x54
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3342      	adds	r3, #66	; 0x42
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
      break;
 8002c62:	e016      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3342      	adds	r3, #66	; 0x42
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e00c      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3342      	adds	r3, #66	; 0x42
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002c90:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	212c      	movs	r1, #44	; 0x2c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3344      	adds	r3, #68	; 0x44
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	8b3a      	ldrh	r2, [r7, #24]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	202c      	movs	r0, #44	; 0x2c
 8002cac:	fb00 f303 	mul.w	r3, r0, r3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334c      	adds	r3, #76	; 0x4c
 8002cb4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3350      	adds	r3, #80	; 0x50
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3339      	adds	r3, #57	; 0x39
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3361      	adds	r3, #97	; 0x61
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	222c      	movs	r2, #44	; 0x2c
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	3338      	adds	r3, #56	; 0x38
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	18d1      	adds	r1, r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	f003 fe30 	bl	800697c <USB_HC_StartXfer>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop

08002d28 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fb31 	bl	80063a6 <USB_GetMode>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	f040 80f6 	bne.w	8002f38 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 fb15 	bl	8006380 <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80ec 	beq.w	8002f36 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 fb0c 	bl	8006380 <USB_ReadInterrupts>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d72:	d104      	bne.n	8002d7e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fafc 	bl	8006380 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d92:	d104      	bne.n	8002d9e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 faec 	bl	8006380 <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db2:	d104      	bne.n	8002dbe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002dbc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fadc 	bl	8006380 <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d103      	bne.n	8002dda <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 face 	bl	8006380 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dee:	d11c      	bne.n	8002e2a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002df8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10f      	bne.n	8002e2a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e0a:	2110      	movs	r1, #16
 8002e0c:	6938      	ldr	r0, [r7, #16]
 8002e0e:	f003 f9bd 	bl	800618c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e12:	6938      	ldr	r0, [r7, #16]
 8002e14:	f003 f9ee 	bl	80061f4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fbc4 	bl	80065ac <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f006 f8c9 	bl	8008fbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 faa6 	bl	8006380 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e3e:	d102      	bne.n	8002e46 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f001 f89e 	bl	8003f82 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fa98 	bl	8006380 <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d106      	bne.n	8002e68 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f006 f892 	bl	8008f84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2208      	movs	r2, #8
 8002e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fa87 	bl	8006380 <USB_ReadInterrupts>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d101      	bne.n	8002e80 <HAL_HCD_IRQHandler+0x158>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_HCD_IRQHandler+0x15a>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d012      	beq.n	8002eac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0210 	bic.w	r2, r2, #16
 8002e94:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 ffa1 	bl	8003dde <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0210 	orr.w	r2, r2, #16
 8002eaa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fa65 	bl	8006380 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ec0:	d13a      	bne.n	8002f38 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fe9a 	bl	8006c00 <USB_HC_ReadInterrupt>
 8002ecc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e025      	b.n	8002f20 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d018      	beq.n	8002f1a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d106      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8ab 	bl	8003062 <HCD_HC_IN_IRQHandler>
 8002f0c:	e005      	b.n	8002f1a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fbf9 	bl	800370c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d3d4      	bcc.n	8002ed4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f32:	615a      	str	r2, [r3, #20]
 8002f34:	e000      	b.n	8002f38 <HAL_HCD_IRQHandler+0x210>
      return;
 8002f36:	bf00      	nop
    }
  }
}
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_HCD_Start+0x16>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e013      	b.n	8002f7c <HAL_HCD_Start+0x3e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f003 fb86 	bl	8006674 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 f89e 	bl	80060ae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_HCD_Stop+0x16>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e00d      	b.n	8002fb6 <HAL_HCD_Stop+0x32>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 ff74 	bl	8006e94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fb28 	bl	8006620 <USB_ResetPort>
 8002fd0:	4603      	mov	r3, r0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3360      	adds	r3, #96	; 0x60
 8002ff4:	781b      	ldrb	r3, [r3, #0]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	3350      	adds	r3, #80	; 0x50
 800301c:	681b      	ldr	r3, [r3, #0]
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fb6c 	bl	8006714 <USB_GetCurrentFrame>
 800303c:	4603      	mov	r3, r0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fb47 	bl	80066e6 <USB_GetHostSpeed>
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d11a      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309e:	461a      	mov	r2, r3
 80030a0:	2304      	movs	r3, #4
 80030a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3361      	adds	r3, #97	; 0x61
 80030b2:	2206      	movs	r2, #6
 80030b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fdae 	bl	8006c22 <USB_HC_Halt>
 80030c6:	e0af      	b.n	8003228 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030de:	d11b      	bne.n	8003118 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	2207      	movs	r2, #7
 8003104:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f003 fd86 	bl	8006c22 <USB_HC_Halt>
 8003116:	e087      	b.n	8003228 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d109      	bne.n	8003142 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	2320      	movs	r3, #32
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	e072      	b.n	8003228 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b08      	cmp	r3, #8
 8003156:	d11a      	bne.n	800318e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003164:	461a      	mov	r2, r3
 8003166:	2308      	movs	r3, #8
 8003168:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3361      	adds	r3, #97	; 0x61
 8003178:	2205      	movs	r2, #5
 800317a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fd4b 	bl	8006c22 <USB_HC_Halt>
 800318c:	e04c      	b.n	8003228 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	d11b      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3361      	adds	r3, #97	; 0x61
 80031c8:	2208      	movs	r2, #8
 80031ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 fd23 	bl	8006c22 <USB_HC_Halt>
 80031dc:	e024      	b.n	8003228 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f0:	2b80      	cmp	r3, #128	; 0x80
 80031f2:	d119      	bne.n	8003228 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003200:	461a      	mov	r2, r3
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	3361      	adds	r3, #97	; 0x61
 8003214:	2206      	movs	r2, #6
 8003216:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fcfd 	bl	8006c22 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800323a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323e:	d112      	bne.n	8003266 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fce9 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325c:	461a      	mov	r2, r3
 800325e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003262:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003264:	e24e      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	f040 80df 	bne.w	800343c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d019      	beq.n	80032ba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3348      	adds	r3, #72	; 0x48
 8003294:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	0159      	lsls	r1, r3, #5
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	440b      	add	r3, r1
 800329e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80032a8:	1ad2      	subs	r2, r2, r3
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	202c      	movs	r0, #44	; 0x2c
 80032b0:	fb00 f303 	mul.w	r3, r0, r3
 80032b4:	440b      	add	r3, r1
 80032b6:	3350      	adds	r3, #80	; 0x50
 80032b8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3361      	adds	r3, #97	; 0x61
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	335c      	adds	r3, #92	; 0x5c
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ea:	461a      	mov	r2, r3
 80032ec:	2301      	movs	r3, #1
 80032ee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	333f      	adds	r3, #63	; 0x3f
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	333f      	adds	r3, #63	; 0x3f
 8003312:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003314:	2b02      	cmp	r3, #2
 8003316:	d111      	bne.n	800333c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f003 fc7d 	bl	8006c22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	2310      	movs	r3, #16
 8003338:	6093      	str	r3, [r2, #8]
 800333a:	e03a      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	333f      	adds	r3, #63	; 0x3f
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d009      	beq.n	8003364 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	333f      	adds	r3, #63	; 0x3f
 800335e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003360:	2b01      	cmp	r3, #1
 8003362:	d126      	bne.n	80033b2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	440a      	add	r2, r1
 800337a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800337e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003382:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3360      	adds	r3, #96	; 0x60
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	b2d9      	uxtb	r1, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	202c      	movs	r0, #44	; 0x2c
 80033a0:	fb00 f303 	mul.w	r3, r0, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3360      	adds	r3, #96	; 0x60
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f005 fe13 	bl	8008fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d12b      	bne.n	8003412 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3348      	adds	r3, #72	; 0x48
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	202c      	movs	r0, #44	; 0x2c
 80033d0:	fb00 f202 	mul.w	r2, r0, r2
 80033d4:	440a      	add	r2, r1
 80033d6:	3240      	adds	r2, #64	; 0x40
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	fbb3 f3f2 	udiv	r3, r3, r2
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 818e 	beq.w	8003704 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3354      	adds	r3, #84	; 0x54
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	f083 0301 	eor.w	r3, r3, #1
 80033fc:	b2d8      	uxtb	r0, r3
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3354      	adds	r3, #84	; 0x54
 800340c:	4602      	mov	r2, r0
 800340e:	701a      	strb	r2, [r3, #0]
}
 8003410:	e178      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3354      	adds	r3, #84	; 0x54
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	f083 0301 	eor.w	r3, r3, #1
 8003426:	b2d8      	uxtb	r0, r3
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	3354      	adds	r3, #84	; 0x54
 8003436:	4602      	mov	r2, r0
 8003438:	701a      	strb	r2, [r3, #0]
}
 800343a:	e163      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	f040 80f6 	bne.w	8003640 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3361      	adds	r3, #97	; 0x61
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d109      	bne.n	800347c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3360      	adds	r3, #96	; 0x60
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	e0c9      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3361      	adds	r3, #97	; 0x61
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d109      	bne.n	80034a4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3360      	adds	r3, #96	; 0x60
 800349e:	2205      	movs	r2, #5
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e0b5      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3361      	adds	r3, #97	; 0x61
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d009      	beq.n	80034cc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3361      	adds	r3, #97	; 0x61
 80034c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d150      	bne.n	800356e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	335c      	adds	r3, #92	; 0x5c
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	202c      	movs	r0, #44	; 0x2c
 80034e4:	fb00 f303 	mul.w	r3, r0, r3
 80034e8:	440b      	add	r3, r1
 80034ea:	335c      	adds	r3, #92	; 0x5c
 80034ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	335c      	adds	r3, #92	; 0x5c
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d912      	bls.n	8003528 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	212c      	movs	r1, #44	; 0x2c
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	335c      	adds	r3, #92	; 0x5c
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	2204      	movs	r2, #4
 8003524:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003526:	e073      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	3360      	adds	r3, #96	; 0x60
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003550:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003558:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	461a      	mov	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800356c:	e050      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3361      	adds	r3, #97	; 0x61
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d122      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3360      	adds	r3, #96	; 0x60
 8003590:	2202      	movs	r2, #2
 8003592:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e023      	b.n	8003610 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3361      	adds	r3, #97	; 0x61
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b07      	cmp	r3, #7
 80035da:	d119      	bne.n	8003610 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	335c      	adds	r3, #92	; 0x5c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	202c      	movs	r0, #44	; 0x2c
 80035f4:	fb00 f303 	mul.w	r3, r0, r3
 80035f8:	440b      	add	r3, r1
 80035fa:	335c      	adds	r3, #92	; 0x5c
 80035fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	3360      	adds	r3, #96	; 0x60
 800360c:	2204      	movs	r2, #4
 800360e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	2302      	movs	r3, #2
 8003620:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	b2d9      	uxtb	r1, r3
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	202c      	movs	r0, #44	; 0x2c
 800362c:	fb00 f303 	mul.w	r3, r0, r3
 8003630:	4413      	add	r3, r2
 8003632:	3360      	adds	r3, #96	; 0x60
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f005 fccd 	bl	8008fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800363e:	e061      	b.n	8003704 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b10      	cmp	r3, #16
 8003654:	d156      	bne.n	8003704 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	212c      	movs	r1, #44	; 0x2c
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	333f      	adds	r3, #63	; 0x3f
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d111      	bne.n	800368e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	335c      	adds	r3, #92	; 0x5c
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	4611      	mov	r1, r2
 8003686:	4618      	mov	r0, r3
 8003688:	f003 facb 	bl	8006c22 <USB_HC_Halt>
 800368c:	e031      	b.n	80036f2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	333f      	adds	r3, #63	; 0x3f
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	333f      	adds	r3, #63	; 0x3f
 80036b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d11d      	bne.n	80036f2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	335c      	adds	r3, #92	; 0x5c
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d110      	bne.n	80036f2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3361      	adds	r3, #97	; 0x61
 80036de:	2203      	movs	r2, #3
 80036e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	4611      	mov	r1, r2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f003 fa98 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fe:	461a      	mov	r2, r3
 8003700:	2310      	movs	r3, #16
 8003702:	6093      	str	r3, [r2, #8]
}
 8003704:	bf00      	nop
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b04      	cmp	r3, #4
 800373a:	d11a      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	2304      	movs	r3, #4
 800374c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3361      	adds	r3, #97	; 0x61
 800375c:	2206      	movs	r2, #6
 800375e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	4611      	mov	r1, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fa59 	bl	8006c22 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003770:	e331      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4413      	add	r3, r2
 800377a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b20      	cmp	r3, #32
 8003786:	d12e      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	4413      	add	r3, r2
 8003790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003794:	461a      	mov	r2, r3
 8003796:	2320      	movs	r3, #32
 8003798:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	212c      	movs	r1, #44	; 0x2c
 80037a0:	fb01 f303 	mul.w	r3, r1, r3
 80037a4:	4413      	add	r3, r2
 80037a6:	333d      	adds	r3, #61	; 0x3d
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	f040 8313 	bne.w	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	333d      	adds	r3, #61	; 0x3d
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3360      	adds	r3, #96	; 0x60
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fa1f 	bl	8006c22 <USB_HC_Halt>
}
 80037e4:	e2f7      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fc:	d112      	bne.n	8003824 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	461a      	mov	r2, r3
 800380c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003810:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f003 fa00 	bl	8006c22 <USB_HC_Halt>
}
 8003822:	e2d8      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d140      	bne.n	80038bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	335c      	adds	r3, #92	; 0x5c
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385e:	2b40      	cmp	r3, #64	; 0x40
 8003860:	d111      	bne.n	8003886 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	333d      	adds	r3, #61	; 0x3d
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	2340      	movs	r3, #64	; 0x40
 8003884:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	461a      	mov	r2, r3
 8003894:	2301      	movs	r3, #1
 8003896:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3361      	adds	r3, #97	; 0x61
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 f9b4 	bl	8006c22 <USB_HC_Halt>
}
 80038ba:	e28c      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d12c      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3361      	adds	r3, #97	; 0x61
 80038e0:	2204      	movs	r2, #4
 80038e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	333d      	adds	r3, #61	; 0x3d
 80038f2:	2201      	movs	r2, #1
 80038f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	335c      	adds	r3, #92	; 0x5c
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f003 f985 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	461a      	mov	r2, r3
 8003926:	2340      	movs	r3, #64	; 0x40
 8003928:	6093      	str	r3, [r2, #8]
}
 800392a:	e254      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b08      	cmp	r3, #8
 8003940:	d11a      	bne.n	8003978 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2308      	movs	r3, #8
 8003952:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	2205      	movs	r2, #5
 8003964:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f003 f956 	bl	8006c22 <USB_HC_Halt>
}
 8003976:	e22e      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b10      	cmp	r3, #16
 800398c:	d140      	bne.n	8003a10 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	335c      	adds	r3, #92	; 0x5c
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	212c      	movs	r1, #44	; 0x2c
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	3361      	adds	r3, #97	; 0x61
 80039ae:	2203      	movs	r2, #3
 80039b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	333d      	adds	r3, #61	; 0x3d
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d112      	bne.n	80039ec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	333c      	adds	r3, #60	; 0x3c
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d108      	bne.n	80039ec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	333d      	adds	r3, #61	; 0x3d
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 f913 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	6093      	str	r3, [r2, #8]
}
 8003a0e:	e1e2      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d164      	bne.n	8003af0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d111      	bne.n	8003a52 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	3361      	adds	r3, #97	; 0x61
 8003a3c:	2206      	movs	r2, #6
 8003a3e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 f8e9 	bl	8006c22 <USB_HC_Halt>
 8003a50:	e044      	b.n	8003adc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	212c      	movs	r1, #44	; 0x2c
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	335c      	adds	r3, #92	; 0x5c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	202c      	movs	r0, #44	; 0x2c
 8003a6a:	fb00 f303 	mul.w	r3, r0, r3
 8003a6e:	440b      	add	r3, r1
 8003a70:	335c      	adds	r3, #92	; 0x5c
 8003a72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	335c      	adds	r3, #92	; 0x5c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d920      	bls.n	8003aca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	335c      	adds	r3, #92	; 0x5c
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3360      	adds	r3, #96	; 0x60
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	b2d9      	uxtb	r1, r3
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	202c      	movs	r0, #44	; 0x2c
 8003ab6:	fb00 f303 	mul.w	r3, r0, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3360      	adds	r3, #96	; 0x60
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f005 fa88 	bl	8008fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ac8:	e008      	b.n	8003adc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3360      	adds	r3, #96	; 0x60
 8003ad8:	2202      	movs	r2, #2
 8003ada:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	6093      	str	r3, [r2, #8]
}
 8003aee:	e172      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b06:	d11b      	bne.n	8003b40 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3361      	adds	r3, #97	; 0x61
 8003b16:	2208      	movs	r2, #8
 8003b18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 f87c 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	461a      	mov	r2, r3
 8003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3c:	6093      	str	r3, [r2, #8]
}
 8003b3e:	e14a      	b.n	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	f040 813f 	bne.w	8003dd6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	212c      	movs	r1, #44	; 0x2c
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3361      	adds	r3, #97	; 0x61
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d17d      	bne.n	8003c68 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	212c      	movs	r1, #44	; 0x2c
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	3360      	adds	r3, #96	; 0x60
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	212c      	movs	r1, #44	; 0x2c
 8003b84:	fb01 f303 	mul.w	r3, r1, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	333f      	adds	r3, #63	; 0x3f
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d00a      	beq.n	8003ba8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	333f      	adds	r3, #63	; 0x3f
 8003ba0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	f040 8100 	bne.w	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d113      	bne.n	8003bd8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3355      	adds	r3, #85	; 0x55
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2d8      	uxtb	r0, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3355      	adds	r3, #85	; 0x55
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 80e3 	bne.w	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	212c      	movs	r1, #44	; 0x2c
 8003be8:	fb01 f303 	mul.w	r3, r1, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	334c      	adds	r3, #76	; 0x4c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80d8 	beq.w	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	212c      	movs	r1, #44	; 0x2c
 8003bfe:	fb01 f303 	mul.w	r3, r1, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	334c      	adds	r3, #76	; 0x4c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	202c      	movs	r0, #44	; 0x2c
 8003c0e:	fb00 f202 	mul.w	r2, r0, r2
 8003c12:	440a      	add	r2, r1
 8003c14:	3240      	adds	r2, #64	; 0x40
 8003c16:	8812      	ldrh	r2, [r2, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	202c      	movs	r0, #44	; 0x2c
 8003c22:	fb00 f202 	mul.w	r2, r0, r2
 8003c26:	440a      	add	r2, r1
 8003c28:	3240      	adds	r2, #64	; 0x40
 8003c2a:	8812      	ldrh	r2, [r2, #0]
 8003c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 80b5 	beq.w	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3355      	adds	r3, #85	; 0x55
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2d8      	uxtb	r0, r3
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	212c      	movs	r1, #44	; 0x2c
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	4413      	add	r3, r2
 8003c60:	3355      	adds	r3, #85	; 0x55
 8003c62:	4602      	mov	r2, r0
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e09f      	b.n	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3361      	adds	r3, #97	; 0x61
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d109      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	3360      	adds	r3, #96	; 0x60
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e08b      	b.n	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3361      	adds	r3, #97	; 0x61
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d109      	bne.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3360      	adds	r3, #96	; 0x60
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e077      	b.n	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	212c      	movs	r1, #44	; 0x2c
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3361      	adds	r3, #97	; 0x61
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d109      	bne.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3360      	adds	r3, #96	; 0x60
 8003cda:	2205      	movs	r2, #5
 8003cdc:	701a      	strb	r2, [r3, #0]
 8003cde:	e063      	b.n	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	3361      	adds	r3, #97	; 0x61
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d009      	beq.n	8003d08 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	3361      	adds	r3, #97	; 0x61
 8003d02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d14f      	bne.n	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	335c      	adds	r3, #92	; 0x5c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	202c      	movs	r0, #44	; 0x2c
 8003d20:	fb00 f303 	mul.w	r3, r0, r3
 8003d24:	440b      	add	r3, r1
 8003d26:	335c      	adds	r3, #92	; 0x5c
 8003d28:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	335c      	adds	r3, #92	; 0x5c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d912      	bls.n	8003d64 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	212c      	movs	r1, #44	; 0x2c
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	335c      	adds	r3, #92	; 0x5c
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3360      	adds	r3, #96	; 0x60
 8003d5e:	2204      	movs	r2, #4
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e021      	b.n	8003da8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3360      	adds	r3, #96	; 0x60
 8003d72:	2202      	movs	r2, #2
 8003d74:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d8c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d94:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	015a      	lsls	r2, r3, #5
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da2:	461a      	mov	r2, r3
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2302      	movs	r3, #2
 8003db8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	b2d9      	uxtb	r1, r3
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	202c      	movs	r0, #44	; 0x2c
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3360      	adds	r3, #96	; 0x60
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f005 f901 	bl	8008fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003dd6:	bf00      	nop
 8003dd8:	3720      	adds	r7, #32
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b08a      	sub	sp, #40	; 0x28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	0c5b      	lsrs	r3, r3, #17
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e12:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d004      	beq.n	8003e24 <HCD_RXQLVL_IRQHandler+0x46>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	f000 80a9 	beq.w	8003f74 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e22:	e0aa      	b.n	8003f7a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80a6 	beq.w	8003f78 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	3344      	adds	r3, #68	; 0x44
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 809b 	beq.w	8003f78 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	212c      	movs	r1, #44	; 0x2c
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3350      	adds	r3, #80	; 0x50
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	441a      	add	r2, r3
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	202c      	movs	r0, #44	; 0x2c
 8003e5c:	fb00 f303 	mul.w	r3, r0, r3
 8003e60:	440b      	add	r3, r1
 8003e62:	334c      	adds	r3, #76	; 0x4c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d87a      	bhi.n	8003f60 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3344      	adds	r3, #68	; 0x44
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	b292      	uxth	r2, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	f002 fa24 	bl	80062d0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3344      	adds	r3, #68	; 0x44
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	441a      	add	r2, r3
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	202c      	movs	r0, #44	; 0x2c
 8003ea2:	fb00 f303 	mul.w	r3, r0, r3
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3344      	adds	r3, #68	; 0x44
 8003eaa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3350      	adds	r3, #80	; 0x50
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	202c      	movs	r0, #44	; 0x2c
 8003ec6:	fb00 f303 	mul.w	r3, r0, r3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3350      	adds	r3, #80	; 0x50
 8003ece:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	0cdb      	lsrs	r3, r3, #19
 8003ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3340      	adds	r3, #64	; 0x40
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d13c      	bne.n	8003f78 <HCD_RXQLVL_IRQHandler+0x19a>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d039      	beq.n	8003f78 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f22:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	3354      	adds	r3, #84	; 0x54
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	f083 0301 	eor.w	r3, r3, #1
 8003f4a:	b2d8      	uxtb	r0, r3
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3354      	adds	r3, #84	; 0x54
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	701a      	strb	r2, [r3, #0]
      break;
 8003f5e:	e00b      	b.n	8003f78 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3360      	adds	r3, #96	; 0x60
 8003f6e:	2204      	movs	r2, #4
 8003f70:	701a      	strb	r2, [r3, #0]
      break;
 8003f72:	e001      	b.n	8003f78 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003f78:	bf00      	nop
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003fae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d10b      	bne.n	8003fd2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d102      	bne.n	8003fca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f004 ffeb 	bl	8008fa0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d132      	bne.n	8004042 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f043 0308 	orr.w	r3, r3, #8
 8003fe2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d126      	bne.n	800403c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d113      	bne.n	800401e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004000:	d106      	bne.n	8004010 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f002 facf 	bl	80065ac <USB_InitFSLSPClkSel>
 800400e:	e011      	b.n	8004034 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f002 fac8 	bl	80065ac <USB_InitFSLSPClkSel>
 800401c:	e00a      	b.n	8004034 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d106      	bne.n	8004034 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800402c:	461a      	mov	r2, r3
 800402e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004032:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f004 ffdd 	bl	8008ff4 <HAL_HCD_PortEnabled_Callback>
 800403a:	e002      	b.n	8004042 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f004 ffe7 	bl	8009010 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b20      	cmp	r3, #32
 800404a:	d103      	bne.n	8004054 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f043 0320 	orr.w	r3, r3, #32
 8004052:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e12b      	b.n	80042d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7fd f846 	bl	8001120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2224      	movs	r2, #36	; 0x24
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040cc:	f001 fe2a 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
 80040d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4a81      	ldr	r2, [pc, #516]	; (80042dc <HAL_I2C_Init+0x274>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d807      	bhi.n	80040ec <HAL_I2C_Init+0x84>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a80      	ldr	r2, [pc, #512]	; (80042e0 <HAL_I2C_Init+0x278>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bf94      	ite	ls
 80040e4:	2301      	movls	r3, #1
 80040e6:	2300      	movhi	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e006      	b.n	80040fa <HAL_I2C_Init+0x92>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a7d      	ldr	r2, [pc, #500]	; (80042e4 <HAL_I2C_Init+0x27c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	bf94      	ite	ls
 80040f4:	2301      	movls	r3, #1
 80040f6:	2300      	movhi	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0e7      	b.n	80042d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a78      	ldr	r2, [pc, #480]	; (80042e8 <HAL_I2C_Init+0x280>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0c9b      	lsrs	r3, r3, #18
 800410c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4a6a      	ldr	r2, [pc, #424]	; (80042dc <HAL_I2C_Init+0x274>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d802      	bhi.n	800413c <HAL_I2C_Init+0xd4>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	e009      	b.n	8004150 <HAL_I2C_Init+0xe8>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	4a69      	ldr	r2, [pc, #420]	; (80042ec <HAL_I2C_Init+0x284>)
 8004148:	fba2 2303 	umull	r2, r3, r2, r3
 800414c:	099b      	lsrs	r3, r3, #6
 800414e:	3301      	adds	r3, #1
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	495c      	ldr	r1, [pc, #368]	; (80042dc <HAL_I2C_Init+0x274>)
 800416c:	428b      	cmp	r3, r1
 800416e:	d819      	bhi.n	80041a4 <HAL_I2C_Init+0x13c>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e59      	subs	r1, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	fbb1 f3f3 	udiv	r3, r1, r3
 800417e:	1c59      	adds	r1, r3, #1
 8004180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004184:	400b      	ands	r3, r1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_I2C_Init+0x138>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1e59      	subs	r1, r3, #1
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fbb1 f3f3 	udiv	r3, r1, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	e051      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 80041a0:	2304      	movs	r3, #4
 80041a2:	e04f      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d111      	bne.n	80041d0 <HAL_I2C_Init+0x168>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1e58      	subs	r0, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	440b      	add	r3, r1
 80041ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e012      	b.n	80041f6 <HAL_I2C_Init+0x18e>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1e58      	subs	r0, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6859      	ldr	r1, [r3, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	0099      	lsls	r1, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e6:	3301      	adds	r3, #1
 80041e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_I2C_Init+0x196>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e022      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10e      	bne.n	8004224 <HAL_I2C_Init+0x1bc>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1e58      	subs	r0, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6859      	ldr	r1, [r3, #4]
 800420e:	460b      	mov	r3, r1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	440b      	add	r3, r1
 8004214:	fbb0 f3f3 	udiv	r3, r0, r3
 8004218:	3301      	adds	r3, #1
 800421a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004222:	e00f      	b.n	8004244 <HAL_I2C_Init+0x1dc>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1e58      	subs	r0, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6859      	ldr	r1, [r3, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	0099      	lsls	r1, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	fbb0 f3f3 	udiv	r3, r0, r3
 800423a:	3301      	adds	r3, #1
 800423c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	6809      	ldr	r1, [r1, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6911      	ldr	r1, [r2, #16]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68d2      	ldr	r2, [r2, #12]
 800427e:	4311      	orrs	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	430b      	orrs	r3, r1
 8004286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	000186a0 	.word	0x000186a0
 80042e0:	001e847f 	.word	0x001e847f
 80042e4:	003d08ff 	.word	0x003d08ff
 80042e8:	431bde83 	.word	0x431bde83
 80042ec:	10624dd3 	.word	0x10624dd3

080042f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430a:	f7fd fc39 	bl	8001b80 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b20      	cmp	r3, #32
 800431a:	f040 80d9 	bne.w	80044d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2319      	movs	r3, #25
 8004324:	2201      	movs	r2, #1
 8004326:	496d      	ldr	r1, [pc, #436]	; (80044dc <HAL_I2C_Mem_Write+0x1ec>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f971 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004334:	2302      	movs	r3, #2
 8004336:	e0cc      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_I2C_Mem_Write+0x56>
 8004342:	2302      	movs	r3, #2
 8004344:	e0c5      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2240      	movs	r2, #64	; 0x40
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_I2C_Mem_Write+0x1f0>)
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ae:	88f8      	ldrh	r0, [r7, #6]
 80043b0:	893a      	ldrh	r2, [r7, #8]
 80043b2:	8979      	ldrh	r1, [r7, #10]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4603      	mov	r3, r0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 f890 	bl	80044e4 <I2C_RequestMemoryWrite>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d052      	beq.n	8004470 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e081      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f9f2 	bl	80047bc <I2C_WaitOnTXEFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e06b      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	781a      	ldrb	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b04      	cmp	r3, #4
 8004436:	d11b      	bne.n	8004470 <HAL_I2C_Mem_Write+0x180>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d017      	beq.n	8004470 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	3b01      	subs	r3, #1
 800446a:	b29a      	uxth	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1aa      	bne.n	80043ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f9de 	bl	800483e <I2C_WaitOnBTFFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00d      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	2b04      	cmp	r3, #4
 800448e:	d107      	bne.n	80044a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800449e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e016      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	00100002 	.word	0x00100002
 80044e0:	ffff0000 	.word	0xffff0000

080044e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	4603      	mov	r3, r0
 80044f4:	817b      	strh	r3, [r7, #10]
 80044f6:	460b      	mov	r3, r1
 80044f8:	813b      	strh	r3, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	2200      	movs	r2, #0
 8004516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 f878 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00d      	beq.n	8004542 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004534:	d103      	bne.n	800453e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e05f      	b.n	8004602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	492d      	ldr	r1, [pc, #180]	; (800460c <I2C_RequestMemoryWrite+0x128>)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f8b0 	bl	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e04c      	b.n	8004602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004580:	6a39      	ldr	r1, [r7, #32]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f91a 	bl	80047bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00d      	beq.n	80045aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b04      	cmp	r3, #4
 8004594:	d107      	bne.n	80045a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e02b      	b.n	8004602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d105      	bne.n	80045bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045b0:	893b      	ldrh	r3, [r7, #8]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	611a      	str	r2, [r3, #16]
 80045ba:	e021      	b.n	8004600 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045bc:	893b      	ldrh	r3, [r7, #8]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	6a39      	ldr	r1, [r7, #32]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f8f4 	bl	80047bc <I2C_WaitOnTXEFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d107      	bne.n	80045f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e005      	b.n	8004602 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045f6:	893b      	ldrh	r3, [r7, #8]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	00010002 	.word	0x00010002

08004610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004620:	e025      	b.n	800466e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d021      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fd faa9 	bl	8001b80 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d116      	bne.n	800466e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e023      	b.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d10d      	bne.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	43da      	mvns	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	e00c      	b.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	43da      	mvns	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d0b6      	beq.n	8004622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046cc:	e051      	b.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d123      	bne.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e046      	b.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472c:	d021      	beq.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fd fa27 	bl	8001b80 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e020      	b.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10c      	bne.n	8004796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e00b      	b.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	43da      	mvns	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4013      	ands	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d18d      	bne.n	80046ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047c8:	e02d      	b.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f878 	bl	80048c0 <I2C_IsAcknowledgeFailed>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02d      	b.n	8004836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e0:	d021      	beq.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fd f9cd 	bl	8001b80 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d116      	bne.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	2b80      	cmp	r3, #128	; 0x80
 8004832:	d1ca      	bne.n	80047ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800484a:	e02d      	b.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f837 	bl	80048c0 <I2C_IsAcknowledgeFailed>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e02d      	b.n	80048b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004862:	d021      	beq.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004864:	f7fd f98c 	bl	8001b80 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d116      	bne.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e007      	b.n	80048b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d1ca      	bne.n	800484c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d11b      	bne.n	8004910 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e128      	b.n	8004b84 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a90      	ldr	r2, [pc, #576]	; (8004b8c <HAL_I2S_Init+0x26c>)
 800494a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fc fc5d 	bl	800120c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004968:	f023 030f 	bic.w	r3, r3, #15
 800496c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2202      	movs	r2, #2
 8004974:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d060      	beq.n	8004a40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004986:	2310      	movs	r3, #16
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e001      	b.n	8004990 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800498c:	2320      	movs	r3, #32
 800498e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b20      	cmp	r3, #32
 8004996:	d802      	bhi.n	800499e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800499e:	2001      	movs	r0, #1
 80049a0:	f001 fac4 	bl	8005f2c <HAL_RCCEx_GetPeriphCLKFreq>
 80049a4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ae:	d125      	bne.n	80049fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d010      	beq.n	80049da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	3305      	adds	r3, #5
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e01f      	b.n	8004a1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f6:	3305      	adds	r3, #5
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e00e      	b.n	8004a1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a16:	3305      	adds	r3, #5
 8004a18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4a5c      	ldr	r2, [pc, #368]	; (8004b90 <HAL_I2S_Init+0x270>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	08db      	lsrs	r3, r3, #3
 8004a24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	e003      	b.n	8004a48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004a40:	2302      	movs	r3, #2
 8004a42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d902      	bls.n	8004a54 <HAL_I2S_Init+0x134>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	2bff      	cmp	r3, #255	; 0xff
 8004a52:	d907      	bls.n	8004a64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	f043 0210 	orr.w	r2, r3, #16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e08f      	b.n	8004b84 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	ea42 0103 	orr.w	r1, r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a82:	f023 030f 	bic.w	r3, r3, #15
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6851      	ldr	r1, [r2, #4]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6892      	ldr	r2, [r2, #8]
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68d2      	ldr	r2, [r2, #12]
 8004a94:	4311      	orrs	r1, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6992      	ldr	r2, [r2, #24]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d161      	bne.n	8004b74 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a38      	ldr	r2, [pc, #224]	; (8004b94 <HAL_I2S_Init+0x274>)
 8004ab4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a37      	ldr	r2, [pc, #220]	; (8004b98 <HAL_I2S_Init+0x278>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2S_Init+0x1a4>
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <HAL_I2S_Init+0x27c>)
 8004ac2:	e001      	b.n	8004ac8 <HAL_I2S_Init+0x1a8>
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	4932      	ldr	r1, [pc, #200]	; (8004b98 <HAL_I2S_Init+0x278>)
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_I2S_Init+0x1b8>
 8004ad4:	4a31      	ldr	r2, [pc, #196]	; (8004b9c <HAL_I2S_Init+0x27c>)
 8004ad6:	e001      	b.n	8004adc <HAL_I2S_Init+0x1bc>
 8004ad8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004adc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ae0:	f023 030f 	bic.w	r3, r3, #15
 8004ae4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2b      	ldr	r2, [pc, #172]	; (8004b98 <HAL_I2S_Init+0x278>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_I2S_Init+0x1d4>
 8004af0:	4b2a      	ldr	r3, [pc, #168]	; (8004b9c <HAL_I2S_Init+0x27c>)
 8004af2:	e001      	b.n	8004af8 <HAL_I2S_Init+0x1d8>
 8004af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004af8:	2202      	movs	r2, #2
 8004afa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a25      	ldr	r2, [pc, #148]	; (8004b98 <HAL_I2S_Init+0x278>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d101      	bne.n	8004b0a <HAL_I2S_Init+0x1ea>
 8004b06:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <HAL_I2S_Init+0x27c>)
 8004b08:	e001      	b.n	8004b0e <HAL_I2S_Init+0x1ee>
 8004b0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1a:	d003      	beq.n	8004b24 <HAL_I2S_Init+0x204>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	e001      	b.n	8004b30 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b5c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <HAL_I2S_Init+0x278>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d101      	bne.n	8004b6c <HAL_I2S_Init+0x24c>
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <HAL_I2S_Init+0x27c>)
 8004b6a:	e001      	b.n	8004b70 <HAL_I2S_Init+0x250>
 8004b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b70:	897a      	ldrh	r2, [r7, #10]
 8004b72:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	08004e7d 	.word	0x08004e7d
 8004b90:	cccccccd 	.word	0xcccccccd
 8004b94:	08004f91 	.word	0x08004f91
 8004b98:	40003800 	.word	0x40003800
 8004b9c:	40003400 	.word	0x40003400

08004ba0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_I2S_Transmit_DMA+0x1a>
 8004bb4:	88fb      	ldrh	r3, [r7, #6]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e08e      	b.n	8004cdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_I2S_Transmit_DMA+0x2e>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e086      	b.n	8004cdc <HAL_I2S_Transmit_DMA+0x13c>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d005      	beq.n	8004bee <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	e076      	b.n	8004cdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d002      	beq.n	8004c1a <HAL_I2S_Transmit_DMA+0x7a>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d10a      	bne.n	8004c30 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c2e:	e005      	b.n	8004c3c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	88fa      	ldrh	r2, [r7, #6]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	4a28      	ldr	r2, [pc, #160]	; (8004ce4 <HAL_I2S_Transmit_DMA+0x144>)
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <HAL_I2S_Transmit_DMA+0x148>)
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	4a26      	ldr	r2, [pc, #152]	; (8004cec <HAL_I2S_Transmit_DMA+0x14c>)
 8004c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004c5c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004c64:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004c6c:	f7fd f978 	bl	8001f60 <HAL_DMA_Start_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00f      	beq.n	8004c96 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	f043 0208 	orr.w	r2, r3, #8
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e022      	b.n	8004cdc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0202 	orr.w	r2, r2, #2
 8004cd0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	08004d5b 	.word	0x08004d5b
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d77 	.word	0x08004d77

08004cf0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10e      	bne.n	8004d4c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0202 	bic.w	r2, r2, #2
 8004d3c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7fc fd75 	bl	800183c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f7fc fd5b 	bl	8001824 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0203 	bic.w	r2, r2, #3
 8004d92:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	f043 0208 	orr.w	r2, r3, #8
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff ffa5 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b082      	sub	sp, #8
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	881a      	ldrh	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10e      	bne.n	8004e16 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e06:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fc fd13 	bl	800183c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	b292      	uxth	r2, r2
 8004e32:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	1c9a      	adds	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10e      	bne.n	8004e74 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e64:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff3e 	bl	8004cf0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d13a      	bne.n	8004f0e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d109      	bne.n	8004eb6 <I2S_IRQHandler+0x3a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d102      	bne.n	8004eb6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ffb4 	bl	8004e1e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d126      	bne.n	8004f0e <I2S_IRQHandler+0x92>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d11f      	bne.n	8004f0e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004edc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	613b      	str	r3, [r7, #16]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	f043 0202 	orr.w	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff fefb 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d136      	bne.n	8004f88 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d109      	bne.n	8004f38 <I2S_IRQHandler+0xbc>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d102      	bne.n	8004f38 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ff45 	bl	8004dc2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d122      	bne.n	8004f88 <I2S_IRQHandler+0x10c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d11b      	bne.n	8004f88 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f5e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f043 0204 	orr.w	r2, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff febe 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f88:	bf00      	nop
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a92      	ldr	r2, [pc, #584]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d101      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004faa:	4b92      	ldr	r3, [pc, #584]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fac:	e001      	b.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a8b      	ldr	r2, [pc, #556]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004fc8:	4b8a      	ldr	r3, [pc, #552]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fca:	e001      	b.n	8004fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	d004      	beq.n	8004fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f040 8099 	bne.w	800511a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d107      	bne.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f925 	bl	800524c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9c8 	bl	80053ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d13a      	bne.n	800509c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b00      	cmp	r3, #0
 800502e:	d035      	beq.n	800509c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a6e      	ldr	r2, [pc, #440]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800503a:	4b6e      	ldr	r3, [pc, #440]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800503c:	e001      	b.n	8005042 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800503e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4969      	ldr	r1, [pc, #420]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800504a:	428b      	cmp	r3, r1
 800504c:	d101      	bne.n	8005052 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800504e:	4b69      	ldr	r3, [pc, #420]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005050:	e001      	b.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005056:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800505a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800506a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	f043 0202 	orr.w	r2, r3, #2
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fe34 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	f040 80c3 	bne.w	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80bd 	beq.w	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a49      	ldr	r2, [pc, #292]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d101      	bne.n	80050d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050d0:	e001      	b.n	80050d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4944      	ldr	r1, [pc, #272]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050de:	428b      	cmp	r3, r1
 80050e0:	d101      	bne.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050e2:	4b44      	ldr	r3, [pc, #272]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e4:	e001      	b.n	80050ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050f0:	2300      	movs	r3, #0
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f043 0204 	orr.w	r2, r3, #4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fdf6 	bl	8004d04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005118:	e089      	b.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	d107      	bne.n	8005134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8be 	bl	80052b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d107      	bne.n	800514e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f8fd 	bl	8005348 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d12f      	bne.n	80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02a      	beq.n	80051b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005170:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800517e:	e001      	b.n	8005184 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4919      	ldr	r1, [pc, #100]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800518c:	428b      	cmp	r3, r1
 800518e:	d101      	bne.n	8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005190:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005192:	e001      	b.n	8005198 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800519c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f043 0202 	orr.w	r2, r3, #2
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fda6 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d136      	bne.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d031      	beq.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051d8:	e001      	b.n	80051de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80051da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4902      	ldr	r1, [pc, #8]	; (80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051e6:	428b      	cmp	r3, r1
 80051e8:	d106      	bne.n	80051f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80051ea:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051ec:	e006      	b.n	80051fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80051ee:	bf00      	nop
 80051f0:	40003800 	.word	0x40003800
 80051f4:	40003400 	.word	0x40003400
 80051f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005200:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005210:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fd6c 	bl	8004d04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800522c:	e000      	b.n	8005230 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800522e:	bf00      	nop
}
 8005230:	bf00      	nop
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	1c99      	adds	r1, r3, #2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6251      	str	r1, [r2, #36]	; 0x24
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d113      	bne.n	80052a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800528c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ffc9 	bl	8005238 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c99      	adds	r1, r3, #2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6251      	str	r1, [r2, #36]	; 0x24
 80052c2:	8819      	ldrh	r1, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <I2SEx_TxISR_I2SExt+0x90>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <I2SEx_TxISR_I2SExt+0x22>
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <I2SEx_TxISR_I2SExt+0x94>)
 80052d0:	e001      	b.n	80052d6 <I2SEx_TxISR_I2SExt+0x26>
 80052d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d6:	460a      	mov	r2, r1
 80052d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d121      	bne.n	8005336 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <I2SEx_TxISR_I2SExt+0x90>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <I2SEx_TxISR_I2SExt+0x50>
 80052fc:	4b11      	ldr	r3, [pc, #68]	; (8005344 <I2SEx_TxISR_I2SExt+0x94>)
 80052fe:	e001      	b.n	8005304 <I2SEx_TxISR_I2SExt+0x54>
 8005300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	490d      	ldr	r1, [pc, #52]	; (8005340 <I2SEx_TxISR_I2SExt+0x90>)
 800530c:	428b      	cmp	r3, r1
 800530e:	d101      	bne.n	8005314 <I2SEx_TxISR_I2SExt+0x64>
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <I2SEx_TxISR_I2SExt+0x94>)
 8005312:	e001      	b.n	8005318 <I2SEx_TxISR_I2SExt+0x68>
 8005314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005318:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800531c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff81 	bl	8005238 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40003800 	.word	0x40003800
 8005344:	40003400 	.word	0x40003400

08005348 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68d8      	ldr	r0, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	1c99      	adds	r1, r3, #2
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005360:	b282      	uxth	r2, r0
 8005362:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d113      	bne.n	80053a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800538a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff4a 	bl	8005238 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a20      	ldr	r2, [pc, #128]	; (800543c <I2SEx_RxISR_I2SExt+0x90>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d101      	bne.n	80053c2 <I2SEx_RxISR_I2SExt+0x16>
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <I2SEx_RxISR_I2SExt+0x94>)
 80053c0:	e001      	b.n	80053c6 <I2SEx_RxISR_I2SExt+0x1a>
 80053c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053c6:	68d8      	ldr	r0, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	1c99      	adds	r1, r3, #2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053d2:	b282      	uxth	r2, r0
 80053d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d121      	bne.n	8005432 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <I2SEx_RxISR_I2SExt+0x90>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <I2SEx_RxISR_I2SExt+0x50>
 80053f8:	4b11      	ldr	r3, [pc, #68]	; (8005440 <I2SEx_RxISR_I2SExt+0x94>)
 80053fa:	e001      	b.n	8005400 <I2SEx_RxISR_I2SExt+0x54>
 80053fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	490d      	ldr	r1, [pc, #52]	; (800543c <I2SEx_RxISR_I2SExt+0x90>)
 8005408:	428b      	cmp	r3, r1
 800540a:	d101      	bne.n	8005410 <I2SEx_RxISR_I2SExt+0x64>
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <I2SEx_RxISR_I2SExt+0x94>)
 800540e:	e001      	b.n	8005414 <I2SEx_RxISR_I2SExt+0x68>
 8005410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005414:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005418:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7ff ff03 	bl	8005238 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40003800 	.word	0x40003800
 8005440:	40003400 	.word	0x40003400

08005444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e267      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d075      	beq.n	800554e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005462:	4b88      	ldr	r3, [pc, #544]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b04      	cmp	r3, #4
 800546c:	d00c      	beq.n	8005488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800546e:	4b85      	ldr	r3, [pc, #532]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005476:	2b08      	cmp	r3, #8
 8005478:	d112      	bne.n	80054a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800547a:	4b82      	ldr	r3, [pc, #520]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005486:	d10b      	bne.n	80054a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	4b7e      	ldr	r3, [pc, #504]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05b      	beq.n	800554c <HAL_RCC_OscConfig+0x108>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d157      	bne.n	800554c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e242      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a8:	d106      	bne.n	80054b8 <HAL_RCC_OscConfig+0x74>
 80054aa:	4b76      	ldr	r3, [pc, #472]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a75      	ldr	r2, [pc, #468]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	e01d      	b.n	80054f4 <HAL_RCC_OscConfig+0xb0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054c0:	d10c      	bne.n	80054dc <HAL_RCC_OscConfig+0x98>
 80054c2:	4b70      	ldr	r3, [pc, #448]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a6f      	ldr	r2, [pc, #444]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	4b6d      	ldr	r3, [pc, #436]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a6c      	ldr	r2, [pc, #432]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d8:	6013      	str	r3, [r2, #0]
 80054da:	e00b      	b.n	80054f4 <HAL_RCC_OscConfig+0xb0>
 80054dc:	4b69      	ldr	r3, [pc, #420]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a68      	ldr	r2, [pc, #416]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e6:	6013      	str	r3, [r2, #0]
 80054e8:	4b66      	ldr	r3, [pc, #408]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a65      	ldr	r2, [pc, #404]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80054ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fc fb40 	bl	8001b80 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005504:	f7fc fb3c 	bl	8001b80 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	; 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e207      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	4b5b      	ldr	r3, [pc, #364]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f0      	beq.n	8005504 <HAL_RCC_OscConfig+0xc0>
 8005522:	e014      	b.n	800554e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005524:	f7fc fb2c 	bl	8001b80 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800552c:	f7fc fb28 	bl	8001b80 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	; 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e1f3      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800553e:	4b51      	ldr	r3, [pc, #324]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1f0      	bne.n	800552c <HAL_RCC_OscConfig+0xe8>
 800554a:	e000      	b.n	800554e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800554c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d063      	beq.n	8005622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005566:	4b47      	ldr	r3, [pc, #284]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800556e:	2b08      	cmp	r3, #8
 8005570:	d11c      	bne.n	80055ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005572:	4b44      	ldr	r3, [pc, #272]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d116      	bne.n	80055ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800557e:	4b41      	ldr	r3, [pc, #260]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d005      	beq.n	8005596 <HAL_RCC_OscConfig+0x152>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d001      	beq.n	8005596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e1c7      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005596:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4937      	ldr	r1, [pc, #220]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055aa:	e03a      	b.n	8005622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055b4:	4b34      	ldr	r3, [pc, #208]	; (8005688 <HAL_RCC_OscConfig+0x244>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fc fae1 	bl	8001b80 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c2:	f7fc fadd 	bl	8001b80 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e1a8      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d4:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b28      	ldr	r3, [pc, #160]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4925      	ldr	r1, [pc, #148]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	600b      	str	r3, [r1, #0]
 80055f4:	e015      	b.n	8005622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f6:	4b24      	ldr	r3, [pc, #144]	; (8005688 <HAL_RCC_OscConfig+0x244>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fc fac0 	bl	8001b80 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005604:	f7fc fabc 	bl	8001b80 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e187      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005616:	4b1b      	ldr	r3, [pc, #108]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d036      	beq.n	800569c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d016      	beq.n	8005664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <HAL_RCC_OscConfig+0x248>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563c:	f7fc faa0 	bl	8001b80 <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005644:	f7fc fa9c 	bl	8001b80 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e167      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005656:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_OscConfig+0x240>)
 8005658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCC_OscConfig+0x200>
 8005662:	e01b      	b.n	800569c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005664:	4b09      	ldr	r3, [pc, #36]	; (800568c <HAL_RCC_OscConfig+0x248>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800566a:	f7fc fa89 	bl	8001b80 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005670:	e00e      	b.n	8005690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005672:	f7fc fa85 	bl	8001b80 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d907      	bls.n	8005690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e150      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
 8005684:	40023800 	.word	0x40023800
 8005688:	42470000 	.word	0x42470000
 800568c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005690:	4b88      	ldr	r3, [pc, #544]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1ea      	bne.n	8005672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8097 	beq.w	80057d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056aa:	2300      	movs	r3, #0
 80056ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ae:	4b81      	ldr	r3, [pc, #516]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10f      	bne.n	80056da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	4b7d      	ldr	r3, [pc, #500]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	4a7c      	ldr	r2, [pc, #496]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ca:	4b7a      	ldr	r3, [pc, #488]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d6:	2301      	movs	r3, #1
 80056d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056da:	4b77      	ldr	r3, [pc, #476]	; (80058b8 <HAL_RCC_OscConfig+0x474>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d118      	bne.n	8005718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056e6:	4b74      	ldr	r3, [pc, #464]	; (80058b8 <HAL_RCC_OscConfig+0x474>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a73      	ldr	r2, [pc, #460]	; (80058b8 <HAL_RCC_OscConfig+0x474>)
 80056ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056f2:	f7fc fa45 	bl	8001b80 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056fa:	f7fc fa41 	bl	8001b80 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e10c      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570c:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <HAL_RCC_OscConfig+0x474>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d106      	bne.n	800572e <HAL_RCC_OscConfig+0x2ea>
 8005720:	4b64      	ldr	r3, [pc, #400]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	4a63      	ldr	r2, [pc, #396]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	6713      	str	r3, [r2, #112]	; 0x70
 800572c:	e01c      	b.n	8005768 <HAL_RCC_OscConfig+0x324>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b05      	cmp	r3, #5
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x30c>
 8005736:	4b5f      	ldr	r3, [pc, #380]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	4a5e      	ldr	r2, [pc, #376]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 800573c:	f043 0304 	orr.w	r3, r3, #4
 8005740:	6713      	str	r3, [r2, #112]	; 0x70
 8005742:	4b5c      	ldr	r3, [pc, #368]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	4a5b      	ldr	r2, [pc, #364]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	6713      	str	r3, [r2, #112]	; 0x70
 800574e:	e00b      	b.n	8005768 <HAL_RCC_OscConfig+0x324>
 8005750:	4b58      	ldr	r3, [pc, #352]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	4a57      	ldr	r2, [pc, #348]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005756:	f023 0301 	bic.w	r3, r3, #1
 800575a:	6713      	str	r3, [r2, #112]	; 0x70
 800575c:	4b55      	ldr	r3, [pc, #340]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	4a54      	ldr	r2, [pc, #336]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005762:	f023 0304 	bic.w	r3, r3, #4
 8005766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d015      	beq.n	800579c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005770:	f7fc fa06 	bl	8001b80 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005776:	e00a      	b.n	800578e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fc fa02 	bl	8001b80 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e0cb      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	4b49      	ldr	r3, [pc, #292]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ee      	beq.n	8005778 <HAL_RCC_OscConfig+0x334>
 800579a:	e014      	b.n	80057c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579c:	f7fc f9f0 	bl	8001b80 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a4:	f7fc f9ec 	bl	8001b80 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0b5      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ba:	4b3e      	ldr	r3, [pc, #248]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1ee      	bne.n	80057a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057cc:	4b39      	ldr	r3, [pc, #228]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	4a38      	ldr	r2, [pc, #224]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80057d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80a1 	beq.w	8005924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057e2:	4b34      	ldr	r3, [pc, #208]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d05c      	beq.n	80058a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d141      	bne.n	800587a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f6:	4b31      	ldr	r3, [pc, #196]	; (80058bc <HAL_RCC_OscConfig+0x478>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fc f9c0 	bl	8001b80 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005804:	f7fc f9bc 	bl	8001b80 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e087      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69da      	ldr	r2, [r3, #28]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	019b      	lsls	r3, r3, #6
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	3b01      	subs	r3, #1
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	061b      	lsls	r3, r3, #24
 8005846:	491b      	ldr	r1, [pc, #108]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 8005848:	4313      	orrs	r3, r2
 800584a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <HAL_RCC_OscConfig+0x478>)
 800584e:	2201      	movs	r2, #1
 8005850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005852:	f7fc f995 	bl	8001b80 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800585a:	f7fc f991 	bl	8001b80 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e05c      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x416>
 8005878:	e054      	b.n	8005924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <HAL_RCC_OscConfig+0x478>)
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fc f97e 	bl	8001b80 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005888:	f7fc f97a 	bl	8001b80 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e045      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <HAL_RCC_OscConfig+0x470>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0x444>
 80058a6:	e03d      	b.n	8005924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e038      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40007000 	.word	0x40007000
 80058bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <HAL_RCC_OscConfig+0x4ec>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d028      	beq.n	8005920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d121      	bne.n	8005920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d11a      	bne.n	8005920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d111      	bne.n	8005920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	3b01      	subs	r3, #1
 800590a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d107      	bne.n	8005920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d001      	beq.n	8005924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800

08005934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0cc      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005948:	4b68      	ldr	r3, [pc, #416]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d90c      	bls.n	8005970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005956:	4b65      	ldr	r3, [pc, #404]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b63      	ldr	r3, [pc, #396]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e0b8      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d020      	beq.n	80059be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 800598e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059a0:	4b53      	ldr	r3, [pc, #332]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a52      	ldr	r2, [pc, #328]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ac:	4b50      	ldr	r3, [pc, #320]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	494d      	ldr	r1, [pc, #308]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d044      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d107      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d119      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e07f      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d003      	beq.n	80059f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f2:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e06f      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a02:	4b3b      	ldr	r3, [pc, #236]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e067      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a12:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 0203 	bic.w	r2, r3, #3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4934      	ldr	r1, [pc, #208]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a24:	f7fc f8ac 	bl	8001b80 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2c:	f7fc f8a8 	bl	8001b80 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e04f      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	4b2b      	ldr	r3, [pc, #172]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 020c 	and.w	r2, r3, #12
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d1eb      	bne.n	8005a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a54:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d20c      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b22      	ldr	r3, [pc, #136]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b20      	ldr	r3, [pc, #128]	; (8005aec <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e032      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4916      	ldr	r1, [pc, #88]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa6:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	490e      	ldr	r1, [pc, #56]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005aba:	f000 f821 	bl	8005b00 <HAL_RCC_GetSysClockFreq>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	091b      	lsrs	r3, r3, #4
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	490a      	ldr	r1, [pc, #40]	; (8005af4 <HAL_RCC_ClockConfig+0x1c0>)
 8005acc:	5ccb      	ldrb	r3, [r1, r3]
 8005ace:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad2:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_RCC_ClockConfig+0x1c8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc f80c 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40023c00 	.word	0x40023c00
 8005af0:	40023800 	.word	0x40023800
 8005af4:	0800a750 	.word	0x0800a750
 8005af8:	20000004 	.word	0x20000004
 8005afc:	20000008 	.word	0x20000008

08005b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b04:	b094      	sub	sp, #80	; 0x50
 8005b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b10:	2300      	movs	r3, #0
 8005b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b18:	4b79      	ldr	r3, [pc, #484]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f003 030c 	and.w	r3, r3, #12
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d00d      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0x40>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	f200 80e1 	bhi.w	8005cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_RCC_GetSysClockFreq+0x34>
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d003      	beq.n	8005b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b32:	e0db      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b34:	4b73      	ldr	r3, [pc, #460]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b38:	e0db      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b3a:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b3e:	e0d8      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b40:	4b6f      	ldr	r3, [pc, #444]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b4a:	4b6d      	ldr	r3, [pc, #436]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d063      	beq.n	8005c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b56:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	099b      	lsrs	r3, r3, #6
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b68:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b72:	4622      	mov	r2, r4
 8005b74:	462b      	mov	r3, r5
 8005b76:	f04f 0000 	mov.w	r0, #0
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	0159      	lsls	r1, r3, #5
 8005b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b84:	0150      	lsls	r0, r2, #5
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	1a51      	subs	r1, r2, r1
 8005b8e:	6139      	str	r1, [r7, #16]
 8005b90:	4629      	mov	r1, r5
 8005b92:	eb63 0301 	sbc.w	r3, r3, r1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	018b      	lsls	r3, r1, #6
 8005ba8:	4651      	mov	r1, sl
 8005baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bae:	4651      	mov	r1, sl
 8005bb0:	018a      	lsls	r2, r1, #6
 8005bb2:	4651      	mov	r1, sl
 8005bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8005bb8:	4659      	mov	r1, fp
 8005bba:	eb63 0901 	sbc.w	r9, r3, r1
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bd2:	4690      	mov	r8, r2
 8005bd4:	4699      	mov	r9, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	eb18 0303 	adds.w	r3, r8, r3
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	462b      	mov	r3, r5
 8005be0:	eb49 0303 	adc.w	r3, r9, r3
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	f04f 0200 	mov.w	r2, #0
 8005bea:	f04f 0300 	mov.w	r3, #0
 8005bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	024b      	lsls	r3, r1, #9
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	024a      	lsls	r2, r1, #9
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c06:	2200      	movs	r2, #0
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c10:	f7fa fec8 	bl	80009a4 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1c:	e058      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c1e:	4b38      	ldr	r3, [pc, #224]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	099b      	lsrs	r3, r3, #6
 8005c24:	2200      	movs	r2, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	4611      	mov	r1, r2
 8005c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
 8005c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	f04f 0000 	mov.w	r0, #0
 8005c40:	f04f 0100 	mov.w	r1, #0
 8005c44:	0159      	lsls	r1, r3, #5
 8005c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c4a:	0150      	lsls	r0, r2, #5
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4641      	mov	r1, r8
 8005c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c56:	4649      	mov	r1, r9
 8005c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c70:	ebb2 040a 	subs.w	r4, r2, sl
 8005c74:	eb63 050b 	sbc.w	r5, r3, fp
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	00eb      	lsls	r3, r5, #3
 8005c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c86:	00e2      	lsls	r2, r4, #3
 8005c88:	4614      	mov	r4, r2
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	4643      	mov	r3, r8
 8005c8e:	18e3      	adds	r3, r4, r3
 8005c90:	603b      	str	r3, [r7, #0]
 8005c92:	464b      	mov	r3, r9
 8005c94:	eb45 0303 	adc.w	r3, r5, r3
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	028b      	lsls	r3, r1, #10
 8005caa:	4621      	mov	r1, r4
 8005cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	028a      	lsls	r2, r1, #10
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cba:	2200      	movs	r2, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
 8005cbe:	61fa      	str	r2, [r7, #28]
 8005cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cc4:	f7fa fe6e 	bl	80009a4 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4613      	mov	r3, r2
 8005cce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	3301      	adds	r3, #1
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cea:	e002      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3750      	adds	r7, #80	; 0x50
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfe:	bf00      	nop
 8005d00:	40023800 	.word	0x40023800
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	007a1200 	.word	0x007a1200

08005d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d12:	681b      	ldr	r3, [r3, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000004 	.word	0x20000004

08005d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d28:	f7ff fff0 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	0a9b      	lsrs	r3, r3, #10
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4903      	ldr	r1, [pc, #12]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	40023800 	.word	0x40023800
 8005d48:	0800a760 	.word	0x0800a760

08005d4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d038      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d74:	4b68      	ldr	r3, [pc, #416]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7a:	f7fb ff01 	bl	8001b80 <HAL_GetTick>
 8005d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d80:	e008      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d82:	f7fb fefd 	bl	8001b80 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e0bd      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d94:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	019b      	lsls	r3, r3, #6
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	071b      	lsls	r3, r3, #28
 8005db2:	495a      	ldr	r1, [pc, #360]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dba:	4b57      	ldr	r3, [pc, #348]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc0:	f7fb fede 	bl	8001b80 <HAL_GetTick>
 8005dc4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dc8:	f7fb feda 	bl	8001b80 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e09a      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dda:	4b50      	ldr	r3, [pc, #320]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8083 	beq.w	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	4b48      	ldr	r3, [pc, #288]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	4a47      	ldr	r2, [pc, #284]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e02:	6413      	str	r3, [r2, #64]	; 0x40
 8005e04:	4b45      	ldr	r3, [pc, #276]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e10:	4b43      	ldr	r3, [pc, #268]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a42      	ldr	r2, [pc, #264]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e1c:	f7fb feb0 	bl	8001b80 <HAL_GetTick>
 8005e20:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e24:	f7fb feac 	bl	8001b80 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e06c      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e36:	4b3a      	ldr	r3, [pc, #232]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0f0      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e42:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e4a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d02f      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d028      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e60:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e70:	4b2c      	ldr	r3, [pc, #176]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e76:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d114      	bne.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fb fe7a 	bl	8001b80 <HAL_GetTick>
 8005e8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8e:	e00a      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e90:	f7fb fe76 	bl	8001b80 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e034      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0ee      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ebe:	d10d      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005ec0:	4b16      	ldr	r3, [pc, #88]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed4:	4911      	ldr	r1, [pc, #68]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	608b      	str	r3, [r1, #8]
 8005eda:	e005      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005edc:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4a0e      	ldr	r2, [pc, #56]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ee6:	6093      	str	r3, [r2, #8]
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ef4:	4909      	ldr	r1, [pc, #36]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7d1a      	ldrb	r2, [r3, #20]
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005f0c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	42470068 	.word	0x42470068
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40007000 	.word	0x40007000
 8005f24:	42470e40 	.word	0x42470e40
 8005f28:	424711e0 	.word	0x424711e0

08005f2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d140      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f4a:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d005      	beq.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d131      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f60:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f62:	617b      	str	r3, [r7, #20]
          break;
 8005f64:	e031      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f66:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f72:	d109      	bne.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f7e:	4a19      	ldr	r2, [pc, #100]	; (8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	e008      	b.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f9a:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa0:	099b      	lsrs	r3, r3, #6
 8005fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	fb02 f303 	mul.w	r3, r2, r3
 8005fac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb4:	0f1b      	lsrs	r3, r3, #28
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]
          break;
 8005fc2:	e002      	b.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
          break;
 8005fc8:	bf00      	nop
        }
      }
      break;
 8005fca:	bf00      	nop
    }
  }
  return frequency;
 8005fcc:	697b      	ldr	r3, [r7, #20]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	00bb8000 	.word	0x00bb8000
 8005fe4:	007a1200 	.word	0x007a1200
 8005fe8:	00f42400 	.word	0x00f42400

08005fec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fec:	b084      	sub	sp, #16
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	f107 001c 	add.w	r0, r7, #28
 8005ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	2b01      	cmp	r3, #1
 8006002:	d122      	bne.n	800604a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800602c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d105      	bne.n	800603e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f9c0 	bl	80063c4 <USB_CoreReset>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
 8006048:	e01a      	b.n	8006080 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9b4 	bl	80063c4 <USB_CoreReset>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	639a      	str	r2, [r3, #56]	; 0x38
 8006072:	e005      	b.n	8006080 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10b      	bne.n	800609e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f043 0206 	orr.w	r2, r3, #6
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f043 0220 	orr.w	r2, r3, #32
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060aa:	b004      	add	sp, #16
 80060ac:	4770      	bx	lr

080060ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f043 0201 	orr.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 0201 	bic.w	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d115      	bne.n	8006140 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006120:	2001      	movs	r0, #1
 8006122:	f7fb fd39 	bl	8001b98 <HAL_Delay>
      ms++;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3301      	adds	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f93a 	bl	80063a6 <USB_GetMode>
 8006132:	4603      	mov	r3, r0
 8006134:	2b01      	cmp	r3, #1
 8006136:	d01e      	beq.n	8006176 <USB_SetCurrentMode+0x84>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b31      	cmp	r3, #49	; 0x31
 800613c:	d9f0      	bls.n	8006120 <USB_SetCurrentMode+0x2e>
 800613e:	e01a      	b.n	8006176 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d115      	bne.n	8006172 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006152:	2001      	movs	r0, #1
 8006154:	f7fb fd20 	bl	8001b98 <HAL_Delay>
      ms++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f921 	bl	80063a6 <USB_GetMode>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <USB_SetCurrentMode+0x84>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b31      	cmp	r3, #49	; 0x31
 800616e:	d9f0      	bls.n	8006152 <USB_SetCurrentMode+0x60>
 8006170:	e001      	b.n	8006176 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e005      	b.n	8006182 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b32      	cmp	r3, #50	; 0x32
 800617a:	d101      	bne.n	8006180 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e000      	b.n	8006182 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <USB_FlushTxFifo+0x64>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e01b      	b.n	80061e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	daf2      	bge.n	800619a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	019b      	lsls	r3, r3, #6
 80061bc:	f043 0220 	orr.w	r2, r3, #32
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <USB_FlushTxFifo+0x64>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e006      	b.n	80061e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d0f0      	beq.n	80061c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	00030d40 	.word	0x00030d40

080061f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3301      	adds	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a11      	ldr	r2, [pc, #68]	; (8006250 <USB_FlushRxFifo+0x5c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e018      	b.n	8006244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	daf2      	bge.n	8006200 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2210      	movs	r2, #16
 8006222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3301      	adds	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4a08      	ldr	r2, [pc, #32]	; (8006250 <USB_FlushRxFifo+0x5c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e006      	b.n	8006244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b10      	cmp	r3, #16
 8006240:	d0f0      	beq.n	8006224 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	00030d40 	.word	0x00030d40

08006254 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	460b      	mov	r3, r1
 8006264:	71fb      	strb	r3, [r7, #7]
 8006266:	4613      	mov	r3, r2
 8006268:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006272:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d123      	bne.n	80062c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800627a:	88bb      	ldrh	r3, [r7, #4]
 800627c:	3303      	adds	r3, #3
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	e018      	b.n	80062ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	031a      	lsls	r2, r3, #12
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4413      	add	r3, r2
 8006290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006294:	461a      	mov	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	3301      	adds	r3, #1
 80062a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	3301      	adds	r3, #1
 80062a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	3301      	adds	r3, #1
 80062ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	3301      	adds	r3, #1
 80062b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	3301      	adds	r3, #1
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3e2      	bcc.n	8006288 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3724      	adds	r7, #36	; 0x24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b08b      	sub	sp, #44	; 0x2c
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062e6:	88fb      	ldrh	r3, [r7, #6]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062f6:	2300      	movs	r3, #0
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	e014      	b.n	8006326 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	601a      	str	r2, [r3, #0]
    pDest++;
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	3301      	adds	r3, #1
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	3301      	adds	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	3301      	adds	r3, #1
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	3301      	adds	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	3301      	adds	r3, #1
 8006324:	623b      	str	r3, [r7, #32]
 8006326:	6a3a      	ldr	r2, [r7, #32]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3e6      	bcc.n	80062fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800632e:	8bfb      	ldrh	r3, [r7, #30]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01e      	beq.n	8006372 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800633e:	461a      	mov	r2, r3
 8006340:	f107 0310 	add.w	r3, r7, #16
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	701a      	strb	r2, [r3, #0]
      i++;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	3301      	adds	r3, #1
 800635e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	3301      	adds	r3, #1
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006366:	8bfb      	ldrh	r3, [r7, #30]
 8006368:	3b01      	subs	r3, #1
 800636a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800636c:	8bfb      	ldrh	r3, [r7, #30]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1ea      	bne.n	8006348 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006374:	4618      	mov	r0, r3
 8006376:	372c      	adds	r7, #44	; 0x2c
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006398:	68fb      	ldr	r3, [r7, #12]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0301 	and.w	r3, r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
	...

080063c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a13      	ldr	r2, [pc, #76]	; (8006428 <USB_CoreReset+0x64>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d901      	bls.n	80063e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e01b      	b.n	800641a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	daf2      	bge.n	80063d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f043 0201 	orr.w	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3301      	adds	r3, #1
 80063fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <USB_CoreReset+0x64>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d901      	bls.n	800640c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e006      	b.n	800641a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b01      	cmp	r3, #1
 8006416:	d0f0      	beq.n	80063fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	00030d40 	.word	0x00030d40

0800642c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800642c:	b084      	sub	sp, #16
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800643a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d018      	beq.n	80064b4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10a      	bne.n	800649e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006496:	f043 0304 	orr.w	r3, r3, #4
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e014      	b.n	80064c8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ac:	f023 0304 	bic.w	r3, r3, #4
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e009      	b.n	80064c8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c2:	f023 0304 	bic.w	r3, r3, #4
 80064c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064c8:	2110      	movs	r1, #16
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fe5e 	bl	800618c <USB_FlushTxFifo>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff fe8a 	bl	80061f4 <USB_FlushRxFifo>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e015      	b.n	800651c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064fc:	461a      	mov	r2, r3
 80064fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006502:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	461a      	mov	r2, r3
 8006512:	2300      	movs	r3, #0
 8006514:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3301      	adds	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	429a      	cmp	r2, r3
 8006522:	d3e5      	bcc.n	80064f0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006530:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006544:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <USB_HostInit+0x16c>)
 800654a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <USB_HostInit+0x170>)
 8006550:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006554:	e009      	b.n	800656a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2280      	movs	r2, #128	; 0x80
 800655a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <USB_HostInit+0x174>)
 8006560:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a0f      	ldr	r2, [pc, #60]	; (80065a4 <USB_HostInit+0x178>)
 8006566:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f043 0210 	orr.w	r2, r3, #16
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	699a      	ldr	r2, [r3, #24]
 8006580:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <USB_HostInit+0x17c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006594:	b004      	add	sp, #16
 8006596:	4770      	bx	lr
 8006598:	01000200 	.word	0x01000200
 800659c:	00e00300 	.word	0x00e00300
 80065a0:	00600080 	.word	0x00600080
 80065a4:	004000e0 	.word	0x004000e0
 80065a8:	a3200008 	.word	0xa3200008

080065ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d107      	bne.n	80065fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f4:	461a      	mov	r2, r3
 80065f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065fa:	6053      	str	r3, [r2, #4]
 80065fc:	e009      	b.n	8006612 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d106      	bne.n	8006612 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660a:	461a      	mov	r2, r3
 800660c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006610:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006640:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800664a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006650:	2064      	movs	r0, #100	; 0x64
 8006652:	f7fb faa1 	bl	8001b98 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800665e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006662:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006664:	200a      	movs	r0, #10
 8006666:	f7fb fa97 	bl	8001b98 <HAL_Delay>

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006698:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <USB_DriveVbus+0x44>
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d106      	bne.n	80066b8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066c2:	d109      	bne.n	80066d8 <USB_DriveVbus+0x64>
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	0c5b      	lsrs	r3, r3, #17
 8006704:	f003 0303 	and.w	r3, r3, #3
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	b29b      	uxth	r3, r3
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
	...

08006738 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	70fb      	strb	r3, [r7, #3]
 800674a:	460b      	mov	r3, r1
 800674c:	70bb      	strb	r3, [r7, #2]
 800674e:	4613      	mov	r3, r2
 8006750:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800676e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006772:	2b03      	cmp	r3, #3
 8006774:	d87e      	bhi.n	8006874 <USB_HC_Init+0x13c>
 8006776:	a201      	add	r2, pc, #4	; (adr r2, 800677c <USB_HC_Init+0x44>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	0800678d 	.word	0x0800678d
 8006780:	08006837 	.word	0x08006837
 8006784:	0800678d 	.word	0x0800678d
 8006788:	080067f9 	.word	0x080067f9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	461a      	mov	r2, r3
 800679a:	f240 439d 	movw	r3, #1181	; 0x49d
 800679e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da10      	bge.n	80067ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80067c8:	e057      	b.n	800687a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d051      	beq.n	800687a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80067f4:	60d3      	str	r3, [r2, #12]
      break;
 80067f6:	e040      	b.n	800687a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006804:	461a      	mov	r2, r3
 8006806:	f240 639d 	movw	r3, #1693	; 0x69d
 800680a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800680c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006810:	2b00      	cmp	r3, #0
 8006812:	da34      	bge.n	800687e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	440a      	add	r2, r1
 800682a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006832:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006834:	e023      	b.n	800687e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	461a      	mov	r2, r3
 8006844:	f240 2325 	movw	r3, #549	; 0x225
 8006848:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800684a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800684e:	2b00      	cmp	r3, #0
 8006850:	da17      	bge.n	8006882 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4413      	add	r3, r2
 800685a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	440a      	add	r2, r1
 8006868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006870:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006872:	e006      	b.n	8006882 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	77fb      	strb	r3, [r7, #31]
      break;
 8006878:	e004      	b.n	8006884 <USB_HC_Init+0x14c>
      break;
 800687a:	bf00      	nop
 800687c:	e002      	b.n	8006884 <USB_HC_Init+0x14c>
      break;
 800687e:	bf00      	nop
 8006880:	e000      	b.n	8006884 <USB_HC_Init+0x14c>
      break;
 8006882:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	440a      	add	r2, r1
 800689a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800689e:	f043 0302 	orr.w	r3, r3, #2
 80068a2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	2101      	movs	r1, #1
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	6939      	ldr	r1, [r7, #16]
 80068ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068be:	4313      	orrs	r3, r2
 80068c0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da03      	bge.n	80068de <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	e001      	b.n	80068e2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff feff 	bl	80066e6 <USB_GetHostSpeed>
 80068e8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d106      	bne.n	8006900 <USB_HC_Init+0x1c8>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d003      	beq.n	8006900 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e001      	b.n	8006904 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006904:	787b      	ldrb	r3, [r7, #1]
 8006906:	059b      	lsls	r3, r3, #22
 8006908:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800690c:	78bb      	ldrb	r3, [r7, #2]
 800690e:	02db      	lsls	r3, r3, #11
 8006910:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006914:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800691a:	049b      	lsls	r3, r3, #18
 800691c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006920:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006922:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006924:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006928:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	0159      	lsls	r1, r3, #5
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	440b      	add	r3, r1
 8006936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006940:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006942:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006946:	2b03      	cmp	r3, #3
 8006948:	d003      	beq.n	8006952 <USB_HC_Init+0x21a>
 800694a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d10f      	bne.n	8006972 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	440a      	add	r2, r1
 8006968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800696c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006970:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006972:	7ffb      	ldrb	r3, [r7, #31]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b08c      	sub	sp, #48	; 0x30
 8006980:	af02      	add	r7, sp, #8
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	4613      	mov	r3, r2
 8006988:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006998:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d02d      	beq.n	8006a02 <USB_HC_StartXfer+0x86>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d129      	bne.n	8006a02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80069ae:	79fb      	ldrb	r3, [r7, #7]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d117      	bne.n	80069e4 <USB_HC_StartXfer+0x68>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	79db      	ldrb	r3, [r3, #7]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <USB_HC_StartXfer+0x48>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	79db      	ldrb	r3, [r3, #7]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d10f      	bne.n	80069e4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	0151      	lsls	r1, r2, #5
 80069d6:	6a3a      	ldr	r2, [r7, #32]
 80069d8:	440a      	add	r2, r1
 80069da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80069e4:	79fb      	ldrb	r3, [r7, #7]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10b      	bne.n	8006a02 <USB_HC_StartXfer+0x86>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	795b      	ldrb	r3, [r3, #5]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d107      	bne.n	8006a02 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fa0f 	bl	8006e1c <USB_DoPing>
      return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e0f8      	b.n	8006bf4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d018      	beq.n	8006a3c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	8912      	ldrh	r2, [r2, #8]
 8006a12:	4413      	add	r3, r2
 8006a14:	3b01      	subs	r3, #1
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	8912      	ldrh	r2, [r2, #8]
 8006a1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a1e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a22:	8b7b      	ldrh	r3, [r7, #26]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d90b      	bls.n	8006a40 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006a28:	8b7b      	ldrh	r3, [r7, #26]
 8006a2a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	8912      	ldrh	r2, [r2, #8]
 8006a32:	fb03 f202 	mul.w	r2, r3, r2
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	611a      	str	r2, [r3, #16]
 8006a3a:	e001      	b.n	8006a40 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	78db      	ldrb	r3, [r3, #3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	8912      	ldrh	r2, [r2, #8]
 8006a4e:	fb03 f202 	mul.w	r2, r3, r2
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	611a      	str	r2, [r3, #16]
 8006a56:	e003      	b.n	8006a60 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	695a      	ldr	r2, [r3, #20]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a6a:	04d9      	lsls	r1, r3, #19
 8006a6c:	4b63      	ldr	r3, [pc, #396]	; (8006bfc <USB_HC_StartXfer+0x280>)
 8006a6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	7a9b      	ldrb	r3, [r3, #10]
 8006a76:	075b      	lsls	r3, r3, #29
 8006a78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a7c:	69f9      	ldr	r1, [r7, #28]
 8006a7e:	0148      	lsls	r0, r1, #5
 8006a80:	6a39      	ldr	r1, [r7, #32]
 8006a82:	4401      	add	r1, r0
 8006a84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d009      	beq.n	8006aa6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	68d9      	ldr	r1, [r3, #12]
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa2:	460a      	mov	r2, r1
 8006aa4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2301      	moveq	r3, #1
 8006ab8:	2300      	movne	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	6a3a      	ldr	r2, [r7, #32]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006adc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	7e7b      	ldrb	r3, [r7, #25]
 8006aee:	075b      	lsls	r3, r3, #29
 8006af0:	69f9      	ldr	r1, [r7, #28]
 8006af2:	0148      	lsls	r0, r1, #5
 8006af4:	6a39      	ldr	r1, [r7, #32]
 8006af6:	4401      	add	r1, r0
 8006af8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006afc:	4313      	orrs	r3, r2
 8006afe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b16:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	78db      	ldrb	r3, [r3, #3]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d004      	beq.n	8006b2a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	613b      	str	r3, [r7, #16]
 8006b28:	e003      	b.n	8006b32 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b30:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b38:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	461a      	mov	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e04e      	b.n	8006bf4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	78db      	ldrb	r3, [r3, #3]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d149      	bne.n	8006bf2 <USB_HC_StartXfer+0x276>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d045      	beq.n	8006bf2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	79db      	ldrb	r3, [r3, #7]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d830      	bhi.n	8006bd0 <USB_HC_StartXfer+0x254>
 8006b6e:	a201      	add	r2, pc, #4	; (adr r2, 8006b74 <USB_HC_StartXfer+0x1f8>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006ba9 	.word	0x08006ba9
 8006b7c:	08006b85 	.word	0x08006b85
 8006b80:	08006ba9 	.word	0x08006ba9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	3303      	adds	r3, #3
 8006b8a:	089b      	lsrs	r3, r3, #2
 8006b8c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b8e:	8afa      	ldrh	r2, [r7, #22]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d91c      	bls.n	8006bd4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f043 0220 	orr.w	r2, r3, #32
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ba6:	e015      	b.n	8006bd4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	3303      	adds	r3, #3
 8006bae:	089b      	lsrs	r3, r3, #2
 8006bb0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bb2:	8afa      	ldrh	r2, [r7, #22]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d90a      	bls.n	8006bd8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bce:	e003      	b.n	8006bd8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006bd0:	bf00      	nop
 8006bd2:	e002      	b.n	8006bda <USB_HC_StartXfer+0x25e>
        break;
 8006bd4:	bf00      	nop
 8006bd6:	e000      	b.n	8006bda <USB_HC_StartXfer+0x25e>
        break;
 8006bd8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	68d9      	ldr	r1, [r3, #12]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	785a      	ldrb	r2, [r3, #1]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2000      	movs	r0, #0
 8006bea:	9000      	str	r0, [sp, #0]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fb31 	bl	8006254 <USB_WritePacket>
  }

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3728      	adds	r7, #40	; 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	1ff80000 	.word	0x1ff80000

08006c00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	b29b      	uxth	r3, r3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b089      	sub	sp, #36	; 0x24
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	0c9b      	lsrs	r3, r3, #18
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	0fdb      	lsrs	r3, r3, #31
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d104      	bne.n	8006c7c <USB_HC_Halt+0x5a>
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e0c8      	b.n	8006e0e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <USB_HC_Halt+0x66>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d163      	bne.n	8006d50 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ca6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f040 80ab 	bne.w	8006e0c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d133      	bne.n	8006d2a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d00:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d0e:	d81d      	bhi.n	8006d4c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d26:	d0ec      	beq.n	8006d02 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d28:	e070      	b.n	8006e0c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	0151      	lsls	r1, r2, #5
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	440a      	add	r2, r1
 8006d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d4a:	e05f      	b.n	8006e0c <USB_HC_Halt+0x1ea>
            break;
 8006d4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d4e:	e05d      	b.n	8006e0c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d133      	bne.n	8006de8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dbe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dcc:	d81d      	bhi.n	8006e0a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de4:	d0ec      	beq.n	8006dc0 <USB_HC_Halt+0x19e>
 8006de6:	e011      	b.n	8006e0c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e06:	6013      	str	r3, [r2, #0]
 8006e08:	e000      	b.n	8006e0c <USB_HC_Halt+0x1ea>
          break;
 8006e0a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3724      	adds	r7, #36	; 0x24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e30:	2301      	movs	r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	04da      	lsls	r2, r3, #19
 8006e38:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <USB_DoPing+0x74>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e4c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e64:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e6c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	1ff80000 	.word	0x1ff80000

08006e94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b088      	sub	sp, #32
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f911 	bl	80060d0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006eae:	2110      	movs	r1, #16
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff f96b 	bl	800618c <USB_FlushTxFifo>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff f997 	bl	80061f4 <USB_FlushRxFifo>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	e01f      	b.n	8006f16 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006efc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	3301      	adds	r3, #1
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b0f      	cmp	r3, #15
 8006f1a:	d9dc      	bls.n	8006ed6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	e034      	b.n	8006f8c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f38:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	461a      	mov	r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f68:	d80c      	bhi.n	8006f84 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f80:	d0ec      	beq.n	8006f5c <USB_StopHost+0xc8>
 8006f82:	e000      	b.n	8006f86 <USB_StopHost+0xf2>
        break;
 8006f84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d9c7      	bls.n	8006f22 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fa6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff f880 	bl	80060ae <USB_EnableGlobalInt>

  return ret;
 8006fae:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBH_MIDI_InterfaceInit>:
 *         The function init the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_InterfaceInit (USBH_HandleTypeDef *phost)
{	
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	6078      	str	r0, [r7, #4]

	USBH_StatusTypeDef status = USBH_FAIL ;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	73fb      	strb	r3, [r7, #15]
	uint8_t interface = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle;

	//USB_MIDI_ChangeConnectionState(0);

	interface = USBH_FindInterface(phost, USB_AUDIO_CLASS, USB_MIDISTREAMING_SubCLASS, 0xFF);
 8006fc8:	23ff      	movs	r3, #255	; 0xff
 8006fca:	2203      	movs	r2, #3
 8006fcc:	2101      	movs	r1, #1
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fb93 	bl	80076fa <USBH_FindInterface>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]

	if(interface == 0xFF) /* No Valid Interface */
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2bff      	cmp	r3, #255	; 0xff
 8006fdc:	d102      	bne.n	8006fe4 <USBH_MIDI_InterfaceInit+0x2c>
	{
	  USBH_DbgLog ("Cannot Find the interface for MIDI Interface Class.");
	  USBH_DbgLog (phost->pActiveClass->Name);
	  status = USBH_FAIL;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	73fb      	strb	r3, [r7, #15]
 8006fe2:	e0fc      	b.n	80071de <USBH_MIDI_InterfaceInit+0x226>
	}
	else
	{
		USBH_SelectInterface (phost, interface);
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fb6a 	bl	80076c2 <USBH_SelectInterface>

		phost->pActiveClass->pData = (MIDI_HandleTypeDef *)USBH_malloc (sizeof(MIDI_HandleTypeDef));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 8006ff4:	201c      	movs	r0, #28
 8006ff6:	f002 fa37 	bl	8009468 <malloc>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	61e3      	str	r3, [r4, #28]
		MIDI_Handle =  (MIDI_HandleTypeDef *)phost->pActiveClass->pData;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	60bb      	str	r3, [r7, #8]
		
		if (MIDI_Handle == NULL)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <USBH_MIDI_InterfaceInit+0x5a>
		{
			USBH_DbgLog("Cannot allocate memory for MIDI Handle");
			return USBH_FAIL;
 800700e:	2302      	movs	r3, #2
 8007010:	e0e6      	b.n	80071e0 <USBH_MIDI_InterfaceInit+0x228>
		}

		USBH_memset(MIDI_Handle, 0, sizeof(MIDI_HandleTypeDef)); // clear memory for MIDI_Handle 		
 8007012:	221c      	movs	r2, #28
 8007014:	2100      	movs	r1, #0
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f002 fa36 	bl	8009488 <memset>

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007022:	4619      	mov	r1, r3
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	231a      	movs	r3, #26
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	4413      	add	r3, r2
 800702e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b25b      	sxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	da1c      	bge.n	8007074 <USBH_MIDI_InterfaceInit+0xbc>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007040:	4619      	mov	r1, r3
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	231a      	movs	r3, #26
 8007046:	fb01 f303 	mul.w	r3, r1, r3
 800704a:	4413      	add	r3, r2
 800704c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007050:	781a      	ldrb	r2, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800705c:	4619      	mov	r1, r3
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	231a      	movs	r3, #26
 8007062:	fb01 f303 	mul.w	r3, r1, r3
 8007066:	4413      	add	r3, r2
 8007068:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800706c:	881a      	ldrh	r2, [r3, #0]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	811a      	strh	r2, [r3, #8]
 8007072:	e01b      	b.n	80070ac <USBH_MIDI_InterfaceInit+0xf4>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800707a:	4619      	mov	r1, r3
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	231a      	movs	r3, #26
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	4413      	add	r3, r2
 8007086:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007096:	4619      	mov	r1, r3
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	231a      	movs	r3, #26
 800709c:	fb01 f303 	mul.w	r3, r1, r3
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070a6:	881a      	ldrh	r2, [r3, #0]
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	80da      	strh	r2, [r3, #6]
		}

		if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80070b2:	4619      	mov	r1, r3
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	231a      	movs	r3, #26
 80070b8:	fb01 f303 	mul.w	r3, r1, r3
 80070bc:	4413      	add	r3, r2
 80070be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	b25b      	sxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da1c      	bge.n	8007104 <USBH_MIDI_InterfaceInit+0x14c>
		{
			MIDI_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80070d0:	4619      	mov	r1, r3
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	231a      	movs	r3, #26
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	4413      	add	r3, r2
 80070dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	711a      	strb	r2, [r3, #4]
			MIDI_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 80070ec:	4619      	mov	r1, r3
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	231a      	movs	r3, #26
 80070f2:	fb01 f303 	mul.w	r3, r1, r3
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070fc:	881a      	ldrh	r2, [r3, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	811a      	strh	r2, [r3, #8]
 8007102:	e01b      	b.n	800713c <USBH_MIDI_InterfaceInit+0x184>
		}
		else
		{
			MIDI_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800710a:	4619      	mov	r1, r3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	231a      	movs	r3, #26
 8007110:	fb01 f303 	mul.w	r3, r1, r3
 8007114:	4413      	add	r3, r2
 8007116:	f203 3356 	addw	r3, r3, #854	; 0x356
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	70da      	strb	r2, [r3, #3]
			MIDI_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007126:	4619      	mov	r1, r3
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	231a      	movs	r3, #26
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007136:	881a      	ldrh	r2, [r3, #0]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	80da      	strh	r2, [r3, #6]
		}

		MIDI_Handle->OutPipe = USBH_AllocPipe(phost, MIDI_Handle->OutEp);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	78db      	ldrb	r3, [r3, #3]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fdf7 	bl	8008d36 <USBH_AllocPipe>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	709a      	strb	r2, [r3, #2]
		MIDI_Handle->InPipe = USBH_AllocPipe(phost, MIDI_Handle->InEp);
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	791b      	ldrb	r3, [r3, #4]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fded 	bl	8008d36 <USBH_AllocPipe>
 800715c:	4603      	mov	r3, r0
 800715e:	461a      	mov	r2, r3
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	705a      	strb	r2, [r3, #1]


		/* Open the new channels */
		USBH_OpenPipe  (phost,
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	7899      	ldrb	r1, [r3, #2]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	78d8      	ldrb	r0, [r3, #3]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	88d2      	ldrh	r2, [r2, #6]
 800717c:	9202      	str	r2, [sp, #8]
 800717e:	2202      	movs	r2, #2
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4623      	mov	r3, r4
 8007186:	4602      	mov	r2, r0
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fda5 	bl	8008cd8 <USBH_OpenPipe>
				phost->device.address,
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->OutEpSize);

		USBH_OpenPipe  (phost,
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	7859      	ldrb	r1, [r3, #1]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	7918      	ldrb	r0, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	8912      	ldrh	r2, [r2, #8]
 80071a6:	9202      	str	r2, [sp, #8]
 80071a8:	2202      	movs	r2, #2
 80071aa:	9201      	str	r2, [sp, #4]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	4623      	mov	r3, r4
 80071b0:	4602      	mov	r2, r0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fd90 	bl	8008cd8 <USBH_OpenPipe>
				phost->device.speed,
				USB_EP_TYPE_BULK,
				MIDI_Handle->InEpSize);

		//USB_MIDI_ChangeConnectionState(1);
		MIDI_Handle->state = MIDI_IDLE_STATE;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]


		USBH_LL_SetToggle  (phost, MIDI_Handle->InPipe,0);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	2200      	movs	r2, #0
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f002 f8a0 	bl	800930c <USBH_LL_SetToggle>
		USBH_LL_SetToggle  (phost, MIDI_Handle->OutPipe,0);
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	789b      	ldrb	r3, [r3, #2]
 80071d0:	2200      	movs	r2, #0
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f002 f899 	bl	800930c <USBH_LL_SetToggle>
		status = USBH_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd90      	pop	{r4, r7, pc}

080071e8 <USBH_MIDI_InterfaceDeInit>:
 *         The function DeInit the Pipes used for the MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
USBH_StatusTypeDef USBH_MIDI_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	60fb      	str	r3, [r7, #12]

	if ( MIDI_Handle->OutPipe)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	789b      	ldrb	r3, [r3, #2]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00e      	beq.n	8007220 <USBH_MIDI_InterfaceDeInit+0x38>
	{
		USBH_ClosePipe(phost, MIDI_Handle->OutPipe);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	789b      	ldrb	r3, [r3, #2]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fd84 	bl	8008d16 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->OutPipe);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	789b      	ldrb	r3, [r3, #2]
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fdb0 	bl	8008d7a <USBH_FreePipe>
		MIDI_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	709a      	strb	r2, [r3, #2]
	}

	if ( MIDI_Handle->InPipe)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	785b      	ldrb	r3, [r3, #1]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <USBH_MIDI_InterfaceDeInit+0x5e>
	{
		USBH_ClosePipe(phost, MIDI_Handle->InPipe);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fd71 	bl	8008d16 <USBH_ClosePipe>
		USBH_FreePipe  (phost, MIDI_Handle->InPipe);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	785b      	ldrb	r3, [r3, #1]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fd9d 	bl	8008d7a <USBH_FreePipe>
		MIDI_Handle->InPipe = 0;     /* Reset the Channel as Free */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	705a      	strb	r2, [r3, #1]
	}

	if(phost->pActiveClass->pData)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <USBH_MIDI_InterfaceDeInit+0x82>
	{
		USBH_free (phost->pActiveClass->pData);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	4618      	mov	r0, r3
 800725c:	f002 f90c 	bl	8009478 <free>
		phost->pActiveClass->pData = 0;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007266:	2200      	movs	r2, #0
 8007268:	61da      	str	r2, [r3, #28]
	}

	return USBH_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBH_MIDI_ClassRequest>:
 *         for MIDI class.
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_ClassRequest (USBH_HandleTypeDef *phost)
{   
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

	phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007282:	2102      	movs	r1, #2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3

	return USBH_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBH_MIDI_Process>:
 *         (background process)
 * @param  phost: Host handle
 * @retval USBH Status
 */
static USBH_StatusTypeDef USBH_MIDI_Process (USBH_HandleTypeDef *phost)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
	USBH_StatusTypeDef status = USBH_BUSY;
 800729a:	2301      	movs	r3, #1
 800729c:	73fb      	strb	r3, [r7, #15]
	USBH_StatusTypeDef req_status = USBH_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73bb      	strb	r3, [r7, #14]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	60bb      	str	r3, [r7, #8]

	switch(MIDI_Handle->state)
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d010      	beq.n	80072d6 <USBH_MIDI_Process+0x44>
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	dc1b      	bgt.n	80072f0 <USBH_MIDI_Process+0x5e>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <USBH_MIDI_Process+0x30>
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d003      	beq.n	80072c8 <USBH_MIDI_Process+0x36>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
		}
		break;

	default:
		break;
 80072c0:	e016      	b.n	80072f0 <USBH_MIDI_Process+0x5e>
		status = USBH_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
		break;
 80072c6:	e016      	b.n	80072f6 <USBH_MIDI_Process+0x64>
		MIDI_ProcessTransmission(phost);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f86b 	bl	80073a4 <MIDI_ProcessTransmission>
		MIDI_ProcessReception(phost);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8d9 	bl	8007486 <MIDI_ProcessReception>
		break;
 80072d4:	e00f      	b.n	80072f6 <USBH_MIDI_Process+0x64>
		req_status = USBH_ClrFeature(phost, 0x00);
 80072d6:	2100      	movs	r1, #0
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 ffde 	bl	800829a <USBH_ClrFeature>
 80072de:	4603      	mov	r3, r0
 80072e0:	73bb      	strb	r3, [r7, #14]
		if(req_status == USBH_OK )
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <USBH_MIDI_Process+0x62>
			MIDI_Handle->state = MIDI_IDLE_STATE ;
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
		break;
 80072ee:	e001      	b.n	80072f4 <USBH_MIDI_Process+0x62>
		break;
 80072f0:	bf00      	nop
 80072f2:	e000      	b.n	80072f6 <USBH_MIDI_Process+0x64>
		break;
 80072f4:	bf00      	nop

	}

	return status;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBH_MIDI_SOFProcess>:
  *         The function is for managing SOF callback 
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MIDI_SOFProcess (USBH_HandleTypeDef *phost)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return USBH_OK;  
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr

08007316 <USBH_MIDI_GetLastReceivedDataSize>:
 * @brief  This function return last recieved data size
 * @param  None
 * @retval None
 */
uint16_t USBH_MIDI_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	60fb      	str	r3, [r7, #12]

	if(phost->gState == HOST_CLASS)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b0b      	cmp	r3, #11
 8007330:	d108      	bne.n	8007344 <USBH_MIDI_GetLastReceivedDataSize+0x2e>
	{
		return USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 ff2b 	bl	8009194 <USBH_LL_GetLastXferSize>
 800733e:	4603      	mov	r3, r0
 8007340:	b29b      	uxth	r3, r3
 8007342:	e000      	b.n	8007346 <USBH_MIDI_GetLastReceivedDataSize+0x30>
	}
	else
	{
		return 0;
 8007344:	2300      	movs	r3, #0
	}
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBH_MIDI_Receive>:
 * @brief  This function prepares the state before issuing the class specific commands
 * @param  None
 * @retval None
 */
USBH_StatusTypeDef  USBH_MIDI_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint16_t length)
{
 800734e:	b480      	push	{r7}
 8007350:	b087      	sub	sp, #28
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	4613      	mov	r3, r2
 800735a:	80fb      	strh	r3, [r7, #6]
	USBH_StatusTypeDef Status = USBH_BUSY;
 800735c:	2301      	movs	r3, #1
 800735e:	75fb      	strb	r3, [r7, #23]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	613b      	str	r3, [r7, #16]

	if((MIDI_Handle->state == MIDI_IDLE_STATE) || (MIDI_Handle->state == MIDI_TRANSFER_DATA))
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <USBH_MIDI_Receive+0x2c>
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d10d      	bne.n	8007396 <USBH_MIDI_Receive+0x48>
	{
		MIDI_Handle->pRxData = pbuff;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	611a      	str	r2, [r3, #16]
		MIDI_Handle->RxDataLength = length;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	82da      	strh	r2, [r3, #22]
		MIDI_Handle->state = MIDI_TRANSFER_DATA;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	2201      	movs	r2, #1
 800738a:	701a      	strb	r2, [r3, #0]
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2203      	movs	r2, #3
 8007390:	765a      	strb	r2, [r3, #25]
		Status = USBH_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	75fb      	strb	r3, [r7, #23]
#if (USBH_USE_OS == 1)
		osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
	}
	return Status;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
}
 8007398:	4618      	mov	r0, r3
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <MIDI_ProcessTransmission>:
 * @brief  The function is responsible for sending data to the device
 *  @param  pdev: Selected device
 * @retval None
 */
static void MIDI_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	72fb      	strb	r3, [r7, #11]

	switch(MIDI_Handle->data_tx_state)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	7e1b      	ldrb	r3, [r3, #24]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d002      	beq.n	80073c8 <MIDI_ProcessTransmission+0x24>
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d021      	beq.n	800740a <MIDI_ProcessTransmission+0x66>
			osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif
		}
		break;
	default:
		break;
 80073c6:	e05a      	b.n	800747e <MIDI_ProcessTransmission+0xda>
		if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8a9a      	ldrh	r2, [r3, #20]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d90b      	bls.n	80073ec <MIDI_ProcessTransmission+0x48>
			USBH_BulkSendData (phost,
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68d9      	ldr	r1, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88da      	ldrh	r2, [r3, #6]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	789b      	ldrb	r3, [r3, #2]
 80073e0:	2001      	movs	r0, #1
 80073e2:	9000      	str	r0, [sp, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fc34 	bl	8008c52 <USBH_BulkSendData>
 80073ea:	e00a      	b.n	8007402 <MIDI_ProcessTransmission+0x5e>
			USBH_BulkSendData (phost,
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	68d9      	ldr	r1, [r3, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8a9a      	ldrh	r2, [r3, #20]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	789b      	ldrb	r3, [r3, #2]
 80073f8:	2001      	movs	r0, #1
 80073fa:	9000      	str	r0, [sp, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 fc28 	bl	8008c52 <USBH_BulkSendData>
		MIDI_Handle->data_tx_state = MIDI_SEND_DATA_WAIT;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	761a      	strb	r2, [r3, #24]
		break;
 8007408:	e039      	b.n	800747e <MIDI_ProcessTransmission+0xda>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->OutPipe);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	789b      	ldrb	r3, [r3, #2]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 ff51 	bl	80092b8 <USBH_LL_GetURBState>
 8007416:	4603      	mov	r3, r0
 8007418:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d127      	bne.n	8007470 <MIDI_ProcessTransmission+0xcc>
			if(MIDI_Handle->TxDataLength > MIDI_Handle->OutEpSize)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8a9a      	ldrh	r2, [r3, #20]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	88db      	ldrh	r3, [r3, #6]
 8007428:	429a      	cmp	r2, r3
 800742a:	d90f      	bls.n	800744c <MIDI_ProcessTransmission+0xa8>
				MIDI_Handle->TxDataLength -= MIDI_Handle->OutEpSize ;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8a9a      	ldrh	r2, [r3, #20]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88db      	ldrh	r3, [r3, #6]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	829a      	strh	r2, [r3, #20]
				MIDI_Handle->pTxData += MIDI_Handle->OutEpSize;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	88d2      	ldrh	r2, [r2, #6]
 8007444:	441a      	add	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	e002      	b.n	8007452 <MIDI_ProcessTransmission+0xae>
				MIDI_Handle->TxDataLength = 0;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	829a      	strh	r2, [r3, #20]
			if( MIDI_Handle->TxDataLength > 0)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8a9b      	ldrh	r3, [r3, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <MIDI_ProcessTransmission+0xbe>
				MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	761a      	strb	r2, [r3, #24]
		break;
 8007460:	e00c      	b.n	800747c <MIDI_ProcessTransmission+0xd8>
				MIDI_Handle->data_tx_state = MIDI_IDLE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	761a      	strb	r2, [r3, #24]
				USBH_MIDI_TransmitCallback(phost);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f866 	bl	800753a <USBH_MIDI_TransmitCallback>
		break;
 800746e:	e005      	b.n	800747c <MIDI_ProcessTransmission+0xd8>
		else if( URB_Status == USBH_URB_NOTREADY )
 8007470:	7afb      	ldrb	r3, [r7, #11]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d102      	bne.n	800747c <MIDI_ProcessTransmission+0xd8>
			MIDI_Handle->data_tx_state = MIDI_SEND_DATA;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	761a      	strb	r2, [r3, #24]
		break;
 800747c:	bf00      	nop
	}
}
 800747e:	bf00      	nop
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <MIDI_ProcessReception>:
 *  @param  pdev: Selected device
 * @retval None
 */

static void MIDI_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
	MIDI_HandleTypeDef *MIDI_Handle =  phost->pActiveClass->pData;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	60fb      	str	r3, [r7, #12]
	USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007498:	2300      	movs	r3, #0
 800749a:	72fb      	strb	r3, [r7, #11]
	uint16_t length;

	switch(MIDI_Handle->data_rx_state)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	7e5b      	ldrb	r3, [r3, #25]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d002      	beq.n	80074aa <MIDI_ProcessReception+0x24>
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d00d      	beq.n	80074c4 <MIDI_ProcessReception+0x3e>
#endif
		}
		break;

	default:
		break;
 80074a8:	e043      	b.n	8007532 <MIDI_ProcessReception+0xac>
		USBH_BulkReceiveData (phost,
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6919      	ldr	r1, [r3, #16]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	891a      	ldrh	r2, [r3, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 fbf0 	bl	8008c9c <USBH_BulkReceiveData>
		MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA_WAIT;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2204      	movs	r2, #4
 80074c0:	765a      	strb	r2, [r3, #25]
		break;
 80074c2:	e036      	b.n	8007532 <MIDI_ProcessReception+0xac>
		URB_Status = USBH_LL_GetURBState(phost, MIDI_Handle->InPipe);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fef4 	bl	80092b8 <USBH_LL_GetURBState>
 80074d0:	4603      	mov	r3, r0
 80074d2:	72fb      	strb	r3, [r7, #11]
		if(URB_Status == USBH_URB_DONE )
 80074d4:	7afb      	ldrb	r3, [r7, #11]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d12a      	bne.n	8007530 <MIDI_ProcessReception+0xaa>
			length = USBH_LL_GetLastXferSize(phost, MIDI_Handle->InPipe);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fe57 	bl	8009194 <USBH_LL_GetLastXferSize>
 80074e6:	4603      	mov	r3, r0
 80074e8:	813b      	strh	r3, [r7, #8]
			if(((MIDI_Handle->RxDataLength - length) > 0) && (length > MIDI_Handle->InEpSize))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8adb      	ldrh	r3, [r3, #22]
 80074ee:	461a      	mov	r2, r3
 80074f0:	893b      	ldrh	r3, [r7, #8]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	dd15      	ble.n	8007524 <MIDI_ProcessReception+0x9e>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	891b      	ldrh	r3, [r3, #8]
 80074fc:	893a      	ldrh	r2, [r7, #8]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d910      	bls.n	8007524 <MIDI_ProcessReception+0x9e>
				MIDI_Handle->RxDataLength -= length ;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8ada      	ldrh	r2, [r3, #22]
 8007506:	893b      	ldrh	r3, [r7, #8]
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	82da      	strh	r2, [r3, #22]
				MIDI_Handle->pRxData += length;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	893b      	ldrh	r3, [r7, #8]
 8007516:	441a      	add	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	611a      	str	r2, [r3, #16]
				MIDI_Handle->data_rx_state = MIDI_RECEIVE_DATA;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2203      	movs	r2, #3
 8007520:	765a      	strb	r2, [r3, #25]
		break;
 8007522:	e005      	b.n	8007530 <MIDI_ProcessReception+0xaa>
				MIDI_Handle->data_rx_state = MIDI_IDLE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	765a      	strb	r2, [r3, #25]
				USBH_MIDI_ReceiveCallback(phost);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fa f85a 	bl	80015e4 <USBH_MIDI_ReceiveCallback>
		break;
 8007530:	bf00      	nop
	}
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_MIDI_TransmitCallback>:
 * @brief  The function informs user that data have been transmitted.
 *  @param  pdev: Selected device
 * @retval None
 */
__weak void USBH_MIDI_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]

}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b084      	sub	sp, #16
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	4613      	mov	r3, r2
 800755a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007562:	2302      	movs	r3, #2
 8007564:	e029      	b.n	80075ba <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	79fa      	ldrb	r2, [r7, #7]
 800756a:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 f81f 	bl	80075c2 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f001 fd3a 	bl	800902c <USBH_LL_Init>

  return USBH_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e00a      	b.n	80075ea <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	2200      	movs	r2, #0
 80075e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b0f      	cmp	r3, #15
 80075ee:	d9f1      	bls.n	80075d4 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e009      	b.n	800760a <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007610:	d3f1      	bcc.n	80075f6 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2240      	movs	r2, #64	; 0x40
 8007636:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d017      	beq.n	80076b0 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10f      	bne.n	80076aa <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007690:	1c59      	adds	r1, r3, #1
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	f503 7389 	add.w	r3, r3, #274	; 0x112
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
 80076a8:	e004      	b.n	80076b4 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80076aa:	2302      	movs	r3, #2
 80076ac:	73fb      	strb	r3, [r7, #15]
 80076ae:	e001      	b.n	80076b4 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d204      	bcs.n	80076e8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80076e6:	e001      	b.n	80076ec <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80076e8:	2302      	movs	r3, #2
 80076ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b087      	sub	sp, #28
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	4608      	mov	r0, r1
 8007704:	4611      	mov	r1, r2
 8007706:	461a      	mov	r2, r3
 8007708:	4603      	mov	r3, r0
 800770a:	70fb      	strb	r3, [r7, #3]
 800770c:	460b      	mov	r3, r1
 800770e:	70bb      	strb	r3, [r7, #2]
 8007710:	4613      	mov	r3, r2
 8007712:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007722:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007724:	e025      	b.n	8007772 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	221a      	movs	r2, #26
 800772a:	fb02 f303 	mul.w	r3, r2, r3
 800772e:	3308      	adds	r3, #8
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	3302      	adds	r3, #2
 8007736:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	795b      	ldrb	r3, [r3, #5]
 800773c:	78fa      	ldrb	r2, [r7, #3]
 800773e:	429a      	cmp	r2, r3
 8007740:	d002      	beq.n	8007748 <USBH_FindInterface+0x4e>
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	2bff      	cmp	r3, #255	; 0xff
 8007746:	d111      	bne.n	800776c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800774c:	78ba      	ldrb	r2, [r7, #2]
 800774e:	429a      	cmp	r2, r3
 8007750:	d002      	beq.n	8007758 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007752:	78bb      	ldrb	r3, [r7, #2]
 8007754:	2bff      	cmp	r3, #255	; 0xff
 8007756:	d109      	bne.n	800776c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800775c:	787a      	ldrb	r2, [r7, #1]
 800775e:	429a      	cmp	r2, r3
 8007760:	d002      	beq.n	8007768 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007762:	787b      	ldrb	r3, [r7, #1]
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	d101      	bne.n	800776c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	e006      	b.n	800777a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	3301      	adds	r3, #1
 8007770:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007772:	7dfb      	ldrb	r3, [r7, #23]
 8007774:	2b09      	cmp	r3, #9
 8007776:	d9d6      	bls.n	8007726 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007778:	23ff      	movs	r3, #255	; 0xff
}
 800777a:	4618      	mov	r0, r3
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fc88 	bl	80090a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007794:	2101      	movs	r1, #1
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f001 fda1 	bl	80092de <USBH_LL_DriverVBUS>

  return USBH_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af04      	add	r7, sp, #16
 80077ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80077b0:	2302      	movs	r3, #2
 80077b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d102      	bne.n	80077ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2203      	movs	r2, #3
 80077c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b0b      	cmp	r3, #11
 80077d2:	f200 81c0 	bhi.w	8007b56 <USBH_Process+0x3ae>
 80077d6:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <USBH_Process+0x34>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	0800780d 	.word	0x0800780d
 80077e0:	0800783f 	.word	0x0800783f
 80077e4:	080078a7 	.word	0x080078a7
 80077e8:	08007af1 	.word	0x08007af1
 80077ec:	08007b57 	.word	0x08007b57
 80077f0:	0800794b 	.word	0x0800794b
 80077f4:	08007a97 	.word	0x08007a97
 80077f8:	08007981 	.word	0x08007981
 80077fc:	080079a1 	.word	0x080079a1
 8007800:	080079c1 	.word	0x080079c1
 8007804:	08007a05 	.word	0x08007a05
 8007808:	08007ad9 	.word	0x08007ad9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 81a0 	beq.w	8007b5a <USBH_Process+0x3b2>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007820:	20c8      	movs	r0, #200	; 0xc8
 8007822:	f001 fda3 	bl	800936c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fc99 	bl	800915e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800783c:	e18d      	b.n	8007b5a <USBH_Process+0x3b2>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007844:	2b01      	cmp	r3, #1
 8007846:	d107      	bne.n	8007858 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2202      	movs	r2, #2
 8007854:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007856:	e18f      	b.n	8007b78 <USBH_Process+0x3d0>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800785e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007862:	d914      	bls.n	800788e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800786a:	3301      	adds	r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800787a:	2b03      	cmp	r3, #3
 800787c:	d903      	bls.n	8007886 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	220d      	movs	r2, #13
 8007882:	701a      	strb	r2, [r3, #0]
      break;
 8007884:	e178      	b.n	8007b78 <USBH_Process+0x3d0>
            phost->gState = HOST_IDLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
      break;
 800788c:	e174      	b.n	8007b78 <USBH_Process+0x3d0>
          phost->Timeout += 10U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007894:	f103 020a 	add.w	r2, r3, #10
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 800789e:	200a      	movs	r0, #10
 80078a0:	f001 fd64 	bl	800936c <USBH_Delay>
      break;
 80078a4:	e168      	b.n	8007b78 <USBH_Process+0x3d0>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80078b6:	2104      	movs	r1, #4
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80078bc:	2064      	movs	r0, #100	; 0x64
 80078be:	f001 fd55 	bl	800936c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fc24 	bl	8009110 <USBH_LL_GetSpeed>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2205      	movs	r2, #5
 80078d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80078d8:	2100      	movs	r1, #0
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 fa2b 	bl	8008d36 <USBH_AllocPipe>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80078e8:	2180      	movs	r1, #128	; 0x80
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f001 fa23 	bl	8008d36 <USBH_AllocPipe>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	7919      	ldrb	r1, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800790c:	b292      	uxth	r2, r2
 800790e:	9202      	str	r2, [sp, #8]
 8007910:	2200      	movs	r2, #0
 8007912:	9201      	str	r2, [sp, #4]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4603      	mov	r3, r0
 8007918:	2280      	movs	r2, #128	; 0x80
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 f9dc 	bl	8008cd8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7959      	ldrb	r1, [r3, #5]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007934:	b292      	uxth	r2, r2
 8007936:	9202      	str	r2, [sp, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	9201      	str	r2, [sp, #4]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	4603      	mov	r3, r0
 8007940:	2200      	movs	r2, #0
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 f9c8 	bl	8008cd8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007948:	e116      	b.n	8007b78 <USBH_Process+0x3d0>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f91a 	bl	8007b84 <USBH_HandleEnum>
 8007950:	4603      	mov	r3, r0
 8007952:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 8100 	bne.w	8007b5e <USBH_Process+0x3b6>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800796c:	2b01      	cmp	r3, #1
 800796e:	d103      	bne.n	8007978 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2208      	movs	r2, #8
 8007974:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007976:	e0f2      	b.n	8007b5e <USBH_Process+0x3b6>
          phost->gState = HOST_INPUT;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2207      	movs	r2, #7
 800797c:	701a      	strb	r2, [r3, #0]
      break;
 800797e:	e0ee      	b.n	8007b5e <USBH_Process+0x3b6>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80eb 	beq.w	8007b62 <USBH_Process+0x3ba>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007992:	2101      	movs	r1, #1
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2208      	movs	r2, #8
 800799c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800799e:	e0e0      	b.n	8007b62 <USBH_Process+0x3ba>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4619      	mov	r1, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fc2e 	bl	800820c <USBH_SetCfg>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f040 80d7 	bne.w	8007b66 <USBH_Process+0x3be>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2209      	movs	r2, #9
 80079bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079be:	e0d2      	b.n	8007b66 <USBH_Process+0x3be>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d016      	beq.n	80079fc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80079ce:	2101      	movs	r1, #1
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fc3e 	bl	8008252 <USBH_SetFeature>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	220a      	movs	r2, #10
 80079e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079e8:	e0bf      	b.n	8007b6a <USBH_Process+0x3c2>
        else if (status == USBH_NOT_SUPPORTED)
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	f040 80bb 	bne.w	8007b6a <USBH_Process+0x3c2>
          phost->gState = HOST_CHECK_CLASS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220a      	movs	r2, #10
 80079f8:	701a      	strb	r2, [r3, #0]
      break;
 80079fa:	e0b6      	b.n	8007b6a <USBH_Process+0x3c2>
        phost->gState = HOST_CHECK_CLASS;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	220a      	movs	r2, #10
 8007a00:	701a      	strb	r2, [r3, #0]
      break;
 8007a02:	e0b2      	b.n	8007b6a <USBH_Process+0x3c2>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80af 	beq.w	8007b6e <USBH_Process+0x3c6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e018      	b.n	8007a50 <USBH_Process+0x2a8>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a1e:	7bfa      	ldrb	r2, [r7, #15]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	791a      	ldrb	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d109      	bne.n	8007a4a <USBH_Process+0x2a2>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a36:	7bfa      	ldrb	r2, [r7, #15]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007a3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 8007a48:	e005      	b.n	8007a56 <USBH_Process+0x2ae>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	73fb      	strb	r3, [r7, #15]
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0e3      	beq.n	8007a1e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d016      	beq.n	8007a8e <USBH_Process+0x2e6>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <USBH_Process+0x2de>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2206      	movs	r2, #6
 8007a76:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007a7e:	2103      	movs	r1, #3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a84:	e073      	b.n	8007b6e <USBH_Process+0x3c6>
            phost->gState = HOST_ABORT_STATE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	220d      	movs	r2, #13
 8007a8a:	701a      	strb	r2, [r3, #0]
      break;
 8007a8c:	e06f      	b.n	8007b6e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	220d      	movs	r2, #13
 8007a92:	701a      	strb	r2, [r3, #0]
      break;
 8007a94:	e06b      	b.n	8007b6e <USBH_Process+0x3c6>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <USBH_Process+0x328>
      {
        status = phost->pActiveClass->Requests(phost);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
 8007aac:	4603      	mov	r3, r0
 8007aae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <USBH_Process+0x318>
        {
          phost->gState = HOST_CLASS;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220b      	movs	r2, #11
 8007abc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007abe:	e058      	b.n	8007b72 <USBH_Process+0x3ca>
        else if (status == USBH_FAIL)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d154      	bne.n	8007b72 <USBH_Process+0x3ca>
          phost->gState = HOST_ABORT_STATE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	220d      	movs	r2, #13
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e050      	b.n	8007b72 <USBH_Process+0x3ca>
        phost->gState = HOST_ABORT_STATE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	220d      	movs	r2, #13
 8007ad4:	701a      	strb	r2, [r3, #0]
      break;
 8007ad6:	e04c      	b.n	8007b72 <USBH_Process+0x3ca>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d049      	beq.n	8007b76 <USBH_Process+0x3ce>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
      }
      break;
 8007aee:	e042      	b.n	8007b76 <USBH_Process+0x3ce>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fd62 	bl	80075c2 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <USBH_Process+0x374>
      {
        phost->pActiveClass->DeInit(phost);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <USBH_Process+0x38a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007b2c:	2105      	movs	r1, #5
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d107      	bne.n	8007b4e <USBH_Process+0x3a6>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fe1d 	bl	8007786 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b4c:	e014      	b.n	8007b78 <USBH_Process+0x3d0>
        (void)USBH_LL_Start(phost);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f001 faa8 	bl	80090a4 <USBH_LL_Start>
      break;
 8007b54:	e010      	b.n	8007b78 <USBH_Process+0x3d0>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b56:	bf00      	nop
 8007b58:	e00e      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b5a:	bf00      	nop
 8007b5c:	e00c      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e00a      	b.n	8007b78 <USBH_Process+0x3d0>
    break;
 8007b62:	bf00      	nop
 8007b64:	e008      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b66:	bf00      	nop
 8007b68:	e006      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e004      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e002      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b72:	bf00      	nop
 8007b74:	e000      	b.n	8007b78 <USBH_Process+0x3d0>
      break;
 8007b76:	bf00      	nop
  }
  return USBH_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop

08007b84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af04      	add	r7, sp, #16
 8007b8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	785b      	ldrb	r3, [r3, #1]
 8007b98:	2b07      	cmp	r3, #7
 8007b9a:	f200 81c1 	bhi.w	8007f20 <USBH_HandleEnum+0x39c>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBH_HandleEnum+0x20>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007c83 	.word	0x08007c83
 8007bac:	08007ced 	.word	0x08007ced
 8007bb0:	08007d7b 	.word	0x08007d7b
 8007bb4:	08007de5 	.word	0x08007de5
 8007bb8:	08007e55 	.word	0x08007e55
 8007bbc:	08007e9b 	.word	0x08007e9b
 8007bc0:	08007ee1 	.word	0x08007ee1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007bc4:	2108      	movs	r1, #8
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa50 	bl	800806c <USBH_Get_DevDesc>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d130      	bne.n	8007c38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7919      	ldrb	r1, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	9202      	str	r2, [sp, #8]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	9201      	str	r2, [sp, #4]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	4603      	mov	r3, r0
 8007c06:	2280      	movs	r2, #128	; 0x80
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f865 	bl	8008cd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	7959      	ldrb	r1, [r3, #5]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c22:	b292      	uxth	r2, r2
 8007c24:	9202      	str	r2, [sp, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	9201      	str	r2, [sp, #4]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2200      	movs	r2, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f851 	bl	8008cd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c36:	e175      	b.n	8007f24 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c38:	7bbb      	ldrb	r3, [r7, #14]
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	f040 8172 	bne.w	8007f24 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c46:	3301      	adds	r3, #1
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d903      	bls.n	8007c62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	220d      	movs	r2, #13
 8007c5e:	701a      	strb	r2, [r3, #0]
      break;
 8007c60:	e160      	b.n	8007f24 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	795b      	ldrb	r3, [r3, #5]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 f886 	bl	8008d7a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f001 f880 	bl	8008d7a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
      break;
 8007c80:	e150      	b.n	8007f24 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c82:	2112      	movs	r1, #18
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f9f1 	bl	800806c <USBH_Get_DevDesc>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c8e:	7bbb      	ldrb	r3, [r7, #14]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d103      	bne.n	8007c9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2202      	movs	r2, #2
 8007c98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c9a:	e145      	b.n	8007f28 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	f040 8142 	bne.w	8007f28 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007caa:	3301      	adds	r3, #1
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d903      	bls.n	8007cc6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	220d      	movs	r2, #13
 8007cc2:	701a      	strb	r2, [r3, #0]
      break;
 8007cc4:	e130      	b.n	8007f28 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	795b      	ldrb	r3, [r3, #5]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 f854 	bl	8008d7a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	791b      	ldrb	r3, [r3, #4]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f001 f84e 	bl	8008d7a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
      break;
 8007cea:	e11d      	b.n	8007f28 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007cec:	2101      	movs	r1, #1
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa68 	bl	80081c4 <USBH_SetAddress>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cf8:	7bbb      	ldrb	r3, [r7, #14]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d132      	bne.n	8007d64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007cfe:	2002      	movs	r0, #2
 8007d00:	f001 fb34 	bl	800936c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2203      	movs	r2, #3
 8007d10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7919      	ldrb	r1, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d26:	b292      	uxth	r2, r2
 8007d28:	9202      	str	r2, [sp, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	9201      	str	r2, [sp, #4]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4603      	mov	r3, r0
 8007d32:	2280      	movs	r2, #128	; 0x80
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 ffcf 	bl	8008cd8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	7959      	ldrb	r1, [r3, #5]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d4e:	b292      	uxth	r2, r2
 8007d50:	9202      	str	r2, [sp, #8]
 8007d52:	2200      	movs	r2, #0
 8007d54:	9201      	str	r2, [sp, #4]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 ffbb 	bl	8008cd8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d62:	e0e3      	b.n	8007f2c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	f040 80e0 	bne.w	8007f2c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	220d      	movs	r2, #13
 8007d70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	705a      	strb	r2, [r3, #1]
      break;
 8007d78:	e0d8      	b.n	8007f2c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d7a:	2109      	movs	r1, #9
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f99d 	bl	80080bc <USBH_Get_CfgDesc>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d103      	bne.n	8007d94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d92:	e0cd      	b.n	8007f30 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	f040 80ca 	bne.w	8007f30 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007da2:	3301      	adds	r3, #1
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d903      	bls.n	8007dbe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	220d      	movs	r2, #13
 8007dba:	701a      	strb	r2, [r3, #0]
      break;
 8007dbc:	e0b8      	b.n	8007f30 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	795b      	ldrb	r3, [r3, #5]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 ffd8 	bl	8008d7a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 ffd2 	bl	8008d7a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
      break;
 8007de2:	e0a5      	b.n	8007f30 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f965 	bl	80080bc <USBH_Get_CfgDesc>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d103      	bne.n	8007e04 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2205      	movs	r2, #5
 8007e00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e02:	e097      	b.n	8007f34 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e04:	7bbb      	ldrb	r3, [r7, #14]
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	f040 8094 	bne.w	8007f34 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e12:	3301      	adds	r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d903      	bls.n	8007e2e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	220d      	movs	r2, #13
 8007e2a:	701a      	strb	r2, [r3, #0]
      break;
 8007e2c:	e082      	b.n	8007f34 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	795b      	ldrb	r3, [r3, #5]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 ffa0 	bl	8008d7a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	791b      	ldrb	r3, [r3, #4]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 ff9a 	bl	8008d7a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
      break;
 8007e52:	e06f      	b.n	8007f34 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d019      	beq.n	8007e92 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e6a:	23ff      	movs	r3, #255	; 0xff
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f949 	bl	8008104 <USBH_Get_StringDesc>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d103      	bne.n	8007e84 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2206      	movs	r2, #6
 8007e80:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e82:	e059      	b.n	8007f38 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d156      	bne.n	8007f38 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2206      	movs	r2, #6
 8007e8e:	705a      	strb	r2, [r3, #1]
      break;
 8007e90:	e052      	b.n	8007f38 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2206      	movs	r2, #6
 8007e96:	705a      	strb	r2, [r3, #1]
      break;
 8007e98:	e04e      	b.n	8007f38 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d019      	beq.n	8007ed8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007eb0:	23ff      	movs	r3, #255	; 0xff
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f926 	bl	8008104 <USBH_Get_StringDesc>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d103      	bne.n	8007eca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2207      	movs	r2, #7
 8007ec6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ec8:	e038      	b.n	8007f3c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007eca:	7bbb      	ldrb	r3, [r7, #14]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d135      	bne.n	8007f3c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2207      	movs	r2, #7
 8007ed4:	705a      	strb	r2, [r3, #1]
      break;
 8007ed6:	e031      	b.n	8007f3c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2207      	movs	r2, #7
 8007edc:	705a      	strb	r2, [r3, #1]
      break;
 8007ede:	e02d      	b.n	8007f3c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d017      	beq.n	8007f1a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ef6:	23ff      	movs	r3, #255	; 0xff
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f903 	bl	8008104 <USBH_Get_StringDesc>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f02:	7bbb      	ldrb	r3, [r7, #14]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f0c:	e018      	b.n	8007f40 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d115      	bne.n	8007f40 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
      break;
 8007f18:	e012      	b.n	8007f40 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1e:	e00f      	b.n	8007f40 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007f20:	bf00      	nop
 8007f22:	e00e      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f24:	bf00      	nop
 8007f26:	e00c      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f28:	bf00      	nop
 8007f2a:	e00a      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f2c:	bf00      	nop
 8007f2e:	e008      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f30:	bf00      	nop
 8007f32:	e006      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f34:	bf00      	nop
 8007f36:	e004      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f38:	bf00      	nop
 8007f3a:	e002      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <USBH_HandleEnum+0x3be>
      break;
 8007f40:	bf00      	nop
  }
  return Status;
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f804 	bl	8007f8e <USBH_HandleSof>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b0b      	cmp	r3, #11
 8007f9e:	d10a      	bne.n	8007fb6 <USBH_HandleSof+0x28>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007fce:	bf00      	nop
}
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007fea:	bf00      	nop
}
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b083      	sub	sp, #12
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f848 	bl	80090da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	791b      	ldrb	r3, [r3, #4]
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fe92 	bl	8008d7a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	795b      	ldrb	r3, [r3, #5]
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fe8c 	bl	8008d7a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af02      	add	r7, sp, #8
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	b29b      	uxth	r3, r3
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	f44f 7280 	mov.w	r2, #256	; 0x100
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f864 	bl	800815a <USBH_GetDescriptor>
 8008092:	4603      	mov	r3, r0
 8008094:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f203 3026 	addw	r0, r3, #806	; 0x326
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080a8:	78fa      	ldrb	r2, [r7, #3]
 80080aa:	b292      	uxth	r2, r2
 80080ac:	4619      	mov	r1, r3
 80080ae:	f000 f918 	bl	80082e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	331c      	adds	r3, #28
 80080cc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80080ce:	887b      	ldrh	r3, [r7, #2]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f83d 	bl	800815a <USBH_GetDescriptor>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80080ea:	887b      	ldrh	r3, [r7, #2]
 80080ec:	461a      	mov	r2, r3
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f987 	bl	8008404 <USBH_ParseCfgDesc>
 80080f6:	4603      	mov	r3, r0
 80080f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af02      	add	r7, sp, #8
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	461a      	mov	r2, r3
 8008110:	460b      	mov	r3, r1
 8008112:	72fb      	strb	r3, [r7, #11]
 8008114:	4613      	mov	r3, r2
 8008116:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	b29b      	uxth	r3, r3
 800811c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008120:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008128:	893b      	ldrh	r3, [r7, #8]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	460b      	mov	r3, r1
 800812e:	2100      	movs	r1, #0
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 f812 	bl	800815a <USBH_GetDescriptor>
 8008136:	4603      	mov	r3, r0
 8008138:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008146:	893a      	ldrh	r2, [r7, #8]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fb24 	bl	8008798 <USBH_ParseStringDesc>
  }

  return status;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	607b      	str	r3, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	72fb      	strb	r3, [r7, #11]
 8008168:	4613      	mov	r3, r2
 800816a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	789b      	ldrb	r3, [r3, #2]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d11c      	bne.n	80081ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008174:	7afb      	ldrb	r3, [r7, #11]
 8008176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800817a:	b2da      	uxtb	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2206      	movs	r2, #6
 8008184:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	893a      	ldrh	r2, [r7, #8]
 800818a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800818c:	893b      	ldrh	r3, [r7, #8]
 800818e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008196:	d104      	bne.n	80081a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f240 4209 	movw	r2, #1033	; 0x409
 800819e:	829a      	strh	r2, [r3, #20]
 80081a0:	e002      	b.n	80081a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8b3a      	ldrh	r2, [r7, #24]
 80081ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80081ae:	8b3b      	ldrh	r3, [r7, #24]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fb3d 	bl	8008834 <USBH_CtlReq>
 80081ba:	4603      	mov	r3, r0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d10f      	bne.n	80081f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2205      	movs	r2, #5
 80081e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081f8:	2200      	movs	r2, #0
 80081fa:	2100      	movs	r1, #0
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fb19 	bl	8008834 <USBH_CtlReq>
 8008202:	4603      	mov	r3, r0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	789b      	ldrb	r3, [r3, #2]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10e      	bne.n	800823e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2209      	movs	r2, #9
 800822a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	887a      	ldrh	r2, [r7, #2]
 8008230:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 faf6 	bl	8008834 <USBH_CtlReq>
 8008248:	4603      	mov	r3, r0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	789b      	ldrb	r3, [r3, #2]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d10f      	bne.n	8008286 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2203      	movs	r2, #3
 8008270:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	b29a      	uxth	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fad2 	bl	8008834 <USBH_CtlReq>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10f      	bne.n	80082ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80082ce:	2200      	movs	r2, #0
 80082d0:	2100      	movs	r1, #0
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 faae 	bl	8008834 <USBH_CtlReq>
 80082d8:	4603      	mov	r3, r0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	60f8      	str	r0, [r7, #12]
 80082ea:	60b9      	str	r1, [r7, #8]
 80082ec:	4613      	mov	r3, r2
 80082ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	785a      	ldrb	r2, [r3, #1]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3302      	adds	r3, #2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	b29a      	uxth	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3303      	adds	r3, #3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	021b      	lsls	r3, r3, #8
 8008312:	b29b      	uxth	r3, r3
 8008314:	4313      	orrs	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	791a      	ldrb	r2, [r3, #4]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	795a      	ldrb	r2, [r3, #5]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	799a      	ldrb	r2, [r3, #6]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	79da      	ldrb	r2, [r3, #7]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	79db      	ldrb	r3, [r3, #7]
 8008340:	2b20      	cmp	r3, #32
 8008342:	dc11      	bgt.n	8008368 <USBH_ParseDevDesc+0x86>
 8008344:	2b08      	cmp	r3, #8
 8008346:	db16      	blt.n	8008376 <USBH_ParseDevDesc+0x94>
 8008348:	3b08      	subs	r3, #8
 800834a:	2201      	movs	r2, #1
 800834c:	fa02 f303 	lsl.w	r3, r2, r3
 8008350:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008358:	2b00      	cmp	r3, #0
 800835a:	bf14      	ite	ne
 800835c:	2301      	movne	r3, #1
 800835e:	2300      	moveq	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d102      	bne.n	800836c <USBH_ParseDevDesc+0x8a>
 8008366:	e006      	b.n	8008376 <USBH_ParseDevDesc+0x94>
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d104      	bne.n	8008376 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	79da      	ldrb	r2, [r3, #7]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	71da      	strb	r2, [r3, #7]
      break;
 8008374:	e003      	b.n	800837e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2240      	movs	r2, #64	; 0x40
 800837a:	71da      	strb	r2, [r3, #7]
      break;
 800837c:	bf00      	nop
  }

  if (length > 8U)
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	2b08      	cmp	r3, #8
 8008382:	d939      	bls.n	80083f8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	3308      	adds	r3, #8
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b29a      	uxth	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3309      	adds	r3, #9
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	b29b      	uxth	r3, r3
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	b29b      	uxth	r3, r3
 8008398:	4313      	orrs	r3, r2
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	330a      	adds	r3, #10
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	330b      	adds	r3, #11
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4313      	orrs	r3, r2
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	330c      	adds	r3, #12
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	330d      	adds	r3, #13
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	7b9a      	ldrb	r2, [r3, #14]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	7bda      	ldrb	r2, [r3, #15]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	7c1a      	ldrb	r2, [r3, #16]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	7c5a      	ldrb	r2, [r3, #17]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	745a      	strb	r2, [r3, #17]
  }
}
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08c      	sub	sp, #48	; 0x30
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	4613      	mov	r3, r2
 8008410:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008418:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781a      	ldrb	r2, [r3, #0]
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	785a      	ldrb	r2, [r3, #1]
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3302      	adds	r3, #2
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b29a      	uxth	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	3303      	adds	r3, #3
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	b29b      	uxth	r3, r3
 8008458:	4313      	orrs	r3, r2
 800845a:	b29b      	uxth	r3, r3
 800845c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008460:	bf28      	it	cs
 8008462:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008466:	b29a      	uxth	r2, r3
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	791a      	ldrb	r2, [r3, #4]
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	795a      	ldrb	r2, [r3, #5]
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	799a      	ldrb	r2, [r3, #6]
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	79da      	ldrb	r2, [r3, #7]
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	7a1a      	ldrb	r2, [r3, #8]
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b09      	cmp	r3, #9
 800849a:	d002      	beq.n	80084a2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2209      	movs	r2, #9
 80084a0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	f240 809d 	bls.w	80085e4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80084aa:	2309      	movs	r3, #9
 80084ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084b2:	e081      	b.n	80085b8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084b4:	f107 0316 	add.w	r3, r7, #22
 80084b8:	4619      	mov	r1, r3
 80084ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084bc:	f000 f99f 	bl	80087fe <USBH_GetNextDesc>
 80084c0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	785b      	ldrb	r3, [r3, #1]
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d176      	bne.n	80085b8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d002      	beq.n	80084d8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2209      	movs	r2, #9
 80084d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80084d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084dc:	221a      	movs	r2, #26
 80084de:	fb02 f303 	mul.w	r3, r2, r3
 80084e2:	3308      	adds	r3, #8
 80084e4:	6a3a      	ldr	r2, [r7, #32]
 80084e6:	4413      	add	r3, r2
 80084e8:	3302      	adds	r3, #2
 80084ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ee:	69f8      	ldr	r0, [r7, #28]
 80084f0:	f000 f87e 	bl	80085f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084fe:	e043      	b.n	8008588 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008500:	f107 0316 	add.w	r3, r7, #22
 8008504:	4619      	mov	r1, r3
 8008506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008508:	f000 f979 	bl	80087fe <USBH_GetNextDesc>
 800850c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	785b      	ldrb	r3, [r3, #1]
 8008512:	2b05      	cmp	r3, #5
 8008514:	d138      	bne.n	8008588 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	795b      	ldrb	r3, [r3, #5]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d10f      	bne.n	800853e <USBH_ParseCfgDesc+0x13a>
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	799b      	ldrb	r3, [r3, #6]
 8008522:	2b02      	cmp	r3, #2
 8008524:	d10b      	bne.n	800853e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	79db      	ldrb	r3, [r3, #7]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10f      	bne.n	800854e <USBH_ParseCfgDesc+0x14a>
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b09      	cmp	r3, #9
 8008534:	d00b      	beq.n	800854e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008538:	2209      	movs	r2, #9
 800853a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800853c:	e007      	b.n	800854e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b07      	cmp	r3, #7
 8008544:	d004      	beq.n	8008550 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	2207      	movs	r2, #7
 800854a:	701a      	strb	r2, [r3, #0]
 800854c:	e000      	b.n	8008550 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800854e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008554:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008558:	3201      	adds	r2, #1
 800855a:	00d2      	lsls	r2, r2, #3
 800855c:	211a      	movs	r1, #26
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	4413      	add	r3, r2
 8008564:	3308      	adds	r3, #8
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	4413      	add	r3, r2
 800856a:	3304      	adds	r3, #4
 800856c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800856e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008570:	69b9      	ldr	r1, [r7, #24]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f86b 	bl	800864e <USBH_ParseEPDesc>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800857e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008582:	3301      	adds	r3, #1
 8008584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	791b      	ldrb	r3, [r3, #4]
 800858c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008590:	429a      	cmp	r2, r3
 8008592:	d204      	bcs.n	800859e <USBH_ParseCfgDesc+0x19a>
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	885a      	ldrh	r2, [r3, #2]
 8008598:	8afb      	ldrh	r3, [r7, #22]
 800859a:	429a      	cmp	r2, r3
 800859c:	d8b0      	bhi.n	8008500 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	791b      	ldrb	r3, [r3, #4]
 80085a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d201      	bcs.n	80085ae <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e01c      	b.n	80085e8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80085ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b2:	3301      	adds	r3, #1
 80085b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d805      	bhi.n	80085cc <USBH_ParseCfgDesc+0x1c8>
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	885a      	ldrh	r2, [r3, #2]
 80085c4:	8afb      	ldrh	r3, [r7, #22]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	f63f af74 	bhi.w	80084b4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	791b      	ldrb	r3, [r3, #4]
 80085d0:	2b0a      	cmp	r3, #10
 80085d2:	bf28      	it	cs
 80085d4:	230a      	movcs	r3, #10
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80085dc:	429a      	cmp	r2, r3
 80085de:	d201      	bcs.n	80085e4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e001      	b.n	80085e8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80085e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3730      	adds	r7, #48	; 0x30
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781a      	ldrb	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	785a      	ldrb	r2, [r3, #1]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	789a      	ldrb	r2, [r3, #2]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	78da      	ldrb	r2, [r3, #3]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	791a      	ldrb	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	795a      	ldrb	r2, [r3, #5]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	799a      	ldrb	r2, [r3, #6]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	79da      	ldrb	r2, [r3, #7]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	7a1a      	ldrb	r2, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	721a      	strb	r2, [r3, #8]
}
 8008642:	bf00      	nop
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800864e:	b480      	push	{r7}
 8008650:	b087      	sub	sp, #28
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	781a      	ldrb	r2, [r3, #0]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	785a      	ldrb	r2, [r3, #1]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	789a      	ldrb	r2, [r3, #2]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	78da      	ldrb	r2, [r3, #3]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b29a      	uxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3305      	adds	r3, #5
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	b29b      	uxth	r3, r3
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	b29b      	uxth	r3, r3
 8008692:	4313      	orrs	r3, r2
 8008694:	b29a      	uxth	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	799a      	ldrb	r2, [r3, #6]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	889b      	ldrh	r3, [r3, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d102      	bne.n	80086b0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80086aa:	2303      	movs	r3, #3
 80086ac:	75fb      	strb	r3, [r7, #23]
 80086ae:	e033      	b.n	8008718 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	889b      	ldrh	r3, [r3, #4]
 80086b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80086b8:	f023 0307 	bic.w	r3, r3, #7
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	889b      	ldrh	r3, [r3, #4]
 80086c6:	b21a      	sxth	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	b299      	uxth	r1, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3305      	adds	r3, #5
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	021b      	lsls	r3, r3, #8
 80086da:	b29b      	uxth	r3, r3
 80086dc:	430b      	orrs	r3, r1
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d110      	bne.n	800870a <USBH_ParseEPDesc+0xbc>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3304      	adds	r3, #4
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	b299      	uxth	r1, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3305      	adds	r3, #5
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	021b      	lsls	r3, r3, #8
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	430b      	orrs	r3, r1
 80086fe:	b29b      	uxth	r3, r3
 8008700:	b21b      	sxth	r3, r3
 8008702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008706:	b21b      	sxth	r3, r3
 8008708:	e001      	b.n	800870e <USBH_ParseEPDesc+0xc0>
 800870a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800870e:	4313      	orrs	r3, r2
 8008710:	b21b      	sxth	r3, r3
 8008712:	b29a      	uxth	r2, r3
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800871e:	2b00      	cmp	r3, #0
 8008720:	d116      	bne.n	8008750 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	78db      	ldrb	r3, [r3, #3]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b01      	cmp	r3, #1
 800872c:	d005      	beq.n	800873a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	78db      	ldrb	r3, [r3, #3]
 8008732:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008736:	2b03      	cmp	r3, #3
 8008738:	d127      	bne.n	800878a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	799b      	ldrb	r3, [r3, #6]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <USBH_ParseEPDesc+0xfc>
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	799b      	ldrb	r3, [r3, #6]
 8008746:	2b10      	cmp	r3, #16
 8008748:	d91f      	bls.n	800878a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800874a:	2303      	movs	r3, #3
 800874c:	75fb      	strb	r3, [r7, #23]
 800874e:	e01c      	b.n	800878a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	78db      	ldrb	r3, [r3, #3]
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	2b01      	cmp	r3, #1
 800875a:	d10a      	bne.n	8008772 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	799b      	ldrb	r3, [r3, #6]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <USBH_ParseEPDesc+0x11e>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	799b      	ldrb	r3, [r3, #6]
 8008768:	2b10      	cmp	r3, #16
 800876a:	d90e      	bls.n	800878a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800876c:	2303      	movs	r3, #3
 800876e:	75fb      	strb	r3, [r7, #23]
 8008770:	e00b      	b.n	800878a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	78db      	ldrb	r3, [r3, #3]
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d105      	bne.n	800878a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	799b      	ldrb	r3, [r3, #6]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008786:	2303      	movs	r3, #3
 8008788:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
}
 800878c:	4618      	mov	r0, r3
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	4613      	mov	r3, r2
 80087a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d120      	bne.n	80087f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	1e9a      	subs	r2, r3, #2
 80087b6:	88fb      	ldrh	r3, [r7, #6]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bf28      	it	cs
 80087bc:	4613      	movcs	r3, r2
 80087be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3302      	adds	r3, #2
 80087c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80087c6:	2300      	movs	r3, #0
 80087c8:	82fb      	strh	r3, [r7, #22]
 80087ca:	e00b      	b.n	80087e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80087cc:	8afb      	ldrh	r3, [r7, #22]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	4413      	add	r3, r2
 80087d2:	781a      	ldrb	r2, [r3, #0]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3301      	adds	r3, #1
 80087dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80087de:	8afb      	ldrh	r3, [r7, #22]
 80087e0:	3302      	adds	r3, #2
 80087e2:	82fb      	strh	r3, [r7, #22]
 80087e4:	8afa      	ldrh	r2, [r7, #22]
 80087e6:	8abb      	ldrh	r3, [r7, #20]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d3ef      	bcc.n	80087cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
  }
}
 80087f2:	bf00      	nop
 80087f4:	371c      	adds	r7, #28
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80087fe:	b480      	push	{r7}
 8008800:	b085      	sub	sp, #20
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	881a      	ldrh	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	4413      	add	r3, r2
 8008814:	b29a      	uxth	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4413      	add	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008826:	68fb      	ldr	r3, [r7, #12]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b086      	sub	sp, #24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	4613      	mov	r3, r2
 8008840:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008842:	2301      	movs	r3, #1
 8008844:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	789b      	ldrb	r3, [r3, #2]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d002      	beq.n	8008854 <USBH_CtlReq+0x20>
 800884e:	2b02      	cmp	r3, #2
 8008850:	d00f      	beq.n	8008872 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008852:	e027      	b.n	80088a4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2202      	movs	r2, #2
 800886a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800886c:	2301      	movs	r3, #1
 800886e:	75fb      	strb	r3, [r7, #23]
      break;
 8008870:	e018      	b.n	80088a4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f81c 	bl	80088b0 <USBH_HandleControl>
 8008878:	4603      	mov	r3, r0
 800887a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <USBH_CtlReq+0x54>
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d106      	bne.n	8008896 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	761a      	strb	r2, [r3, #24]
      break;
 8008894:	e005      	b.n	80088a2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d102      	bne.n	80088a2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	709a      	strb	r2, [r3, #2]
      break;
 80088a2:	bf00      	nop
  }
  return status;
 80088a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af02      	add	r7, sp, #8
 80088b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088b8:	2301      	movs	r3, #1
 80088ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088bc:	2300      	movs	r3, #0
 80088be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	7e1b      	ldrb	r3, [r3, #24]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	2b0a      	cmp	r3, #10
 80088c8:	f200 8156 	bhi.w	8008b78 <USBH_HandleControl+0x2c8>
 80088cc:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <USBH_HandleControl+0x24>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	08008901 	.word	0x08008901
 80088d8:	0800891b 	.word	0x0800891b
 80088dc:	08008985 	.word	0x08008985
 80088e0:	080089ab 	.word	0x080089ab
 80088e4:	080089e3 	.word	0x080089e3
 80088e8:	08008a0d 	.word	0x08008a0d
 80088ec:	08008a5f 	.word	0x08008a5f
 80088f0:	08008a81 	.word	0x08008a81
 80088f4:	08008abd 	.word	0x08008abd
 80088f8:	08008ae3 	.word	0x08008ae3
 80088fc:	08008b21 	.word	0x08008b21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f103 0110 	add.w	r1, r3, #16
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	795b      	ldrb	r3, [r3, #5]
 800890a:	461a      	mov	r2, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f943 	bl	8008b98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2202      	movs	r2, #2
 8008916:	761a      	strb	r2, [r3, #24]
      break;
 8008918:	e139      	b.n	8008b8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	795b      	ldrb	r3, [r3, #5]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fcc9 	bl	80092b8 <USBH_LL_GetURBState>
 8008926:	4603      	mov	r3, r0
 8008928:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d11e      	bne.n	800896e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7c1b      	ldrb	r3, [r3, #16]
 8008934:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008938:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8adb      	ldrh	r3, [r3, #22]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008942:	7b7b      	ldrb	r3, [r7, #13]
 8008944:	2b80      	cmp	r3, #128	; 0x80
 8008946:	d103      	bne.n	8008950 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2203      	movs	r2, #3
 800894c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800894e:	e115      	b.n	8008b7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2205      	movs	r2, #5
 8008954:	761a      	strb	r2, [r3, #24]
      break;
 8008956:	e111      	b.n	8008b7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008958:	7b7b      	ldrb	r3, [r7, #13]
 800895a:	2b80      	cmp	r3, #128	; 0x80
 800895c:	d103      	bne.n	8008966 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2209      	movs	r2, #9
 8008962:	761a      	strb	r2, [r3, #24]
      break;
 8008964:	e10a      	b.n	8008b7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2207      	movs	r2, #7
 800896a:	761a      	strb	r2, [r3, #24]
      break;
 800896c:	e106      	b.n	8008b7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d003      	beq.n	800897c <USBH_HandleControl+0xcc>
 8008974:	7bbb      	ldrb	r3, [r7, #14]
 8008976:	2b02      	cmp	r3, #2
 8008978:	f040 8100 	bne.w	8008b7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	220b      	movs	r2, #11
 8008980:	761a      	strb	r2, [r3, #24]
      break;
 8008982:	e0fb      	b.n	8008b7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6899      	ldr	r1, [r3, #8]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	899a      	ldrh	r2, [r3, #12]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f93a 	bl	8008c16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2204      	movs	r2, #4
 80089a6:	761a      	strb	r2, [r3, #24]
      break;
 80089a8:	e0f1      	b.n	8008b8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	791b      	ldrb	r3, [r3, #4]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fc81 	bl	80092b8 <USBH_LL_GetURBState>
 80089b6:	4603      	mov	r3, r0
 80089b8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d102      	bne.n	80089c6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2209      	movs	r2, #9
 80089c4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b05      	cmp	r3, #5
 80089ca:	d102      	bne.n	80089d2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80089cc:	2303      	movs	r3, #3
 80089ce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089d0:	e0d6      	b.n	8008b80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	f040 80d3 	bne.w	8008b80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	220b      	movs	r2, #11
 80089de:	761a      	strb	r2, [r3, #24]
      break;
 80089e0:	e0ce      	b.n	8008b80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6899      	ldr	r1, [r3, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	899a      	ldrh	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	795b      	ldrb	r3, [r3, #5]
 80089ee:	2001      	movs	r0, #1
 80089f0:	9000      	str	r0, [sp, #0]
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8ea 	bl	8008bcc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2206      	movs	r2, #6
 8008a08:	761a      	strb	r2, [r3, #24]
      break;
 8008a0a:	e0c0      	b.n	8008b8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	795b      	ldrb	r3, [r3, #5]
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fc50 	bl	80092b8 <USBH_LL_GetURBState>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d103      	bne.n	8008a2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2207      	movs	r2, #7
 8008a26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a28:	e0ac      	b.n	8008b84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b05      	cmp	r3, #5
 8008a2e:	d105      	bne.n	8008a3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	220c      	movs	r2, #12
 8008a34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a36:	2303      	movs	r3, #3
 8008a38:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3a:	e0a3      	b.n	8008b84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a3c:	7bbb      	ldrb	r3, [r7, #14]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d103      	bne.n	8008a4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2205      	movs	r2, #5
 8008a46:	761a      	strb	r2, [r3, #24]
      break;
 8008a48:	e09c      	b.n	8008b84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	f040 8099 	bne.w	8008b84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	220b      	movs	r2, #11
 8008a56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5c:	e092      	b.n	8008b84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	791b      	ldrb	r3, [r3, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8d5 	bl	8008c16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2208      	movs	r2, #8
 8008a7c:	761a      	strb	r2, [r3, #24]

      break;
 8008a7e:	e086      	b.n	8008b8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	791b      	ldrb	r3, [r3, #4]
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fc16 	bl	80092b8 <USBH_LL_GetURBState>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d105      	bne.n	8008aa2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	220d      	movs	r2, #13
 8008a9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008aa0:	e072      	b.n	8008b88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d103      	bne.n	8008ab0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220b      	movs	r2, #11
 8008aac:	761a      	strb	r2, [r3, #24]
      break;
 8008aae:	e06b      	b.n	8008b88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b05      	cmp	r3, #5
 8008ab4:	d168      	bne.n	8008b88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8008aba:	e065      	b.n	8008b88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	795b      	ldrb	r3, [r3, #5]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	9200      	str	r2, [sp, #0]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f87f 	bl	8008bcc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	220a      	movs	r2, #10
 8008ade:	761a      	strb	r2, [r3, #24]
      break;
 8008ae0:	e055      	b.n	8008b8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	795b      	ldrb	r3, [r3, #5]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fbe5 	bl	80092b8 <USBH_LL_GetURBState>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d105      	bne.n	8008b04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	220d      	movs	r2, #13
 8008b00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b02:	e043      	b.n	8008b8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d103      	bne.n	8008b12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2209      	movs	r2, #9
 8008b0e:	761a      	strb	r2, [r3, #24]
      break;
 8008b10:	e03c      	b.n	8008b8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b04      	cmp	r3, #4
 8008b16:	d139      	bne.n	8008b8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	220b      	movs	r2, #11
 8008b1c:	761a      	strb	r2, [r3, #24]
      break;
 8008b1e:	e035      	b.n	8008b8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	7e5b      	ldrb	r3, [r3, #25]
 8008b24:	3301      	adds	r3, #1
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	765a      	strb	r2, [r3, #25]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7e5b      	ldrb	r3, [r3, #25]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d806      	bhi.n	8008b42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b40:	e025      	b.n	8008b8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8008b48:	2106      	movs	r1, #6
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	795b      	ldrb	r3, [r3, #5]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f90d 	bl	8008d7a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	791b      	ldrb	r3, [r3, #4]
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f907 	bl	8008d7a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b72:	2302      	movs	r3, #2
 8008b74:	73fb      	strb	r3, [r7, #15]
      break;
 8008b76:	e00a      	b.n	8008b8e <USBH_HandleControl+0x2de>

    default:
      break;
 8008b78:	bf00      	nop
 8008b7a:	e008      	b.n	8008b8e <USBH_HandleControl+0x2de>
      break;
 8008b7c:	bf00      	nop
 8008b7e:	e006      	b.n	8008b8e <USBH_HandleControl+0x2de>
      break;
 8008b80:	bf00      	nop
 8008b82:	e004      	b.n	8008b8e <USBH_HandleControl+0x2de>
      break;
 8008b84:	bf00      	nop
 8008b86:	e002      	b.n	8008b8e <USBH_HandleControl+0x2de>
      break;
 8008b88:	bf00      	nop
 8008b8a:	e000      	b.n	8008b8e <USBH_HandleControl+0x2de>
      break;
 8008b8c:	bf00      	nop
  }

  return status;
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b088      	sub	sp, #32
 8008b9c:	af04      	add	r7, sp, #16
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ba6:	79f9      	ldrb	r1, [r7, #7]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9303      	str	r3, [sp, #12]
 8008bac:	2308      	movs	r3, #8
 8008bae:	9302      	str	r3, [sp, #8]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	9301      	str	r3, [sp, #4]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	2200      	movs	r2, #0
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fb4a 	bl	8009256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af04      	add	r7, sp, #16
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4611      	mov	r1, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	460b      	mov	r3, r1
 8008bdc:	80fb      	strh	r3, [r7, #6]
 8008bde:	4613      	mov	r3, r2
 8008be0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bf0:	7979      	ldrb	r1, [r7, #5]
 8008bf2:	7e3b      	ldrb	r3, [r7, #24]
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	88fb      	ldrh	r3, [r7, #6]
 8008bf8:	9302      	str	r3, [sp, #8]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	2301      	movs	r3, #1
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	2200      	movs	r2, #0
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 fb25 	bl	8009256 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b088      	sub	sp, #32
 8008c1a:	af04      	add	r7, sp, #16
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	4611      	mov	r1, r2
 8008c22:	461a      	mov	r2, r3
 8008c24:	460b      	mov	r3, r1
 8008c26:	80fb      	strh	r3, [r7, #6]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c2c:	7979      	ldrb	r1, [r7, #5]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9303      	str	r3, [sp, #12]
 8008c32:	88fb      	ldrh	r3, [r7, #6]
 8008c34:	9302      	str	r3, [sp, #8]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2201      	movs	r2, #1
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fb07 	bl	8009256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c48:	2300      	movs	r3, #0

}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b088      	sub	sp, #32
 8008c56:	af04      	add	r7, sp, #16
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	461a      	mov	r2, r3
 8008c60:	460b      	mov	r3, r1
 8008c62:	80fb      	strh	r3, [r7, #6]
 8008c64:	4613      	mov	r3, r2
 8008c66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c76:	7979      	ldrb	r1, [r7, #5]
 8008c78:	7e3b      	ldrb	r3, [r7, #24]
 8008c7a:	9303      	str	r3, [sp, #12]
 8008c7c:	88fb      	ldrh	r3, [r7, #6]
 8008c7e:	9302      	str	r3, [sp, #8]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	2301      	movs	r3, #1
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	2302      	movs	r3, #2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	68f8      	ldr	r0, [r7, #12]
 8008c8e:	f000 fae2 	bl	8009256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af04      	add	r7, sp, #16
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	461a      	mov	r2, r3
 8008caa:	460b      	mov	r3, r1
 8008cac:	80fb      	strh	r3, [r7, #6]
 8008cae:	4613      	mov	r3, r2
 8008cb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cb2:	7979      	ldrb	r1, [r7, #5]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	88fb      	ldrh	r3, [r7, #6]
 8008cba:	9302      	str	r3, [sp, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 fac4 	bl	8009256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af04      	add	r7, sp, #16
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	70fb      	strb	r3, [r7, #3]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70bb      	strb	r3, [r7, #2]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008cf2:	7878      	ldrb	r0, [r7, #1]
 8008cf4:	78ba      	ldrb	r2, [r7, #2]
 8008cf6:	78f9      	ldrb	r1, [r7, #3]
 8008cf8:	8b3b      	ldrh	r3, [r7, #24]
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	7d3b      	ldrb	r3, [r7, #20]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	7c3b      	ldrb	r3, [r7, #16]
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	4603      	mov	r3, r0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fa57 	bl	80091ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fa76 	bl	8009218 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	460b      	mov	r3, r1
 8008d40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f839 	bl	8008dba <USBH_GetFreePipe>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d4c:	89fb      	ldrh	r3, [r7, #14]
 8008d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00b      	beq.n	8008d6e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d56:	78fa      	ldrb	r2, [r7, #3]
 8008d58:	89fb      	ldrh	r3, [r7, #14]
 8008d5a:	f003 030f 	and.w	r3, r3, #15
 8008d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	b2db      	uxtb	r3, r3
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	2b0f      	cmp	r3, #15
 8008d8a:	d80f      	bhi.n	8008dac <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4413      	add	r3, r2
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]
 8008dca:	e010      	b.n	8008dee <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	e007      	b.n	8008df8 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	3301      	adds	r3, #1
 8008dec:	73fb      	strb	r3, [r7, #15]
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b0f      	cmp	r3, #15
 8008df2:	d9eb      	bls.n	8008dcc <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e08:	2201      	movs	r2, #1
 8008e0a:	490e      	ldr	r1, [pc, #56]	; (8008e44 <MX_USB_HOST_Init+0x40>)
 8008e0c:	480e      	ldr	r0, [pc, #56]	; (8008e48 <MX_USB_HOST_Init+0x44>)
 8008e0e:	f7fe fb9e 	bl	800754e <USBH_Init>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e18:	f7f8 fbd6 	bl	80015c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MIDI_CLASS) != USBH_OK)
 8008e1c:	490b      	ldr	r1, [pc, #44]	; (8008e4c <MX_USB_HOST_Init+0x48>)
 8008e1e:	480a      	ldr	r0, [pc, #40]	; (8008e48 <MX_USB_HOST_Init+0x44>)
 8008e20:	f7fe fc24 	bl	800766c <USBH_RegisterClass>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e2a:	f7f8 fbcd 	bl	80015c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e2e:	4806      	ldr	r0, [pc, #24]	; (8008e48 <MX_USB_HOST_Init+0x44>)
 8008e30:	f7fe fca9 	bl	8007786 <USBH_Start>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e3a:	f7f8 fbc5 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e3e:	bf00      	nop
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	08008e65 	.word	0x08008e65
 8008e48:	20004d48 	.word	0x20004d48
 8008e4c:	20000010 	.word	0x20000010

08008e50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e54:	4802      	ldr	r0, [pc, #8]	; (8008e60 <MX_USB_HOST_Process+0x10>)
 8008e56:	f7fe fca7 	bl	80077a8 <USBH_Process>
}
 8008e5a:	bf00      	nop
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20004d48 	.word	0x20004d48

08008e64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	3b01      	subs	r3, #1
 8008e74:	2b04      	cmp	r3, #4
 8008e76:	d819      	bhi.n	8008eac <USBH_UserProcess+0x48>
 8008e78:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <USBH_UserProcess+0x1c>)
 8008e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7e:	bf00      	nop
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	08008e9d 	.word	0x08008e9d
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008ea5 	.word	0x08008ea5
 8008e90:	08008e95 	.word	0x08008e95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e94:	4b09      	ldr	r3, [pc, #36]	; (8008ebc <USBH_UserProcess+0x58>)
 8008e96:	2203      	movs	r2, #3
 8008e98:	701a      	strb	r2, [r3, #0]
  break;
 8008e9a:	e008      	b.n	8008eae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <USBH_UserProcess+0x58>)
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	701a      	strb	r2, [r3, #0]
  break;
 8008ea2:	e004      	b.n	8008eae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <USBH_UserProcess+0x58>)
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	701a      	strb	r2, [r3, #0]
  break;
 8008eaa:	e000      	b.n	8008eae <USBH_UserProcess+0x4a>

  default:
  break;
 8008eac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	200051f0 	.word	0x200051f0

08008ec0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08a      	sub	sp, #40	; 0x28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ec8:	f107 0314 	add.w	r3, r7, #20
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	605a      	str	r2, [r3, #4]
 8008ed2:	609a      	str	r2, [r3, #8]
 8008ed4:	60da      	str	r2, [r3, #12]
 8008ed6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ee0:	d147      	bne.n	8008f72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	613b      	str	r3, [r7, #16]
 8008ee6:	4b25      	ldr	r3, [pc, #148]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	4a24      	ldr	r2, [pc, #144]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008eec:	f043 0301 	orr.w	r3, r3, #1
 8008ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ef2:	4b22      	ldr	r3, [pc, #136]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	613b      	str	r3, [r7, #16]
 8008efc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f0c:	f107 0314 	add.w	r3, r7, #20
 8008f10:	4619      	mov	r1, r3
 8008f12:	481b      	ldr	r0, [pc, #108]	; (8008f80 <HAL_HCD_MspInit+0xc0>)
 8008f14:	f7f9 fae6 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f1e:	2302      	movs	r3, #2
 8008f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f26:	2303      	movs	r3, #3
 8008f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f2a:	230a      	movs	r3, #10
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2e:	f107 0314 	add.w	r3, r7, #20
 8008f32:	4619      	mov	r1, r3
 8008f34:	4812      	ldr	r0, [pc, #72]	; (8008f80 <HAL_HCD_MspInit+0xc0>)
 8008f36:	f7f9 fad5 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f3a:	4b10      	ldr	r3, [pc, #64]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3e:	4a0f      	ldr	r2, [pc, #60]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f44:	6353      	str	r3, [r2, #52]	; 0x34
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4e:	4a0b      	ldr	r2, [pc, #44]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f54:	6453      	str	r3, [r2, #68]	; 0x44
 8008f56:	4b09      	ldr	r3, [pc, #36]	; (8008f7c <HAL_HCD_MspInit+0xbc>)
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f62:	2200      	movs	r2, #0
 8008f64:	2100      	movs	r1, #0
 8008f66:	2043      	movs	r0, #67	; 0x43
 8008f68:	f7f8 ff15 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f6c:	2043      	movs	r0, #67	; 0x43
 8008f6e:	f7f8 ff2e 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f72:	bf00      	nop
 8008f74:	3728      	adds	r7, #40	; 0x28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	40020000 	.word	0x40020000

08008f84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe ffe9 	bl	8007f6a <USBH_LL_IncTimer>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff f821 	bl	8007ff6 <USBH_LL_Connect>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff f82a 	bl	8008024 <USBH_LL_Disconnect>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	70fb      	strb	r3, [r7, #3]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe ffdb 	bl	8007fbe <USBH_LL_PortEnabled>
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800901e:	4618      	mov	r0, r3
 8009020:	f7fe ffdb 	bl	8007fda <USBH_LL_PortDisabled>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800903a:	2b01      	cmp	r3, #1
 800903c:	d12a      	bne.n	8009094 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800903e:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <USBH_LL_Init+0x74>)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <USBH_LL_Init+0x74>)
 800904a:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800904e:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <USBH_LL_Init+0x74>)
 8009050:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009054:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009056:	4b12      	ldr	r3, [pc, #72]	; (80090a0 <USBH_LL_Init+0x74>)
 8009058:	2208      	movs	r2, #8
 800905a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800905c:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <USBH_LL_Init+0x74>)
 800905e:	2201      	movs	r2, #1
 8009060:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009062:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <USBH_LL_Init+0x74>)
 8009064:	2200      	movs	r2, #0
 8009066:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <USBH_LL_Init+0x74>)
 800906a:	2202      	movs	r2, #2
 800906c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800906e:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <USBH_LL_Init+0x74>)
 8009070:	2200      	movs	r2, #0
 8009072:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009074:	480a      	ldr	r0, [pc, #40]	; (80090a0 <USBH_LL_Init+0x74>)
 8009076:	f7f9 fbec 	bl	8002852 <HAL_HCD_Init>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009080:	f7f8 faa2 	bl	80015c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009084:	4806      	ldr	r0, [pc, #24]	; (80090a0 <USBH_LL_Init+0x74>)
 8009086:	f7f9 ffd0 	bl	800302a <HAL_HCD_GetCurrentFrame>
 800908a:	4603      	mov	r3, r0
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fe ff5c 	bl	8007f4c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	200051f4 	.word	0x200051f4

080090a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f9 ff3f 	bl	8002f3e <HAL_HCD_Start>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f95c 	bl	8009384 <USBH_Get_USB_Status>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b084      	sub	sp, #16
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7f9 ff47 	bl	8002f84 <HAL_HCD_Stop>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 f941 	bl	8009384 <USBH_Get_USB_Status>
 8009102:	4603      	mov	r3, r0
 8009104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009106:	7bbb      	ldrb	r3, [r7, #14]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009122:	4618      	mov	r0, r3
 8009124:	f7f9 ff8f 	bl	8003046 <HAL_HCD_GetCurrentSpeed>
 8009128:	4603      	mov	r3, r0
 800912a:	2b02      	cmp	r3, #2
 800912c:	d00c      	beq.n	8009148 <USBH_LL_GetSpeed+0x38>
 800912e:	2b02      	cmp	r3, #2
 8009130:	d80d      	bhi.n	800914e <USBH_LL_GetSpeed+0x3e>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <USBH_LL_GetSpeed+0x2c>
 8009136:	2b01      	cmp	r3, #1
 8009138:	d003      	beq.n	8009142 <USBH_LL_GetSpeed+0x32>
 800913a:	e008      	b.n	800914e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]
    break;
 8009140:	e008      	b.n	8009154 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
    break;
 8009146:	e005      	b.n	8009154 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009148:	2302      	movs	r3, #2
 800914a:	73fb      	strb	r3, [r7, #15]
    break;
 800914c:	e002      	b.n	8009154 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800914e:	2301      	movs	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
    break;
 8009152:	bf00      	nop
  }
  return  speed;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009174:	4618      	mov	r0, r3
 8009176:	f7f9 ff22 	bl	8002fbe <HAL_HCD_ResetPort>
 800917a:	4603      	mov	r3, r0
 800917c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800917e:	7bfb      	ldrb	r3, [r7, #15]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 f8ff 	bl	8009384 <USBH_Get_USB_Status>
 8009186:	4603      	mov	r3, r0
 8009188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800918a:	7bbb      	ldrb	r3, [r7, #14]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	4611      	mov	r1, r2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7f9 ff29 	bl	8003002 <HAL_HCD_HC_GetXferCount>
 80091b0:	4603      	mov	r3, r0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091ba:	b590      	push	{r4, r7, lr}
 80091bc:	b089      	sub	sp, #36	; 0x24
 80091be:	af04      	add	r7, sp, #16
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	461a      	mov	r2, r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	70fb      	strb	r3, [r7, #3]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70bb      	strb	r3, [r7, #2]
 80091d0:	4613      	mov	r3, r2
 80091d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 80091e2:	787c      	ldrb	r4, [r7, #1]
 80091e4:	78ba      	ldrb	r2, [r7, #2]
 80091e6:	78f9      	ldrb	r1, [r7, #3]
 80091e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80091ea:	9302      	str	r3, [sp, #8]
 80091ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	4623      	mov	r3, r4
 80091fa:	f7f9 fb8c 	bl	8002916 <HAL_HCD_HC_Init>
 80091fe:	4603      	mov	r3, r0
 8009200:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	4618      	mov	r0, r3
 8009206:	f000 f8bd 	bl	8009384 <USBH_Get_USB_Status>
 800920a:	4603      	mov	r3, r0
 800920c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800920e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	bd90      	pop	{r4, r7, pc}

08009218 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009228:	2300      	movs	r3, #0
 800922a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f7f9 fbfc 	bl	8002a34 <HAL_HCD_HC_Halt>
 800923c:	4603      	mov	r3, r0
 800923e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009240:	7bfb      	ldrb	r3, [r7, #15]
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f89e 	bl	8009384 <USBH_Get_USB_Status>
 8009248:	4603      	mov	r3, r0
 800924a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924c:	7bbb      	ldrb	r3, [r7, #14]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009256:	b590      	push	{r4, r7, lr}
 8009258:	b089      	sub	sp, #36	; 0x24
 800925a:	af04      	add	r7, sp, #16
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	461a      	mov	r2, r3
 8009264:	4603      	mov	r3, r0
 8009266:	70fb      	strb	r3, [r7, #3]
 8009268:	460b      	mov	r3, r1
 800926a:	70bb      	strb	r3, [r7, #2]
 800926c:	4613      	mov	r3, r2
 800926e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800927e:	787c      	ldrb	r4, [r7, #1]
 8009280:	78ba      	ldrb	r2, [r7, #2]
 8009282:	78f9      	ldrb	r1, [r7, #3]
 8009284:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009288:	9303      	str	r3, [sp, #12]
 800928a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800928c:	9302      	str	r3, [sp, #8]
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	4623      	mov	r3, r4
 800929a:	f7f9 fbef 	bl	8002a7c <HAL_HCD_HC_SubmitRequest>
 800929e:	4603      	mov	r3, r0
 80092a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f86d 	bl	8009384 <USBH_Get_USB_Status>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd90      	pop	{r4, r7, pc}

080092b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	4611      	mov	r1, r2
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7f9 fe83 	bl	8002fda <HAL_HCD_HC_GetURBState>
 80092d4:	4603      	mov	r3, r0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	460b      	mov	r3, r1
 80092e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d103      	bne.n	80092fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f870 	bl	80093dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80092fc:	20c8      	movs	r0, #200	; 0xc8
 80092fe:	f7f8 fc4b 	bl	8001b98 <HAL_Delay>
  return USBH_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
 8009318:	4613      	mov	r3, r2
 800931a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8009322:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	212c      	movs	r1, #44	; 0x2c
 800932a:	fb01 f303 	mul.w	r3, r1, r3
 800932e:	4413      	add	r3, r2
 8009330:	333b      	adds	r3, #59	; 0x3b
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d009      	beq.n	800934c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	212c      	movs	r1, #44	; 0x2c
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	4413      	add	r3, r2
 8009344:	3354      	adds	r3, #84	; 0x54
 8009346:	78ba      	ldrb	r2, [r7, #2]
 8009348:	701a      	strb	r2, [r3, #0]
 800934a:	e008      	b.n	800935e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	212c      	movs	r1, #44	; 0x2c
 8009352:	fb01 f303 	mul.w	r3, r1, r3
 8009356:	4413      	add	r3, r2
 8009358:	3355      	adds	r3, #85	; 0x55
 800935a:	78ba      	ldrb	r2, [r7, #2]
 800935c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7f8 fc0f 	bl	8001b98 <HAL_Delay>
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009384:	b480      	push	{r7}
 8009386:	b085      	sub	sp, #20
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	2b03      	cmp	r3, #3
 8009396:	d817      	bhi.n	80093c8 <USBH_Get_USB_Status+0x44>
 8009398:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <USBH_Get_USB_Status+0x1c>)
 800939a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800939e:	bf00      	nop
 80093a0:	080093b1 	.word	0x080093b1
 80093a4:	080093b7 	.word	0x080093b7
 80093a8:	080093bd 	.word	0x080093bd
 80093ac:	080093c3 	.word	0x080093c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73fb      	strb	r3, [r7, #15]
    break;
 80093b4:	e00b      	b.n	80093ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093b6:	2302      	movs	r3, #2
 80093b8:	73fb      	strb	r3, [r7, #15]
    break;
 80093ba:	e008      	b.n	80093ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093bc:	2301      	movs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]
    break;
 80093c0:	e005      	b.n	80093ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093c2:	2302      	movs	r3, #2
 80093c4:	73fb      	strb	r3, [r7, #15]
    break;
 80093c6:	e002      	b.n	80093ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80093c8:	2302      	movs	r3, #2
 80093ca:	73fb      	strb	r3, [r7, #15]
    break;
 80093cc:	bf00      	nop
  }
  return usb_status;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]
 80093f4:	e001      	b.n	80093fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80093f6:	2301      	movs	r3, #1
 80093f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	461a      	mov	r2, r3
 80093fe:	2101      	movs	r1, #1
 8009400:	4803      	ldr	r0, [pc, #12]	; (8009410 <MX_DriverVbusFS+0x34>)
 8009402:	f7f9 f9f3 	bl	80027ec <HAL_GPIO_WritePin>
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	40020800 	.word	0x40020800

08009414 <__errno>:
 8009414:	4b01      	ldr	r3, [pc, #4]	; (800941c <__errno+0x8>)
 8009416:	6818      	ldr	r0, [r3, #0]
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	20000030 	.word	0x20000030

08009420 <__libc_init_array>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	4d0d      	ldr	r5, [pc, #52]	; (8009458 <__libc_init_array+0x38>)
 8009424:	4c0d      	ldr	r4, [pc, #52]	; (800945c <__libc_init_array+0x3c>)
 8009426:	1b64      	subs	r4, r4, r5
 8009428:	10a4      	asrs	r4, r4, #2
 800942a:	2600      	movs	r6, #0
 800942c:	42a6      	cmp	r6, r4
 800942e:	d109      	bne.n	8009444 <__libc_init_array+0x24>
 8009430:	4d0b      	ldr	r5, [pc, #44]	; (8009460 <__libc_init_array+0x40>)
 8009432:	4c0c      	ldr	r4, [pc, #48]	; (8009464 <__libc_init_array+0x44>)
 8009434:	f001 f97a 	bl	800a72c <_init>
 8009438:	1b64      	subs	r4, r4, r5
 800943a:	10a4      	asrs	r4, r4, #2
 800943c:	2600      	movs	r6, #0
 800943e:	42a6      	cmp	r6, r4
 8009440:	d105      	bne.n	800944e <__libc_init_array+0x2e>
 8009442:	bd70      	pop	{r4, r5, r6, pc}
 8009444:	f855 3b04 	ldr.w	r3, [r5], #4
 8009448:	4798      	blx	r3
 800944a:	3601      	adds	r6, #1
 800944c:	e7ee      	b.n	800942c <__libc_init_array+0xc>
 800944e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009452:	4798      	blx	r3
 8009454:	3601      	adds	r6, #1
 8009456:	e7f2      	b.n	800943e <__libc_init_array+0x1e>
 8009458:	0800a950 	.word	0x0800a950
 800945c:	0800a950 	.word	0x0800a950
 8009460:	0800a950 	.word	0x0800a950
 8009464:	0800a954 	.word	0x0800a954

08009468 <malloc>:
 8009468:	4b02      	ldr	r3, [pc, #8]	; (8009474 <malloc+0xc>)
 800946a:	4601      	mov	r1, r0
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	f000 b87f 	b.w	8009570 <_malloc_r>
 8009472:	bf00      	nop
 8009474:	20000030 	.word	0x20000030

08009478 <free>:
 8009478:	4b02      	ldr	r3, [pc, #8]	; (8009484 <free+0xc>)
 800947a:	4601      	mov	r1, r0
 800947c:	6818      	ldr	r0, [r3, #0]
 800947e:	f000 b80b 	b.w	8009498 <_free_r>
 8009482:	bf00      	nop
 8009484:	20000030 	.word	0x20000030

08009488 <memset>:
 8009488:	4402      	add	r2, r0
 800948a:	4603      	mov	r3, r0
 800948c:	4293      	cmp	r3, r2
 800948e:	d100      	bne.n	8009492 <memset+0xa>
 8009490:	4770      	bx	lr
 8009492:	f803 1b01 	strb.w	r1, [r3], #1
 8009496:	e7f9      	b.n	800948c <memset+0x4>

08009498 <_free_r>:
 8009498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800949a:	2900      	cmp	r1, #0
 800949c:	d044      	beq.n	8009528 <_free_r+0x90>
 800949e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094a2:	9001      	str	r0, [sp, #4]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f1a1 0404 	sub.w	r4, r1, #4
 80094aa:	bfb8      	it	lt
 80094ac:	18e4      	addlt	r4, r4, r3
 80094ae:	f000 f8e3 	bl	8009678 <__malloc_lock>
 80094b2:	4a1e      	ldr	r2, [pc, #120]	; (800952c <_free_r+0x94>)
 80094b4:	9801      	ldr	r0, [sp, #4]
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	b933      	cbnz	r3, 80094c8 <_free_r+0x30>
 80094ba:	6063      	str	r3, [r4, #4]
 80094bc:	6014      	str	r4, [r2, #0]
 80094be:	b003      	add	sp, #12
 80094c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094c4:	f000 b8de 	b.w	8009684 <__malloc_unlock>
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d908      	bls.n	80094de <_free_r+0x46>
 80094cc:	6825      	ldr	r5, [r4, #0]
 80094ce:	1961      	adds	r1, r4, r5
 80094d0:	428b      	cmp	r3, r1
 80094d2:	bf01      	itttt	eq
 80094d4:	6819      	ldreq	r1, [r3, #0]
 80094d6:	685b      	ldreq	r3, [r3, #4]
 80094d8:	1949      	addeq	r1, r1, r5
 80094da:	6021      	streq	r1, [r4, #0]
 80094dc:	e7ed      	b.n	80094ba <_free_r+0x22>
 80094de:	461a      	mov	r2, r3
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	b10b      	cbz	r3, 80094e8 <_free_r+0x50>
 80094e4:	42a3      	cmp	r3, r4
 80094e6:	d9fa      	bls.n	80094de <_free_r+0x46>
 80094e8:	6811      	ldr	r1, [r2, #0]
 80094ea:	1855      	adds	r5, r2, r1
 80094ec:	42a5      	cmp	r5, r4
 80094ee:	d10b      	bne.n	8009508 <_free_r+0x70>
 80094f0:	6824      	ldr	r4, [r4, #0]
 80094f2:	4421      	add	r1, r4
 80094f4:	1854      	adds	r4, r2, r1
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	6011      	str	r1, [r2, #0]
 80094fa:	d1e0      	bne.n	80094be <_free_r+0x26>
 80094fc:	681c      	ldr	r4, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	6053      	str	r3, [r2, #4]
 8009502:	4421      	add	r1, r4
 8009504:	6011      	str	r1, [r2, #0]
 8009506:	e7da      	b.n	80094be <_free_r+0x26>
 8009508:	d902      	bls.n	8009510 <_free_r+0x78>
 800950a:	230c      	movs	r3, #12
 800950c:	6003      	str	r3, [r0, #0]
 800950e:	e7d6      	b.n	80094be <_free_r+0x26>
 8009510:	6825      	ldr	r5, [r4, #0]
 8009512:	1961      	adds	r1, r4, r5
 8009514:	428b      	cmp	r3, r1
 8009516:	bf04      	itt	eq
 8009518:	6819      	ldreq	r1, [r3, #0]
 800951a:	685b      	ldreq	r3, [r3, #4]
 800951c:	6063      	str	r3, [r4, #4]
 800951e:	bf04      	itt	eq
 8009520:	1949      	addeq	r1, r1, r5
 8009522:	6021      	streq	r1, [r4, #0]
 8009524:	6054      	str	r4, [r2, #4]
 8009526:	e7ca      	b.n	80094be <_free_r+0x26>
 8009528:	b003      	add	sp, #12
 800952a:	bd30      	pop	{r4, r5, pc}
 800952c:	200054f8 	.word	0x200054f8

08009530 <sbrk_aligned>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	4e0e      	ldr	r6, [pc, #56]	; (800956c <sbrk_aligned+0x3c>)
 8009534:	460c      	mov	r4, r1
 8009536:	6831      	ldr	r1, [r6, #0]
 8009538:	4605      	mov	r5, r0
 800953a:	b911      	cbnz	r1, 8009542 <sbrk_aligned+0x12>
 800953c:	f000 f88c 	bl	8009658 <_sbrk_r>
 8009540:	6030      	str	r0, [r6, #0]
 8009542:	4621      	mov	r1, r4
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f887 	bl	8009658 <_sbrk_r>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d00a      	beq.n	8009564 <sbrk_aligned+0x34>
 800954e:	1cc4      	adds	r4, r0, #3
 8009550:	f024 0403 	bic.w	r4, r4, #3
 8009554:	42a0      	cmp	r0, r4
 8009556:	d007      	beq.n	8009568 <sbrk_aligned+0x38>
 8009558:	1a21      	subs	r1, r4, r0
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f87c 	bl	8009658 <_sbrk_r>
 8009560:	3001      	adds	r0, #1
 8009562:	d101      	bne.n	8009568 <sbrk_aligned+0x38>
 8009564:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009568:	4620      	mov	r0, r4
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	200054fc 	.word	0x200054fc

08009570 <_malloc_r>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	1ccd      	adds	r5, r1, #3
 8009576:	f025 0503 	bic.w	r5, r5, #3
 800957a:	3508      	adds	r5, #8
 800957c:	2d0c      	cmp	r5, #12
 800957e:	bf38      	it	cc
 8009580:	250c      	movcc	r5, #12
 8009582:	2d00      	cmp	r5, #0
 8009584:	4607      	mov	r7, r0
 8009586:	db01      	blt.n	800958c <_malloc_r+0x1c>
 8009588:	42a9      	cmp	r1, r5
 800958a:	d905      	bls.n	8009598 <_malloc_r+0x28>
 800958c:	230c      	movs	r3, #12
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	2600      	movs	r6, #0
 8009592:	4630      	mov	r0, r6
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	4e2e      	ldr	r6, [pc, #184]	; (8009654 <_malloc_r+0xe4>)
 800959a:	f000 f86d 	bl	8009678 <__malloc_lock>
 800959e:	6833      	ldr	r3, [r6, #0]
 80095a0:	461c      	mov	r4, r3
 80095a2:	bb34      	cbnz	r4, 80095f2 <_malloc_r+0x82>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7ff ffc2 	bl	8009530 <sbrk_aligned>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	4604      	mov	r4, r0
 80095b0:	d14d      	bne.n	800964e <_malloc_r+0xde>
 80095b2:	6834      	ldr	r4, [r6, #0]
 80095b4:	4626      	mov	r6, r4
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	d140      	bne.n	800963c <_malloc_r+0xcc>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4631      	mov	r1, r6
 80095be:	4638      	mov	r0, r7
 80095c0:	eb04 0803 	add.w	r8, r4, r3
 80095c4:	f000 f848 	bl	8009658 <_sbrk_r>
 80095c8:	4580      	cmp	r8, r0
 80095ca:	d13a      	bne.n	8009642 <_malloc_r+0xd2>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	3503      	adds	r5, #3
 80095d0:	1a6d      	subs	r5, r5, r1
 80095d2:	f025 0503 	bic.w	r5, r5, #3
 80095d6:	3508      	adds	r5, #8
 80095d8:	2d0c      	cmp	r5, #12
 80095da:	bf38      	it	cc
 80095dc:	250c      	movcc	r5, #12
 80095de:	4629      	mov	r1, r5
 80095e0:	4638      	mov	r0, r7
 80095e2:	f7ff ffa5 	bl	8009530 <sbrk_aligned>
 80095e6:	3001      	adds	r0, #1
 80095e8:	d02b      	beq.n	8009642 <_malloc_r+0xd2>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	442b      	add	r3, r5
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	e00e      	b.n	8009610 <_malloc_r+0xa0>
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	1b52      	subs	r2, r2, r5
 80095f6:	d41e      	bmi.n	8009636 <_malloc_r+0xc6>
 80095f8:	2a0b      	cmp	r2, #11
 80095fa:	d916      	bls.n	800962a <_malloc_r+0xba>
 80095fc:	1961      	adds	r1, r4, r5
 80095fe:	42a3      	cmp	r3, r4
 8009600:	6025      	str	r5, [r4, #0]
 8009602:	bf18      	it	ne
 8009604:	6059      	strne	r1, [r3, #4]
 8009606:	6863      	ldr	r3, [r4, #4]
 8009608:	bf08      	it	eq
 800960a:	6031      	streq	r1, [r6, #0]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4638      	mov	r0, r7
 8009612:	f104 060b 	add.w	r6, r4, #11
 8009616:	f000 f835 	bl	8009684 <__malloc_unlock>
 800961a:	f026 0607 	bic.w	r6, r6, #7
 800961e:	1d23      	adds	r3, r4, #4
 8009620:	1af2      	subs	r2, r6, r3
 8009622:	d0b6      	beq.n	8009592 <_malloc_r+0x22>
 8009624:	1b9b      	subs	r3, r3, r6
 8009626:	50a3      	str	r3, [r4, r2]
 8009628:	e7b3      	b.n	8009592 <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	6032      	streq	r2, [r6, #0]
 8009632:	605a      	strne	r2, [r3, #4]
 8009634:	e7ec      	b.n	8009610 <_malloc_r+0xa0>
 8009636:	4623      	mov	r3, r4
 8009638:	6864      	ldr	r4, [r4, #4]
 800963a:	e7b2      	b.n	80095a2 <_malloc_r+0x32>
 800963c:	4634      	mov	r4, r6
 800963e:	6876      	ldr	r6, [r6, #4]
 8009640:	e7b9      	b.n	80095b6 <_malloc_r+0x46>
 8009642:	230c      	movs	r3, #12
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	4638      	mov	r0, r7
 8009648:	f000 f81c 	bl	8009684 <__malloc_unlock>
 800964c:	e7a1      	b.n	8009592 <_malloc_r+0x22>
 800964e:	6025      	str	r5, [r4, #0]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa0>
 8009652:	bf00      	nop
 8009654:	200054f8 	.word	0x200054f8

08009658 <_sbrk_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4d06      	ldr	r5, [pc, #24]	; (8009674 <_sbrk_r+0x1c>)
 800965c:	2300      	movs	r3, #0
 800965e:	4604      	mov	r4, r0
 8009660:	4608      	mov	r0, r1
 8009662:	602b      	str	r3, [r5, #0]
 8009664:	f7f8 f8f8 	bl	8001858 <_sbrk>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_sbrk_r+0x1a>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_sbrk_r+0x1a>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	20005500 	.word	0x20005500

08009678 <__malloc_lock>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__malloc_lock+0x8>)
 800967a:	f000 b809 	b.w	8009690 <__retarget_lock_acquire_recursive>
 800967e:	bf00      	nop
 8009680:	20005504 	.word	0x20005504

08009684 <__malloc_unlock>:
 8009684:	4801      	ldr	r0, [pc, #4]	; (800968c <__malloc_unlock+0x8>)
 8009686:	f000 b804 	b.w	8009692 <__retarget_lock_release_recursive>
 800968a:	bf00      	nop
 800968c:	20005504 	.word	0x20005504

08009690 <__retarget_lock_acquire_recursive>:
 8009690:	4770      	bx	lr

08009692 <__retarget_lock_release_recursive>:
 8009692:	4770      	bx	lr
 8009694:	0000      	movs	r0, r0
	...

08009698 <sin>:
 8009698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800969a:	ec53 2b10 	vmov	r2, r3, d0
 800969e:	4828      	ldr	r0, [pc, #160]	; (8009740 <sin+0xa8>)
 80096a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096a4:	4281      	cmp	r1, r0
 80096a6:	dc07      	bgt.n	80096b8 <sin+0x20>
 80096a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009738 <sin+0xa0>
 80096ac:	2000      	movs	r0, #0
 80096ae:	b005      	add	sp, #20
 80096b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096b4:	f000 be6c 	b.w	800a390 <__kernel_sin>
 80096b8:	4822      	ldr	r0, [pc, #136]	; (8009744 <sin+0xac>)
 80096ba:	4281      	cmp	r1, r0
 80096bc:	dd09      	ble.n	80096d2 <sin+0x3a>
 80096be:	ee10 0a10 	vmov	r0, s0
 80096c2:	4619      	mov	r1, r3
 80096c4:	f7f6 feb6 	bl	8000434 <__aeabi_dsub>
 80096c8:	ec41 0b10 	vmov	d0, r0, r1
 80096cc:	b005      	add	sp, #20
 80096ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80096d2:	4668      	mov	r0, sp
 80096d4:	f000 f838 	bl	8009748 <__ieee754_rem_pio2>
 80096d8:	f000 0003 	and.w	r0, r0, #3
 80096dc:	2801      	cmp	r0, #1
 80096de:	d00c      	beq.n	80096fa <sin+0x62>
 80096e0:	2802      	cmp	r0, #2
 80096e2:	d011      	beq.n	8009708 <sin+0x70>
 80096e4:	b9f0      	cbnz	r0, 8009724 <sin+0x8c>
 80096e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096ea:	ed9d 0b00 	vldr	d0, [sp]
 80096ee:	2001      	movs	r0, #1
 80096f0:	f000 fe4e 	bl	800a390 <__kernel_sin>
 80096f4:	ec51 0b10 	vmov	r0, r1, d0
 80096f8:	e7e6      	b.n	80096c8 <sin+0x30>
 80096fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096fe:	ed9d 0b00 	vldr	d0, [sp]
 8009702:	f000 fa2d 	bl	8009b60 <__kernel_cos>
 8009706:	e7f5      	b.n	80096f4 <sin+0x5c>
 8009708:	ed9d 1b02 	vldr	d1, [sp, #8]
 800970c:	ed9d 0b00 	vldr	d0, [sp]
 8009710:	2001      	movs	r0, #1
 8009712:	f000 fe3d 	bl	800a390 <__kernel_sin>
 8009716:	ec53 2b10 	vmov	r2, r3, d0
 800971a:	ee10 0a10 	vmov	r0, s0
 800971e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009722:	e7d1      	b.n	80096c8 <sin+0x30>
 8009724:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009728:	ed9d 0b00 	vldr	d0, [sp]
 800972c:	f000 fa18 	bl	8009b60 <__kernel_cos>
 8009730:	e7f1      	b.n	8009716 <sin+0x7e>
 8009732:	bf00      	nop
 8009734:	f3af 8000 	nop.w
	...
 8009740:	3fe921fb 	.word	0x3fe921fb
 8009744:	7fefffff 	.word	0x7fefffff

08009748 <__ieee754_rem_pio2>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	ed2d 8b02 	vpush	{d8}
 8009750:	ec55 4b10 	vmov	r4, r5, d0
 8009754:	4bca      	ldr	r3, [pc, #808]	; (8009a80 <__ieee754_rem_pio2+0x338>)
 8009756:	b08b      	sub	sp, #44	; 0x2c
 8009758:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800975c:	4598      	cmp	r8, r3
 800975e:	4682      	mov	sl, r0
 8009760:	9502      	str	r5, [sp, #8]
 8009762:	dc08      	bgt.n	8009776 <__ieee754_rem_pio2+0x2e>
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	ed80 0b00 	vstr	d0, [r0]
 800976c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009770:	f04f 0b00 	mov.w	fp, #0
 8009774:	e028      	b.n	80097c8 <__ieee754_rem_pio2+0x80>
 8009776:	4bc3      	ldr	r3, [pc, #780]	; (8009a84 <__ieee754_rem_pio2+0x33c>)
 8009778:	4598      	cmp	r8, r3
 800977a:	dc78      	bgt.n	800986e <__ieee754_rem_pio2+0x126>
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	4ec2      	ldr	r6, [pc, #776]	; (8009a88 <__ieee754_rem_pio2+0x340>)
 8009780:	2b00      	cmp	r3, #0
 8009782:	ee10 0a10 	vmov	r0, s0
 8009786:	a3b0      	add	r3, pc, #704	; (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	4629      	mov	r1, r5
 800978e:	dd39      	ble.n	8009804 <__ieee754_rem_pio2+0xbc>
 8009790:	f7f6 fe50 	bl	8000434 <__aeabi_dsub>
 8009794:	45b0      	cmp	r8, r6
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	d01b      	beq.n	80097d4 <__ieee754_rem_pio2+0x8c>
 800979c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 800979e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a2:	f7f6 fe47 	bl	8000434 <__aeabi_dsub>
 80097a6:	4602      	mov	r2, r0
 80097a8:	460b      	mov	r3, r1
 80097aa:	e9ca 2300 	strd	r2, r3, [sl]
 80097ae:	4620      	mov	r0, r4
 80097b0:	4629      	mov	r1, r5
 80097b2:	f7f6 fe3f 	bl	8000434 <__aeabi_dsub>
 80097b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fe3a 	bl	8000434 <__aeabi_dsub>
 80097c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80097c4:	f04f 0b01 	mov.w	fp, #1
 80097c8:	4658      	mov	r0, fp
 80097ca:	b00b      	add	sp, #44	; 0x2c
 80097cc:	ecbd 8b02 	vpop	{d8}
 80097d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009a58 <__ieee754_rem_pio2+0x310>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	f7f6 fe2b 	bl	8000434 <__aeabi_dsub>
 80097de:	a3a0      	add	r3, pc, #640	; (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	4604      	mov	r4, r0
 80097e6:	460d      	mov	r5, r1
 80097e8:	f7f6 fe24 	bl	8000434 <__aeabi_dsub>
 80097ec:	4602      	mov	r2, r0
 80097ee:	460b      	mov	r3, r1
 80097f0:	e9ca 2300 	strd	r2, r3, [sl]
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	f7f6 fe1c 	bl	8000434 <__aeabi_dsub>
 80097fc:	a398      	add	r3, pc, #608	; (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	e7db      	b.n	80097bc <__ieee754_rem_pio2+0x74>
 8009804:	f7f6 fe18 	bl	8000438 <__adddf3>
 8009808:	45b0      	cmp	r8, r6
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	d016      	beq.n	800983e <__ieee754_rem_pio2+0xf6>
 8009810:	a38f      	add	r3, pc, #572	; (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fe0f 	bl	8000438 <__adddf3>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	e9ca 2300 	strd	r2, r3, [sl]
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f6 fe05 	bl	8000434 <__aeabi_dsub>
 800982a:	a389      	add	r3, pc, #548	; (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f7f6 fe02 	bl	8000438 <__adddf3>
 8009834:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009838:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800983c:	e7c4      	b.n	80097c8 <__ieee754_rem_pio2+0x80>
 800983e:	a386      	add	r3, pc, #536	; (adr r3, 8009a58 <__ieee754_rem_pio2+0x310>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fdf8 	bl	8000438 <__adddf3>
 8009848:	a385      	add	r3, pc, #532	; (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	4604      	mov	r4, r0
 8009850:	460d      	mov	r5, r1
 8009852:	f7f6 fdf1 	bl	8000438 <__adddf3>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	e9ca 2300 	strd	r2, r3, [sl]
 800985e:	4620      	mov	r0, r4
 8009860:	4629      	mov	r1, r5
 8009862:	f7f6 fde7 	bl	8000434 <__aeabi_dsub>
 8009866:	a37e      	add	r3, pc, #504	; (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	e7e0      	b.n	8009830 <__ieee754_rem_pio2+0xe8>
 800986e:	4b87      	ldr	r3, [pc, #540]	; (8009a8c <__ieee754_rem_pio2+0x344>)
 8009870:	4598      	cmp	r8, r3
 8009872:	f300 80d9 	bgt.w	8009a28 <__ieee754_rem_pio2+0x2e0>
 8009876:	f000 fe49 	bl	800a50c <fabs>
 800987a:	ec55 4b10 	vmov	r4, r5, d0
 800987e:	ee10 0a10 	vmov	r0, s0
 8009882:	a379      	add	r3, pc, #484	; (adr r3, 8009a68 <__ieee754_rem_pio2+0x320>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	4629      	mov	r1, r5
 800988a:	f7f6 fca5 	bl	80001d8 <__aeabi_dmul>
 800988e:	4b80      	ldr	r3, [pc, #512]	; (8009a90 <__ieee754_rem_pio2+0x348>)
 8009890:	2200      	movs	r2, #0
 8009892:	f7f6 fdd1 	bl	8000438 <__adddf3>
 8009896:	f7f7 f80d 	bl	80008b4 <__aeabi_d2iz>
 800989a:	4683      	mov	fp, r0
 800989c:	f7f6 ff18 	bl	80006d0 <__aeabi_i2d>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	ec43 2b18 	vmov	d8, r2, r3
 80098a8:	a367      	add	r3, pc, #412	; (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fc93 	bl	80001d8 <__aeabi_dmul>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	4620      	mov	r0, r4
 80098b8:	4629      	mov	r1, r5
 80098ba:	f7f6 fdbb 	bl	8000434 <__aeabi_dsub>
 80098be:	a364      	add	r3, pc, #400	; (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	4606      	mov	r6, r0
 80098c6:	460f      	mov	r7, r1
 80098c8:	ec51 0b18 	vmov	r0, r1, d8
 80098cc:	f7f6 fc84 	bl	80001d8 <__aeabi_dmul>
 80098d0:	f1bb 0f1f 	cmp.w	fp, #31
 80098d4:	4604      	mov	r4, r0
 80098d6:	460d      	mov	r5, r1
 80098d8:	dc0d      	bgt.n	80098f6 <__ieee754_rem_pio2+0x1ae>
 80098da:	4b6e      	ldr	r3, [pc, #440]	; (8009a94 <__ieee754_rem_pio2+0x34c>)
 80098dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80098e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e4:	4543      	cmp	r3, r8
 80098e6:	d006      	beq.n	80098f6 <__ieee754_rem_pio2+0x1ae>
 80098e8:	4622      	mov	r2, r4
 80098ea:	462b      	mov	r3, r5
 80098ec:	4630      	mov	r0, r6
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f6 fda0 	bl	8000434 <__aeabi_dsub>
 80098f4:	e00f      	b.n	8009916 <__ieee754_rem_pio2+0x1ce>
 80098f6:	462b      	mov	r3, r5
 80098f8:	4622      	mov	r2, r4
 80098fa:	4630      	mov	r0, r6
 80098fc:	4639      	mov	r1, r7
 80098fe:	f7f6 fd99 	bl	8000434 <__aeabi_dsub>
 8009902:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009906:	9303      	str	r3, [sp, #12]
 8009908:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800990c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009910:	f1b8 0f10 	cmp.w	r8, #16
 8009914:	dc02      	bgt.n	800991c <__ieee754_rem_pio2+0x1d4>
 8009916:	e9ca 0100 	strd	r0, r1, [sl]
 800991a:	e039      	b.n	8009990 <__ieee754_rem_pio2+0x248>
 800991c:	a34e      	add	r3, pc, #312	; (adr r3, 8009a58 <__ieee754_rem_pio2+0x310>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	ec51 0b18 	vmov	r0, r1, d8
 8009926:	f7f6 fc57 	bl	80001d8 <__aeabi_dmul>
 800992a:	4604      	mov	r4, r0
 800992c:	460d      	mov	r5, r1
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4630      	mov	r0, r6
 8009934:	4639      	mov	r1, r7
 8009936:	f7f6 fd7d 	bl	8000434 <__aeabi_dsub>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4680      	mov	r8, r0
 8009940:	4689      	mov	r9, r1
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7f6 fd75 	bl	8000434 <__aeabi_dsub>
 800994a:	4622      	mov	r2, r4
 800994c:	462b      	mov	r3, r5
 800994e:	f7f6 fd71 	bl	8000434 <__aeabi_dsub>
 8009952:	a343      	add	r3, pc, #268	; (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	4604      	mov	r4, r0
 800995a:	460d      	mov	r5, r1
 800995c:	ec51 0b18 	vmov	r0, r1, d8
 8009960:	f7f6 fc3a 	bl	80001d8 <__aeabi_dmul>
 8009964:	4622      	mov	r2, r4
 8009966:	462b      	mov	r3, r5
 8009968:	f7f6 fd64 	bl	8000434 <__aeabi_dsub>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	4604      	mov	r4, r0
 8009972:	460d      	mov	r5, r1
 8009974:	4640      	mov	r0, r8
 8009976:	4649      	mov	r1, r9
 8009978:	f7f6 fd5c 	bl	8000434 <__aeabi_dsub>
 800997c:	9a03      	ldr	r2, [sp, #12]
 800997e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	2b31      	cmp	r3, #49	; 0x31
 8009986:	dc24      	bgt.n	80099d2 <__ieee754_rem_pio2+0x28a>
 8009988:	e9ca 0100 	strd	r0, r1, [sl]
 800998c:	4646      	mov	r6, r8
 800998e:	464f      	mov	r7, r9
 8009990:	e9da 8900 	ldrd	r8, r9, [sl]
 8009994:	4630      	mov	r0, r6
 8009996:	4642      	mov	r2, r8
 8009998:	464b      	mov	r3, r9
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fd4a 	bl	8000434 <__aeabi_dsub>
 80099a0:	462b      	mov	r3, r5
 80099a2:	4622      	mov	r2, r4
 80099a4:	f7f6 fd46 	bl	8000434 <__aeabi_dsub>
 80099a8:	9b02      	ldr	r3, [sp, #8]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099b0:	f6bf af0a 	bge.w	80097c8 <__ieee754_rem_pio2+0x80>
 80099b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099b8:	f8ca 3004 	str.w	r3, [sl, #4]
 80099bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099c0:	f8ca 8000 	str.w	r8, [sl]
 80099c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80099c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80099cc:	f1cb 0b00 	rsb	fp, fp, #0
 80099d0:	e6fa      	b.n	80097c8 <__ieee754_rem_pio2+0x80>
 80099d2:	a327      	add	r3, pc, #156	; (adr r3, 8009a70 <__ieee754_rem_pio2+0x328>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	ec51 0b18 	vmov	r0, r1, d8
 80099dc:	f7f6 fbfc 	bl	80001d8 <__aeabi_dmul>
 80099e0:	4604      	mov	r4, r0
 80099e2:	460d      	mov	r5, r1
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f6 fd22 	bl	8000434 <__aeabi_dsub>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4606      	mov	r6, r0
 80099f6:	460f      	mov	r7, r1
 80099f8:	4640      	mov	r0, r8
 80099fa:	4649      	mov	r1, r9
 80099fc:	f7f6 fd1a 	bl	8000434 <__aeabi_dsub>
 8009a00:	4622      	mov	r2, r4
 8009a02:	462b      	mov	r3, r5
 8009a04:	f7f6 fd16 	bl	8000434 <__aeabi_dsub>
 8009a08:	a31b      	add	r3, pc, #108	; (adr r3, 8009a78 <__ieee754_rem_pio2+0x330>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	4604      	mov	r4, r0
 8009a10:	460d      	mov	r5, r1
 8009a12:	ec51 0b18 	vmov	r0, r1, d8
 8009a16:	f7f6 fbdf 	bl	80001d8 <__aeabi_dmul>
 8009a1a:	4622      	mov	r2, r4
 8009a1c:	462b      	mov	r3, r5
 8009a1e:	f7f6 fd09 	bl	8000434 <__aeabi_dsub>
 8009a22:	4604      	mov	r4, r0
 8009a24:	460d      	mov	r5, r1
 8009a26:	e75f      	b.n	80098e8 <__ieee754_rem_pio2+0x1a0>
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <__ieee754_rem_pio2+0x350>)
 8009a2a:	4598      	cmp	r8, r3
 8009a2c:	dd36      	ble.n	8009a9c <__ieee754_rem_pio2+0x354>
 8009a2e:	ee10 2a10 	vmov	r2, s0
 8009a32:	462b      	mov	r3, r5
 8009a34:	4620      	mov	r0, r4
 8009a36:	4629      	mov	r1, r5
 8009a38:	f7f6 fcfc 	bl	8000434 <__aeabi_dsub>
 8009a3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009a40:	e9ca 0100 	strd	r0, r1, [sl]
 8009a44:	e694      	b.n	8009770 <__ieee754_rem_pio2+0x28>
 8009a46:	bf00      	nop
 8009a48:	54400000 	.word	0x54400000
 8009a4c:	3ff921fb 	.word	0x3ff921fb
 8009a50:	1a626331 	.word	0x1a626331
 8009a54:	3dd0b461 	.word	0x3dd0b461
 8009a58:	1a600000 	.word	0x1a600000
 8009a5c:	3dd0b461 	.word	0x3dd0b461
 8009a60:	2e037073 	.word	0x2e037073
 8009a64:	3ba3198a 	.word	0x3ba3198a
 8009a68:	6dc9c883 	.word	0x6dc9c883
 8009a6c:	3fe45f30 	.word	0x3fe45f30
 8009a70:	2e000000 	.word	0x2e000000
 8009a74:	3ba3198a 	.word	0x3ba3198a
 8009a78:	252049c1 	.word	0x252049c1
 8009a7c:	397b839a 	.word	0x397b839a
 8009a80:	3fe921fb 	.word	0x3fe921fb
 8009a84:	4002d97b 	.word	0x4002d97b
 8009a88:	3ff921fb 	.word	0x3ff921fb
 8009a8c:	413921fb 	.word	0x413921fb
 8009a90:	3fe00000 	.word	0x3fe00000
 8009a94:	0800a770 	.word	0x0800a770
 8009a98:	7fefffff 	.word	0x7fefffff
 8009a9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009aa0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009aa4:	ee10 0a10 	vmov	r0, s0
 8009aa8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009aac:	ee10 6a10 	vmov	r6, s0
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	f7f6 feff 	bl	80008b4 <__aeabi_d2iz>
 8009ab6:	f7f6 fe0b 	bl	80006d0 <__aeabi_i2d>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ac6:	f7f6 fcb5 	bl	8000434 <__aeabi_dsub>
 8009aca:	4b23      	ldr	r3, [pc, #140]	; (8009b58 <__ieee754_rem_pio2+0x410>)
 8009acc:	2200      	movs	r2, #0
 8009ace:	f7f6 fb83 	bl	80001d8 <__aeabi_dmul>
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	f7f6 feed 	bl	80008b4 <__aeabi_d2iz>
 8009ada:	f7f6 fdf9 	bl	80006d0 <__aeabi_i2d>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009aea:	f7f6 fca3 	bl	8000434 <__aeabi_dsub>
 8009aee:	4b1a      	ldr	r3, [pc, #104]	; (8009b58 <__ieee754_rem_pio2+0x410>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	f7f6 fb71 	bl	80001d8 <__aeabi_dmul>
 8009af6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009afa:	ad04      	add	r5, sp, #16
 8009afc:	f04f 0803 	mov.w	r8, #3
 8009b00:	46a9      	mov	r9, r5
 8009b02:	2600      	movs	r6, #0
 8009b04:	2700      	movs	r7, #0
 8009b06:	4632      	mov	r2, r6
 8009b08:	463b      	mov	r3, r7
 8009b0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009b0e:	46c3      	mov	fp, r8
 8009b10:	3d08      	subs	r5, #8
 8009b12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009b16:	f7f6 fe9b 	bl	8000850 <__aeabi_dcmpeq>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d1f3      	bne.n	8009b06 <__ieee754_rem_pio2+0x3be>
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <__ieee754_rem_pio2+0x414>)
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	2302      	movs	r3, #2
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	4622      	mov	r2, r4
 8009b28:	465b      	mov	r3, fp
 8009b2a:	4651      	mov	r1, sl
 8009b2c:	4648      	mov	r0, r9
 8009b2e:	f000 f8df 	bl	8009cf0 <__kernel_rem_pio2>
 8009b32:	9b02      	ldr	r3, [sp, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	4683      	mov	fp, r0
 8009b38:	f6bf ae46 	bge.w	80097c8 <__ieee754_rem_pio2+0x80>
 8009b3c:	e9da 2100 	ldrd	r2, r1, [sl]
 8009b40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b44:	e9ca 2300 	strd	r2, r3, [sl]
 8009b48:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b50:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009b54:	e73a      	b.n	80099cc <__ieee754_rem_pio2+0x284>
 8009b56:	bf00      	nop
 8009b58:	41700000 	.word	0x41700000
 8009b5c:	0800a7f0 	.word	0x0800a7f0

08009b60 <__kernel_cos>:
 8009b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	ec57 6b10 	vmov	r6, r7, d0
 8009b68:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009b6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009b70:	ed8d 1b00 	vstr	d1, [sp]
 8009b74:	da07      	bge.n	8009b86 <__kernel_cos+0x26>
 8009b76:	ee10 0a10 	vmov	r0, s0
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 fe9a 	bl	80008b4 <__aeabi_d2iz>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	f000 8088 	beq.w	8009c96 <__kernel_cos+0x136>
 8009b86:	4632      	mov	r2, r6
 8009b88:	463b      	mov	r3, r7
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	4639      	mov	r1, r7
 8009b8e:	f7f6 fb23 	bl	80001d8 <__aeabi_dmul>
 8009b92:	4b51      	ldr	r3, [pc, #324]	; (8009cd8 <__kernel_cos+0x178>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	4604      	mov	r4, r0
 8009b98:	460d      	mov	r5, r1
 8009b9a:	f7f6 fb1d 	bl	80001d8 <__aeabi_dmul>
 8009b9e:	a340      	add	r3, pc, #256	; (adr r3, 8009ca0 <__kernel_cos+0x140>)
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	468b      	mov	fp, r1
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7f6 fb14 	bl	80001d8 <__aeabi_dmul>
 8009bb0:	a33d      	add	r3, pc, #244	; (adr r3, 8009ca8 <__kernel_cos+0x148>)
 8009bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb6:	f7f6 fc3f 	bl	8000438 <__adddf3>
 8009bba:	4622      	mov	r2, r4
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	f7f6 fb0b 	bl	80001d8 <__aeabi_dmul>
 8009bc2:	a33b      	add	r3, pc, #236	; (adr r3, 8009cb0 <__kernel_cos+0x150>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f7f6 fc34 	bl	8000434 <__aeabi_dsub>
 8009bcc:	4622      	mov	r2, r4
 8009bce:	462b      	mov	r3, r5
 8009bd0:	f7f6 fb02 	bl	80001d8 <__aeabi_dmul>
 8009bd4:	a338      	add	r3, pc, #224	; (adr r3, 8009cb8 <__kernel_cos+0x158>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fc2d 	bl	8000438 <__adddf3>
 8009bde:	4622      	mov	r2, r4
 8009be0:	462b      	mov	r3, r5
 8009be2:	f7f6 faf9 	bl	80001d8 <__aeabi_dmul>
 8009be6:	a336      	add	r3, pc, #216	; (adr r3, 8009cc0 <__kernel_cos+0x160>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fc22 	bl	8000434 <__aeabi_dsub>
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	f7f6 faf0 	bl	80001d8 <__aeabi_dmul>
 8009bf8:	a333      	add	r3, pc, #204	; (adr r3, 8009cc8 <__kernel_cos+0x168>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fc1b 	bl	8000438 <__adddf3>
 8009c02:	4622      	mov	r2, r4
 8009c04:	462b      	mov	r3, r5
 8009c06:	f7f6 fae7 	bl	80001d8 <__aeabi_dmul>
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	f7f6 fae3 	bl	80001d8 <__aeabi_dmul>
 8009c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c16:	4604      	mov	r4, r0
 8009c18:	460d      	mov	r5, r1
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f6 fadb 	bl	80001d8 <__aeabi_dmul>
 8009c22:	460b      	mov	r3, r1
 8009c24:	4602      	mov	r2, r0
 8009c26:	4629      	mov	r1, r5
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7f6 fc03 	bl	8000434 <__aeabi_dsub>
 8009c2e:	4b2b      	ldr	r3, [pc, #172]	; (8009cdc <__kernel_cos+0x17c>)
 8009c30:	4598      	cmp	r8, r3
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	dc10      	bgt.n	8009c5a <__kernel_cos+0xfa>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4650      	mov	r0, sl
 8009c3e:	4659      	mov	r1, fp
 8009c40:	f7f6 fbf8 	bl	8000434 <__aeabi_dsub>
 8009c44:	460b      	mov	r3, r1
 8009c46:	4926      	ldr	r1, [pc, #152]	; (8009ce0 <__kernel_cos+0x180>)
 8009c48:	4602      	mov	r2, r0
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	f7f6 fbf2 	bl	8000434 <__aeabi_dsub>
 8009c50:	ec41 0b10 	vmov	d0, r0, r1
 8009c54:	b003      	add	sp, #12
 8009c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5a:	4b22      	ldr	r3, [pc, #136]	; (8009ce4 <__kernel_cos+0x184>)
 8009c5c:	4920      	ldr	r1, [pc, #128]	; (8009ce0 <__kernel_cos+0x180>)
 8009c5e:	4598      	cmp	r8, r3
 8009c60:	bfcc      	ite	gt
 8009c62:	4d21      	ldrgt	r5, [pc, #132]	; (8009ce8 <__kernel_cos+0x188>)
 8009c64:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009c68:	2400      	movs	r4, #0
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	462b      	mov	r3, r5
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f7f6 fbe0 	bl	8000434 <__aeabi_dsub>
 8009c74:	4622      	mov	r2, r4
 8009c76:	4680      	mov	r8, r0
 8009c78:	4689      	mov	r9, r1
 8009c7a:	462b      	mov	r3, r5
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	4659      	mov	r1, fp
 8009c80:	f7f6 fbd8 	bl	8000434 <__aeabi_dsub>
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	f7f6 fbd4 	bl	8000434 <__aeabi_dsub>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4640      	mov	r0, r8
 8009c92:	4649      	mov	r1, r9
 8009c94:	e7da      	b.n	8009c4c <__kernel_cos+0xec>
 8009c96:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009cd0 <__kernel_cos+0x170>
 8009c9a:	e7db      	b.n	8009c54 <__kernel_cos+0xf4>
 8009c9c:	f3af 8000 	nop.w
 8009ca0:	be8838d4 	.word	0xbe8838d4
 8009ca4:	bda8fae9 	.word	0xbda8fae9
 8009ca8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009cac:	3e21ee9e 	.word	0x3e21ee9e
 8009cb0:	809c52ad 	.word	0x809c52ad
 8009cb4:	3e927e4f 	.word	0x3e927e4f
 8009cb8:	19cb1590 	.word	0x19cb1590
 8009cbc:	3efa01a0 	.word	0x3efa01a0
 8009cc0:	16c15177 	.word	0x16c15177
 8009cc4:	3f56c16c 	.word	0x3f56c16c
 8009cc8:	5555554c 	.word	0x5555554c
 8009ccc:	3fa55555 	.word	0x3fa55555
 8009cd0:	00000000 	.word	0x00000000
 8009cd4:	3ff00000 	.word	0x3ff00000
 8009cd8:	3fe00000 	.word	0x3fe00000
 8009cdc:	3fd33332 	.word	0x3fd33332
 8009ce0:	3ff00000 	.word	0x3ff00000
 8009ce4:	3fe90000 	.word	0x3fe90000
 8009ce8:	3fd20000 	.word	0x3fd20000
 8009cec:	00000000 	.word	0x00000000

08009cf0 <__kernel_rem_pio2>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	ed2d 8b02 	vpush	{d8}
 8009cf8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009cfc:	f112 0f14 	cmn.w	r2, #20
 8009d00:	9308      	str	r3, [sp, #32]
 8009d02:	9101      	str	r1, [sp, #4]
 8009d04:	4bc4      	ldr	r3, [pc, #784]	; (800a018 <__kernel_rem_pio2+0x328>)
 8009d06:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009d08:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d0e:	9302      	str	r3, [sp, #8]
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009d16:	bfa8      	it	ge
 8009d18:	1ed4      	subge	r4, r2, #3
 8009d1a:	9306      	str	r3, [sp, #24]
 8009d1c:	bfb2      	itee	lt
 8009d1e:	2400      	movlt	r4, #0
 8009d20:	2318      	movge	r3, #24
 8009d22:	fb94 f4f3 	sdivge	r4, r4, r3
 8009d26:	f06f 0317 	mvn.w	r3, #23
 8009d2a:	fb04 3303 	mla	r3, r4, r3, r3
 8009d2e:	eb03 0a02 	add.w	sl, r3, r2
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	9a06      	ldr	r2, [sp, #24]
 8009d36:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a008 <__kernel_rem_pio2+0x318>
 8009d3a:	eb03 0802 	add.w	r8, r3, r2
 8009d3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d40:	1aa7      	subs	r7, r4, r2
 8009d42:	ae22      	add	r6, sp, #136	; 0x88
 8009d44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009d48:	2500      	movs	r5, #0
 8009d4a:	4545      	cmp	r5, r8
 8009d4c:	dd13      	ble.n	8009d76 <__kernel_rem_pio2+0x86>
 8009d4e:	9b08      	ldr	r3, [sp, #32]
 8009d50:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a008 <__kernel_rem_pio2+0x318>
 8009d54:	aa22      	add	r2, sp, #136	; 0x88
 8009d56:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009d5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	9b02      	ldr	r3, [sp, #8]
 8009d64:	4598      	cmp	r8, r3
 8009d66:	dc2f      	bgt.n	8009dc8 <__kernel_rem_pio2+0xd8>
 8009d68:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009d6c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009d70:	462f      	mov	r7, r5
 8009d72:	2600      	movs	r6, #0
 8009d74:	e01b      	b.n	8009dae <__kernel_rem_pio2+0xbe>
 8009d76:	42ef      	cmn	r7, r5
 8009d78:	d407      	bmi.n	8009d8a <__kernel_rem_pio2+0x9a>
 8009d7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009d7e:	f7f6 fca7 	bl	80006d0 <__aeabi_i2d>
 8009d82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d86:	3501      	adds	r5, #1
 8009d88:	e7df      	b.n	8009d4a <__kernel_rem_pio2+0x5a>
 8009d8a:	ec51 0b18 	vmov	r0, r1, d8
 8009d8e:	e7f8      	b.n	8009d82 <__kernel_rem_pio2+0x92>
 8009d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009d98:	f7f6 fa1e 	bl	80001d8 <__aeabi_dmul>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009da4:	f7f6 fb48 	bl	8000438 <__adddf3>
 8009da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dac:	3601      	adds	r6, #1
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	429e      	cmp	r6, r3
 8009db2:	f1a7 0708 	sub.w	r7, r7, #8
 8009db6:	ddeb      	ble.n	8009d90 <__kernel_rem_pio2+0xa0>
 8009db8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009dbc:	f108 0801 	add.w	r8, r8, #1
 8009dc0:	ecab 7b02 	vstmia	fp!, {d7}
 8009dc4:	3508      	adds	r5, #8
 8009dc6:	e7cc      	b.n	8009d62 <__kernel_rem_pio2+0x72>
 8009dc8:	9b02      	ldr	r3, [sp, #8]
 8009dca:	aa0e      	add	r2, sp, #56	; 0x38
 8009dcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dd0:	930d      	str	r3, [sp, #52]	; 0x34
 8009dd2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009dd4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009dd8:	9c02      	ldr	r4, [sp, #8]
 8009dda:	930c      	str	r3, [sp, #48]	; 0x30
 8009ddc:	00e3      	lsls	r3, r4, #3
 8009dde:	930a      	str	r3, [sp, #40]	; 0x28
 8009de0:	ab9a      	add	r3, sp, #616	; 0x268
 8009de2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009de6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009dea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009dee:	ab72      	add	r3, sp, #456	; 0x1c8
 8009df0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009df4:	46c3      	mov	fp, r8
 8009df6:	46a1      	mov	r9, r4
 8009df8:	f1b9 0f00 	cmp.w	r9, #0
 8009dfc:	f1a5 0508 	sub.w	r5, r5, #8
 8009e00:	dc77      	bgt.n	8009ef2 <__kernel_rem_pio2+0x202>
 8009e02:	ec47 6b10 	vmov	d0, r6, r7
 8009e06:	4650      	mov	r0, sl
 8009e08:	f000 fc0a 	bl	800a620 <scalbn>
 8009e0c:	ec57 6b10 	vmov	r6, r7, d0
 8009e10:	2200      	movs	r2, #0
 8009e12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009e16:	ee10 0a10 	vmov	r0, s0
 8009e1a:	4639      	mov	r1, r7
 8009e1c:	f7f6 f9dc 	bl	80001d8 <__aeabi_dmul>
 8009e20:	ec41 0b10 	vmov	d0, r0, r1
 8009e24:	f000 fb7c 	bl	800a520 <floor>
 8009e28:	4b7c      	ldr	r3, [pc, #496]	; (800a01c <__kernel_rem_pio2+0x32c>)
 8009e2a:	ec51 0b10 	vmov	r0, r1, d0
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f7f6 f9d2 	bl	80001d8 <__aeabi_dmul>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	f7f6 fafa 	bl	8000434 <__aeabi_dsub>
 8009e40:	460f      	mov	r7, r1
 8009e42:	4606      	mov	r6, r0
 8009e44:	f7f6 fd36 	bl	80008b4 <__aeabi_d2iz>
 8009e48:	9004      	str	r0, [sp, #16]
 8009e4a:	f7f6 fc41 	bl	80006d0 <__aeabi_i2d>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 faed 	bl	8000434 <__aeabi_dsub>
 8009e5a:	f1ba 0f00 	cmp.w	sl, #0
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	dd6d      	ble.n	8009f40 <__kernel_rem_pio2+0x250>
 8009e64:	1e62      	subs	r2, r4, #1
 8009e66:	ab0e      	add	r3, sp, #56	; 0x38
 8009e68:	9d04      	ldr	r5, [sp, #16]
 8009e6a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e6e:	f1ca 0118 	rsb	r1, sl, #24
 8009e72:	fa40 f301 	asr.w	r3, r0, r1
 8009e76:	441d      	add	r5, r3
 8009e78:	408b      	lsls	r3, r1
 8009e7a:	1ac0      	subs	r0, r0, r3
 8009e7c:	ab0e      	add	r3, sp, #56	; 0x38
 8009e7e:	9504      	str	r5, [sp, #16]
 8009e80:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009e84:	f1ca 0317 	rsb	r3, sl, #23
 8009e88:	fa40 fb03 	asr.w	fp, r0, r3
 8009e8c:	f1bb 0f00 	cmp.w	fp, #0
 8009e90:	dd65      	ble.n	8009f5e <__kernel_rem_pio2+0x26e>
 8009e92:	9b04      	ldr	r3, [sp, #16]
 8009e94:	2200      	movs	r2, #0
 8009e96:	3301      	adds	r3, #1
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	4615      	mov	r5, r2
 8009e9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009ea0:	4294      	cmp	r4, r2
 8009ea2:	f300 809c 	bgt.w	8009fde <__kernel_rem_pio2+0x2ee>
 8009ea6:	f1ba 0f00 	cmp.w	sl, #0
 8009eaa:	dd07      	ble.n	8009ebc <__kernel_rem_pio2+0x1cc>
 8009eac:	f1ba 0f01 	cmp.w	sl, #1
 8009eb0:	f000 80c0 	beq.w	800a034 <__kernel_rem_pio2+0x344>
 8009eb4:	f1ba 0f02 	cmp.w	sl, #2
 8009eb8:	f000 80c6 	beq.w	800a048 <__kernel_rem_pio2+0x358>
 8009ebc:	f1bb 0f02 	cmp.w	fp, #2
 8009ec0:	d14d      	bne.n	8009f5e <__kernel_rem_pio2+0x26e>
 8009ec2:	4632      	mov	r2, r6
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	4956      	ldr	r1, [pc, #344]	; (800a020 <__kernel_rem_pio2+0x330>)
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f7f6 fab3 	bl	8000434 <__aeabi_dsub>
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	2d00      	cmp	r5, #0
 8009ed4:	d043      	beq.n	8009f5e <__kernel_rem_pio2+0x26e>
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a010 <__kernel_rem_pio2+0x320>
 8009edc:	f000 fba0 	bl	800a620 <scalbn>
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	ec53 2b10 	vmov	r2, r3, d0
 8009ee8:	f7f6 faa4 	bl	8000434 <__aeabi_dsub>
 8009eec:	4606      	mov	r6, r0
 8009eee:	460f      	mov	r7, r1
 8009ef0:	e035      	b.n	8009f5e <__kernel_rem_pio2+0x26e>
 8009ef2:	4b4c      	ldr	r3, [pc, #304]	; (800a024 <__kernel_rem_pio2+0x334>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7f6 f96d 	bl	80001d8 <__aeabi_dmul>
 8009efe:	f7f6 fcd9 	bl	80008b4 <__aeabi_d2iz>
 8009f02:	f7f6 fbe5 	bl	80006d0 <__aeabi_i2d>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	ec43 2b18 	vmov	d8, r2, r3
 8009f0e:	4b46      	ldr	r3, [pc, #280]	; (800a028 <__kernel_rem_pio2+0x338>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	f7f6 f961 	bl	80001d8 <__aeabi_dmul>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4639      	mov	r1, r7
 8009f1e:	f7f6 fa89 	bl	8000434 <__aeabi_dsub>
 8009f22:	f7f6 fcc7 	bl	80008b4 <__aeabi_d2iz>
 8009f26:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f2a:	f84b 0b04 	str.w	r0, [fp], #4
 8009f2e:	ec51 0b18 	vmov	r0, r1, d8
 8009f32:	f7f6 fa81 	bl	8000438 <__adddf3>
 8009f36:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	460f      	mov	r7, r1
 8009f3e:	e75b      	b.n	8009df8 <__kernel_rem_pio2+0x108>
 8009f40:	d106      	bne.n	8009f50 <__kernel_rem_pio2+0x260>
 8009f42:	1e63      	subs	r3, r4, #1
 8009f44:	aa0e      	add	r2, sp, #56	; 0x38
 8009f46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009f4a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009f4e:	e79d      	b.n	8009e8c <__kernel_rem_pio2+0x19c>
 8009f50:	4b36      	ldr	r3, [pc, #216]	; (800a02c <__kernel_rem_pio2+0x33c>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	f7f6 fc9a 	bl	800088c <__aeabi_dcmpge>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d13d      	bne.n	8009fd8 <__kernel_rem_pio2+0x2e8>
 8009f5c:	4683      	mov	fp, r0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2300      	movs	r3, #0
 8009f62:	4630      	mov	r0, r6
 8009f64:	4639      	mov	r1, r7
 8009f66:	f7f6 fc73 	bl	8000850 <__aeabi_dcmpeq>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	f000 80c0 	beq.w	800a0f0 <__kernel_rem_pio2+0x400>
 8009f70:	1e65      	subs	r5, r4, #1
 8009f72:	462b      	mov	r3, r5
 8009f74:	2200      	movs	r2, #0
 8009f76:	9902      	ldr	r1, [sp, #8]
 8009f78:	428b      	cmp	r3, r1
 8009f7a:	da6c      	bge.n	800a056 <__kernel_rem_pio2+0x366>
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	f000 8089 	beq.w	800a094 <__kernel_rem_pio2+0x3a4>
 8009f82:	ab0e      	add	r3, sp, #56	; 0x38
 8009f84:	f1aa 0a18 	sub.w	sl, sl, #24
 8009f88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80ad 	beq.w	800a0ec <__kernel_rem_pio2+0x3fc>
 8009f92:	4650      	mov	r0, sl
 8009f94:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a010 <__kernel_rem_pio2+0x320>
 8009f98:	f000 fb42 	bl	800a620 <scalbn>
 8009f9c:	ab9a      	add	r3, sp, #616	; 0x268
 8009f9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009fa2:	ec57 6b10 	vmov	r6, r7, d0
 8009fa6:	00ec      	lsls	r4, r5, #3
 8009fa8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8009fac:	46aa      	mov	sl, r5
 8009fae:	f1ba 0f00 	cmp.w	sl, #0
 8009fb2:	f280 80d6 	bge.w	800a162 <__kernel_rem_pio2+0x472>
 8009fb6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a008 <__kernel_rem_pio2+0x318>
 8009fba:	462e      	mov	r6, r5
 8009fbc:	2e00      	cmp	r6, #0
 8009fbe:	f2c0 8104 	blt.w	800a1ca <__kernel_rem_pio2+0x4da>
 8009fc2:	ab72      	add	r3, sp, #456	; 0x1c8
 8009fc4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009fc8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a030 <__kernel_rem_pio2+0x340>
 8009fcc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009fd0:	f04f 0800 	mov.w	r8, #0
 8009fd4:	1baf      	subs	r7, r5, r6
 8009fd6:	e0ea      	b.n	800a1ae <__kernel_rem_pio2+0x4be>
 8009fd8:	f04f 0b02 	mov.w	fp, #2
 8009fdc:	e759      	b.n	8009e92 <__kernel_rem_pio2+0x1a2>
 8009fde:	f8d8 3000 	ldr.w	r3, [r8]
 8009fe2:	b955      	cbnz	r5, 8009ffa <__kernel_rem_pio2+0x30a>
 8009fe4:	b123      	cbz	r3, 8009ff0 <__kernel_rem_pio2+0x300>
 8009fe6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009fea:	f8c8 3000 	str.w	r3, [r8]
 8009fee:	2301      	movs	r3, #1
 8009ff0:	3201      	adds	r2, #1
 8009ff2:	f108 0804 	add.w	r8, r8, #4
 8009ff6:	461d      	mov	r5, r3
 8009ff8:	e752      	b.n	8009ea0 <__kernel_rem_pio2+0x1b0>
 8009ffa:	1acb      	subs	r3, r1, r3
 8009ffc:	f8c8 3000 	str.w	r3, [r8]
 800a000:	462b      	mov	r3, r5
 800a002:	e7f5      	b.n	8009ff0 <__kernel_rem_pio2+0x300>
 800a004:	f3af 8000 	nop.w
	...
 800a014:	3ff00000 	.word	0x3ff00000
 800a018:	0800a938 	.word	0x0800a938
 800a01c:	40200000 	.word	0x40200000
 800a020:	3ff00000 	.word	0x3ff00000
 800a024:	3e700000 	.word	0x3e700000
 800a028:	41700000 	.word	0x41700000
 800a02c:	3fe00000 	.word	0x3fe00000
 800a030:	0800a8f8 	.word	0x0800a8f8
 800a034:	1e62      	subs	r2, r4, #1
 800a036:	ab0e      	add	r3, sp, #56	; 0x38
 800a038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a040:	a90e      	add	r1, sp, #56	; 0x38
 800a042:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a046:	e739      	b.n	8009ebc <__kernel_rem_pio2+0x1cc>
 800a048:	1e62      	subs	r2, r4, #1
 800a04a:	ab0e      	add	r3, sp, #56	; 0x38
 800a04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a050:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a054:	e7f4      	b.n	800a040 <__kernel_rem_pio2+0x350>
 800a056:	a90e      	add	r1, sp, #56	; 0x38
 800a058:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	430a      	orrs	r2, r1
 800a060:	e789      	b.n	8009f76 <__kernel_rem_pio2+0x286>
 800a062:	3301      	adds	r3, #1
 800a064:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a068:	2900      	cmp	r1, #0
 800a06a:	d0fa      	beq.n	800a062 <__kernel_rem_pio2+0x372>
 800a06c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a06e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a072:	446a      	add	r2, sp
 800a074:	3a98      	subs	r2, #152	; 0x98
 800a076:	920a      	str	r2, [sp, #40]	; 0x28
 800a078:	9a08      	ldr	r2, [sp, #32]
 800a07a:	18e3      	adds	r3, r4, r3
 800a07c:	18a5      	adds	r5, r4, r2
 800a07e:	aa22      	add	r2, sp, #136	; 0x88
 800a080:	f104 0801 	add.w	r8, r4, #1
 800a084:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	4543      	cmp	r3, r8
 800a08e:	da04      	bge.n	800a09a <__kernel_rem_pio2+0x3aa>
 800a090:	461c      	mov	r4, r3
 800a092:	e6a3      	b.n	8009ddc <__kernel_rem_pio2+0xec>
 800a094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a096:	2301      	movs	r3, #1
 800a098:	e7e4      	b.n	800a064 <__kernel_rem_pio2+0x374>
 800a09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a09c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a0a0:	f7f6 fb16 	bl	80006d0 <__aeabi_i2d>
 800a0a4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a0a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0aa:	46ab      	mov	fp, r5
 800a0ac:	461c      	mov	r4, r3
 800a0ae:	f04f 0900 	mov.w	r9, #0
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	2700      	movs	r7, #0
 800a0b6:	9b06      	ldr	r3, [sp, #24]
 800a0b8:	4599      	cmp	r9, r3
 800a0ba:	dd06      	ble.n	800a0ca <__kernel_rem_pio2+0x3da>
 800a0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0be:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a0c2:	f108 0801 	add.w	r8, r8, #1
 800a0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0c8:	e7df      	b.n	800a08a <__kernel_rem_pio2+0x39a>
 800a0ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a0ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a0d2:	f7f6 f881 	bl	80001d8 <__aeabi_dmul>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7f6 f9ab 	bl	8000438 <__adddf3>
 800a0e2:	f109 0901 	add.w	r9, r9, #1
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	e7e4      	b.n	800a0b6 <__kernel_rem_pio2+0x3c6>
 800a0ec:	3d01      	subs	r5, #1
 800a0ee:	e748      	b.n	8009f82 <__kernel_rem_pio2+0x292>
 800a0f0:	ec47 6b10 	vmov	d0, r6, r7
 800a0f4:	f1ca 0000 	rsb	r0, sl, #0
 800a0f8:	f000 fa92 	bl	800a620 <scalbn>
 800a0fc:	ec57 6b10 	vmov	r6, r7, d0
 800a100:	4ba0      	ldr	r3, [pc, #640]	; (800a384 <__kernel_rem_pio2+0x694>)
 800a102:	ee10 0a10 	vmov	r0, s0
 800a106:	2200      	movs	r2, #0
 800a108:	4639      	mov	r1, r7
 800a10a:	f7f6 fbbf 	bl	800088c <__aeabi_dcmpge>
 800a10e:	b1f8      	cbz	r0, 800a150 <__kernel_rem_pio2+0x460>
 800a110:	4b9d      	ldr	r3, [pc, #628]	; (800a388 <__kernel_rem_pio2+0x698>)
 800a112:	2200      	movs	r2, #0
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 f85e 	bl	80001d8 <__aeabi_dmul>
 800a11c:	f7f6 fbca 	bl	80008b4 <__aeabi_d2iz>
 800a120:	4680      	mov	r8, r0
 800a122:	f7f6 fad5 	bl	80006d0 <__aeabi_i2d>
 800a126:	4b97      	ldr	r3, [pc, #604]	; (800a384 <__kernel_rem_pio2+0x694>)
 800a128:	2200      	movs	r2, #0
 800a12a:	f7f6 f855 	bl	80001d8 <__aeabi_dmul>
 800a12e:	460b      	mov	r3, r1
 800a130:	4602      	mov	r2, r0
 800a132:	4639      	mov	r1, r7
 800a134:	4630      	mov	r0, r6
 800a136:	f7f6 f97d 	bl	8000434 <__aeabi_dsub>
 800a13a:	f7f6 fbbb 	bl	80008b4 <__aeabi_d2iz>
 800a13e:	1c65      	adds	r5, r4, #1
 800a140:	ab0e      	add	r3, sp, #56	; 0x38
 800a142:	f10a 0a18 	add.w	sl, sl, #24
 800a146:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a14a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a14e:	e720      	b.n	8009f92 <__kernel_rem_pio2+0x2a2>
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	f7f6 fbae 	bl	80008b4 <__aeabi_d2iz>
 800a158:	ab0e      	add	r3, sp, #56	; 0x38
 800a15a:	4625      	mov	r5, r4
 800a15c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a160:	e717      	b.n	8009f92 <__kernel_rem_pio2+0x2a2>
 800a162:	ab0e      	add	r3, sp, #56	; 0x38
 800a164:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a168:	f7f6 fab2 	bl	80006d0 <__aeabi_i2d>
 800a16c:	4632      	mov	r2, r6
 800a16e:	463b      	mov	r3, r7
 800a170:	f7f6 f832 	bl	80001d8 <__aeabi_dmul>
 800a174:	4b84      	ldr	r3, [pc, #528]	; (800a388 <__kernel_rem_pio2+0x698>)
 800a176:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a17a:	2200      	movs	r2, #0
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 f82a 	bl	80001d8 <__aeabi_dmul>
 800a184:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a188:	4606      	mov	r6, r0
 800a18a:	460f      	mov	r7, r1
 800a18c:	e70f      	b.n	8009fae <__kernel_rem_pio2+0x2be>
 800a18e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a192:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a196:	f7f6 f81f 	bl	80001d8 <__aeabi_dmul>
 800a19a:	4602      	mov	r2, r0
 800a19c:	460b      	mov	r3, r1
 800a19e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1a2:	f7f6 f949 	bl	8000438 <__adddf3>
 800a1a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a1aa:	f108 0801 	add.w	r8, r8, #1
 800a1ae:	9b02      	ldr	r3, [sp, #8]
 800a1b0:	4598      	cmp	r8, r3
 800a1b2:	dc01      	bgt.n	800a1b8 <__kernel_rem_pio2+0x4c8>
 800a1b4:	45b8      	cmp	r8, r7
 800a1b6:	ddea      	ble.n	800a18e <__kernel_rem_pio2+0x49e>
 800a1b8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a1bc:	ab4a      	add	r3, sp, #296	; 0x128
 800a1be:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a1c2:	ed87 7b00 	vstr	d7, [r7]
 800a1c6:	3e01      	subs	r6, #1
 800a1c8:	e6f8      	b.n	8009fbc <__kernel_rem_pio2+0x2cc>
 800a1ca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	dc0b      	bgt.n	800a1e8 <__kernel_rem_pio2+0x4f8>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dc35      	bgt.n	800a240 <__kernel_rem_pio2+0x550>
 800a1d4:	d059      	beq.n	800a28a <__kernel_rem_pio2+0x59a>
 800a1d6:	9b04      	ldr	r3, [sp, #16]
 800a1d8:	f003 0007 	and.w	r0, r3, #7
 800a1dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a1e0:	ecbd 8b02 	vpop	{d8}
 800a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d1f3      	bne.n	800a1d6 <__kernel_rem_pio2+0x4e6>
 800a1ee:	ab4a      	add	r3, sp, #296	; 0x128
 800a1f0:	4423      	add	r3, r4
 800a1f2:	9306      	str	r3, [sp, #24]
 800a1f4:	461c      	mov	r4, r3
 800a1f6:	469a      	mov	sl, r3
 800a1f8:	9502      	str	r5, [sp, #8]
 800a1fa:	9b02      	ldr	r3, [sp, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f1aa 0a08 	sub.w	sl, sl, #8
 800a202:	dc6b      	bgt.n	800a2dc <__kernel_rem_pio2+0x5ec>
 800a204:	46aa      	mov	sl, r5
 800a206:	f1ba 0f01 	cmp.w	sl, #1
 800a20a:	f1a4 0408 	sub.w	r4, r4, #8
 800a20e:	f300 8085 	bgt.w	800a31c <__kernel_rem_pio2+0x62c>
 800a212:	9c06      	ldr	r4, [sp, #24]
 800a214:	2000      	movs	r0, #0
 800a216:	3408      	adds	r4, #8
 800a218:	2100      	movs	r1, #0
 800a21a:	2d01      	cmp	r5, #1
 800a21c:	f300 809d 	bgt.w	800a35a <__kernel_rem_pio2+0x66a>
 800a220:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a224:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a228:	f1bb 0f00 	cmp.w	fp, #0
 800a22c:	f040 809b 	bne.w	800a366 <__kernel_rem_pio2+0x676>
 800a230:	9b01      	ldr	r3, [sp, #4]
 800a232:	e9c3 5600 	strd	r5, r6, [r3]
 800a236:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a23a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a23e:	e7ca      	b.n	800a1d6 <__kernel_rem_pio2+0x4e6>
 800a240:	3408      	adds	r4, #8
 800a242:	ab4a      	add	r3, sp, #296	; 0x128
 800a244:	441c      	add	r4, r3
 800a246:	462e      	mov	r6, r5
 800a248:	2000      	movs	r0, #0
 800a24a:	2100      	movs	r1, #0
 800a24c:	2e00      	cmp	r6, #0
 800a24e:	da36      	bge.n	800a2be <__kernel_rem_pio2+0x5ce>
 800a250:	f1bb 0f00 	cmp.w	fp, #0
 800a254:	d039      	beq.n	800a2ca <__kernel_rem_pio2+0x5da>
 800a256:	4602      	mov	r2, r0
 800a258:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a25c:	9c01      	ldr	r4, [sp, #4]
 800a25e:	e9c4 2300 	strd	r2, r3, [r4]
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a26a:	f7f6 f8e3 	bl	8000434 <__aeabi_dsub>
 800a26e:	ae4c      	add	r6, sp, #304	; 0x130
 800a270:	2401      	movs	r4, #1
 800a272:	42a5      	cmp	r5, r4
 800a274:	da2c      	bge.n	800a2d0 <__kernel_rem_pio2+0x5e0>
 800a276:	f1bb 0f00 	cmp.w	fp, #0
 800a27a:	d002      	beq.n	800a282 <__kernel_rem_pio2+0x592>
 800a27c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a280:	4619      	mov	r1, r3
 800a282:	9b01      	ldr	r3, [sp, #4]
 800a284:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a288:	e7a5      	b.n	800a1d6 <__kernel_rem_pio2+0x4e6>
 800a28a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a28e:	eb0d 0403 	add.w	r4, sp, r3
 800a292:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a296:	2000      	movs	r0, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	2d00      	cmp	r5, #0
 800a29c:	da09      	bge.n	800a2b2 <__kernel_rem_pio2+0x5c2>
 800a29e:	f1bb 0f00 	cmp.w	fp, #0
 800a2a2:	d002      	beq.n	800a2aa <__kernel_rem_pio2+0x5ba>
 800a2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	e9c3 0100 	strd	r0, r1, [r3]
 800a2b0:	e791      	b.n	800a1d6 <__kernel_rem_pio2+0x4e6>
 800a2b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2b6:	f7f6 f8bf 	bl	8000438 <__adddf3>
 800a2ba:	3d01      	subs	r5, #1
 800a2bc:	e7ed      	b.n	800a29a <__kernel_rem_pio2+0x5aa>
 800a2be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2c2:	f7f6 f8b9 	bl	8000438 <__adddf3>
 800a2c6:	3e01      	subs	r6, #1
 800a2c8:	e7c0      	b.n	800a24c <__kernel_rem_pio2+0x55c>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	e7c5      	b.n	800a25c <__kernel_rem_pio2+0x56c>
 800a2d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a2d4:	f7f6 f8b0 	bl	8000438 <__adddf3>
 800a2d8:	3401      	adds	r4, #1
 800a2da:	e7ca      	b.n	800a272 <__kernel_rem_pio2+0x582>
 800a2dc:	e9da 8900 	ldrd	r8, r9, [sl]
 800a2e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a2e4:	9b02      	ldr	r3, [sp, #8]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	9302      	str	r3, [sp, #8]
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	463b      	mov	r3, r7
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f6 f8a1 	bl	8000438 <__adddf3>
 800a2f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4640      	mov	r0, r8
 800a300:	4649      	mov	r1, r9
 800a302:	f7f6 f897 	bl	8000434 <__aeabi_dsub>
 800a306:	4632      	mov	r2, r6
 800a308:	463b      	mov	r3, r7
 800a30a:	f7f6 f895 	bl	8000438 <__adddf3>
 800a30e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a312:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a316:	ed8a 7b00 	vstr	d7, [sl]
 800a31a:	e76e      	b.n	800a1fa <__kernel_rem_pio2+0x50a>
 800a31c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a320:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a324:	4640      	mov	r0, r8
 800a326:	4632      	mov	r2, r6
 800a328:	463b      	mov	r3, r7
 800a32a:	4649      	mov	r1, r9
 800a32c:	f7f6 f884 	bl	8000438 <__adddf3>
 800a330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4640      	mov	r0, r8
 800a33a:	4649      	mov	r1, r9
 800a33c:	f7f6 f87a 	bl	8000434 <__aeabi_dsub>
 800a340:	4632      	mov	r2, r6
 800a342:	463b      	mov	r3, r7
 800a344:	f7f6 f878 	bl	8000438 <__adddf3>
 800a348:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a34c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a350:	ed84 7b00 	vstr	d7, [r4]
 800a354:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a358:	e755      	b.n	800a206 <__kernel_rem_pio2+0x516>
 800a35a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a35e:	f7f6 f86b 	bl	8000438 <__adddf3>
 800a362:	3d01      	subs	r5, #1
 800a364:	e759      	b.n	800a21a <__kernel_rem_pio2+0x52a>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	9a01      	ldr	r2, [sp, #4]
 800a36a:	601d      	str	r5, [r3, #0]
 800a36c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a370:	605c      	str	r4, [r3, #4]
 800a372:	609f      	str	r7, [r3, #8]
 800a374:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a378:	60d3      	str	r3, [r2, #12]
 800a37a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a37e:	6110      	str	r0, [r2, #16]
 800a380:	6153      	str	r3, [r2, #20]
 800a382:	e728      	b.n	800a1d6 <__kernel_rem_pio2+0x4e6>
 800a384:	41700000 	.word	0x41700000
 800a388:	3e700000 	.word	0x3e700000
 800a38c:	00000000 	.word	0x00000000

0800a390 <__kernel_sin>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	ed2d 8b04 	vpush	{d8-d9}
 800a398:	eeb0 8a41 	vmov.f32	s16, s2
 800a39c:	eef0 8a61 	vmov.f32	s17, s3
 800a3a0:	ec55 4b10 	vmov	r4, r5, d0
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a3ae:	9001      	str	r0, [sp, #4]
 800a3b0:	da06      	bge.n	800a3c0 <__kernel_sin+0x30>
 800a3b2:	ee10 0a10 	vmov	r0, s0
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	f7f6 fa7c 	bl	80008b4 <__aeabi_d2iz>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d051      	beq.n	800a464 <__kernel_sin+0xd4>
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f5 ff06 	bl	80001d8 <__aeabi_dmul>
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	468b      	mov	fp, r1
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f5 fefe 	bl	80001d8 <__aeabi_dmul>
 800a3dc:	a341      	add	r3, pc, #260	; (adr r3, 800a4e4 <__kernel_sin+0x154>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	4650      	mov	r0, sl
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	f7f5 fef5 	bl	80001d8 <__aeabi_dmul>
 800a3ee:	a33f      	add	r3, pc, #252	; (adr r3, 800a4ec <__kernel_sin+0x15c>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f6 f81e 	bl	8000434 <__aeabi_dsub>
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	465b      	mov	r3, fp
 800a3fc:	f7f5 feec 	bl	80001d8 <__aeabi_dmul>
 800a400:	a33c      	add	r3, pc, #240	; (adr r3, 800a4f4 <__kernel_sin+0x164>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f6 f817 	bl	8000438 <__adddf3>
 800a40a:	4652      	mov	r2, sl
 800a40c:	465b      	mov	r3, fp
 800a40e:	f7f5 fee3 	bl	80001d8 <__aeabi_dmul>
 800a412:	a33a      	add	r3, pc, #232	; (adr r3, 800a4fc <__kernel_sin+0x16c>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	f7f6 f80c 	bl	8000434 <__aeabi_dsub>
 800a41c:	4652      	mov	r2, sl
 800a41e:	465b      	mov	r3, fp
 800a420:	f7f5 feda 	bl	80001d8 <__aeabi_dmul>
 800a424:	a337      	add	r3, pc, #220	; (adr r3, 800a504 <__kernel_sin+0x174>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f6 f805 	bl	8000438 <__adddf3>
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	4606      	mov	r6, r0
 800a432:	460f      	mov	r7, r1
 800a434:	b9eb      	cbnz	r3, 800a472 <__kernel_sin+0xe2>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4650      	mov	r0, sl
 800a43c:	4659      	mov	r1, fp
 800a43e:	f7f5 fecb 	bl	80001d8 <__aeabi_dmul>
 800a442:	a325      	add	r3, pc, #148	; (adr r3, 800a4d8 <__kernel_sin+0x148>)
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f7f5 fff4 	bl	8000434 <__aeabi_dsub>
 800a44c:	4642      	mov	r2, r8
 800a44e:	464b      	mov	r3, r9
 800a450:	f7f5 fec2 	bl	80001d8 <__aeabi_dmul>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4620      	mov	r0, r4
 800a45a:	4629      	mov	r1, r5
 800a45c:	f7f5 ffec 	bl	8000438 <__adddf3>
 800a460:	4604      	mov	r4, r0
 800a462:	460d      	mov	r5, r1
 800a464:	ec45 4b10 	vmov	d0, r4, r5
 800a468:	b003      	add	sp, #12
 800a46a:	ecbd 8b04 	vpop	{d8-d9}
 800a46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a472:	4b1b      	ldr	r3, [pc, #108]	; (800a4e0 <__kernel_sin+0x150>)
 800a474:	ec51 0b18 	vmov	r0, r1, d8
 800a478:	2200      	movs	r2, #0
 800a47a:	f7f5 fead 	bl	80001d8 <__aeabi_dmul>
 800a47e:	4632      	mov	r2, r6
 800a480:	ec41 0b19 	vmov	d9, r0, r1
 800a484:	463b      	mov	r3, r7
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f5 fea5 	bl	80001d8 <__aeabi_dmul>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	ec51 0b19 	vmov	r0, r1, d9
 800a496:	f7f5 ffcd 	bl	8000434 <__aeabi_dsub>
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f7f5 fe9b 	bl	80001d8 <__aeabi_dmul>
 800a4a2:	ec53 2b18 	vmov	r2, r3, d8
 800a4a6:	f7f5 ffc5 	bl	8000434 <__aeabi_dsub>
 800a4aa:	a30b      	add	r3, pc, #44	; (adr r3, 800a4d8 <__kernel_sin+0x148>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	460f      	mov	r7, r1
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f5 fe8e 	bl	80001d8 <__aeabi_dmul>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f5 ffb8 	bl	8000438 <__adddf3>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7f5 ffb0 	bl	8000434 <__aeabi_dsub>
 800a4d4:	e7c4      	b.n	800a460 <__kernel_sin+0xd0>
 800a4d6:	bf00      	nop
 800a4d8:	55555549 	.word	0x55555549
 800a4dc:	3fc55555 	.word	0x3fc55555
 800a4e0:	3fe00000 	.word	0x3fe00000
 800a4e4:	5acfd57c 	.word	0x5acfd57c
 800a4e8:	3de5d93a 	.word	0x3de5d93a
 800a4ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800a4f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a4f4:	57b1fe7d 	.word	0x57b1fe7d
 800a4f8:	3ec71de3 	.word	0x3ec71de3
 800a4fc:	19c161d5 	.word	0x19c161d5
 800a500:	3f2a01a0 	.word	0x3f2a01a0
 800a504:	1110f8a6 	.word	0x1110f8a6
 800a508:	3f811111 	.word	0x3f811111

0800a50c <fabs>:
 800a50c:	ec51 0b10 	vmov	r0, r1, d0
 800a510:	ee10 2a10 	vmov	r2, s0
 800a514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a518:	ec43 2b10 	vmov	d0, r2, r3
 800a51c:	4770      	bx	lr
	...

0800a520 <floor>:
 800a520:	ec51 0b10 	vmov	r0, r1, d0
 800a524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a528:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a52c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a530:	2e13      	cmp	r6, #19
 800a532:	ee10 5a10 	vmov	r5, s0
 800a536:	ee10 8a10 	vmov	r8, s0
 800a53a:	460c      	mov	r4, r1
 800a53c:	dc32      	bgt.n	800a5a4 <floor+0x84>
 800a53e:	2e00      	cmp	r6, #0
 800a540:	da14      	bge.n	800a56c <floor+0x4c>
 800a542:	a333      	add	r3, pc, #204	; (adr r3, 800a610 <floor+0xf0>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f5 ff76 	bl	8000438 <__adddf3>
 800a54c:	2200      	movs	r2, #0
 800a54e:	2300      	movs	r3, #0
 800a550:	f7f6 f9a6 	bl	80008a0 <__aeabi_dcmpgt>
 800a554:	b138      	cbz	r0, 800a566 <floor+0x46>
 800a556:	2c00      	cmp	r4, #0
 800a558:	da57      	bge.n	800a60a <floor+0xea>
 800a55a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a55e:	431d      	orrs	r5, r3
 800a560:	d001      	beq.n	800a566 <floor+0x46>
 800a562:	4c2d      	ldr	r4, [pc, #180]	; (800a618 <floor+0xf8>)
 800a564:	2500      	movs	r5, #0
 800a566:	4621      	mov	r1, r4
 800a568:	4628      	mov	r0, r5
 800a56a:	e025      	b.n	800a5b8 <floor+0x98>
 800a56c:	4f2b      	ldr	r7, [pc, #172]	; (800a61c <floor+0xfc>)
 800a56e:	4137      	asrs	r7, r6
 800a570:	ea01 0307 	and.w	r3, r1, r7
 800a574:	4303      	orrs	r3, r0
 800a576:	d01f      	beq.n	800a5b8 <floor+0x98>
 800a578:	a325      	add	r3, pc, #148	; (adr r3, 800a610 <floor+0xf0>)
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f7f5 ff5b 	bl	8000438 <__adddf3>
 800a582:	2200      	movs	r2, #0
 800a584:	2300      	movs	r3, #0
 800a586:	f7f6 f98b 	bl	80008a0 <__aeabi_dcmpgt>
 800a58a:	2800      	cmp	r0, #0
 800a58c:	d0eb      	beq.n	800a566 <floor+0x46>
 800a58e:	2c00      	cmp	r4, #0
 800a590:	bfbe      	ittt	lt
 800a592:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a596:	fa43 f606 	asrlt.w	r6, r3, r6
 800a59a:	19a4      	addlt	r4, r4, r6
 800a59c:	ea24 0407 	bic.w	r4, r4, r7
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	e7e0      	b.n	800a566 <floor+0x46>
 800a5a4:	2e33      	cmp	r6, #51	; 0x33
 800a5a6:	dd0b      	ble.n	800a5c0 <floor+0xa0>
 800a5a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a5ac:	d104      	bne.n	800a5b8 <floor+0x98>
 800a5ae:	ee10 2a10 	vmov	r2, s0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	f7f5 ff40 	bl	8000438 <__adddf3>
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a5c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5c8:	fa23 f707 	lsr.w	r7, r3, r7
 800a5cc:	4207      	tst	r7, r0
 800a5ce:	d0f3      	beq.n	800a5b8 <floor+0x98>
 800a5d0:	a30f      	add	r3, pc, #60	; (adr r3, 800a610 <floor+0xf0>)
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f7f5 ff2f 	bl	8000438 <__adddf3>
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f7f6 f95f 	bl	80008a0 <__aeabi_dcmpgt>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d0bf      	beq.n	800a566 <floor+0x46>
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	da02      	bge.n	800a5f0 <floor+0xd0>
 800a5ea:	2e14      	cmp	r6, #20
 800a5ec:	d103      	bne.n	800a5f6 <floor+0xd6>
 800a5ee:	3401      	adds	r4, #1
 800a5f0:	ea25 0507 	bic.w	r5, r5, r7
 800a5f4:	e7b7      	b.n	800a566 <floor+0x46>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a5fc:	fa03 f606 	lsl.w	r6, r3, r6
 800a600:	4435      	add	r5, r6
 800a602:	4545      	cmp	r5, r8
 800a604:	bf38      	it	cc
 800a606:	18e4      	addcc	r4, r4, r3
 800a608:	e7f2      	b.n	800a5f0 <floor+0xd0>
 800a60a:	2500      	movs	r5, #0
 800a60c:	462c      	mov	r4, r5
 800a60e:	e7aa      	b.n	800a566 <floor+0x46>
 800a610:	8800759c 	.word	0x8800759c
 800a614:	7e37e43c 	.word	0x7e37e43c
 800a618:	bff00000 	.word	0xbff00000
 800a61c:	000fffff 	.word	0x000fffff

0800a620 <scalbn>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	ec55 4b10 	vmov	r4, r5, d0
 800a626:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a62a:	4606      	mov	r6, r0
 800a62c:	462b      	mov	r3, r5
 800a62e:	b99a      	cbnz	r2, 800a658 <scalbn+0x38>
 800a630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a634:	4323      	orrs	r3, r4
 800a636:	d036      	beq.n	800a6a6 <scalbn+0x86>
 800a638:	4b39      	ldr	r3, [pc, #228]	; (800a720 <scalbn+0x100>)
 800a63a:	4629      	mov	r1, r5
 800a63c:	ee10 0a10 	vmov	r0, s0
 800a640:	2200      	movs	r2, #0
 800a642:	f7f5 fdc9 	bl	80001d8 <__aeabi_dmul>
 800a646:	4b37      	ldr	r3, [pc, #220]	; (800a724 <scalbn+0x104>)
 800a648:	429e      	cmp	r6, r3
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	da10      	bge.n	800a672 <scalbn+0x52>
 800a650:	a32b      	add	r3, pc, #172	; (adr r3, 800a700 <scalbn+0xe0>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	e03a      	b.n	800a6ce <scalbn+0xae>
 800a658:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a65c:	428a      	cmp	r2, r1
 800a65e:	d10c      	bne.n	800a67a <scalbn+0x5a>
 800a660:	ee10 2a10 	vmov	r2, s0
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 fee6 	bl	8000438 <__adddf3>
 800a66c:	4604      	mov	r4, r0
 800a66e:	460d      	mov	r5, r1
 800a670:	e019      	b.n	800a6a6 <scalbn+0x86>
 800a672:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a676:	460b      	mov	r3, r1
 800a678:	3a36      	subs	r2, #54	; 0x36
 800a67a:	4432      	add	r2, r6
 800a67c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a680:	428a      	cmp	r2, r1
 800a682:	dd08      	ble.n	800a696 <scalbn+0x76>
 800a684:	2d00      	cmp	r5, #0
 800a686:	a120      	add	r1, pc, #128	; (adr r1, 800a708 <scalbn+0xe8>)
 800a688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68c:	da1c      	bge.n	800a6c8 <scalbn+0xa8>
 800a68e:	a120      	add	r1, pc, #128	; (adr r1, 800a710 <scalbn+0xf0>)
 800a690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a694:	e018      	b.n	800a6c8 <scalbn+0xa8>
 800a696:	2a00      	cmp	r2, #0
 800a698:	dd08      	ble.n	800a6ac <scalbn+0x8c>
 800a69a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a69e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6a6:	ec45 4b10 	vmov	d0, r4, r5
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a6b0:	da19      	bge.n	800a6e6 <scalbn+0xc6>
 800a6b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6b6:	429e      	cmp	r6, r3
 800a6b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a6bc:	dd0a      	ble.n	800a6d4 <scalbn+0xb4>
 800a6be:	a112      	add	r1, pc, #72	; (adr r1, 800a708 <scalbn+0xe8>)
 800a6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e2      	bne.n	800a68e <scalbn+0x6e>
 800a6c8:	a30f      	add	r3, pc, #60	; (adr r3, 800a708 <scalbn+0xe8>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 fd83 	bl	80001d8 <__aeabi_dmul>
 800a6d2:	e7cb      	b.n	800a66c <scalbn+0x4c>
 800a6d4:	a10a      	add	r1, pc, #40	; (adr r1, 800a700 <scalbn+0xe0>)
 800a6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0b8      	beq.n	800a650 <scalbn+0x30>
 800a6de:	a10e      	add	r1, pc, #56	; (adr r1, 800a718 <scalbn+0xf8>)
 800a6e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e4:	e7b4      	b.n	800a650 <scalbn+0x30>
 800a6e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6ea:	3236      	adds	r2, #54	; 0x36
 800a6ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <scalbn+0x108>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	e7e8      	b.n	800a6ce <scalbn+0xae>
 800a6fc:	f3af 8000 	nop.w
 800a700:	c2f8f359 	.word	0xc2f8f359
 800a704:	01a56e1f 	.word	0x01a56e1f
 800a708:	8800759c 	.word	0x8800759c
 800a70c:	7e37e43c 	.word	0x7e37e43c
 800a710:	8800759c 	.word	0x8800759c
 800a714:	fe37e43c 	.word	0xfe37e43c
 800a718:	c2f8f359 	.word	0xc2f8f359
 800a71c:	81a56e1f 	.word	0x81a56e1f
 800a720:	43500000 	.word	0x43500000
 800a724:	ffff3cb0 	.word	0xffff3cb0
 800a728:	3c900000 	.word	0x3c900000

0800a72c <_init>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr

0800a738 <_fini>:
 800a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73a:	bf00      	nop
 800a73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73e:	bc08      	pop	{r3}
 800a740:	469e      	mov	lr, r3
 800a742:	4770      	bx	lr
